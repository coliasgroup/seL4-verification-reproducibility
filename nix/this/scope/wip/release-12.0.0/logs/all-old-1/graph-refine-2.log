this derivation will be built:
  /nix/store/45l25jzvy5mq9h7cn6i52zzrrj2sb0dz-graph-refine-wip2.drv
building '/nix/store/45l25jzvy5mq9h7cn6i52zzrrj2sb0dz-graph-refine-wip2.drv'...
Loading syntax from ./CFunctions.txt
Loaded 835 functions, 75 structs, 0 globals.
Loading syntax from ./ASMFunctions.txt
Missing nodes after calls to instruction'isb_sy_E0000944
  in ['fpsimd_HWCapTest']
Missing nodes after calls to restore_user_context
  in ['c_handle_data_fault', 'c_handle_undefined_instruction', 'c_handle_interrupt']
Missing nodes after calls to halt
  in ['handleReply', 'Arch_createObject', 'completeSignal', 'unmapPage', 'doFlush', 'maskCapRights', 'APFromVMRights', 'decodeInvocation', 'Arch_setMRs_fault', 'handleInterrupt', 'Arch_deriveCap', 'invokeCNodeSaveCaller', 'handleFaultReply', 'handleSyscall', 'arm_reset_exception', 'createObject', 'Arch_handleFaultReply', 'init_kernel']
Missing nodes after calls to idle_thread
  in ['halt']
Missing nodes after calls to instruction'ldr_pc_pc_20_e0010038_arm_vector_table_0x38_E001001C
  in ['arm_vector_table']
Warning: dead arc in c_handle_syscall: 19 -> 3758164032
  (follows Basic node!)
Warning: dead arc in c_handle_syscall: 21 -> 3758164032
  (follows Basic node!)
Warning: dead arc in arm_fiq_exception: 7 -> 3758162208
  (follows Basic node!)
Warning: dead arc in arm_fiq_exception: 9 -> 3758162208
  (follows Basic node!)
Warning: dead arc in c_handle_instruction_fault: 3758162396 -> 3758162400
  (follows Basic node!)
Warning: dead arc in _start: 3758096388 -> 3758096392
  (follows Basic node!)
Loaded 481 functions, 0 structs, 0 globals.
Pseudo-Compiling.
Doing stack/inst logic.
Warning: asm instruction name: formatting: "asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"
Warning: asm instruction name: formatting: "asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"
Function 'init_kernel' contains unhandled instructions:
  ["instruction'vmrs_r3_fpexc_E0003ED4", "instruction'vmsr_fpexc_r3_E0003EDC"]
Function 'Arch_switchToThread' contains unhandled instructions:
  ["instruction'strex_r0_r1_r3_E001117C"]
Function 'Kernel_C.fpsimd_HWCapTest' contains unhandled instructions:
  ["asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"]
Function 'arm_vector_table' contains unhandled instructions:
  ["instruction'ldr_pc_pc_24_e0010020_arm_vector_table_0x20_E0010000", "instruction'ldr_pc_pc_24_e001002c_arm_vector_table_0x2c_E001000C", "instruction'ldr_pc_pc_20_e0010038_arm_vector_table_0x38_E001001C", "instruction'ldr_pc_pc_24_e0010024_arm_vector_table_0x24_E0010004", "instruction'ldr_pc_pc_24_e0010030_arm_vector_table_0x30_E0010010", "instruction'ldr_pc_pc_24_e0010028_arm_vector_table_0x28_E0010008", "instruction'ldr_pc_pc_20_e0010034_arm_vector_table_0x34_E0010018", "instruction'ldr_pc_pc_4_e0010020_arm_vector_table_0x20_E0010014"]
Function 'arm_undefined_inst_exception' contains unhandled instructions:
  ["instruction'cps_19_E0010040", "instruction'srsia_sp_19_E001003C", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E0010044"]
Function 'arm_data_abort_exception' contains unhandled instructions:
  ["instruction'cps_19_E00100BC", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E00100C0", "instruction'srsia_sp_19_E00100B8"]
Function 'Kernel_C.supportsAsyncExceptions' contains unhandled instructions:
  ["asm_instruction'.fpu_vfp\\nvmsr_fpexc,_%0", "asm_instruction'.fpu_vfp\\nvmrs_%0,_fpexc"]
Function 'Kernel_C.clearEnFPEXC' contains unhandled instructions:
  ["asm_instruction'.fpu_vfp\\nvmsr_fpexc,_%0", "asm_instruction'.fpu_vfp\\nvmrs_%0,_fpexc"]
Function 'arm_irq_exception' contains unhandled instructions:
  ["instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E00100F4", "instruction'cps_19_E00100F0", "instruction'srsia_sp_19_E00100EC"]
Function 'fpsimd_HWCapTest' contains unhandled instructions:
  ["instruction'vmrs_r3_fpexc_E0000958", "instruction'vmrs_r3_fpexc_E0000964", "instruction'vmsr_fpexc_r3_E0000960"]
Function '_start' contains unhandled instructions:
  ["instruction'cps_23_E0000034", "instruction'cps_19_E000003C"]
Function 'arm_prefetch_abort_exception' contains unhandled instructions:
  ["instruction'cps_19_E001008C", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E0010090", "instruction'srsia_sp_19_E0010088"]
Function 'halt' contains unhandled instructions:
  ["instruction'cpsid_aif_E0010908"]
Checking.
Checking 48 function pair problems
Testing Function pair Pairing (memcpy (ASM) <= Kernel_C.memcpy (C))
  (function pairing 1 of 48)
 .. built problem, finding proof
Discovered a loop relation for split points [17, 13]
  (in problem)
Now doing proof search in 17 init case in problem.
Now doing proof search in 17 loop case in problem.
ProofNode ('Split', ((17, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (13, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'q___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'p___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'ptr_dst___ptr_to_void#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (17, ('Number', (0, 3))), (ProofNode ('Restr', (13, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (17, ('Offset', (0, 3))), (ProofNode ('Restr', (13, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 17 related to visits to 13
    with equalities
      ((Mem) ('mem')) (@ addr 17)
      = ((Mem) ('Mem')) (@ addr 13)
    and with invariants
      ((Word32) ('r7')) (@ addr 17)
      ((Word32) ('r4')) (@ addr 17)
      ((Word32) ('r8')) (@ addr 17)
      ((Word32) ('r14')) (@ addr 17)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 17)
      ((Word32) ('r5')) (@ addr 17)
      ((Word32) ('r0')) (@ addr 17)
      ((Word32) ('r9')) (@ addr 17)
      ((Word32) ('ret')) (@ addr 17)
      ((Word32) ('r2')) (@ addr 17)
      ((Word32) ('r11')) (@ addr 17)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 17)
      ((Word32) ('r13')) (@ addr 17)
      ((Word32) ('r10')) (@ addr 17)
      ((Bool) (ROData('mem'))) (@ addr 17)
      ((Word32) ('r6')) (@ addr 17)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 17)
      ((Word32) (('q___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
      ((Word32) (('n___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 13)
      ((Word32) (('p___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
      ((Word32) ('ptr_dst___ptr_to_void#v')) (@ addr 13)
      ((Word32[50]) ('GhostAssertions')) (@ addr 13)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 17 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 13 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 17 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 13 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (memcpy (ASM) <= Kernel_C.memcpy (C)), time taken: 31.56s
Testing Function pair Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C))
  (function pairing 2 of 48)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C)), time taken: 21.46s
Testing Function pair Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C))
  (function pairing 3 of 48)
 .. built problem, finding proof
Decided to case split at (52, 'ASM')
  (in problem)
Now doing proof search in true case (52 visited) in problem.
Now doing proof search in false case (52 not visited) in problem.
ProofNode ('CaseSplit', (52, 'ASM'), (ProofNode ('Restr', (52, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (52, ('Number', (0, 1))), (ProofNode ('Restr', (15, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 52 is visited
Step 2: case in (1) where 52 is visited
  Prove the number of visits to 52 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 52 is not visited
  Prove the number of visits to 52 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 15 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C)), time taken: 27.83s
Testing Function pair Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C))
  (function pairing 4 of 48)
Aborting Problem (Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C))), complex loop
Result ProblemAbort for pair Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C)), time taken: 1.11s
Testing Function pair Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C))
  (function pairing 5 of 48)
Aborting Problem (Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C))), complex loop
Result ProblemAbort for pair Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C)), time taken: 17.11s
Testing Function pair Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C))
  (function pairing 6 of 48)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C)), time taken: 46.88s
Testing Function pair Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C))
  (function pairing 7 of 48)
 .. built problem, finding proof
Decided to case split at (53, 'ASM')
  (in problem)
Now doing proof search in true case (53 visited) in problem.
Now doing proof search in false case (53 not visited) in problem.
ProofNode ('CaseSplit', (53, 'ASM'), (ProofNode ('Restr', (53, ('Number', (1, 2))), (ProofNode ('Restr', (42, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (53, ('Number', (0, 1))), (ProofNode ('Restr', (42, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 53 is visited
Step 2: case in (1) where 53 is visited
  Prove the number of visits to 53 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 42 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 53 is not visited
  Prove the number of visits to 53 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 42 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C)), time taken: 35.06s
Testing Function pair Pairing (sendIPC (ASM) <= Kernel_C.sendIPC (C))
  (function pairing 8 of 48)
 .. built problem, finding proof
Decided to case split at (54, 'ASM')
  (in problem)
Now doing proof search in true case (54 visited) in problem.
Now doing proof search in false case (54 not visited) in problem.
ProofNode ('CaseSplit', (54, 'ASM'), (ProofNode ('Restr', (54, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (54, ('Number', (0, 1))), (ProofNode ('Restr', (42, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 54 is visited
Step 2: case in (1) where 54 is visited
  Prove the number of visits to 54 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 54 is not visited
  Prove the number of visits to 54 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 42 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (sendIPC (ASM) <= Kernel_C.sendIPC (C)), time taken: 55.27s
Testing Function pair Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))
  (function pairing 9 of 48)
Aborting Problem (Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))): underspecified Kernel_C.clearExMonitor
Result ProblemAbort for pair Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C)), time taken: 0.00s
Testing Function pair Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C))
  (function pairing 10 of 48)
Aborting Problem (Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C)), time taken: 0.00s
Testing Function pair Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))
  (function pairing 11 of 48)
Aborting Problem (Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))): underspecified asm_instruction'.word_0xeef00a10__\nmov_%0,_r0________\n
Result ProblemAbort for pair Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C)), time taken: 0.00s
Testing Function pair Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C))
  (function pairing 12 of 48)
Aborting Problem (Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C)), time taken: 0.00s
Testing Function pair Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C))
  (function pairing 13 of 48)
 .. built problem, finding proof
Discovered a loop relation for split points [63, 36]
  (in problem)
Now doing proof search in 63 init case in problem.
Discovered that points [13 (loop head)] can be bounded
  (in 63 init case in problem)
Discovered that points [148 (loop head)] can be bounded
  (in 63 init case in problem)
Now doing proof search in 63 loop case in problem.
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1738, in build_proof_rec
    p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 678, in find_split_loop
    nec = get_necessary_split_opts (p, head, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 792, in get_necessary_split_opts
    for v in seq_eqs:
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 909, in <genexpr>
    for m in [get_model (n, offs)]
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 902, in get_model
    necessary_split_opts_trace.append ((n, kind, 'NoModel'))
NameError: global name 'kind' is not defined
Result ProofEXCEPT for pair Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C)), time taken: 180.85s
Testing Function pair Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C))
  (function pairing 14 of 48)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C)), time taken: 15.11s
Testing Function pair Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C))
  (function pairing 15 of 48)
 .. built problem, finding proof

**************************************
FATAL ERROR
Broken pipe

**************************************


**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [378, 57]
  (in problem)
Now doing proof search in 378 init case in problem.
Now doing proof search in 378 loop case in problem.
ProofNode ('Split', ((378, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 16)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (57, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nodeWindow___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'cap___struct_cap_C#v.words_C.1'), Expr ('Var', Type ('Word', 32), name = 'slots___struct_slot_range_C#v.offset_C'), Expr ('Var', Type ('Word', 32), name = 'objectSize___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v'), Expr ('Var', Type ('Word', 32), name = 'cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'slots___struct_slot_range_C#v.cnode_C'), Expr ('Var', Type ('Word', 32), name = 'userObjSize___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'nodeOffset___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'newType___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#48#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'slots___struct_slot_range_C#v.length_C')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (378, ('Number', (0, 3))), (ProofNode ('Restr', (57, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (378, ('Offset', (0, 3))), (ProofNode ('Restr', (57, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 378 related to visits to 57
    with equalities
      ((Mem) ('mem')) (@ addr 378)
      = ((Mem) ('Mem')) (@ addr 57)
    and with invariants
      ((Word32) ('r4')) (@ addr 378)
      ((Word32) ('r13')) (@ addr 378)
      ((Word32) ('r10')) (@ addr 378)
      ((Word32) ('r9')) (@ addr 378)
      ((Word32) (('r6' + ((0 - '#seq-visits') * 16)))) (@ addr 378)
      ((Word32) (('r7' + ((0 - '#seq-visits') * 1)))) (@ addr 378)
      ((Word32) ('r8')) (@ addr 378)
      ((Word32) ('r11')) (@ addr 378)
      ((Word32) ('r5')) (@ addr 378)
      ((Word32) ('ret')) (@ addr 378)
      ((Bool) (ROData('mem'))) (@ addr 378)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 378)
      ((Word32) ('nodeWindow___unsigned_long#v')) (@ addr 57)
      ((Word32) ('cap___struct_cap_C#v.words_C.1')) (@ addr 57)
      ((Word32) ('slots___struct_slot_range_C#v.offset_C')) (@ addr 57)
      ((Word32) ('objectSize___unsigned_long#v')) (@ addr 57)
      ((Word32) ('slot___ptr_to_struct_cte_C#v')) (@ addr 57)
      ((Word32) ('cap___struct_cap_C#v.words_C.0')) (@ addr 57)
      ((Word32) ('slots___struct_slot_range_C#v.cnode_C')) (@ addr 57)
      ((Word32) ('userObjSize___unsigned_long#v')) (@ addr 57)
      ((Word32) ('nodeOffset___unsigned_long#v')) (@ addr 57)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 57)
      ((Word32) ('newType___unsigned_long#v')) (@ addr 57)
      ((Word32) (('loop#48#count' + ((0 - '#seq-visits') * 1)))) (@ addr 57)
      ((Word32) ('slots___struct_slot_range_C#v.length_C')) (@ addr 57)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 378 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 57 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 378 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 57 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C)), time taken: 559.60s
Testing Function pair Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C))
  (function pairing 16 of 48)
Skipping Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C)), underspecified C
Testing Function pair Pairing (l_impl'isb (ASM) <= r_impl'isb (C))
  (function pairing 17 of 48)
Skipping Pairing (l_impl'isb (ASM) <= r_impl'isb (C)), underspecified C
Testing Function pair Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))
  (function pairing 18 of 48)
Aborting Problem (Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))), complex loop
Result ProblemAbort for pair Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C)), time taken: 0.61s
Testing Function pair Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C))
  (function pairing 19 of 48)
 .. built problem, finding proof
Discovered that points [207 (loop head)] can be bounded
  (in problem)
Discovered that points [44 (loop head)] can be bounded
  (in problem)
Discovered a loop relation for split points [139, 38]
  (in problem)
Now doing proof search in 139 init case in problem.
Discovered that points [21 (loop head)] can be bounded
  (in 139 init case in problem)
Discovered that points [10 (loop head)] can be bounded
  (in 139 init case in problem)
Discovered that points [170 (loop head)] can be bounded
  (in 139 init case in problem)
Now doing proof search in 139 loop case in problem.
Discovered that points [21 (loop head)] can be bounded
  (in 139 loop case in problem)

**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [154, 15]
  (in 139 loop case in problem)
Now doing proof search in 154 init case in 139 loop case in problem.
Now doing proof search in 154 loop case in 139 loop case in problem.
ProofNode ('Restr', (207, ('Number', (0, 5))), (ProofNode ('Restr', (44, ('Number', (0, 6))), (ProofNode ('Split', ((139, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (38, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'ipcBuffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#33#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (139, ('Number', (0, 3))), (ProofNode ('Restr', (38, ('Number', (0, 3))), (ProofNode ('Restr', (21, ('Number', (0, 2))), (ProofNode ('Restr', (10, ('Number', (0, 1))), (ProofNode ('Restr', (170, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (139, ('Offset', (0, 3))), (ProofNode ('Restr', (38, ('Offset', (0, 3))), (ProofNode ('Restr', (21, ('Number', (0, 2))), (ProofNode ('Split', ((154, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (15, (1, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'ipcBuffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'j___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (154, ('Number', (0, 3))), (ProofNode ('Restr', (15, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (154, ('Offset', (0, 3))), (ProofNode ('Restr', (15, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)))),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 207 is in {0 ..< 5}
    .. proven.
Step 2: 
  Prove the number of visits to 44 is in {0 ..< 6}
    .. proven.
Step 3: 
  prove visits to 139 related to visits to 38
    with equalities
      ((Mem) ('mem')) (@ addr 139)
      = ((Mem) ('Mem')) (@ addr 38)
    and with invariants
      ((Word32) ('r4')) (@ addr 139)
      ((Word32) ('r0')) (@ addr 139)
      ((Word32) ('r13')) (@ addr 139)
      ((Word32) ('r10')) (@ addr 139)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 4)))) (@ addr 139)
      ((Word32) ('r9')) (@ addr 139)
      ((Word32) ('r6')) (@ addr 139)
      ((Word32) ('r7')) (@ addr 139)
      ((Word32) ('r8')) (@ addr 139)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 139)
      ((Word32) ('r11')) (@ addr 139)
      ((Word32) ('r5')) (@ addr 139)
      ((Word32) ('ret')) (@ addr 139)
      ((Word32) ('r1')) (@ addr 139)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 1)))) (@ addr 139)
      ((Bool) (ROData('mem'))) (@ addr 139)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 139)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 38)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 38)
      ((Word32) ('n___unsigned_long#v')) (@ addr 38)
      ((Word32) ('ipcBuffer___ptr_to_unsigned_long#v')) (@ addr 38)
      ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 38)
      ((Word32) (('loop#33#count' + ((0 - '#seq-visits') * 1)))) (@ addr 38)
      ((Word32[50]) ('GhostAssertions')) (@ addr 38)
    .. proven.
Step 4: case in (3) where the length of the sequence < 2
  Prove the number of visits to 139 is in {0 ..< 3}
    .. proven.
Step 5: 
  Prove the number of visits to 38 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 21 is in {0 ..< 2}
    .. proven.
Step 7: 
  Prove the number of visits to 10 is in {0 ..< 1}
    .. proven.
Step 8: 
  Prove the number of visits to 170 is in {0 ..< 1}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (3) where the length of the sequence is i + 2
  Prove the number of visits to 139 is in {i + 0 ..< i + 3}
    .. proven.
Step 11: 
  Prove the number of visits to 38 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 21 is in {0 ..< 2}
    .. proven.
Step 13: 
  prove visits to 154 related to visits [2, 3, 4 ...] to 15
    with equalities
      ((Mem) ('mem')) (@ addr 154)
      = ((Mem) ('Mem')) (@ addr 15)
    and with invariants
      ((Word32) ('r4')) (@ addr 154)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 154)
      ((Word32) ('r13')) (@ addr 154)
      ((Word32) ('r10')) (@ addr 154)
      ((Word32) ('r9')) (@ addr 154)
      ((Word32) ('r6')) (@ addr 154)
      ((Word32) ('r7')) (@ addr 154)
      ((Word32) ('r8')) (@ addr 154)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 154)
      ((Word32) ('r11')) (@ addr 154)
      ((Word32) ('r5')) (@ addr 154)
      ((Word32) ('ret')) (@ addr 154)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 154)
      ((Word32) ('r2')) (@ addr 154)
      ((Bool) (ROData('mem'))) (@ addr 154)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 154)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 15)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 15)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 15)
      ((Word32) ('n___unsigned_long#v')) (@ addr 15)
      ((Word32) ('ipcBuffer___ptr_to_unsigned_long#v')) (@ addr 15)
      ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 15)
      ((Word32[50]) ('GhostAssertions')) (@ addr 15)
      ((Word32) ('j___unsigned_long#v')) (@ addr 15)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 154 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 15 is in {0 ..< 4}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is j + 2
  Prove the number of visits to 154 is in {j + 0 ..< j + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 15 is in {j + 0 ..< j + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C)), time taken: 763.29s
Testing Function pair Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C))
  (function pairing 20 of 48)
 .. built problem, finding proof
Discovered a loop relation for split points [27, 11]
  (in problem)
Now doing proof search in 27 init case in problem.
Now doing proof search in 27 loop case in problem.
ProofNode ('Split', ((27, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (11, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'userSize___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 't___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'objectSize___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'slots___struct_slot_range_C#v.offset_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'slots___struct_slot_range_C#v.cnode_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'nextFreeArea___ptr_to_void#v'), Expr ('Var', Type ('Word', 32), name = 'deviceMemory___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'parent___ptr_to_struct_cte_C#v'), Expr ('Var', Type ('Word', 32), name = 'slots___struct_slot_range_C#v.length_C')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (27, ('Number', (0, 3))), (ProofNode ('Restr', (11, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (27, ('Offset', (0, 3))), (ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 27 related to visits to 11
    with equalities
      ((Mem) ('mem')) (@ addr 27)
      = ((Mem) ('Mem')) (@ addr 11)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 27)
      ((Word32) ('r13')) (@ addr 27)
      ((Word32) ('r10')) (@ addr 27)
      ((Word32) ('r9')) (@ addr 27)
      ((Word32) ('r6')) (@ addr 27)
      ((Word32) ('r7')) (@ addr 27)
      ((Word32) ('r8')) (@ addr 27)
      ((Word32) ('r11')) (@ addr 27)
      ((Word32) ('r5')) (@ addr 27)
      ((Word32) ('ret')) (@ addr 27)
      ((Bool) (ROData('mem'))) (@ addr 27)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 27)
      ((Word32) ('userSize___unsigned_long#v')) (@ addr 11)
      ((Word32) ('t___unsigned_long#v')) (@ addr 11)
      ((Word32) ('objectSize___unsigned_long#v')) (@ addr 11)
      ((Word32) ('slots___struct_slot_range_C#v.offset_C')) (@ addr 11)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 11)
      ((Word32) ('slots___struct_slot_range_C#v.cnode_C')) (@ addr 11)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 11)
      ((Word32) ('nextFreeArea___ptr_to_void#v')) (@ addr 11)
      ((Word32) ('deviceMemory___unsigned_long#v')) (@ addr 11)
      ((Word32) ('parent___ptr_to_struct_cte_C#v')) (@ addr 11)
      ((Word32) ('slots___struct_slot_range_C#v.length_C')) (@ addr 11)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 27 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 11 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 27 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 11 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C)), time taken: 257.53s
Testing Function pair Pairing (l_impl'wfi (ASM) <= r_impl'wfi (C))
  (function pairing 21 of 48)
Skipping Pairing (l_impl'wfi (ASM) <= r_impl'wfi (C)), underspecified C
Testing Function pair Pairing (restore_user_context (ASM) <= Kernel_C.restore_user_context (C))
  (function pairing 22 of 48)
Skipping Pairing (restore_user_context (ASM) <= Kernel_C.restore_user_context (C)), underspecified C
Testing Function pair Pairing (dist_init (ASM) <= Kernel_C.dist_init (C))
  (function pairing 23 of 48)
 .. built problem, finding proof
Discovered a loop relation for split points [61, 51]
  (in problem)
Now doing proof search in 61 init case in problem.
Discovered a loop relation for split points [67, 42]
  (in 61 init case in problem)
Now doing proof search in 67 init case in 61 init case in problem.
Discovered a loop relation for split points [73, 203]
  (in 67 init case in 61 init case in problem)
Now doing proof search in 73 init case in 67 init case in 61 init case in problem.
Discovered a loop relation for split points [78, 28]
  (in 73 init case in 67 init case in 61 init case in problem)
Now doing proof search in 78 init case in 73 init case in 67 init case in 61 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 78 init case in 73 init case in 67 init case in 61 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 78 init case in 73 init case in 67 init case in 61 init case in problem)
Discovered that points [162 (loop head)] can be bounded
  (in 78 init case in 73 init case in 67 init case in 61 init case in problem)
Discovered that points [175 (loop head)] can be bounded
  (in 78 init case in 73 init case in 67 init case in 61 init case in problem)
Now doing proof search in 78 loop case in 73 init case in 67 init case in 61 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 78 loop case in 73 init case in 67 init case in 61 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 78 loop case in 73 init case in 67 init case in 61 init case in problem)
Discovered that points [162 (loop head)] can be bounded
  (in 78 loop case in 73 init case in 67 init case in 61 init case in problem)
Discovered that points [175 (loop head)] can be bounded
  (in 78 loop case in 73 init case in 67 init case in 61 init case in problem)
Now doing proof search in 73 loop case in 67 init case in 61 init case in problem.
Discovered a loop relation for split points [78, 28]
  (in 73 loop case in 67 init case in 61 init case in problem)
Now doing proof search in 78 init case in 73 loop case in 67 init case in 61 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 78 init case in 73 loop case in 67 init case in 61 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 78 init case in 73 loop case in 67 init case in 61 init case in problem)
Discovered that points [162 (loop head)] can be bounded
  (in 78 init case in 73 loop case in 67 init case in 61 init case in problem)
Discovered that points [175 (loop head)] can be bounded
  (in 78 init case in 73 loop case in 67 init case in 61 init case in problem)
Now doing proof search in 78 loop case in 73 loop case in 67 init case in 61 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 78 loop case in 73 loop case in 67 init case in 61 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 78 loop case in 73 loop case in 67 init case in 61 init case in problem)
Discovered that points [162 (loop head)] can be bounded
  (in 78 loop case in 73 loop case in 67 init case in 61 init case in problem)
Discovered that points [175 (loop head)] can be bounded
  (in 78 loop case in 73 loop case in 67 init case in 61 init case in problem)
Now doing proof search in 67 loop case in 61 init case in problem.
Discovered a loop relation for split points [73, 203]
  (in 67 loop case in 61 init case in problem)
Now doing proof search in 73 init case in 67 loop case in 61 init case in problem.
Discovered a loop relation for split points [78, 28]
  (in 73 init case in 67 loop case in 61 init case in problem)
Now doing proof search in 78 init case in 73 init case in 67 loop case in 61 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 78 init case in 73 init case in 67 loop case in 61 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 78 init case in 73 init case in 67 loop case in 61 init case in problem)
Discovered that points [162 (loop head)] can be bounded
  (in 78 init case in 73 init case in 67 loop case in 61 init case in problem)
Discovered that points [175 (loop head)] can be bounded
  (in 78 init case in 73 init case in 67 loop case in 61 init case in problem)
Now doing proof search in 78 loop case in 73 init case in 67 loop case in 61 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 78 loop case in 73 init case in 67 loop case in 61 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 78 loop case in 73 init case in 67 loop case in 61 init case in problem)
Discovered that points [162 (loop head)] can be bounded
  (in 78 loop case in 73 init case in 67 loop case in 61 init case in problem)
Discovered that points [175 (loop head)] can be bounded
  (in 78 loop case in 73 init case in 67 loop case in 61 init case in problem)
Now doing proof search in 73 loop case in 67 loop case in 61 init case in problem.
Discovered a loop relation for split points [78, 28]
  (in 73 loop case in 67 loop case in 61 init case in problem)
Now doing proof search in 78 init case in 73 loop case in 67 loop case in 61 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 78 init case in 73 loop case in 67 loop case in 61 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 78 init case in 73 loop case in 67 loop case in 61 init case in problem)
Discovered that points [162 (loop head)] can be bounded
  (in 78 init case in 73 loop case in 67 loop case in 61 init case in problem)
Discovered that points [175 (loop head)] can be bounded
  (in 78 init case in 73 loop case in 67 loop case in 61 init case in problem)
Now doing proof search in 78 loop case in 73 loop case in 67 loop case in 61 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 78 loop case in 73 loop case in 67 loop case in 61 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 78 loop case in 73 loop case in 67 loop case in 61 init case in problem)
Discovered that points [162 (loop head)] can be bounded
  (in 78 loop case in 73 loop case in 67 loop case in 61 init case in problem)
Discovered that points [175 (loop head)] can be bounded
  (in 78 loop case in 73 loop case in 67 loop case in 61 init case in problem)
Now doing proof search in 61 loop case in problem.
Discovered a loop relation for split points [67, 42]
  (in 61 loop case in problem)
Now doing proof search in 67 init case in 61 loop case in problem.
Discovered that points [199 (loop head)] can be bounded
  (in 67 init case in 61 loop case in problem)
Discovered that points [24 (loop head)] can be bounded
  (in 67 init case in 61 loop case in problem)
Discovered that points [16 (loop head)] can be bounded
  (in 67 init case in 61 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 67 init case in 61 loop case in problem)
Discovered that points [131 (loop head)] can be bounded
  (in 67 init case in 61 loop case in problem)
Discovered that points [150 (loop head)] can be bounded
  (in 67 init case in 61 loop case in problem)
Discovered that points [162 (loop head)] can be bounded
  (in 67 init case in 61 loop case in problem)
Discovered that points [175 (loop head)] can be bounded
  (in 67 init case in 61 loop case in problem)
Now doing proof search in 67 loop case in 61 loop case in problem.
Discovered a loop relation for split points [73, 203]
  (in 67 loop case in 61 loop case in problem)
Now doing proof search in 73 init case in 67 loop case in 61 loop case in problem.
Discovered a loop relation for split points [78, 28]
  (in 73 init case in 67 loop case in 61 loop case in problem)
Now doing proof search in 78 init case in 73 init case in 67 loop case in 61 loop case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 78 init case in 73 init case in 67 loop case in 61 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 78 init case in 73 init case in 67 loop case in 61 loop case in problem)
Discovered that points [162 (loop head)] can be bounded
  (in 78 init case in 73 init case in 67 loop case in 61 loop case in problem)
Discovered that points [175 (loop head)] can be bounded
  (in 78 init case in 73 init case in 67 loop case in 61 loop case in problem)
Now doing proof search in 78 loop case in 73 init case in 67 loop case in 61 loop case in problem.
Discovered a loop relation for split points [83, 20]
  (in 78 loop case in 73 init case in 67 loop case in 61 loop case in problem)
Now doing proof search in 83 init case in 78 loop case in 73 init case in 67 loop case in 61 loop case in problem.
Discovered that points [175 (loop head)] can be bounded
  (in 83 init case in 78 loop case in 73 init case in 67 loop case in 61 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 83 init case in 78 loop case in 73 init case in 67 loop case in 61 loop case in problem)
Now doing proof search in 83 loop case in 78 loop case in 73 init case in 67 loop case in 61 loop case in problem.
Discovered a loop relation for split points [86, 13]
  (in 83 loop case in 78 loop case in 73 init case in 67 loop case in 61 loop case in problem)
Now doing proof search in 86 init case in 83 loop case in 78 loop case in 73 init case in 67 loop case in 61 loop case in problem.
Now doing proof search in 86 loop case in 83 loop case in 78 loop case in 73 init case in 67 loop case in 61 loop case in problem.
Now doing proof search in 73 loop case in 67 loop case in 61 loop case in problem.
Discovered a loop relation for split points [78, 28]
  (in 73 loop case in 67 loop case in 61 loop case in problem)
Now doing proof search in 78 init case in 73 loop case in 67 loop case in 61 loop case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 78 init case in 73 loop case in 67 loop case in 61 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 78 init case in 73 loop case in 67 loop case in 61 loop case in problem)
Discovered that points [162 (loop head)] can be bounded
  (in 78 init case in 73 loop case in 67 loop case in 61 loop case in problem)
Discovered that points [175 (loop head)] can be bounded
  (in 78 init case in 73 loop case in 67 loop case in 61 loop case in problem)
Now doing proof search in 78 loop case in 73 loop case in 67 loop case in 61 loop case in problem.
Discovered a loop relation for split points [83, 20]
  (in 78 loop case in 73 loop case in 67 loop case in 61 loop case in problem)
Now doing proof search in 83 init case in 78 loop case in 73 loop case in 67 loop case in 61 loop case in problem.
Discovered that points [175 (loop head)] can be bounded
  (in 83 init case in 78 loop case in 73 loop case in 67 loop case in 61 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 83 init case in 78 loop case in 73 loop case in 67 loop case in 61 loop case in problem)
Now doing proof search in 83 loop case in 78 loop case in 73 loop case in 67 loop case in 61 loop case in problem.
Discovered a loop relation for split points [86, 13]
  (in 83 loop case in 78 loop case in 73 loop case in 67 loop case in 61 loop case in problem)
Now doing proof search in 86 init case in 83 loop case in 78 loop case in 73 loop case in 67 loop case in 61 loop case in problem.
Now doing proof search in 86 loop case in 83 loop case in 78 loop case in 73 loop case in 67 loop case in 61 loop case in problem.
ProofNode ('Split', ((61, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (51, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#44#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (61, ('Number', (0, 3))), (ProofNode ('Restr', (51, ('Number', (0, 3))), (ProofNode ('Split', ((67, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (42, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#33#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (67, ('Number', (0, 1))), (ProofNode ('Restr', (42, ('Number', (0, 1))), (ProofNode ('Split', ((73, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (203, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v.1'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])])]), [], 2, 1), (ProofNode ('Restr', (73, ('Number', (0, 3))), (ProofNode ('Restr', (203, ('Number', (0, 4))), (ProofNode ('Split', ((78, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (78, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (162, ('Number', (0, 1))), (ProofNode ('Restr', (175, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (78, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (16, ('Number', (0, 2))), (ProofNode ('Restr', (5, ('Number', (0, 3))), (ProofNode ('Restr', (162, ('Number', (0, 1))), (ProofNode ('Restr', (175, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)))),)),)), ProofNode ('Restr', (73, ('Offset', (0, 3))), (ProofNode ('Restr', (203, ('Offset', (0, 3))), (ProofNode ('Split', ((78, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (78, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (162, ('Number', (0, 1))), (ProofNode ('Restr', (175, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (78, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (16, ('Number', (0, 2))), (ProofNode ('Restr', (5, ('Number', (0, 3))), (ProofNode ('Restr', (162, ('Number', (0, 1))), (ProofNode ('Restr', (175, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)))),)),)))),)),)), ProofNode ('Restr', (67, ('Offset', (0, 3))), (ProofNode ('Restr', (42, ('Offset', (0, 3))), (ProofNode ('Split', ((73, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (203, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v.1'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])])]), [], 2, 1), (ProofNode ('Restr', (73, ('Number', (0, 3))), (ProofNode ('Restr', (203, ('Number', (0, 4))), (ProofNode ('Split', ((78, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (78, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (162, ('Number', (0, 1))), (ProofNode ('Restr', (175, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (78, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (16, ('Number', (0, 2))), (ProofNode ('Restr', (5, ('Number', (0, 4))), (ProofNode ('Restr', (162, ('Number', (0, 1))), (ProofNode ('Restr', (175, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)))),)),)), ProofNode ('Restr', (73, ('Offset', (0, 3))), (ProofNode ('Restr', (203, ('Offset', (0, 3))), (ProofNode ('Split', ((78, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (78, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (162, ('Number', (0, 1))), (ProofNode ('Restr', (175, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (78, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (16, ('Number', (0, 2))), (ProofNode ('Restr', (5, ('Number', (0, 4))), (ProofNode ('Restr', (162, ('Number', (0, 1))), (ProofNode ('Restr', (175, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)))),)),)))),)),)))),)),)), ProofNode ('Restr', (61, ('Offset', (0, 3))), (ProofNode ('Restr', (51, ('Offset', (0, 3))), (ProofNode ('Split', ((67, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (42, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#33#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (67, ('Number', (0, 1))), (ProofNode ('Restr', (42, ('Number', (0, 1))), (ProofNode ('Restr', (199, ('Number', (0, 1))), (ProofNode ('Restr', (24, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (131, ('Number', (0, 1))), (ProofNode ('Restr', (150, ('Number', (0, 1))), (ProofNode ('Restr', (162, ('Number', (0, 1))), (ProofNode ('Restr', (175, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)),)),)), ProofNode ('Restr', (67, ('Offset', (0, 3))), (ProofNode ('Restr', (42, ('Offset', (0, 3))), (ProofNode ('Split', ((73, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (203, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v.1'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])])]), [], 2, 1), (ProofNode ('Restr', (73, ('Number', (0, 3))), (ProofNode ('Restr', (203, ('Number', (0, 4))), (ProofNode ('Split', ((78, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (78, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (162, ('Number', (0, 1))), (ProofNode ('Restr', (175, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (78, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Split', ((83, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (20, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#15#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (83, ('Number', (0, 3))), (ProofNode ('Restr', (20, ('Number', (0, 3))), (ProofNode ('Restr', (175, ('Number', (0, 5))), (ProofNode ('Restr', (5, ('Number', (0, 6))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (83, ('Offset', (0, 3))), (ProofNode ('Restr', (20, ('Offset', (0, 3))), (ProofNode ('Split', ((86, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (13, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (86, ('Number', (0, 1))), (ProofNode ('Restr', (13, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (86, ('Offset', (0, 3))), (ProofNode ('Restr', (13, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)), ProofNode ('Restr', (73, ('Offset', (0, 3))), (ProofNode ('Restr', (203, ('Offset', (0, 3))), (ProofNode ('Split', ((78, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (78, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (162, ('Number', (0, 1))), (ProofNode ('Restr', (175, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (78, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Split', ((83, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (20, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#15#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (83, ('Number', (0, 3))), (ProofNode ('Restr', (20, ('Number', (0, 3))), (ProofNode ('Restr', (175, ('Number', (0, 5))), (ProofNode ('Restr', (5, ('Number', (0, 6))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (83, ('Offset', (0, 3))), (ProofNode ('Restr', (20, ('Offset', (0, 3))), (ProofNode ('Split', ((86, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (13, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (86, ('Number', (0, 1))), (ProofNode ('Restr', (13, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (86, ('Offset', (0, 3))), (ProofNode ('Restr', (13, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 61 related to visits to 51
    with equalities
      ((Mem) ('mem')) (@ addr 61)
      = ((Mem) ('Mem')) (@ addr 51)
    and with invariants
      ((Word32) ('r7')) (@ addr 61)
      ((Word32) ('r4')) (@ addr 61)
      ((Word32) ('r8')) (@ addr 61)
      ((Word32) ('r14')) (@ addr 61)
      ((Word32) ('r5')) (@ addr 61)
      ((Word32) ('r0')) (@ addr 61)
      ((Word32) ('r9')) (@ addr 61)
      ((Word32) ('ret')) (@ addr 61)
      ((Word32) ('r2')) (@ addr 61)
      ((Word32) ('r11')) (@ addr 61)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 61)
      ((Word32) ('r13')) (@ addr 61)
      ((Word32) ('r10')) (@ addr 61)
      ((Bool) (ROData('mem'))) (@ addr 61)
      ((Word32) ('r6')) (@ addr 61)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 61)
      ((Word32) ('nirqs___int#v')) (@ addr 51)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 51)
      ((Word32) (('loop#44#count' + ((0 - '#seq-visits') * 1)))) (@ addr 51)
      ((Word32[50]) ('GhostAssertions')) (@ addr 51)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 61 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 51 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove visits to 67 related to visits to 42
    with equalities
      ((Mem) ('mem')) (@ addr 67)
      = ((Mem) ('Mem')) (@ addr 42)
    and with invariants
      ((Word32) ('r7')) (@ addr 67)
      ((Word32) ('r4')) (@ addr 67)
      ((Word32) ('r8')) (@ addr 67)
      ((Word32) ('r14')) (@ addr 67)
      ((Word32) ('r5')) (@ addr 67)
      ((Word32) ('r0')) (@ addr 67)
      ((Word32) ('r9')) (@ addr 67)
      ((Word32) ('ret')) (@ addr 67)
      ((Word32) ('r2')) (@ addr 67)
      ((Word32) ('r11')) (@ addr 67)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 67)
      ((Word32) ('r12')) (@ addr 67)
      ((Word32) ('r13')) (@ addr 67)
      ((Word32) ('r10')) (@ addr 67)
      ((Bool) (ROData('mem'))) (@ addr 67)
      ((Word32) ('r6')) (@ addr 67)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 67)
      ((Word32) ('nirqs___int#v')) (@ addr 42)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 42)
      ((Word32) (('loop#33#count' + ((0 - '#seq-visits') * 1)))) (@ addr 42)
      ((Word32[50]) ('GhostAssertions')) (@ addr 42)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 67 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 42 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove visits to 73 related to visits [2, 3, 4 ...] to 203
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 73)
      ((Word32) ('r4')) (@ addr 73)
      ((Word32) ('r8')) (@ addr 73)
      ((Word32) ('r14')) (@ addr 73)
      ((Word32) ('r5')) (@ addr 73)
      ((Word32) ('r0')) (@ addr 73)
      ((Word32) ('r9')) (@ addr 73)
      ((Word32) ('ret')) (@ addr 73)
      ((Word32) ('r2')) (@ addr 73)
      ((Word32) ('r11')) (@ addr 73)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 73)
      ((Word32) ('r13')) (@ addr 73)
      ((Word32) ('r10')) (@ addr 73)
      ((Mem) ('mem')) (@ addr 73)
      ((Word32) ('r6')) (@ addr 73)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 73)
      ((Word32) ('nirqs___int#v.1')) (@ addr 203)
      ((Word32) ('nirqs___int#v')) (@ addr 203)
      ((Mem) ('Mem.1')) (@ addr 203)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 203)
      ((Mem) ('Mem')) (@ addr 203)
      ((Word32[50]) ('GhostAssertions')) (@ addr 203)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 203)
    .. proven.
Step 8: case in (7) where the length of the sequence < 2
  Prove the number of visits to 73 is in {0 ..< 3}
    .. proven.
Step 9: 
  Prove the number of visits to 203 is in {0 ..< 4}
    .. proven.
Step 10: 
  prove visits to 78 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 78)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 78)
      ((Word32) ('r4')) (@ addr 78)
      ((Word32) ('r8')) (@ addr 78)
      ((Word32) ('r14')) (@ addr 78)
      ((Word32) ('r3')) (@ addr 78)
      ((Word32) ('r5')) (@ addr 78)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 78)
      ((Word32) ('r9')) (@ addr 78)
      ((Word32) ('ret')) (@ addr 78)
      ((Word32) ('r2')) (@ addr 78)
      ((Word32) ('r11')) (@ addr 78)
      ((Word32) ('r12')) (@ addr 78)
      ((Word32) ('r13')) (@ addr 78)
      ((Word32) ('r10')) (@ addr 78)
      ((Bool) (ROData('mem'))) (@ addr 78)
      ((Word32) ('r6')) (@ addr 78)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 78)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 11: case in (10) where the length of the sequence < 2
  Prove the number of visits to 78 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 13: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 14: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 162 is in {0 ..< 1}
    .. proven.
Step 16: 
  Prove the number of visits to 175 is in {0 ..< 1}
    .. proven.
Step 17: 
  prove all verification conditions
    .. proven.
Step 18: case in (10) where the length of the sequence is a + 2
  Prove the number of visits to 78 is in {a + 0 ..< a + 3}
    .. proven.
Step 19: 
  Prove the number of visits to 28 is in {a + 0 ..< a + 3}
    .. proven.
Step 20: 
  Prove the number of visits to 16 is in {0 ..< 2}
    .. proven.
Step 21: 
  Prove the number of visits to 5 is in {0 ..< 3}
    .. proven.
Step 22: 
  Prove the number of visits to 162 is in {0 ..< 1}
    .. proven.
Step 23: 
  Prove the number of visits to 175 is in {0 ..< 2}
    .. proven.
Step 24: 
  prove all verification conditions
    .. proven.
Step 25: case in (7) where the length of the sequence is k + 2
  Prove the number of visits to 73 is in {k + 0 ..< k + 3}
    .. proven.
Step 26: 
  Prove the number of visits to 203 is in {k + 0 ..< k + 3}
    .. proven.
Step 27: 
  prove visits to 78 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 78)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 78)
      ((Word32) ('r4')) (@ addr 78)
      ((Word32) ('r8')) (@ addr 78)
      ((Word32) ('r14')) (@ addr 78)
      ((Word32) ('r3')) (@ addr 78)
      ((Word32) ('r5')) (@ addr 78)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 78)
      ((Word32) ('r9')) (@ addr 78)
      ((Word32) ('ret')) (@ addr 78)
      ((Word32) ('r2')) (@ addr 78)
      ((Word32) ('r11')) (@ addr 78)
      ((Word32) ('r12')) (@ addr 78)
      ((Word32) ('r13')) (@ addr 78)
      ((Word32) ('r10')) (@ addr 78)
      ((Bool) (ROData('mem'))) (@ addr 78)
      ((Word32) ('r6')) (@ addr 78)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 78)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 28: case in (27) where the length of the sequence < 2
  Prove the number of visits to 78 is in {0 ..< 1}
    .. proven.
Step 29: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 30: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 31: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 32: 
  Prove the number of visits to 162 is in {0 ..< 1}
    .. proven.
Step 33: 
  Prove the number of visits to 175 is in {0 ..< 1}
    .. proven.
Step 34: 
  prove all verification conditions
    .. proven.
Step 35: case in (27) where the length of the sequence is b + 2
  Prove the number of visits to 78 is in {b + 0 ..< b + 3}
    .. proven.
Step 36: 
  Prove the number of visits to 28 is in {b + 0 ..< b + 3}
    .. proven.
Step 37: 
  Prove the number of visits to 16 is in {0 ..< 2}
    .. proven.
Step 38: 
  Prove the number of visits to 5 is in {0 ..< 3}
    .. proven.
Step 39: 
  Prove the number of visits to 162 is in {0 ..< 1}
    .. proven.
Step 40: 
  Prove the number of visits to 175 is in {0 ..< 2}
    .. proven.
Step 41: 
  prove all verification conditions
    .. proven.
Step 42: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 67 is in {j + 0 ..< j + 3}
    .. proven.
Step 43: 
  Prove the number of visits to 42 is in {j + 0 ..< j + 3}
    .. proven.
Step 44: 
  prove visits to 73 related to visits [2, 3, 4 ...] to 203
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 73)
      ((Word32) ('r4')) (@ addr 73)
      ((Word32) ('r8')) (@ addr 73)
      ((Word32) ('r14')) (@ addr 73)
      ((Word32) ('r5')) (@ addr 73)
      ((Word32) ('r0')) (@ addr 73)
      ((Word32) ('r9')) (@ addr 73)
      ((Word32) ('ret')) (@ addr 73)
      ((Word32) ('r2')) (@ addr 73)
      ((Word32) ('r11')) (@ addr 73)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 73)
      ((Word32) ('r13')) (@ addr 73)
      ((Word32) ('r10')) (@ addr 73)
      ((Mem) ('mem')) (@ addr 73)
      ((Word32) ('r6')) (@ addr 73)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 73)
      ((Word32) ('nirqs___int#v.1')) (@ addr 203)
      ((Word32) ('nirqs___int#v')) (@ addr 203)
      ((Mem) ('Mem.1')) (@ addr 203)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 203)
      ((Mem) ('Mem')) (@ addr 203)
      ((Word32[50]) ('GhostAssertions')) (@ addr 203)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 203)
    .. proven.
Step 45: case in (44) where the length of the sequence < 2
  Prove the number of visits to 73 is in {0 ..< 3}
    .. proven.
Step 46: 
  Prove the number of visits to 203 is in {0 ..< 4}
    .. proven.
Step 47: 
  prove visits to 78 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 78)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 78)
      ((Word32) ('r4')) (@ addr 78)
      ((Word32) ('r8')) (@ addr 78)
      ((Word32) ('r14')) (@ addr 78)
      ((Word32) ('r3')) (@ addr 78)
      ((Word32) ('r5')) (@ addr 78)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 78)
      ((Word32) ('r9')) (@ addr 78)
      ((Word32) ('ret')) (@ addr 78)
      ((Word32) ('r2')) (@ addr 78)
      ((Word32) ('r11')) (@ addr 78)
      ((Word32) ('r12')) (@ addr 78)
      ((Word32) ('r13')) (@ addr 78)
      ((Word32) ('r10')) (@ addr 78)
      ((Bool) (ROData('mem'))) (@ addr 78)
      ((Word32) ('r6')) (@ addr 78)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 78)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 48: case in (47) where the length of the sequence < 2
  Prove the number of visits to 78 is in {0 ..< 1}
    .. proven.
Step 49: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 50: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 51: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 52: 
  Prove the number of visits to 162 is in {0 ..< 1}
    .. proven.
Step 53: 
  Prove the number of visits to 175 is in {0 ..< 1}
    .. proven.
Step 54: 
  prove all verification conditions
    .. proven.
Step 55: case in (47) where the length of the sequence is i2 + 2
  Prove the number of visits to 78 is in {i2 + 0 ..< i2 + 3}
    .. proven.
Step 56: 
  Prove the number of visits to 28 is in {i2 + 0 ..< i2 + 3}
    .. proven.
Step 57: 
  Prove the number of visits to 16 is in {0 ..< 2}
    .. proven.
Step 58: 
  Prove the number of visits to 5 is in {0 ..< 4}
    .. proven.
Step 59: 
  Prove the number of visits to 162 is in {0 ..< 1}
    .. proven.
Step 60: 
  Prove the number of visits to 175 is in {0 ..< 3}
    .. proven.
Step 61: 
  prove all verification conditions
    .. proven.
Step 62: case in (44) where the length of the sequence is c + 2
  Prove the number of visits to 73 is in {c + 0 ..< c + 3}
    .. proven.
Step 63: 
  Prove the number of visits to 203 is in {c + 0 ..< c + 3}
    .. proven.
Step 64: 
  prove visits to 78 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 78)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 78)
      ((Word32) ('r4')) (@ addr 78)
      ((Word32) ('r8')) (@ addr 78)
      ((Word32) ('r14')) (@ addr 78)
      ((Word32) ('r3')) (@ addr 78)
      ((Word32) ('r5')) (@ addr 78)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 78)
      ((Word32) ('r9')) (@ addr 78)
      ((Word32) ('ret')) (@ addr 78)
      ((Word32) ('r2')) (@ addr 78)
      ((Word32) ('r11')) (@ addr 78)
      ((Word32) ('r12')) (@ addr 78)
      ((Word32) ('r13')) (@ addr 78)
      ((Word32) ('r10')) (@ addr 78)
      ((Bool) (ROData('mem'))) (@ addr 78)
      ((Word32) ('r6')) (@ addr 78)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 78)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 65: case in (64) where the length of the sequence < 2
  Prove the number of visits to 78 is in {0 ..< 1}
    .. proven.
Step 66: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 67: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 68: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 69: 
  Prove the number of visits to 162 is in {0 ..< 1}
    .. proven.
Step 70: 
  Prove the number of visits to 175 is in {0 ..< 1}
    .. proven.
Step 71: 
  prove all verification conditions
    .. proven.
Step 72: case in (64) where the length of the sequence is j2 + 2
  Prove the number of visits to 78 is in {j2 + 0 ..< j2 + 3}
    .. proven.
Step 73: 
  Prove the number of visits to 28 is in {j2 + 0 ..< j2 + 3}
    .. proven.
Step 74: 
  Prove the number of visits to 16 is in {0 ..< 2}
    .. proven.
Step 75: 
  Prove the number of visits to 5 is in {0 ..< 4}
    .. proven.
Step 76: 
  Prove the number of visits to 162 is in {0 ..< 1}
    .. proven.
Step 77: 
  Prove the number of visits to 175 is in {0 ..< 3}
    .. proven.
Step 78: 
  prove all verification conditions
    .. proven.
Step 79: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 61 is in {i + 0 ..< i + 3}
    .. proven.
Step 80: 
  Prove the number of visits to 51 is in {i + 0 ..< i + 3}
    .. proven.
Step 81: 
  prove visits to 67 related to visits to 42
    with equalities
      ((Mem) ('mem')) (@ addr 67)
      = ((Mem) ('Mem')) (@ addr 42)
    and with invariants
      ((Word32) ('r7')) (@ addr 67)
      ((Word32) ('r4')) (@ addr 67)
      ((Word32) ('r8')) (@ addr 67)
      ((Word32) ('r14')) (@ addr 67)
      ((Word32) ('r5')) (@ addr 67)
      ((Word32) ('r0')) (@ addr 67)
      ((Word32) ('r9')) (@ addr 67)
      ((Word32) ('ret')) (@ addr 67)
      ((Word32) ('r2')) (@ addr 67)
      ((Word32) ('r11')) (@ addr 67)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 67)
      ((Word32) ('r12')) (@ addr 67)
      ((Word32) ('r13')) (@ addr 67)
      ((Word32) ('r10')) (@ addr 67)
      ((Bool) (ROData('mem'))) (@ addr 67)
      ((Word32) ('r6')) (@ addr 67)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 67)
      ((Word32) ('nirqs___int#v')) (@ addr 42)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 42)
      ((Word32) (('loop#33#count' + ((0 - '#seq-visits') * 1)))) (@ addr 42)
      ((Word32[50]) ('GhostAssertions')) (@ addr 42)
    .. proven.
Step 82: case in (81) where the length of the sequence < 2
  Prove the number of visits to 67 is in {0 ..< 1}
    .. proven.
Step 83: 
  Prove the number of visits to 42 is in {0 ..< 1}
    .. proven.
Step 84: 
  Prove the number of visits to 199 is in {0 ..< 1}
    .. proven.
Step 85: 
  Prove the number of visits to 24 is in {0 ..< 1}
    .. proven.
Step 86: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 87: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 88: 
  Prove the number of visits to 131 is in {0 ..< 1}
    .. proven.
Step 89: 
  Prove the number of visits to 150 is in {0 ..< 1}
    .. proven.
Step 90: 
  Prove the number of visits to 162 is in {0 ..< 1}
    .. proven.
Step 91: 
  Prove the number of visits to 175 is in {0 ..< 1}
    .. proven.
Step 92: 
  prove all verification conditions
    .. proven.
Step 93: case in (81) where the length of the sequence is k2 + 2
  Prove the number of visits to 67 is in {k2 + 0 ..< k2 + 3}
    .. proven.
Step 94: 
  Prove the number of visits to 42 is in {k2 + 0 ..< k2 + 3}
    .. proven.
Step 95: 
  prove visits to 73 related to visits [2, 3, 4 ...] to 203
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 73)
      ((Word32) ('r4')) (@ addr 73)
      ((Word32) ('r8')) (@ addr 73)
      ((Word32) ('r14')) (@ addr 73)
      ((Word32) ('r5')) (@ addr 73)
      ((Word32) ('r0')) (@ addr 73)
      ((Word32) ('r9')) (@ addr 73)
      ((Word32) ('ret')) (@ addr 73)
      ((Word32) ('r2')) (@ addr 73)
      ((Word32) ('r11')) (@ addr 73)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 73)
      ((Word32) ('r13')) (@ addr 73)
      ((Word32) ('r10')) (@ addr 73)
      ((Mem) ('mem')) (@ addr 73)
      ((Word32) ('r6')) (@ addr 73)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 73)
      ((Word32) ('nirqs___int#v.1')) (@ addr 203)
      ((Word32) ('nirqs___int#v')) (@ addr 203)
      ((Mem) ('Mem.1')) (@ addr 203)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 203)
      ((Mem) ('Mem')) (@ addr 203)
      ((Word32[50]) ('GhostAssertions')) (@ addr 203)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 203)
    .. proven.
Step 96: case in (95) where the length of the sequence < 2
  Prove the number of visits to 73 is in {0 ..< 3}
    .. proven.
Step 97: 
  Prove the number of visits to 203 is in {0 ..< 4}
    .. proven.
Step 98: 
  prove visits to 78 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 78)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 78)
      ((Word32) ('r4')) (@ addr 78)
      ((Word32) ('r8')) (@ addr 78)
      ((Word32) ('r14')) (@ addr 78)
      ((Word32) ('r3')) (@ addr 78)
      ((Word32) ('r5')) (@ addr 78)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 78)
      ((Word32) ('r9')) (@ addr 78)
      ((Word32) ('ret')) (@ addr 78)
      ((Word32) ('r2')) (@ addr 78)
      ((Word32) ('r11')) (@ addr 78)
      ((Word32) ('r12')) (@ addr 78)
      ((Word32) ('r13')) (@ addr 78)
      ((Word32) ('r10')) (@ addr 78)
      ((Bool) (ROData('mem'))) (@ addr 78)
      ((Word32) ('r6')) (@ addr 78)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 78)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 99: case in (98) where the length of the sequence < 2
  Prove the number of visits to 78 is in {0 ..< 1}
    .. proven.
Step 100: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 101: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 102: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 103: 
  Prove the number of visits to 162 is in {0 ..< 1}
    .. proven.
Step 104: 
  Prove the number of visits to 175 is in {0 ..< 1}
    .. proven.
Step 105: 
  prove all verification conditions
    .. proven.
Step 106: case in (98) where the length of the sequence is b2 + 2
  Prove the number of visits to 78 is in {b2 + 0 ..< b2 + 3}
    .. proven.
Step 107: 
  Prove the number of visits to 28 is in {b2 + 0 ..< b2 + 3}
    .. proven.
Step 108: 
  prove visits to 83 related to visits to 20
    with equalities
      ((Mem) ('mem')) (@ addr 83)
      = ((Mem) ('Mem')) (@ addr 20)
    and with invariants
      ((Word32) ('r7')) (@ addr 83)
      ((Word32) ('r4')) (@ addr 83)
      ((Word32) ('r8')) (@ addr 83)
      ((Word32) ('r14')) (@ addr 83)
      ((Word32) ('r5')) (@ addr 83)
      ((Word32) ('r0')) (@ addr 83)
      ((Word32) ('r9')) (@ addr 83)
      ((Word32) ('ret')) (@ addr 83)
      ((Word32) ('r2')) (@ addr 83)
      ((Word32) ('r11')) (@ addr 83)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 83)
      ((Word32) ('r12')) (@ addr 83)
      ((Word32) ('r13')) (@ addr 83)
      ((Word32) ('r10')) (@ addr 83)
      ((Bool) (ROData('mem'))) (@ addr 83)
      ((Word32) ('r6')) (@ addr 83)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 83)
      ((Word32) (('loop#15#count' + ((0 - '#seq-visits') * 1)))) (@ addr 20)
      ((Word32) ('nirqs___int#v')) (@ addr 20)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 20)
      ((Word32[50]) ('GhostAssertions')) (@ addr 20)
    .. proven.
Step 109: case in (108) where the length of the sequence < 2
  Prove the number of visits to 83 is in {0 ..< 3}
    .. proven.
Step 110: 
  Prove the number of visits to 20 is in {0 ..< 3}
    .. proven.
Step 111: 
  Prove the number of visits to 175 is in {0 ..< 5}
    .. proven.
Step 112: 
  Prove the number of visits to 5 is in {0 ..< 6}
    .. proven.
Step 113: 
  prove all verification conditions
    .. proven.
Step 114: case in (108) where the length of the sequence is c2 + 2
  Prove the number of visits to 83 is in {c2 + 0 ..< c2 + 3}
    .. proven.
Step 115: 
  Prove the number of visits to 20 is in {c2 + 0 ..< c2 + 3}
    .. proven.
Step 116: 
  prove visits to 86 related to visits to 13
    with equalities
      ((Mem) ('mem')) (@ addr 86)
      = ((Mem) ('Mem')) (@ addr 13)
    and with invariants
      ((Word32) ('r7')) (@ addr 86)
      ((Word32) ('r4')) (@ addr 86)
      ((Word32) ('r8')) (@ addr 86)
      ((Word32) ('r14')) (@ addr 86)
      ((Word32) ('r5')) (@ addr 86)
      ((Word32) ('r0')) (@ addr 86)
      ((Word32) ('r9')) (@ addr 86)
      ((Word32) ('ret')) (@ addr 86)
      ((Word32) ('r2')) (@ addr 86)
      ((Word32) ('r11')) (@ addr 86)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 86)
      ((Word32) ('r12')) (@ addr 86)
      ((Word32) ('r13')) (@ addr 86)
      ((Word32) ('r10')) (@ addr 86)
      ((Bool) (ROData('mem'))) (@ addr 86)
      ((Word32) ('r6')) (@ addr 86)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 86)
      ((Word32) ('nirqs___int#v')) (@ addr 13)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 13)
      ((Word32[50]) ('GhostAssertions')) (@ addr 13)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
    .. proven.
Step 117: case in (116) where the length of the sequence < 2
  Prove the number of visits to 86 is in {0 ..< 1}
    .. proven.
Step 118: 
  Prove the number of visits to 13 is in {0 ..< 1}
    .. proven.
Step 119: 
  prove all verification conditions
    .. proven.
Step 120: case in (116) where the length of the sequence is i3 + 2
  Prove the number of visits to 86 is in {i3 + 0 ..< i3 + 3}
    .. proven.
Step 121: 
  Prove the number of visits to 13 is in {i3 + 0 ..< i3 + 3}
    .. proven.
Step 122: 
  prove all verification conditions
    .. proven.
Step 123: case in (95) where the length of the sequence is a2 + 2
  Prove the number of visits to 73 is in {a2 + 0 ..< a2 + 3}
    .. proven.
Step 124: 
  Prove the number of visits to 203 is in {a2 + 0 ..< a2 + 3}
    .. proven.
Step 125: 
  prove visits to 78 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 78)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 78)
      ((Word32) ('r4')) (@ addr 78)
      ((Word32) ('r8')) (@ addr 78)
      ((Word32) ('r14')) (@ addr 78)
      ((Word32) ('r3')) (@ addr 78)
      ((Word32) ('r5')) (@ addr 78)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 78)
      ((Word32) ('r9')) (@ addr 78)
      ((Word32) ('ret')) (@ addr 78)
      ((Word32) ('r2')) (@ addr 78)
      ((Word32) ('r11')) (@ addr 78)
      ((Word32) ('r12')) (@ addr 78)
      ((Word32) ('r13')) (@ addr 78)
      ((Word32) ('r10')) (@ addr 78)
      ((Bool) (ROData('mem'))) (@ addr 78)
      ((Word32) ('r6')) (@ addr 78)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 78)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 126: case in (125) where the length of the sequence < 2
  Prove the number of visits to 78 is in {0 ..< 1}
    .. proven.
Step 127: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 128: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 129: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 130: 
  Prove the number of visits to 162 is in {0 ..< 1}
    .. proven.
Step 131: 
  Prove the number of visits to 175 is in {0 ..< 1}
    .. proven.
Step 132: 
  prove all verification conditions
    .. proven.
Step 133: case in (125) where the length of the sequence is j3 + 2
  Prove the number of visits to 78 is in {j3 + 0 ..< j3 + 3}
    .. proven.
Step 134: 
  Prove the number of visits to 28 is in {j3 + 0 ..< j3 + 3}
    .. proven.
Step 135: 
  prove visits to 83 related to visits to 20
    with equalities
      ((Mem) ('mem')) (@ addr 83)
      = ((Mem) ('Mem')) (@ addr 20)
    and with invariants
      ((Word32) ('r7')) (@ addr 83)
      ((Word32) ('r4')) (@ addr 83)
      ((Word32) ('r8')) (@ addr 83)
      ((Word32) ('r14')) (@ addr 83)
      ((Word32) ('r5')) (@ addr 83)
      ((Word32) ('r0')) (@ addr 83)
      ((Word32) ('r9')) (@ addr 83)
      ((Word32) ('ret')) (@ addr 83)
      ((Word32) ('r2')) (@ addr 83)
      ((Word32) ('r11')) (@ addr 83)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 83)
      ((Word32) ('r12')) (@ addr 83)
      ((Word32) ('r13')) (@ addr 83)
      ((Word32) ('r10')) (@ addr 83)
      ((Bool) (ROData('mem'))) (@ addr 83)
      ((Word32) ('r6')) (@ addr 83)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 83)
      ((Word32) (('loop#15#count' + ((0 - '#seq-visits') * 1)))) (@ addr 20)
      ((Word32) ('nirqs___int#v')) (@ addr 20)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 20)
      ((Word32[50]) ('GhostAssertions')) (@ addr 20)
    .. proven.
Step 136: case in (135) where the length of the sequence < 2
  Prove the number of visits to 83 is in {0 ..< 3}
    .. proven.
Step 137: 
  Prove the number of visits to 20 is in {0 ..< 3}
    .. proven.
Step 138: 
  Prove the number of visits to 175 is in {0 ..< 5}
    .. proven.
Step 139: 
  Prove the number of visits to 5 is in {0 ..< 6}
    .. proven.
Step 140: 
  prove all verification conditions
    .. proven.
Step 141: case in (135) where the length of the sequence is k3 + 2
  Prove the number of visits to 83 is in {k3 + 0 ..< k3 + 3}
    .. proven.
Step 142: 
  Prove the number of visits to 20 is in {k3 + 0 ..< k3 + 3}
    .. proven.
Step 143: 
  prove visits to 86 related to visits to 13
    with equalities
      ((Mem) ('mem')) (@ addr 86)
      = ((Mem) ('Mem')) (@ addr 13)
    and with invariants
      ((Word32) ('r7')) (@ addr 86)
      ((Word32) ('r4')) (@ addr 86)
      ((Word32) ('r8')) (@ addr 86)
      ((Word32) ('r14')) (@ addr 86)
      ((Word32) ('r5')) (@ addr 86)
      ((Word32) ('r0')) (@ addr 86)
      ((Word32) ('r9')) (@ addr 86)
      ((Word32) ('ret')) (@ addr 86)
      ((Word32) ('r2')) (@ addr 86)
      ((Word32) ('r11')) (@ addr 86)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 86)
      ((Word32) ('r12')) (@ addr 86)
      ((Word32) ('r13')) (@ addr 86)
      ((Word32) ('r10')) (@ addr 86)
      ((Bool) (ROData('mem'))) (@ addr 86)
      ((Word32) ('r6')) (@ addr 86)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 86)
      ((Word32) ('nirqs___int#v')) (@ addr 13)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 13)
      ((Word32[50]) ('GhostAssertions')) (@ addr 13)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
    .. proven.
Step 144: case in (143) where the length of the sequence < 2
  Prove the number of visits to 86 is in {0 ..< 1}
    .. proven.
Step 145: 
  Prove the number of visits to 13 is in {0 ..< 1}
    .. proven.
Step 146: 
  prove all verification conditions
    .. proven.
Step 147: case in (143) where the length of the sequence is a3 + 2
  Prove the number of visits to 86 is in {a3 + 0 ..< a3 + 3}
    .. proven.
Step 148: 
  Prove the number of visits to 13 is in {a3 + 0 ..< a3 + 3}
    .. proven.
Step 149: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (dist_init (ASM) <= Kernel_C.dist_init (C)), time taken: 2185.59s
Testing Function pair Pairing (lockTLBEntryCritical (ASM) <= Kernel_C.lockTLBEntryCritical (C))
  (function pairing 24 of 48)
Skipping Pairing (lockTLBEntryCritical (ASM) <= Kernel_C.lockTLBEntryCritical (C)), underspecified C
Testing Function pair Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C))
  (function pairing 25 of 48)
Skipping Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C)), underspecified C
Testing Function pair Pairing (c_handle_fastpath_reply_recv (ASM) <= Kernel_C.c_handle_fastpath_reply_recv (C))
  (function pairing 26 of 48)
Skipping Pairing (c_handle_fastpath_reply_recv (ASM) <= Kernel_C.c_handle_fastpath_reply_recv (C)), underspecified ASM
Testing Function pair Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C))
  (function pairing 27 of 48)
 .. built problem, finding proof

**************************************
FATAL ERROR
Broken pipe

**************************************


**************************************
FATAL ERROR
Broken pipe

**************************************


**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [105, 27]
  (in problem)
Now doing proof search in 105 init case in problem.
Now doing proof search in 105 loop case in problem.
ProofNode ('Split', ((105, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 28)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 24)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (27, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'first_untyped_slot___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'device_memory___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_region_C#v.end_C')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_region_C#v.start_C'))], 2, 1), (ProofNode ('Restr', (105, ('Number', (0, 3))), (ProofNode ('Restr', (27, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (105, ('Offset', (0, 3))), (ProofNode ('Restr', (27, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 105 related to visits to 27
    with equalities
      ((Mem) ('mem')) (@ addr 105)
      = ((Mem) ('Mem')) (@ addr 27)
      ((Word32) ('r5')) (@ addr 105)
      = ((Word32) ('reg___struct_region_C#v.start_C')) (@ addr 27)
    and with invariants
      ((Word32) ('r13')) (@ addr 105)
      ((Word32) ('r10')) (@ addr 105)
      ((Word32) ('r9')) (@ addr 105)
      ((Word32) ('r6')) (@ addr 105)
      ((Word32) ('r7')) (@ addr 105)
      ((Word32) ('r8')) (@ addr 105)
      ((Word32) ('r11')) (@ addr 105)
      ((Word32) ('ret')) (@ addr 105)
      ((Bool) (ROData('mem'))) (@ addr 105)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 16))), ((Word32) (0))), ((Word32) (('r13' + 28))), ((Word32) (0))), ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 24))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 105)
      ((Word32) ('first_untyped_slot___unsigned_long#v')) (@ addr 27)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 27)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 27)
      ((Word32) ('device_memory___unsigned_long#v')) (@ addr 27)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 27)
      ((Word32) ('reg___struct_region_C#v.end_C')) (@ addr 27)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 105 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 27 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 105 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 27 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C)), time taken: 844.09s
Testing Function pair Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))
  (function pairing 28 of 48)
Aborting Problem (Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))), complex loop
Result ProblemAbort for pair Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C)), time taken: 2.91s
Testing Function pair Pairing (l_impl'dsb (ASM) <= r_impl'dsb (C))
  (function pairing 29 of 48)
Skipping Pairing (l_impl'dsb (ASM) <= r_impl'dsb (C)), underspecified C
Testing Function pair Pairing (halt (ASM) <= Kernel_C.halt (C))
  (function pairing 30 of 48)
Skipping Pairing (halt (ASM) <= Kernel_C.halt (C)), underspecified C
Testing Function pair Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C))
  (function pairing 31 of 48)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C)), time taken: 21.40s
Testing Function pair Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))
  (function pairing 32 of 48)
Aborting Problem (Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C)), time taken: 0.00s
Testing Function pair Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))
  (function pairing 33 of 48)
Aborting Problem (Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))): underspecified instruction'vmrs_r3_fpexc_E0003ED4
Result ProblemAbort for pair Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C)), time taken: 0.08s
Testing Function pair Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C))
  (function pairing 34 of 48)
 .. built problem, finding proof

**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [123, 21]
  (in problem)
Now doing proof search in 123 init case in problem.
Now doing proof search in 123 loop case in problem.
ProofNode ('Split', ((123, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 4)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (21, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'badge___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'epptr___ptr_to_struct_endpoint_C#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'queue___struct_tcb_queue_C#v.head_C')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v')), (Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'queue___struct_tcb_queue_C#v.end_C'))], 2, 1), (ProofNode ('Restr', (123, ('Number', (0, 3))), (ProofNode ('Restr', (21, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (123, ('Offset', (0, 3))), (ProofNode ('Restr', (21, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 123 related to visits to 21
    with equalities
      ((Mem) ('mem')) (@ addr 123)
      = ((Mem) ('Mem')) (@ addr 21)
      ((Word32) ('r10')) (@ addr 123)
      = ((Word32) ('queue___struct_tcb_queue_C#v.head_C')) (@ addr 21)
      ((Word32) ('r4')) (@ addr 123)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 21)
      ((Word32) ('r9')) (@ addr 123)
      = ((Word32) ('queue___struct_tcb_queue_C#v.end_C')) (@ addr 21)
    and with invariants
      ((Word32) ('r13')) (@ addr 123)
      ((Word32) ('r6')) (@ addr 123)
      ((Word32) ('r8')) (@ addr 123)
      ((Word32) ('r11')) (@ addr 123)
      ((Word32) ('r7')) (@ addr 123)
      ((Word32) ('ret')) (@ addr 123)
      ((Bool) (ROData('mem'))) (@ addr 123)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 4))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0))), ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 123)
      ((Word32) ('badge___unsigned_long#v')) (@ addr 21)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 21)
      ((Word32) ('epptr___ptr_to_struct_endpoint_C#v')) (@ addr 21)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 123 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 21 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 123 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 21 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C)), time taken: 289.54s
Testing Function pair Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C))
  (function pairing 35 of 48)
Skipping Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C)), underspecified C
Testing Function pair Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C))
  (function pairing 36 of 48)
 .. built problem, finding proof

**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [95, 268]
  (in problem)
Now doing proof search in 95 init case in problem.
Now doing proof search in 95 loop case in problem.
ProofNode ('Split', ((95, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (268, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v.1'), Expr ('Var', Type ('Word', 32), name = 'immediate___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'exposed___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#9#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (95, ('Number', (0, 3))), (ProofNode ('Restr', (268, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (95, ('Offset', (0, 3))), (ProofNode ('Restr', (268, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 95 related to visits to 268
    with equalities
      ((Mem) ('mem')) (@ addr 95)
      = ((Mem) ('Mem.1')) (@ addr 268)
    and with invariants
      ((Word32) ('r8')) (@ addr 95)
      ((Word32) ('r5')) (@ addr 95)
      ((Word32) ('r9')) (@ addr 95)
      ((Word32) ('ret')) (@ addr 95)
      ((Word32) ('r7')) (@ addr 95)
      ((Word32) ('r13')) (@ addr 95)
      ((Bool) (ROData('mem'))) (@ addr 95)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 95)
      ((Word32) ('slot___ptr_to_struct_cte_C#v.1')) (@ addr 268)
      ((Word32) ('immediate___unsigned_long#v')) (@ addr 268)
      ((Word32) ('exposed___unsigned_long#v')) (@ addr 268)
      ((Word32) ('slot___ptr_to_struct_cte_C#v')) (@ addr 268)
      ((Word32) (('loop#9#count' + ((0 - '#seq-visits') * 1)))) (@ addr 268)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 95 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 268 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 95 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 268 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C)), time taken: 2448.29s
Testing Function pair Pairing (create_kernel_untypeds (ASM) <= Kernel_C.create_kernel_untypeds (C))
  (function pairing 37 of 48)
 .. built problem, finding proof
Discovered that points [82 (loop head)] can be bounded
  (in problem)
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1712, in build_proof_rec
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1756, in build_proof_rec_with_restrs
    kind, must_find = must_find)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1785, in get_proof_split_limit
    hints = [limit, limit + 1], use_rep = mk_graph_slice (p))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 113, in find_split_limit
    assert not 'split limit found'
AssertionError
Result ProofEXCEPT for pair Pairing (create_kernel_untypeds (ASM) <= Kernel_C.create_kernel_untypeds (C)), time taken: 25.84s
Testing Function pair Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C))
  (function pairing 38 of 48)
 .. built problem, finding proof
Discovered a loop relation for split points [46, 6]
  (in problem)
Now doing proof search in 46 init case in problem.
Now doing proof search in 46 loop case in problem.
ProofNode ('Split', ((46, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r3')])])]), (6, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (46, ('Number', (0, 3))), (ProofNode ('Restr', (6, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (46, ('Offset', (0, 3))), (ProofNode ('Restr', (6, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 46 related to visits [2, 3, 4 ...] to 6
    with equalities
      ((Mem) ('mem')) (@ addr 46)
      = ((Mem) ('Mem')) (@ addr 6)
    and with invariants
      ((Word32) ('r4')) (@ addr 46)
      ((Word32) ('r8')) (@ addr 46)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 1)))) (@ addr 46)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 46)
      ((Word32) ('r13')) (@ addr 46)
      ((Word32) ('r5')) (@ addr 46)
      ((Word32) ('r9')) (@ addr 46)
      ((Word32) ('ret')) (@ addr 46)
      ((Word32) ('r2')) (@ addr 46)
      ((Word32) ('r11')) (@ addr 46)
      ((Word32) ('r1')) (@ addr 46)
      ((Word32) ('r10')) (@ addr 46)
      ((Bool) (ROData('mem'))) (@ addr 46)
      ((Word32) ('r6')) (@ addr 46)
      ((Word32) ('r7')) (@ addr 46)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 46)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r2')), ((Word32) ('r3')))))) (@ addr 46)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 6)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 6)
      ((Word32) ('size___unsigned_long#v')) (@ addr 6)
      ((Word32) ('src___ptr_to_char#v')) (@ addr 6)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 6)
      ((Word32[50]) ('GhostAssertions')) (@ addr 6)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 46 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 6 is in {0 ..< 4}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 46 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 6 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C)), time taken: 168.25s
Testing Function pair Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C))
  (function pairing 39 of 48)
 .. built problem, finding proof
Decided to case split at (38, 'ASM')
  (in problem)
Now doing proof search in true case (38 visited) in problem.
Now doing proof search in false case (38 not visited) in problem.
ProofNode ('CaseSplit', (38, 'ASM'), (ProofNode ('Restr', (38, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (38, ('Number', (0, 1))), (ProofNode ('Restr', (15, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 38 is visited
Step 2: case in (1) where 38 is visited
  Prove the number of visits to 38 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 38 is not visited
  Prove the number of visits to 38 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 15 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C)), time taken: 13.35s
Testing Function pair Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C))
  (function pairing 40 of 48)
 .. built problem, finding proof
Discovered that points [24 (loop head)] can be bounded
  (in problem)
Discovered that points [13 (loop head)] can be bounded
  (in problem)
Found a future induction at 4
Now doing proof search in problem.
Discovered a loop relation for split points [58, 9]
  (in problem)
Now doing proof search in 58 init case in problem.
Now doing proof search in 58 loop case in problem.
ProofNode ('Restr', (24, ('Number', (0, 5))), (ProofNode ('Restr', (13, ('Number', (0, 6))), (ProofNode ('SingleRevInduct', (4, ([Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'recvBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'sendBuf___ptr_to_unsigned_long#v'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])])], 1), (Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Num', Type ('Word', 32), val = 939528452)]), 4294967293)), (ProofNode ('Split', ((58, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (9, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'sendBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'recvBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (58, ('Number', (0, 3))), (ProofNode ('Restr', (9, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (58, ('Offset', (0, 3))), (ProofNode ('Restr', (9, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 24 is in {0 ..< 5}
    .. proven.
Step 2: 
  Prove the number of visits to 13 is in {0 ..< 6}
    .. proven.
Step 3: 
  Proving a predicate by future induction.
    proving these invariants by 1-induction
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('n___unsigned_long#v')) (@ addr 4)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 4)
      ((Word32) ('recvBuf___ptr_to_unsigned_long#v')) (@ addr 4)
      ((Word32[50]) ('GhostAssertions')) (@ addr 4)
      ((Word32) ('sendBuf___ptr_to_unsigned_long#v')) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))), ((Word32) ('i___unsigned_long#v'))), Less(((Word32) ((0 - WordCastSigned(1)))), ((Word32) ('i___unsigned_long#v')))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))), ((Word32) ('i___unsigned_long#v'))), Less(((Word32) ('i___unsigned_long#v')), ((Word32) ((0 - WordCastSigned(1)))))))) (@ addr 4)
    then establishing this predicate
      ((Bool) (Less(((Word32) ('n___unsigned_long#v')), ((Word32) (939528452))))) (@ addr 4)
    at large iterations (4294967293) and by back induction.
    .. proven.
Step 4: 
  prove visits to 58 related to visits to 9
    with equalities
      ((Mem) ('mem')) (@ addr 58)
      = ((Mem) ('Mem')) (@ addr 9)
    and with invariants
      ((Word32) ('r8')) (@ addr 58)
      ((Word32) ('r11')) (@ addr 58)
      ((Word32) ('r1')) (@ addr 58)
      ((Word32) ('r0')) (@ addr 58)
      ((Word32) ('r9')) (@ addr 58)
      ((Word32) ('ret')) (@ addr 58)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 4)))) (@ addr 58)
      ((Word32) ('r13')) (@ addr 58)
      ((Word32) ('r10')) (@ addr 58)
      ((Bool) (ROData('mem'))) (@ addr 58)
      ((Word32) ('r7')) (@ addr 58)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 4)))) (@ addr 58)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 58)
      ((Word32) ('sendBuf___ptr_to_unsigned_long#v')) (@ addr 9)
      ((Word32) ('n___unsigned_long#v')) (@ addr 9)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 9)
      ((Word32) ('recvBuf___ptr_to_unsigned_long#v')) (@ addr 9)
      ((Word32[50]) ('GhostAssertions')) (@ addr 9)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 9)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 58 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 9 is in {0 ..< 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is i + 2
  Prove the number of visits to 58 is in {i + 0 ..< i + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 9 is in {i + 0 ..< i + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C)), time taken: 235.45s
Testing Function pair Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C))
  (function pairing 41 of 48)
 .. built problem, finding proof

**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [46, 14]
  (in problem)
Now doing proof search in 46 init case in problem.
Now doing proof search in 46 loop case in problem.
ProofNode ('Split', ((46, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4096)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'ret_addr_input'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 32)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 4)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 36)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (14, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'do_map___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'f___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 12)])])])]), Expr ('Var', Type ('Word', 32), name = 'slot_pos_before___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'pv_offset___long#v')]), [(Expr ('Op', Type ('Word', 32), name = 'MemAcc', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'frame_cap___struct_cap_C#v.words_C.0')), (Expr ('Op', Type ('Word', 32), name = 'MemAcc', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 36)])]), Expr ('Var', Type ('Word', 32), name = 'frame_cap___struct_cap_C#v.words_C.1')), (Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (46, ('Number', (0, 3))), (ProofNode ('Restr', (14, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (46, ('Offset', (0, 3))), (ProofNode ('Restr', (14, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 46 related to visits to 14
    with equalities
      ((Word32) (MemAcc('stack', ('r13' + 32)))) (@ addr 46)
      = ((Word32) ('frame_cap___struct_cap_C#v.words_C.0')) (@ addr 14)
      ((Word32) (MemAcc('stack', ('r13' + 36)))) (@ addr 46)
      = ((Word32) ('frame_cap___struct_cap_C#v.words_C.1')) (@ addr 14)
      ((Mem) ('mem')) (@ addr 46)
      = ((Mem) ('Mem')) (@ addr 14)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 4096)))) (@ addr 46)
      ((Word32) ('r13')) (@ addr 46)
      ((Word32) ('r10')) (@ addr 46)
      ((Word32) ('r9')) (@ addr 46)
      ((Word32) ('r6')) (@ addr 46)
      ((Word32) ('r7')) (@ addr 46)
      ((Word32) ('r8')) (@ addr 46)
      ((Word32) ('ret_addr_input')) (@ addr 46)
      ((Bool) (ROData('mem'))) (@ addr 46)
      ((Word32) ('r5')) (@ addr 46)
      ((Word32) ('ret')) (@ addr 46)
      ((Word32) ('r11')) (@ addr 46)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 32))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0))), ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 4))), ((Word32) (0))), ((Word32) (('r13' + 36))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 46)
      ((Word32) ('do_map___unsigned_long#v')) (@ addr 14)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 14)
      ((Word32) (('f___unsigned_long#v' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast(12)))))) (@ addr 14)
      ((Word32) ('slot_pos_before___unsigned_long#v')) (@ addr 14)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.1')) (@ addr 14)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 14)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.0')) (@ addr 14)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 14)
      ((Word32) ('reg___struct_region_C#v.end_C')) (@ addr 14)
      ((Word32) ('pv_offset___long#v')) (@ addr 14)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 46 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 14 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 46 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 14 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C)), time taken: 810.02s
Testing Function pair Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))
  (function pairing 42 of 48)
Aborting Problem (Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (slowpath (ASM) <= Kernel_C.slowpath (C)), time taken: 0.00s
Testing Function pair Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C))
  (function pairing 43 of 48)
 .. built problem, finding proof
Decided to case split at (60, 'ASM')
  (in problem)
Now doing proof search in true case (60 visited) in problem.
Discovered that points [454 (loop head)] can be bounded
  (in true case (60 visited) in problem)
Discovered that points [443 (loop head)] can be bounded
  (in true case (60 visited) in problem)
Discovered that points [381 (loop head)] can be bounded
  (in true case (60 visited) in problem)
Discovered that points [370 (loop head)] can be bounded
  (in true case (60 visited) in problem)
Now doing proof search in false case (60 not visited) in problem.
Decided to case split at (54, 'ASM')
  (in false case (60 not visited) in problem)
Now doing proof search in true case (54 visited) in false case (60 not visited) in problem.
Discovered that points [454 (loop head)] can be bounded
  (in true case (54 visited) in false case (60 not visited) in problem)
Discovered that points [443 (loop head)] can be bounded
  (in true case (54 visited) in false case (60 not visited) in problem)
Discovered that points [381 (loop head)] can be bounded
  (in true case (54 visited) in false case (60 not visited) in problem)
Discovered a loop relation for split points [50, 375]
  (in true case (54 visited) in false case (60 not visited) in problem)
Now doing proof search in 50 init case in true case (54 visited) in false case (60 not visited) in problem.
Now doing proof search in 50 loop case in true case (54 visited) in false case (60 not visited) in problem.
Now doing proof search in false case (54 not visited) in false case (60 not visited) in problem.
Decided to case split at (57, 'ASM')
  (in false case (54 not visited) in false case (60 not visited) in problem)
Now doing proof search in true case (57 visited) in false case (54 not visited) in false case (60 not visited) in problem.
Discovered that points [454 (loop head)] can be bounded
  (in true case (57 visited) in false case (54 not visited) in false case (60 not visited) in problem)
Discovered that points [443 (loop head)] can be bounded
  (in true case (57 visited) in false case (54 not visited) in false case (60 not visited) in problem)
Discovered that points [381 (loop head)] can be bounded
  (in true case (57 visited) in false case (54 not visited) in false case (60 not visited) in problem)
Discovered that points [370 (loop head)] can be bounded
  (in true case (57 visited) in false case (54 not visited) in false case (60 not visited) in problem)
Now doing proof search in false case (57 not visited) in false case (54 not visited) in false case (60 not visited) in problem.
Discovered that points [454 (loop head)] can be bounded
  (in false case (57 not visited) in false case (54 not visited) in false case (60 not visited) in problem)
Discovered that points [443 (loop head)] can be bounded
  (in false case (57 not visited) in false case (54 not visited) in false case (60 not visited) in problem)
Discovered that points [381 (loop head)] can be bounded
  (in false case (57 not visited) in false case (54 not visited) in false case (60 not visited) in problem)
Discovered that points [370 (loop head)] can be bounded
  (in false case (57 not visited) in false case (54 not visited) in false case (60 not visited) in problem)
Discovered that points [237 (loop head)] can be bounded
  (in false case (57 not visited) in false case (54 not visited) in false case (60 not visited) in problem)
ProofNode ('CaseSplit', (60, 'ASM'), (ProofNode ('Restr', (60, ('Number', (1, 2))), (ProofNode ('Restr', (454, ('Number', (0, 1))), (ProofNode ('Restr', (443, ('Number', (0, 1))), (ProofNode ('Restr', (381, ('Number', (0, 1))), (ProofNode ('Restr', (370, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (60, ('Number', (0, 1))), (ProofNode ('Restr', (17, ('Number', (0, 1))), (ProofNode ('CaseSplit', (54, 'ASM'), (ProofNode ('Restr', (54, ('Number', (1, 2))), (ProofNode ('Restr', (454, ('Number', (0, 1))), (ProofNode ('Restr', (443, ('Number', (0, 1))), (ProofNode ('Restr', (381, ('Number', (0, 6))), (ProofNode ('Split', ((50, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (375, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'receiver___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'receiveIPCBuffer___ptr_to_unsigned_long#v.6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'length___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'receiveIPCBuffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'sender___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'sender___ptr_to_struct_tcb_C#v.1'), Expr ('Var', Type ('Word', 32), name = 'id___anonymous_enum#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.6')), (Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'ret__unsigned_long#v.1'))], 2, 1), (ProofNode ('Restr', (50, ('Number', (0, 1))), (ProofNode ('Restr', (375, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (50, ('Offset', (0, 3))), (ProofNode ('Restr', (375, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)), ProofNode ('Restr', (54, ('Number', (0, 1))), (ProofNode ('Restr', (24, ('Number', (0, 1))), (ProofNode ('CaseSplit', (57, 'ASM'), (ProofNode ('Restr', (57, ('Number', (1, 2))), (ProofNode ('Restr', (454, ('Number', (0, 5))), (ProofNode ('Restr', (443, ('Number', (0, 2))), (ProofNode ('Restr', (381, ('Number', (0, 1))), (ProofNode ('Restr', (370, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (57, ('Number', (0, 1))), (ProofNode ('Restr', (35, ('Number', (0, 1))), (ProofNode ('Restr', (454, ('Number', (0, 1))), (ProofNode ('Restr', (443, ('Number', (0, 1))), (ProofNode ('Restr', (381, ('Number', (0, 1))), (ProofNode ('Restr', (370, ('Number', (0, 1))), (ProofNode ('Restr', (237, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 60 is visited
Step 2: case in (1) where 60 is visited
  Prove the number of visits to 60 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 454 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 443 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 381 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 370 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (1) where 60 is not visited
  Prove the number of visits to 60 is in {0 ..< 1}
    .. proven.
Step 9: 
  Prove the number of visits to 17 is in {0 ..< 1}
    .. proven.
Step 10: 
  case split on whether 54 is visited
Step 11: case in (10) where 54 is visited
  Prove the number of visits to 54 is in {1 ..< 2}
    .. proven.
Step 12: 
  Prove the number of visits to 454 is in {0 ..< 1}
    .. proven.
Step 13: 
  Prove the number of visits to 443 is in {0 ..< 1}
    .. proven.
Step 14: 
  Prove the number of visits to 381 is in {0 ..< 6}
    .. proven.
Step 15: 
  prove visits to 50 related to visits to 375
    with equalities
      ((Mem) ('mem')) (@ addr 50)
      = ((Mem) ('Mem.6')) (@ addr 375)
      ((Word32) ('r12')) (@ addr 50)
      = ((Word32) ('ret__unsigned_long#v.1')) (@ addr 375)
    and with invariants
      ((Word32) ('r8')) (@ addr 50)
      ((Word32) ('r14')) (@ addr 50)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 50)
      ((Word32) ('r13')) (@ addr 50)
      ((Word32) ('r5')) (@ addr 50)
      ((Word32) ('r0')) (@ addr 50)
      ((Word32) ('r9')) (@ addr 50)
      ((Word32) ('ret')) (@ addr 50)
      ((Word32) ('r2')) (@ addr 50)
      ((Word32) ('r11')) (@ addr 50)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 50)
      ((Word32) ('r10')) (@ addr 50)
      ((Bool) (ROData('mem'))) (@ addr 50)
      ((Word32) ('r6')) (@ addr 50)
      ((Word32) ('r7')) (@ addr 50)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 50)
      ((Word32) ('receiver___ptr_to_struct_tcb_C#v')) (@ addr 375)
      ((Word32) ('receiveIPCBuffer___ptr_to_unsigned_long#v.6')) (@ addr 375)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 375)
      ((Word32) ('length___unsigned_long#v')) (@ addr 375)
      ((Word32) ('receiveIPCBuffer___ptr_to_unsigned_long#v')) (@ addr 375)
      ((Word32) ('sender___ptr_to_struct_tcb_C#v')) (@ addr 375)
      ((Word32[50]) ('GhostAssertions.6')) (@ addr 375)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 375)
      ((Word32) ('sender___ptr_to_struct_tcb_C#v.1')) (@ addr 375)
      ((Word32) ('id___anonymous_enum#v')) (@ addr 375)
    .. proven.
Step 16: case in (15) where the length of the sequence < 2
  Prove the number of visits to 50 is in {0 ..< 1}
    .. proven.
Step 17: 
  Prove the number of visits to 375 is in {0 ..< 2}
    .. proven.
Step 18: 
  prove all verification conditions
    .. proven.
Step 19: case in (15) where the length of the sequence is i + 2
  Prove the number of visits to 50 is in {i + 0 ..< i + 3}
    .. proven.
Step 20: 
  Prove the number of visits to 375 is in {i + 0 ..< i + 3}
    .. proven.
Step 21: 
  prove all verification conditions
    .. proven.
Step 22: case in (10) where 54 is not visited
  Prove the number of visits to 54 is in {0 ..< 1}
    .. proven.
Step 23: 
  Prove the number of visits to 24 is in {0 ..< 1}
    .. proven.
Step 24: 
  case split on whether 57 is visited
Step 25: case in (24) where 57 is visited
  Prove the number of visits to 57 is in {1 ..< 2}
    .. proven.
Step 26: 
  Prove the number of visits to 454 is in {0 ..< 5}
    .. proven.
Step 27: 
  Prove the number of visits to 443 is in {0 ..< 2}
    .. proven.
Step 28: 
  Prove the number of visits to 381 is in {0 ..< 1}
    .. proven.
Step 29: 
  Prove the number of visits to 370 is in {0 ..< 1}
    .. proven.
Step 30: 
  prove all verification conditions
    .. proven.
Step 31: case in (24) where 57 is not visited
  Prove the number of visits to 57 is in {0 ..< 1}
    .. proven.
Step 32: 
  Prove the number of visits to 35 is in {0 ..< 1}
    .. proven.
Step 33: 
  Prove the number of visits to 454 is in {0 ..< 1}
    .. proven.
Step 34: 
  Prove the number of visits to 443 is in {0 ..< 1}
    .. proven.
Step 35: 
  Prove the number of visits to 381 is in {0 ..< 1}
    .. proven.
Step 36: 
  Prove the number of visits to 370 is in {0 ..< 1}
    .. proven.
Step 37: 
  Prove the number of visits to 237 is in {0 ..< 1}
    .. proven.
Step 38: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C)), time taken: 358.12s
Testing Function pair Pairing (strlcat (ASM) <= Kernel_C.strlcat (C))
  (function pairing 44 of 48)
 .. built problem, finding proof
Discovered a loop relation for split points [38, 29]
  (in problem)
Now doing proof search in 38 init case in problem.
Discovered a loop relation for split points [53, 5]
  (in 38 init case in problem)
Now doing proof search in 53 init case in 38 init case in problem.
Now doing proof search in 53 loop case in 38 init case in problem.
Now doing proof search in 38 loop case in problem.
Discovered a loop relation for split points [53, 5]
  (in 38 loop case in problem)
Now doing proof search in 53 init case in 38 loop case in problem.
Now doing proof search in 53 loop case in 38 loop case in problem.
ProofNode ('Split', ((38, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3')])])]), (29, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#24#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [], 2, 1), (ProofNode ('Restr', (38, ('Number', (0, 3))), (ProofNode ('Restr', (29, ('Number', (0, 3))), (ProofNode ('Split', ((53, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r3')])])]), (5, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (53, ('Number', (0, 3))), (ProofNode ('Restr', (5, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (53, ('Offset', (0, 3))), (ProofNode ('Restr', (5, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (38, ('Offset', (0, 3))), (ProofNode ('Restr', (29, ('Offset', (0, 3))), (ProofNode ('Split', ((53, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r3')])])]), (5, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (53, ('Number', (0, 3))), (ProofNode ('Restr', (5, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (53, ('Offset', (0, 3))), (ProofNode ('Restr', (5, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 38 related to visits to 29
    with equalities
    and with invariants
      ((Word32) ('r4')) (@ addr 38)
      ((Word32) ('r2')) (@ addr 38)
      ((Word32) ('r8')) (@ addr 38)
      ((Word32) ('r14')) (@ addr 38)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 38)
      ((Word32) ('r13')) (@ addr 38)
      ((Word32) ('r5')) (@ addr 38)
      ((Word32) ('r9')) (@ addr 38)
      ((Word32) ('ret')) (@ addr 38)
      ((Word32) ('r11')) (@ addr 38)
      ((Word32) ('r1')) (@ addr 38)
      ((Word32) ('r10')) (@ addr 38)
      ((Mem) ('mem')) (@ addr 38)
      ((Word32) ('r6')) (@ addr 38)
      ((Word32) ('r7')) (@ addr 38)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 38)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r14')), ((Word32) ('r3')))))) (@ addr 38)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 29)
      ((Word32) ('size___unsigned_long#v')) (@ addr 29)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 29)
      ((Word32) ('src___ptr_to_char#v')) (@ addr 29)
      ((Word32) (('loop#24#count' + ((0 - '#seq-visits') * 1)))) (@ addr 29)
      ((Mem) ('Mem')) (@ addr 29)
      ((Word32[50]) ('GhostAssertions')) (@ addr 29)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 38 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 29 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove visits to 53 related to visits to 5
    with equalities
      ((Mem) ('mem')) (@ addr 53)
      = ((Mem) ('Mem')) (@ addr 5)
    and with invariants
      ((Word32) ('r4')) (@ addr 53)
      ((Word32) ('r2')) (@ addr 53)
      ((Word32) ('r8')) (@ addr 53)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 1)))) (@ addr 53)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 53)
      ((Word32) ('r5')) (@ addr 53)
      ((Word32) ('r9')) (@ addr 53)
      ((Word32) ('ret')) (@ addr 53)
      ((Word32) ('r11')) (@ addr 53)
      ((Word32) ('r13')) (@ addr 53)
      ((Word32) ('r10')) (@ addr 53)
      ((Bool) (ROData('mem'))) (@ addr 53)
      ((Word32) ('r6')) (@ addr 53)
      ((Word32) ('r7')) (@ addr 53)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 53)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r4')), ((Word32) ('r3')))))) (@ addr 53)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 5)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 5)
      ((Word32) ('size___unsigned_long#v')) (@ addr 5)
      ((Word32) (('src___ptr_to_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 5)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 5)
      ((Word32[50]) ('GhostAssertions')) (@ addr 5)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 53 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 5 is in {0 ..< 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 53 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 5 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 38 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 29 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 53 related to visits to 5
    with equalities
      ((Mem) ('mem')) (@ addr 53)
      = ((Mem) ('Mem')) (@ addr 5)
    and with invariants
      ((Word32) ('r4')) (@ addr 53)
      ((Word32) ('r2')) (@ addr 53)
      ((Word32) ('r8')) (@ addr 53)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 1)))) (@ addr 53)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 53)
      ((Word32) ('r5')) (@ addr 53)
      ((Word32) ('r9')) (@ addr 53)
      ((Word32) ('ret')) (@ addr 53)
      ((Word32) ('r11')) (@ addr 53)
      ((Word32) ('r13')) (@ addr 53)
      ((Word32) ('r10')) (@ addr 53)
      ((Bool) (ROData('mem'))) (@ addr 53)
      ((Word32) ('r6')) (@ addr 53)
      ((Word32) ('r7')) (@ addr 53)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 53)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r4')), ((Word32) ('r3')))))) (@ addr 53)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 5)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 5)
      ((Word32) ('size___unsigned_long#v')) (@ addr 5)
      ((Word32) (('src___ptr_to_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 5)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 5)
      ((Word32[50]) ('GhostAssertions')) (@ addr 5)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 53 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 5 is in {0 ..< 3}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 53 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 5 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (strlcat (ASM) <= Kernel_C.strlcat (C)), time taken: 2011.87s
Testing Function pair Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))
  (function pairing 45 of 48)
Aborting Problem (Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))), complex loop
Result ProblemAbort for pair Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C)), time taken: 17.58s
Testing Function pair Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C))
  (function pairing 46 of 48)
Skipping Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C)), underspecified ASM
Testing Function pair Pairing (memset (ASM) <= Kernel_C.memset (C))
  (function pairing 47 of 48)
 .. built problem, finding proof
Decided to case split at (25, 'ASM')
  (in problem)
Now doing proof search in true case (25 visited) in problem.
Discovered a loop relation for split points [37, 12]
  (in true case (25 visited) in problem)
Now doing proof search in 37 init case in true case (25 visited) in problem.
Now doing proof search in 37 loop case in true case (25 visited) in problem.
Now doing proof search in false case (25 not visited) in problem.
Discovered that points [5 (loop head)] can be bounded
  (in false case (25 not visited) in problem)
Discovered that points [55 (loop head)] can be bounded
  (in false case (25 not visited) in problem)
ProofNode ('CaseSplit', (25, 'ASM'), (ProofNode ('Restr', (25, ('Number', (1, 2))), (ProofNode ('Restr', (13, ('Number', (1, 2))), (ProofNode ('Split', ((37, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (12, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#5#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 's___ptr_to_void#v'), Expr ('Var', Type ('Word', 32), name = 'c___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'p___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (37, ('Number', (0, 3))), (ProofNode ('Restr', (12, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (37, ('Offset', (0, 3))), (ProofNode ('Restr', (12, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (25, ('Number', (0, 1))), (ProofNode ('Restr', (13, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (55, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),))))
 .. proof found.
Step 1: 
  case split on whether 25 is visited
Step 2: case in (1) where 25 is visited
  Prove the number of visits to 25 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 13 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove visits to 37 related to visits to 12
    with equalities
      ((Mem) ('mem')) (@ addr 37)
      = ((Mem) ('Mem')) (@ addr 12)
    and with invariants
      ((Word32) ('r4')) (@ addr 37)
      ((Word32) ('r8')) (@ addr 37)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 37)
      ((Word32) ('r13')) (@ addr 37)
      ((Word32) ('r5')) (@ addr 37)
      ((Word32) ('r9')) (@ addr 37)
      ((Word32) ('ret')) (@ addr 37)
      ((Word32) ('r2')) (@ addr 37)
      ((Word32) ('r11')) (@ addr 37)
      ((Word32) ('r1')) (@ addr 37)
      ((Word32) ('r10')) (@ addr 37)
      ((Bool) (ROData('mem'))) (@ addr 37)
      ((Word32) ('r6')) (@ addr 37)
      ((Word32) ('r7')) (@ addr 37)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 37)
      ((Word32) (('loop#5#count' + ((0 - '#seq-visits') * 1)))) (@ addr 12)
      ((Word32) (('n___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 12)
      ((Word32) ('s___ptr_to_void#v')) (@ addr 12)
      ((Word32) ('c___unsigned_long#v')) (@ addr 12)
      ((Word32[50]) ('GhostAssertions')) (@ addr 12)
      ((Word32) (('p___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 12)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 37 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 12 is in {0 ..< 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is i + 2
  Prove the number of visits to 37 is in {i + 0 ..< i + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 12 is in {i + 0 ..< i + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where 25 is not visited
  Prove the number of visits to 25 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 13 is in {0 ..< 1}
    .. proven.
Step 13: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 14: 
  Prove the number of visits to 55 is in {0 ..< 1}
    .. proven.
Step 15: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (memset (ASM) <= Kernel_C.memset (C)), time taken: 42.05s
Testing Function pair Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C))
  (function pairing 48 of 48)
 .. built problem, finding proof

**************************************
FATAL ERROR
Broken pipe

**************************************

Decided to case split at (368, 'ASM')
  (in problem)
Now doing proof search in true case (368 visited) in problem.
Now doing proof search in false case (368 not visited) in problem.
Decided to case split at (367, 'ASM')
  (in false case (368 not visited) in problem)
Now doing proof search in true case (367 visited) in false case (368 not visited) in problem.
Now doing proof search in false case (367 not visited) in false case (368 not visited) in problem.
Decided to case split at (248, 'ASM')
  (in false case (367 not visited) in false case (368 not visited) in problem)
Now doing proof search in true case (248 visited) in false case (367 not visited) in false case (368 not visited) in problem.
Discovered that points [3213 (loop head)] can be bounded
  (in true case (248 visited) in false case (367 not visited) in false case (368 not visited) in problem)
Discovered that points [3164 (loop head)] can be bounded
  (in true case (248 visited) in false case (367 not visited) in false case (368 not visited) in problem)
Discovered that points [113 (loop head)] can be bounded
  (in true case (248 visited) in false case (367 not visited) in false case (368 not visited) in problem)
Discovered that points [3318 (loop head)] can be bounded
  (in true case (248 visited) in false case (367 not visited) in false case (368 not visited) in problem)
Discovered that points [3267 (loop head)] can be bounded
  (in true case (248 visited) in false case (367 not visited) in false case (368 not visited) in problem)
Result ProofNoSplit for pair Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C)), time taken: 1307.45s
Results: [('Pairing (memcpy (ASM) <= Kernel_C.memcpy (C))', 'True'), ('Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C))', 'True'), ('Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C))', 'True'), ('Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C))', 'ProblemAbort'), ('Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C))', 'ProblemAbort'), ('Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C))', 'True'), ('Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C))', 'True'), ('Pairing (sendIPC (ASM) <= Kernel_C.sendIPC (C))', 'True'), ('Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))', 'ProblemAbort'), ('Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C))', 'ProblemAbort'), ('Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))', 'ProblemAbort'), ('Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C))', 'ProblemAbort'), ('Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C))', 'ProofEXCEPT'), ('Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C))', 'True'), ('Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C))', 'True'), ("Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C))", 'None'), ("Pairing (l_impl'isb (ASM) <= r_impl'isb (C))", 'None'), ('Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))', 'ProblemAbort'), ('Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C))', 'True'), ('Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C))', 'True'), ("Pairing (l_impl'wfi (ASM) <= r_impl'wfi (C))", 'None'), ('Pairing (restore_user_context (ASM) <= Kernel_C.restore_user_context (C))', 'None'), ('Pairing (dist_init (ASM) <= Kernel_C.dist_init (C))', 'True'), ('Pairing (lockTLBEntryCritical (ASM) <= Kernel_C.lockTLBEntryCritical (C))', 'None'), ("Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C))", 'None'), ('Pairing (c_handle_fastpath_reply_recv (ASM) <= Kernel_C.c_handle_fastpath_reply_recv (C))', 'None'), ('Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C))', 'True'), ('Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))', 'ProblemAbort'), ("Pairing (l_impl'dsb (ASM) <= r_impl'dsb (C))", 'None'), ('Pairing (halt (ASM) <= Kernel_C.halt (C))', 'None'), ('Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C))', 'True'), ('Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))', 'ProblemAbort'), ('Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))', 'ProblemAbort'), ('Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C))', 'True'), ("Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C))", 'None'), ('Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C))', 'True'), ('Pairing (create_kernel_untypeds (ASM) <= Kernel_C.create_kernel_untypeds (C))', 'ProofEXCEPT'), ('Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C))', 'True'), ('Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C))', 'True'), ('Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C))', 'True'), ('Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C))', 'True'), ('Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))', 'ProblemAbort'), ('Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C))', 'True'), ('Pairing (strlcat (ASM) <= Kernel_C.strlcat (C))', 'True'), ('Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))', 'ProblemAbort'), ('Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C))', 'None'), ('Pairing (memset (ASM) <= Kernel_C.memset (C))', 'True'), ('Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C))', 'ProofNoSplit')]
Result summary:
  - 22 proofs checked
  - 23 proofs skipped
  - failures: ['Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C))', 'Pairing (create_kernel_untypeds (ASM) <= Kernel_C.create_kernel_untypeds (C))', 'Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C))']
  - 234 pairings omitted: ['Pairing (get_avail_p_regs (ASM) <= Kernel_C.get_avail_p_regs (C))', 'Pairing (setupCallerCap (ASM) <= Kernel_C.setupCallerCap (C))', 'Pairing (suspend (ASM) <= Kernel_C.suspend (C))', 'Pairing (memzero (ASM) <= Kernel_C.memzero (C))', 'Pairing (ensureNoChildren (ASM) <= Kernel_C.ensureNoChildren (C))', 'Pairing (hasCancelSendRights (ASM) <= Kernel_C.hasCancelSendRights (C))', 'Pairing (activate_global_pd (ASM) <= Kernel_C.activate_global_pd (C))', 'Pairing (deriveCap (ASM) <= Kernel_C.deriveCap (C))', 'Pairing (deletedIRQHandler (ASM) <= Kernel_C.deletedIRQHandler (C))', 'Pairing (bi_finalise (ASM) <= Kernel_C.bi_finalise (C))', 'Pairing (APFromVMRights (ASM) <= Kernel_C.APFromVMRights (C))', 'Pairing (invokeCNodeDelete (ASM) <= Kernel_C.invokeCNodeDelete (C))', 'Pairing (decodeSetPriority (ASM) <= Kernel_C.decodeSetPriority (C))', 'Pairing (loadCapTransfer (ASM) <= Kernel_C.loadCapTransfer (C))', 'Pairing (cpu_iface_init (ASM) <= Kernel_C.cpu_iface_init (C))', 'Pairing (performInvocation_Endpoint (ASM) <= Kernel_C.performInvocation_Endpoint (C))', 'Pairing (handleInterruptEntry (ASM) <= Kernel_C.handleInterruptEntry (C))', 'Pairing (invokeCNodeRevoke (ASM) <= Kernel_C.invokeCNodeRevoke (C))', 'Pairing (cteDeleteOne (ASM) <= Kernel_C.cteDeleteOne (C))', 'Pairing (Arch_configureIdleThread (ASM) <= Kernel_C.Arch_configureIdleThread (C))', 'Pairing (Arch_getObjectSize (ASM) <= Kernel_C.Arch_getObjectSize (C))', 'Pairing (setThreadState (ASM) <= Kernel_C.setThreadState (C))', 'Pairing (slotCapLongRunningDelete (ASM) <= Kernel_C.slotCapLongRunningDelete (C))', 'Pairing (plat_cleanCache (ASM) <= Kernel_C.plat_cleanCache (C))', 'Pairing (Arch_deriveCap (ASM) <= Kernel_C.Arch_deriveCap (C))', 'Pairing (tcbSchedEnqueue (ASM) <= Kernel_C.tcbSchedEnqueue (C))', 'Pairing (isValidVTableRoot (ASM) <= Kernel_C.isValidVTableRoot (C))', 'Pairing (possibleSwitchTo (ASM) <= Kernel_C.possibleSwitchTo (C))', 'Pairing (deleteASIDPool (ASM) <= Kernel_C.deleteASIDPool (C))', 'Pairing (pageTableMapped (ASM) <= Kernel_C.pageTableMapped (C))', 'Pairing (strnlen (ASM) <= Kernel_C.strnlen (C))', 'Pairing (makeUserPDE (ASM) <= Kernel_C.makeUserPDE (C))', 'Pairing (getHWASID (ASM) <= Kernel_C.getHWASID (C))', 'Pairing (cpu_initLocalIRQController (ASM) <= Kernel_C.cpu_initLocalIRQController (C))', 'Pairing (restart (ASM) <= Kernel_C.restart (C))', 'Pairing (Arch_performTransfer (ASM) <= Kernel_C.Arch_performTransfer (C))', 'Pairing (handleRecv (ASM) <= Kernel_C.handleRecv (C))', 'Pairing (arch_clean_invalidate_caches (ASM) <= Kernel_C.arch_clean_invalidate_caches (C))', 'Pairing (invokeCNodeInsert (ASM) <= Kernel_C.invokeCNodeInsert (C))', 'Pairing (isIRQActive (ASM) <= Kernel_C.isIRQActive (C))', 'Pairing (cleanInvalidateCacheRange_RAM (ASM) <= Kernel_C.cleanInvalidateCacheRange_RAM (C))', 'Pairing (armv_init_user_access (ASM) <= Kernel_C.armv_init_user_access (C))', 'Pairing (cteInsert (ASM) <= Kernel_C.cteInsert (C))', 'Pairing (create_domain_cap (ASM) <= Kernel_C.create_domain_cap (C))', 'Pairing (cancelSignal (ASM) <= Kernel_C.cancelSignal (C))', 'Pairing (decodeCNodeInvocation (ASM) <= Kernel_C.decodeCNodeInvocation (C))', 'Pairing (configureIdleThread (ASM) <= Kernel_C.configureIdleThread (C))', 'Pairing (maybe_alloc_extra_bi (ASM) <= Kernel_C.maybe_alloc_extra_bi (C))', 'Pairing (handleFault (ASM) <= Kernel_C.handleFault (C))', 'Pairing (lookupPTSlot (ASM) <= Kernel_C.lookupPTSlot (C))', 'Pairing (arch_clean_invalidate_L1_caches (ASM) <= Kernel_C.arch_clean_invalidate_L1_caches (C))', 'Pairing (invokeUntyped_Retype (ASM) <= Kernel_C.invokeUntyped_Retype (C))', 'Pairing (cleanInvalidateL1Caches (ASM) <= Kernel_C.cleanInvalidateL1Caches (C))', 'Pairing (handleInvocation (ASM) <= Kernel_C.handleInvocation (C))', 'Pairing (lookupIPCBuffer (ASM) <= Kernel_C.lookupIPCBuffer (C))', 'Pairing (deleteASID (ASM) <= Kernel_C.deleteASID (C))', 'Pairing (populate_bi_frame (ASM) <= Kernel_C.populate_bi_frame (C))', 'Pairing (sameRegionAs (ASM) <= Kernel_C.sameRegionAs (C))', 'Pairing (resolveAddressBits (ASM) <= Kernel_C.resolveAddressBits (C))', 'Pairing (isFinalCapability (ASM) <= Kernel_C.isFinalCapability (C))', 'Pairing (invokeIRQHandler_SetIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_SetIRQHandler (C))', 'Pairing (Arch_sameRegionAs (ASM) <= Kernel_C.Arch_sameRegionAs (C))', 'Pairing (invokeCNodeRotate (ASM) <= Kernel_C.invokeCNodeRotate (C))', 'Pairing (cteSwap (ASM) <= Kernel_C.cteSwap (C))', 'Pairing (decodeSetMCPriority (ASM) <= Kernel_C.decodeSetMCPriority (C))', 'Pairing (decodeSetIPCBuffer (ASM) <= Kernel_C.decodeSetIPCBuffer (C))', 'Pairing (insert_region (ASM) <= Kernel_C.insert_region (C))', 'Pairing (invalidateCacheRange_RAM (ASM) <= Kernel_C.invalidateCacheRange_RAM (C))', 'Pairing (write_slot (ASM) <= Kernel_C.write_slot (C))', 'Pairing (doNBRecvFailedTransfer (ASM) <= Kernel_C.doNBRecvFailedTransfer (C))', 'Pairing (schedule (ASM) <= Kernel_C.schedule (C))', 'Pairing (Arch_updateCapData (ASM) <= Kernel_C.Arch_updateCapData (C))', 'Pairing (handleReply (ASM) <= Kernel_C.handleReply (C))', 'Pairing (cleanCacheRange_PoU (ASM) <= Kernel_C.cleanCacheRange_PoU (C))', 'Pairing (calculate_extra_bi_size_bits (ASM) <= Kernel_C.calculate_extra_bi_size_bits (C))', 'Pairing (getExtraCPtr (ASM) <= Kernel_C.getExtraCPtr (C))', 'Pairing (setVMRootForFlush (ASM) <= Kernel_C.setVMRootForFlush (C))', 'Pairing (Arch_decodeInvocation (ASM) <= Kernel_C.Arch_decodeInvocation (C))', 'Pairing (Arch_finaliseCap (ASM) <= Kernel_C.Arch_finaliseCap (C))', 'Pairing (decodeSetSchedParams (ASM) <= Kernel_C.decodeSetSchedParams (C))', 'Pairing (unbindMaybeNotification (ASM) <= Kernel_C.unbindMaybeNotification (C))', 'Pairing (unbindNotification (ASM) <= Kernel_C.unbindNotification (C))', 'Pairing (invokeCNodeCancelBadgedSends (ASM) <= Kernel_C.invokeCNodeCancelBadgedSends (C))', 'Pairing (Arch_sameObjectAs (ASM) <= Kernel_C.Arch_sameObjectAs (C))', 'Pairing (activateThread (ASM) <= Kernel_C.activateThread (C))', 'Pairing (finaliseCap (ASM) <= Kernel_C.finaliseCap (C))', 'Pairing (invokeTCB_CopyRegisters (ASM) <= Kernel_C.invokeTCB_CopyRegisters (C))', 'Pairing (cancelAllSignals (ASM) <= Kernel_C.cancelAllSignals (C))', 'Pairing (provide_cap (ASM) <= Kernel_C.provide_cap (C))', 'Pairing (create_it_asid_pool (ASM) <= Kernel_C.create_it_asid_pool (C))', 'Pairing (lookupSlot (ASM) <= Kernel_C.lookupSlot (C))', 'Pairing (invokeIRQControl (ASM) <= Kernel_C.invokeIRQControl (C))', 'Pairing (updateCapData (ASM) <= Kernel_C.updateCapData (C))', 'Pairing (Arch_isFrameType (ASM) <= Kernel_C.Arch_isFrameType (C))', 'Pairing (lookupSourceSlot (ASM) <= Kernel_C.lookupSourceSlot (C))', 'Pairing (idle_thread (ASM) <= Kernel_C.idle_thread (C))', 'Pairing (handleUserLevelFault (ASM) <= Kernel_C.handleUserLevelFault (C))', 'Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C))', 'Pairing (Arch_maskCapRights (ASM) <= Kernel_C.Arch_maskCapRights (C))', 'Pairing (lookupCapAndSlot (ASM) <= Kernel_C.lookupCapAndSlot (C))', 'Pairing (isMDBParentOf (ASM) <= Kernel_C.isMDBParentOf (C))', 'Pairing (sameObjectAs (ASM) <= Kernel_C.sameObjectAs (C))', 'Pairing (invalidateCacheRange_I (ASM) <= Kernel_C.invalidateCacheRange_I (C))', 'Pairing (cleanCaches_PoU (ASM) <= Kernel_C.cleanCaches_PoU (C))', 'Pairing (initL2Cache (ASM) <= Kernel_C.initL2Cache (C))', 'Pairing (invokeCNodeMove (ASM) <= Kernel_C.invokeCNodeMove (C))', 'Pairing (findFreeHWASID (ASM) <= Kernel_C.findFreeHWASID (C))', 'Pairing (maskVMRights (ASM) <= Kernel_C.maskVMRights (C))', 'Pairing (decodeSetSpace (ASM) <= Kernel_C.decodeSetSpace (C))', 'Pairing (create_initial_thread (ASM) <= Kernel_C.create_initial_thread (C))', 'Pairing (create_it_address_space (ASM) <= Kernel_C.create_it_address_space (C))', 'Pairing (invokeIRQHandler_ClearIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_ClearIRQHandler (C))', 'Pairing (doNormalTransfer (ASM) <= Kernel_C.doNormalTransfer (C))', 'Pairing (decodeCopyRegisters (ASM) <= Kernel_C.decodeCopyRegisters (C))', 'Pairing (tcbEPDequeue (ASM) <= Kernel_C.tcbEPDequeue (C))', 'Pairing (lockTLBEntry (ASM) <= Kernel_C.lockTLBEntry (C))', 'Pairing (cteRevoke (ASM) <= Kernel_C.cteRevoke (C))', 'Pairing (write_it_asid_pool (ASM) <= Kernel_C.write_it_asid_pool (C))', 'Pairing (lookupCap (ASM) <= Kernel_C.lookupCap (C))', 'Pairing (preemptionPoint (ASM) <= Kernel_C.preemptionPoint (C))', 'Pairing (copyGlobalMappings (ASM) <= Kernel_C.copyGlobalMappings (C))', 'Pairing (create_ipcbuf_frame_cap (ASM) <= Kernel_C.create_ipcbuf_frame_cap (C))', 'Pairing (replyFromKernel_error (ASM) <= Kernel_C.replyFromKernel_error (C))', 'Pairing (doReplyTransfer (ASM) <= Kernel_C.doReplyTransfer (C))', 'Pairing (setMCPriority (ASM) <= Kernel_C.setMCPriority (C))', 'Pairing (doFaultTransfer (ASM) <= Kernel_C.doFaultTransfer (C))', 'Pairing (Arch_activateIdleThread (ASM) <= Kernel_C.Arch_activateIdleThread (C))', 'Pairing (ensureEmptySlot (ASM) <= Kernel_C.ensureEmptySlot (C))', 'Pairing (Arch_handleFaultReply (ASM) <= Kernel_C.Arch_handleFaultReply (C))', 'Pairing (str_to_long (ASM) <= Kernel_C.str_to_long (C))', 'Pairing (init_core_state (ASM) <= Kernel_C.init_core_state (C))', 'Pairing (deletingIRQHandler (ASM) <= Kernel_C.deletingIRQHandler (C))', 'Pairing (strncmp (ASM) <= Kernel_C.strncmp (C))', 'Pairing (handleVMFaultEvent (ASM) <= Kernel_C.handleVMFaultEvent (C))', 'Pairing (invokeTCB_NotificationControl (ASM) <= Kernel_C.invokeTCB_NotificationControl (C))', 'Pairing (flushSpace (ASM) <= Kernel_C.flushSpace (C))', 'Pairing (Arch_decodeIRQControlInvocation (ASM) <= Kernel_C.Arch_decodeIRQControlInvocation (C))', 'Pairing (decodeBindNotification (ASM) <= Kernel_C.decodeBindNotification (C))', 'Pairing (handleDoubleFault (ASM) <= Kernel_C.handleDoubleFault (C))', 'Pairing (decodeTCBInvocation (ASM) <= Kernel_C.decodeTCBInvocation (C))', 'Pairing (map_kernel_devices (ASM) <= Kernel_C.map_kernel_devices (C))', 'Pairing (setDomain (ASM) <= Kernel_C.setDomain (C))', 'Pairing (handleInterrupt (ASM) <= Kernel_C.handleInterrupt (C))', 'Pairing (map_kernel_frame (ASM) <= Kernel_C.map_kernel_frame (C))', 'Pairing (reserve_region (ASM) <= Kernel_C.reserve_region (C))', 'Pairing (decodeIRQHandlerInvocation (ASM) <= Kernel_C.decodeIRQHandlerInvocation (C))', 'Pairing (create_device_untypeds (ASM) <= Kernel_C.create_device_untypeds (C))', 'Pairing (getReceiveSlots (ASM) <= Kernel_C.getReceiveSlots (C))', 'Pairing (create_mapped_it_frame_cap (ASM) <= Kernel_C.create_mapped_it_frame_cap (C))', 'Pairing (create_root_cnode (ASM) <= Kernel_C.create_root_cnode (C))', 'Pairing (unmapPage (ASM) <= Kernel_C.unmapPage (C))', 'Pairing (handleFaultReply (ASM) <= Kernel_C.handleFaultReply (C))', 'Pairing (scheduleChooseNewThread (ASM) <= Kernel_C.scheduleChooseNewThread (C))', 'Pairing (insertNewCap (ASM) <= Kernel_C.insertNewCap (C))', 'Pairing (completeSignal (ASM) <= Kernel_C.completeSignal (C))', 'Pairing (flushPage (ASM) <= Kernel_C.flushPage (C))', 'Pairing (cleanCacheRange_RAM (ASM) <= Kernel_C.cleanCacheRange_RAM (C))', 'Pairing (lookupPDSlot (ASM) <= Kernel_C.lookupPDSlot (C))', 'Pairing (Arch_decodeTransfer (ASM) <= Kernel_C.Arch_decodeTransfer (C))', 'Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C))', 'Pairing (doIPCTransfer (ASM) <= Kernel_C.doIPCTransfer (C))', 'Pairing (setNextPC (ASM) <= Kernel_C.setNextPC (C))', 'Pairing (c_handle_interrupt (ASM) <= Kernel_C.c_handle_interrupt (C))', 'Pairing (unmapPageTable (ASM) <= Kernel_C.unmapPageTable (C))', 'Pairing (tcbEPAppend (ASM) <= Kernel_C.tcbEPAppend (C))', 'Pairing (emptySlot (ASM) <= Kernel_C.emptySlot (C))', 'Pairing (decodeDomainInvocation (ASM) <= Kernel_C.decodeDomainInvocation (C))', 'Pairing (replyFromKernel_success_empty (ASM) <= Kernel_C.replyFromKernel_success_empty (C))', 'Pairing (setIRQState (ASM) <= Kernel_C.setIRQState (C))', 'Pairing (decodeUnbindNotification (ASM) <= Kernel_C.decodeUnbindNotification (C))', 'Pairing (alloc_rootserver_obj (ASM) <= Kernel_C.alloc_rootserver_obj (C))', 'Pairing (Arch_switchToIdleThread (ASM) <= Kernel_C.Arch_switchToIdleThread (C))', 'Pairing (chooseThread (ASM) <= Kernel_C.chooseThread (C))', 'Pairing (checkValidIPCBuffer (ASM) <= Kernel_C.checkValidIPCBuffer (C))', 'Pairing (create_bi_frame_cap (ASM) <= Kernel_C.create_bi_frame_cap (C))', 'Pairing (tcbSchedDequeue (ASM) <= Kernel_C.tcbSchedDequeue (C))', 'Pairing (rescheduleRequired (ASM) <= Kernel_C.rescheduleRequired (C))', 'Pairing (setPriority (ASM) <= Kernel_C.setPriority (C))', 'Pairing (findPDForASID (ASM) <= Kernel_C.findPDForASID (C))', 'Pairing (performInvocation_Notification (ASM) <= Kernel_C.performInvocation_Notification (C))', 'Pairing (setupReplyMaster (ASM) <= Kernel_C.setupReplyMaster (C))', 'Pairing (decodeWriteRegisters (ASM) <= Kernel_C.decodeWriteRegisters (C))', 'Pairing (invokeIRQHandler_AckIRQ (ASM) <= Kernel_C.invokeIRQHandler_AckIRQ (C))', 'Pairing (invokeCNodeSaveCaller (ASM) <= Kernel_C.invokeCNodeSaveCaller (C))', 'Pairing (maskCapRights (ASM) <= Kernel_C.maskCapRights (C))', 'Pairing (flushTable (ASM) <= Kernel_C.flushTable (C))', 'Pairing (isIOSpaceFrameCap (ASM) <= Kernel_C.isIOSpaceFrameCap (C))', 'Pairing (arch_get_n_paging (ASM) <= Kernel_C.arch_get_n_paging (C))', 'Pairing (lookupTargetSlot (ASM) <= Kernel_C.lookupTargetSlot (C))', 'Pairing (invalidateTLBByASID (ASM) <= Kernel_C.invalidateTLBByASID (C))', 'Pairing (setExtraBadge (ASM) <= Kernel_C.setExtraBadge (C))', 'Pairing (handleVMFault (ASM) <= Kernel_C.handleVMFault (C))', 'Pairing (receiveSignal (ASM) <= Kernel_C.receiveSignal (C))', 'Pairing (Arch_prepareThreadDelete (ASM) <= Kernel_C.Arch_prepareThreadDelete (C))', 'Pairing (setIRQTrigger (ASM) <= Kernel_C.setIRQTrigger (C))', 'Pairing (initTimer (ASM) <= Kernel_C.initTimer (C))', 'Pairing (initIRQController (ASM) <= Kernel_C.initIRQController (C))', 'Pairing (branchFlushRange (ASM) <= Kernel_C.branchFlushRange (C))', 'Pairing (create_rootserver_objects (ASM) <= Kernel_C.create_rootserver_objects (C))', 'Pairing (invokeTCB_ThreadControl (ASM) <= Kernel_C.invokeTCB_ThreadControl (C))', 'Pairing (invokeTCB_Resume (ASM) <= Kernel_C.invokeTCB_Resume (C))', 'Pairing (Arch_postModifyRegisters (ASM) <= Kernel_C.Arch_postModifyRegisters (C))', 'Pairing (arm_errata (ASM) <= Kernel_C.arm_errata (C))', 'Pairing (cteMove (ASM) <= Kernel_C.cteMove (C))', 'Pairing (getObjectSize (ASM) <= Kernel_C.getObjectSize (C))', 'Pairing (get_num_avail_p_regs (ASM) <= Kernel_C.get_num_avail_p_regs (C))', 'Pairing (timerTick (ASM) <= Kernel_C.timerTick (C))', 'Pairing (bindNotification (ASM) <= Kernel_C.bindNotification (C))', 'Pairing (switchToThread (ASM) <= Kernel_C.switchToThread (C))', 'Pairing (scheduleTCB (ASM) <= Kernel_C.scheduleTCB (C))', 'Pairing (deleteCallerCap (ASM) <= Kernel_C.deleteCallerCap (C))', 'Pairing (handleUnknownSyscall (ASM) <= Kernel_C.handleUnknownSyscall (C))', 'Pairing (sendFaultIPC (ASM) <= Kernel_C.sendFaultIPC (C))', 'Pairing (lookupExtraCaps (ASM) <= Kernel_C.lookupExtraCaps (C))', 'Pairing (doFlush (ASM) <= Kernel_C.doFlush (C))', 'Pairing (create_unmapped_it_frame_cap (ASM) <= Kernel_C.create_unmapped_it_frame_cap (C))', 'Pairing (capSwapForDelete (ASM) <= Kernel_C.capSwapForDelete (C))', 'Pairing (loadHWASID (ASM) <= Kernel_C.loadHWASID (C))', 'Pairing (decodeReadRegisters (ASM) <= Kernel_C.decodeReadRegisters (C))', 'Pairing (tcbSchedAppend (ASM) <= Kernel_C.tcbSchedAppend (C))', 'Pairing (invokeTCB_Suspend (ASM) <= Kernel_C.invokeTCB_Suspend (C))', 'Pairing (lookupSlotForCNodeOp (ASM) <= Kernel_C.lookupSlotForCNodeOp (C))', 'Pairing (char_to_long (ASM) <= Kernel_C.char_to_long (C))', 'Pairing (decodeTCBConfigure (ASM) <= Kernel_C.decodeTCBConfigure (C))', 'Pairing (decodeInvocation (ASM) <= Kernel_C.decodeInvocation (C))', 'Pairing (cancelAllIPC (ASM) <= Kernel_C.cancelAllIPC (C))', 'Pairing (invalidateASIDEntry (ASM) <= Kernel_C.invalidateASIDEntry (C))', 'Pairing (getRestartPC (ASM) <= Kernel_C.getRestartPC (C))', 'Pairing (Arch_createObject (ASM) <= Kernel_C.Arch_createObject (C))', 'Pairing (createObject (ASM) <= Kernel_C.createObject (C))', 'Pairing (lookupPivotSlot (ASM) <= Kernel_C.lookupPivotSlot (C))', 'Pairing (performInvocation_Reply (ASM) <= Kernel_C.performInvocation_Reply (C))', 'Pairing (switchToIdleThread (ASM) <= Kernel_C.switchToIdleThread (C))', 'Pairing (create_idle_thread (ASM) <= Kernel_C.create_idle_thread (C))']

real    213m26.522s
user    806m27.941s
sys     15m55.880s
warning: you did not specify '--add-root'; the result might be removed by the garbage collector
/nix/store/knrpwl9wbq41b0fc8kr6lhsbp0pd3wl6-graph-refine-wip2
