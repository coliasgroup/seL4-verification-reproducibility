this derivation will be built:
  /nix/store/cmg11v7lm1v8c5l1qnwspqwsxh585zwi-graph-refine-all-with-solverlist-new.drv
waiting for lock on '/nix/store/w7zas7m3j3p6vdwilfmaq9dcaz9pxljk-graph-refine-all-with-solverlist-new'...
building '/nix/store/cmg11v7lm1v8c5l1qnwspqwsxh585zwi-graph-refine-all-with-solverlist-new.drv'...
Loading syntax from ./CFunctions.txt
Loaded 835 functions, 75 structs, 0 globals.
Loading syntax from ./ASMFunctions.txt
Missing nodes after calls to instruction'isb_sy_E0000C18
  in ['fpsimd_HWCapTest']
Missing nodes after calls to restore_user_context
  in ['slowpath', 'c_handle_data_fault', 'c_handle_interrupt', 'c_handle_undefined_instruction']
Missing nodes after calls to halt
  in ['activateThread', 'handleReply', 'arm_reset_exception', 'completeSignal', 'doFlush']
Missing nodes after calls to instruction'ldr_pc_pc_20_e0010038_arm_vector_table_0x38_E001001C
  in ['arm_vector_table']
Warning: dead arc in c_handle_syscall: 71 -> 3758164096
  (follows Basic node!)
Warning: dead arc in c_handle_syscall: 73 -> 3758164096
  (follows Basic node!)
Warning: dead arc in arm_fiq_exception: 7 -> 3758162208
  (follows Basic node!)
Warning: dead arc in arm_fiq_exception: 9 -> 3758162208
  (follows Basic node!)
Warning: dead arc in c_handle_instruction_fault: 3758162396 -> 3758162400
  (follows Basic node!)
Warning: dead arc in _start: 3758096388 -> 3758096392
  (follows Basic node!)
Loaded 491 functions, 0 structs, 0 globals.
Pseudo-Compiling.
Doing stack/inst logic.
Warning: asm instruction name: formatting: "asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"
Warning: asm instruction name: formatting: "asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"
Function 'init_kernel' contains unhandled instructions:
  ["instruction'vmsr_fpexc_r3_E0004B48", "instruction'vmrs_r3_fpexc_E0004B40"]
Function 'Arch_switchToThread' contains unhandled instructions:
  ["instruction'strex_r0_r1_r3_E0011338"]
Function 'Kernel_C.fpsimd_HWCapTest' contains unhandled instructions:
  ["asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"]
Function 'arm_vector_table' contains unhandled instructions:
  ["instruction'ldr_pc_pc_24_e0010020_arm_vector_table_0x20_E0010000", "instruction'ldr_pc_pc_24_e001002c_arm_vector_table_0x2c_E001000C", "instruction'ldr_pc_pc_20_e0010038_arm_vector_table_0x38_E001001C", "instruction'ldr_pc_pc_24_e0010024_arm_vector_table_0x24_E0010004", "instruction'ldr_pc_pc_24_e0010030_arm_vector_table_0x30_E0010010", "instruction'ldr_pc_pc_24_e0010028_arm_vector_table_0x28_E0010008", "instruction'ldr_pc_pc_20_e0010034_arm_vector_table_0x34_E0010018", "instruction'ldr_pc_pc_4_e0010020_arm_vector_table_0x20_E0010014"]
Function 'arm_undefined_inst_exception' contains unhandled instructions:
  ["instruction'cps_19_E0010040", "instruction'srsia_sp_19_E001003C", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E0010044"]
Function 'arm_data_abort_exception' contains unhandled instructions:
  ["instruction'cps_19_E00100BC", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E00100C0", "instruction'srsia_sp_19_E00100B8"]
Function 'Kernel_C.supportsAsyncExceptions' contains unhandled instructions:
  ["asm_instruction'.fpu_vfp\\nvmsr_fpexc,_%0", "asm_instruction'.fpu_vfp\\nvmrs_%0,_fpexc"]
Function 'Kernel_C.clearEnFPEXC' contains unhandled instructions:
  ["asm_instruction'.fpu_vfp\\nvmsr_fpexc,_%0", "asm_instruction'.fpu_vfp\\nvmrs_%0,_fpexc"]
Function 'arm_irq_exception' contains unhandled instructions:
  ["instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E00100F4", "instruction'cps_19_E00100F0", "instruction'srsia_sp_19_E00100EC"]
Function 'fpsimd_HWCapTest' contains unhandled instructions:
  ["instruction'vmrs_r3_fpexc_E0000C38", "instruction'vmsr_fpexc_r3_E0000C34", "instruction'vmrs_r3_fpexc_E0000C2C"]
Function '_start' contains unhandled instructions:
  ["instruction'cps_23_E0000034", "instruction'cps_19_E000003C"]
Function 'arm_prefetch_abort_exception' contains unhandled instructions:
  ["instruction'cps_19_E001008C", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E0010090", "instruction'srsia_sp_19_E0010088"]
Function 'halt' contains unhandled instructions:
  ["instruction'cpsid_aif_E00109DC"]
Checking.
Checking 284 function pair problems
Testing Function pair Pairing (cpu_iface_init (ASM) <= Kernel_C.cpu_iface_init (C))
  (function pairing 1 of 284)
 .. built problem, finding proof
Discovered that points [23 (loop head)] can be bounded
  (in problem)
Discovered a loop relation for split points [44, 9]
  (in problem)
Now doing proof search in 44 init case in problem.
Now doing proof search in 44 loop case in problem.
ProofNode ('Restr', (23, ('Number', (0, 6))), (ProofNode ('Split', ((44, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r3')]), (9, (0, 1), [Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (44, ('Number', (0, 1))), (ProofNode ('Restr', (9, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (44, ('Offset', (0, 1))), (ProofNode ('Restr', (9, ('Offset', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),))
 .. proof found.
Step 1: 
  Prove the number of visits to 23 is in {0 ..< 6}
    .. proven.
Step 2: 
  prove visits to 44 related to visits to 9
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 44)
      ((Word32) ('r4')) (@ addr 44)
      ((Word32) ('r8')) (@ addr 44)
      ((Word32) ('r14')) (@ addr 44)
      ((Word32) ('r5')) (@ addr 44)
      ((Word32) ('r0')) (@ addr 44)
      ((Word32) ('r9')) (@ addr 44)
      ((Word32) ('ret')) (@ addr 44)
      ((Word32) ('r2')) (@ addr 44)
      ((Word32) ('r11')) (@ addr 44)
      ((Word32) ('r13')) (@ addr 44)
      ((Word32) ('r10')) (@ addr 44)
      ((Bool) (ROData('mem'))) (@ addr 44)
      ((Word32) ('r6')) (@ addr 44)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 44)
      ((Mem) ('mem')) (@ addr 44)
      ((Word32) ('r1')) (@ addr 44)
      ((Word32) ('r3')) (@ addr 44)
      ((Word32[50]) ('GhostAssertions')) (@ addr 9)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 9)
    .. proven.
Step 3: case in (2) where the length of the sequence < 2
  Prove the number of visits to 44 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 9 is in {0 ..< 1}
    .. proven.
Step 5: 
  prove all verification conditions
    .. proven.
Step 6: case in (2) where the length of the sequence is i + 2
  Prove the number of visits to 44 is in {i + 0 ..< i + 1}
    .. proven.
Step 7: 
  Prove the number of visits to 9 is in {i + 0 ..< i + 1}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cpu_iface_init (ASM) <= Kernel_C.cpu_iface_init (C)), time taken: 20.38s
Testing Function pair Pairing (invokeCNodeCancelBadgedSends (ASM) <= Kernel_C.invokeCNodeCancelBadgedSends (C))
  (function pairing 2 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeCancelBadgedSends (ASM) <= Kernel_C.invokeCNodeCancelBadgedSends (C)), time taken: 0.95s
Testing Function pair Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))
  (function pairing 3 of 284)
Aborting Problem (Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C)), time taken: 0.00s
Testing Function pair Pairing (invokeIRQControl (ASM) <= Kernel_C.invokeIRQControl (C))
  (function pairing 4 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeIRQControl (ASM) <= Kernel_C.invokeIRQControl (C)), time taken: 1.52s
Testing Function pair Pairing (decodeBindNotification (ASM) <= Kernel_C.decodeBindNotification (C))
  (function pairing 5 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeBindNotification (ASM) <= Kernel_C.decodeBindNotification (C)), time taken: 11.97s
Testing Function pair Pairing (decodeTCBInvocation (ASM) <= Kernel_C.decodeTCBInvocation (C))
  (function pairing 6 of 284)
 .. built problem, finding proof
Decided to case split at (123, 'ASM')
  (in problem)
Now doing proof search in true case (123 visited) in problem.
Now doing proof search in false case (123 not visited) in problem.
Decided to case split at (127, 'ASM')
  (in false case (123 not visited) in problem)
Now doing proof search in true case (127 visited) in false case (123 not visited) in problem.
Now doing proof search in false case (127 not visited) in false case (123 not visited) in problem.
Decided to case split at (136, 'ASM')
  (in false case (127 not visited) in false case (123 not visited) in problem)
Now doing proof search in true case (136 visited) in false case (127 not visited) in false case (123 not visited) in problem.
Now doing proof search in false case (136 not visited) in false case (127 not visited) in false case (123 not visited) in problem.
Decided to case split at (132, 'ASM')
  (in false case (136 not visited) in false case (127 not visited) in false case (123 not visited) in problem)
Now doing proof search in true case (132 visited) in false case (136 not visited) in false case (127 not visited) in false case (123 not visited) in problem.
Now doing proof search in false case (132 not visited) in false case (136 not visited) in false case (127 not visited) in false case (123 not visited) in problem.
Decided to case split at (117, 'ASM')
  (in false case (132 not visited) in false case (136 not visited) in false case (127 not visited) in false case (123 not visited) in problem)
Now doing proof search in true case (117 visited) in false case (132 not visited) in false case (136 not visited) in false case (127 not visited) in false case (123 not visited) in problem.
Now doing proof search in false case (117 not visited) in false case (132 not visited) in false case (136 not visited) in false case (127 not visited) in false case (123 not visited) in problem.
Decided to case split at (113, 'ASM')
  (in false case (117 not visited) in false case (132 not visited) in false case (136 not visited) in false case (127 not visited) in false case (123 not visited) in problem)
Now doing proof search in true case (113 visited) in false case (117 not visited) in false case (132 not visited) in false case (136 not visited) in false case (127 not visited) in false case (123 not visited) in problem.
Now doing proof search in false case (113 not visited) in false case (117 not visited) in false case (132 not visited) in false case (136 not visited) in false case (127 not visited) in false case (123 not visited) in problem.
Decided to case split at (108, 'ASM')
  (in false case (113 not visited) in false case (117 not visited) in false case (132 not visited) in false case (136 not visited) in false case (127 not visited) in false case (123 not visited) in problem)
Now doing proof search in true case (108 visited) in false case (113 not visited) in false case (117 not visited) in false case (132 not visited) in false case (136 not visited) in false case (127 not visited) in false case (123 not visited) in problem.
Now doing proof search in false case (108 not visited) in false case (113 not visited) in false case (117 not visited) in false case (132 not visited) in false case (136 not visited) in false case (127 not visited) in false case (123 not visited) in problem.
Decided to case split at (104, 'ASM')
  (in false case (108 not visited) in false case (113 not visited) in false case (117 not visited) in false case (132 not visited) in false case (136 not visited) in false case (127 not visited) in false case (123 not visited) in problem)
Now doing proof search in true case (104 visited) in false case (108 not visited) in false case (113 not visited) in false case (117 not visited) in false case (132 not visited) in false case (136 not visited) in false case (127 not visited) in false case (123 not visited) in problem.
Now doing proof search in false case (104 not visited) in false case (108 not visited) in false case (113 not visited) in false case (117 not visited) in false case (132 not visited) in false case (136 not visited) in false case (127 not visited) in false case (123 not visited) in problem.
ProofNode ('CaseSplit', (123, 'ASM'), (ProofNode ('Restr', (123, ('Number', (1, 2))), (ProofNode ('Restr', (18, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (123, ('Number', (0, 1))), (ProofNode ('Restr', (18, ('Number', (0, 1))), (ProofNode ('CaseSplit', (127, 'ASM'), (ProofNode ('Restr', (127, ('Number', (1, 2))), (ProofNode ('Restr', (25, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (127, ('Number', (0, 1))), (ProofNode ('Restr', (25, ('Number', (0, 1))), (ProofNode ('CaseSplit', (136, 'ASM'), (ProofNode ('Restr', (136, ('Number', (1, 2))), (ProofNode ('Restr', (49, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (136, ('Number', (0, 1))), (ProofNode ('Restr', (49, ('Number', (0, 1))), (ProofNode ('CaseSplit', (132, 'ASM'), (ProofNode ('Restr', (132, ('Number', (1, 2))), (ProofNode ('Restr', (46, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (132, ('Number', (0, 1))), (ProofNode ('Restr', (46, ('Number', (0, 1))), (ProofNode ('CaseSplit', (117, 'ASM'), (ProofNode ('Restr', (117, ('Number', (1, 2))), (ProofNode ('Restr', (43, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (117, ('Number', (0, 1))), (ProofNode ('Restr', (43, ('Number', (0, 1))), (ProofNode ('CaseSplit', (113, 'ASM'), (ProofNode ('Restr', (113, ('Number', (1, 2))), (ProofNode ('Restr', (40, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (113, ('Number', (0, 1))), (ProofNode ('Restr', (40, ('Number', (0, 1))), (ProofNode ('CaseSplit', (108, 'ASM'), (ProofNode ('Restr', (108, ('Number', (1, 2))), (ProofNode ('Restr', (37, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (108, ('Number', (0, 1))), (ProofNode ('Restr', (37, ('Number', (0, 1))), (ProofNode ('CaseSplit', (104, 'ASM'), (ProofNode ('Restr', (104, ('Number', (1, 2))), (ProofNode ('Restr', (34, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (104, ('Number', (0, 1))), (ProofNode ('Restr', (34, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)))),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 123 is visited
Step 2: case in (1) where 123 is visited
  Prove the number of visits to 123 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 18 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 123 is not visited
  Prove the number of visits to 123 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 18 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 127 is visited
Step 8: case in (7) where 127 is visited
  Prove the number of visits to 127 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 25 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 127 is not visited
  Prove the number of visits to 127 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 25 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 136 is visited
Step 14: case in (13) where 136 is visited
  Prove the number of visits to 136 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 49 is in {1 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where 136 is not visited
  Prove the number of visits to 136 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 49 is in {0 ..< 1}
    .. proven.
Step 19: 
  case split on whether 132 is visited
Step 20: case in (19) where 132 is visited
  Prove the number of visits to 132 is in {1 ..< 2}
    .. proven.
Step 21: 
  Prove the number of visits to 46 is in {1 ..< 2}
    .. proven.
Step 22: 
  prove all verification conditions
    .. proven.
Step 23: case in (19) where 132 is not visited
  Prove the number of visits to 132 is in {0 ..< 1}
    .. proven.
Step 24: 
  Prove the number of visits to 46 is in {0 ..< 1}
    .. proven.
Step 25: 
  case split on whether 117 is visited
Step 26: case in (25) where 117 is visited
  Prove the number of visits to 117 is in {1 ..< 2}
    .. proven.
Step 27: 
  Prove the number of visits to 43 is in {1 ..< 2}
    .. proven.
Step 28: 
  prove all verification conditions
    .. proven.
Step 29: case in (25) where 117 is not visited
  Prove the number of visits to 117 is in {0 ..< 1}
    .. proven.
Step 30: 
  Prove the number of visits to 43 is in {0 ..< 1}
    .. proven.
Step 31: 
  case split on whether 113 is visited
Step 32: case in (31) where 113 is visited
  Prove the number of visits to 113 is in {1 ..< 2}
    .. proven.
Step 33: 
  Prove the number of visits to 40 is in {1 ..< 2}
    .. proven.
Step 34: 
  prove all verification conditions
    .. proven.
Step 35: case in (31) where 113 is not visited
  Prove the number of visits to 113 is in {0 ..< 1}
    .. proven.
Step 36: 
  Prove the number of visits to 40 is in {0 ..< 1}
    .. proven.
Step 37: 
  case split on whether 108 is visited
Step 38: case in (37) where 108 is visited
  Prove the number of visits to 108 is in {1 ..< 2}
    .. proven.
Step 39: 
  Prove the number of visits to 37 is in {1 ..< 2}
    .. proven.
Step 40: 
  prove all verification conditions
    .. proven.
Step 41: case in (37) where 108 is not visited
  Prove the number of visits to 108 is in {0 ..< 1}
    .. proven.
Step 42: 
  Prove the number of visits to 37 is in {0 ..< 1}
    .. proven.
Step 43: 
  case split on whether 104 is visited
Step 44: case in (43) where 104 is visited
  Prove the number of visits to 104 is in {1 ..< 2}
    .. proven.
Step 45: 
  Prove the number of visits to 34 is in {1 ..< 2}
    .. proven.
Step 46: 
  prove all verification conditions
    .. proven.
Step 47: case in (43) where 104 is not visited
  Prove the number of visits to 104 is in {0 ..< 1}
    .. proven.
Step 48: 
  Prove the number of visits to 34 is in {0 ..< 1}
    .. proven.
Step 49: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeTCBInvocation (ASM) <= Kernel_C.decodeTCBInvocation (C)), time taken: 169.20s
Testing Function pair Pairing (cleanInvalidateL1Caches (ASM) <= Kernel_C.cleanInvalidateL1Caches (C))
  (function pairing 7 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cleanInvalidateL1Caches (ASM) <= Kernel_C.cleanInvalidateL1Caches (C)), time taken: 1.27s
Testing Function pair Pairing (setVMRootForFlush (ASM) <= Kernel_C.setVMRootForFlush (C))
  (function pairing 8 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setVMRootForFlush (ASM) <= Kernel_C.setVMRootForFlush (C)), time taken: 4.92s
Testing Function pair Pairing (flushSpace (ASM) <= Kernel_C.flushSpace (C))
  (function pairing 9 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (flushSpace (ASM) <= Kernel_C.flushSpace (C)), time taken: 1.16s
Testing Function pair Pairing (setupCallerCap (ASM) <= Kernel_C.setupCallerCap (C))
  (function pairing 10 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setupCallerCap (ASM) <= Kernel_C.setupCallerCap (C)), time taken: 1.56s
Testing Function pair Pairing (suspend (ASM) <= Kernel_C.suspend (C))
  (function pairing 11 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (suspend (ASM) <= Kernel_C.suspend (C)), time taken: 2.92s
Testing Function pair Pairing (initIRQController (ASM) <= Kernel_C.initIRQController (C))
  (function pairing 12 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (initIRQController (ASM) <= Kernel_C.initIRQController (C)), time taken: 0.47s
Testing Function pair Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C))
  (function pairing 13 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C)), time taken: 16.48s
Testing Function pair Pairing (isHighestPrio (ASM) <= Kernel_C.isHighestPrio (C))
  (function pairing 14 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isHighestPrio (ASM) <= Kernel_C.isHighestPrio (C)), time taken: 4.14s
Testing Function pair Pairing (doReplyTransfer (ASM) <= Kernel_C.doReplyTransfer (C))
  (function pairing 15 of 284)
 .. built problem, finding proof
Decided to case split at (32, 'ASM')
  (in problem)
Now doing proof search in true case (32 visited) in problem.
Now doing proof search in false case (32 not visited) in problem.
ProofNode ('CaseSplit', (32, 'ASM'), (ProofNode ('Restr', (32, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (32, ('Number', (0, 1))), (ProofNode ('Restr', (7, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 32 is visited
Step 2: case in (1) where 32 is visited
  Prove the number of visits to 32 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 32 is not visited
  Prove the number of visits to 32 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 7 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doReplyTransfer (ASM) <= Kernel_C.doReplyTransfer (C)), time taken: 14.37s
Testing Function pair Pairing (lookupExtraCaps (ASM) <= Kernel_C.lookupExtraCaps (C))
  (function pairing 16 of 284)
 .. built problem, finding proof
Discovered that points [9 (loop head)] can be bounded
  (in problem)
Discovered that points [78 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (9, ('Number', (0, 5))), (ProofNode ('Restr', (78, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 9 is in {0 ..< 5}
    .. proven.
Step 2: 
  Prove the number of visits to 78 is in {0 ..< 4}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupExtraCaps (ASM) <= Kernel_C.lookupExtraCaps (C)), time taken: 31.31s
Testing Function pair Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C))
  (function pairing 17 of 284)
 .. built problem, finding proof
Decided to case split at (76, 'ASM')
  (in problem)
Now doing proof search in true case (76 visited) in problem.
Discovered that points [385 (loop head)] can be bounded
  (in true case (76 visited) in problem)
Discovered that points [458 (loop head)] can be bounded
  (in true case (76 visited) in problem)
Discovered that points [374 (loop head)] can be bounded
  (in true case (76 visited) in problem)
Discovered that points [447 (loop head)] can be bounded
  (in true case (76 visited) in problem)
Now doing proof search in false case (76 not visited) in problem.
Decided to case split at (57, 'ASM')
  (in false case (76 not visited) in problem)
Now doing proof search in true case (57 visited) in false case (76 not visited) in problem.
Discovered that points [385 (loop head)] can be bounded
  (in true case (57 visited) in false case (76 not visited) in problem)
Discovered that points [458 (loop head)] can be bounded
  (in true case (57 visited) in false case (76 not visited) in problem)
Discovered that points [374 (loop head)] can be bounded
  (in true case (57 visited) in false case (76 not visited) in problem)
Discovered that points [447 (loop head)] can be bounded
  (in true case (57 visited) in false case (76 not visited) in problem)
Now doing proof search in false case (57 not visited) in false case (76 not visited) in problem.
Decided to case split at (60, 'ASM')
  (in false case (57 not visited) in false case (76 not visited) in problem)
Now doing proof search in true case (60 visited) in false case (57 not visited) in false case (76 not visited) in problem.
Discovered that points [385 (loop head)] can be bounded
  (in true case (60 visited) in false case (57 not visited) in false case (76 not visited) in problem)
Discovered that points [458 (loop head)] can be bounded
  (in true case (60 visited) in false case (57 not visited) in false case (76 not visited) in problem)
Discovered that points [374 (loop head)] can be bounded
  (in true case (60 visited) in false case (57 not visited) in false case (76 not visited) in problem)
Discovered that points [447 (loop head)] can be bounded
  (in true case (60 visited) in false case (57 not visited) in false case (76 not visited) in problem)
Now doing proof search in false case (60 not visited) in false case (57 not visited) in false case (76 not visited) in problem.
Discovered that points [385 (loop head)] can be bounded
  (in false case (60 not visited) in false case (57 not visited) in false case (76 not visited) in problem)
Discovered that points [458 (loop head)] can be bounded
  (in false case (60 not visited) in false case (57 not visited) in false case (76 not visited) in problem)
Discovered that points [447 (loop head)] can be bounded
  (in false case (60 not visited) in false case (57 not visited) in false case (76 not visited) in problem)
Discovered a loop relation for split points [59, 379]
  (in false case (60 not visited) in false case (57 not visited) in false case (76 not visited) in problem)
Now doing proof search in 59 init case in false case (60 not visited) in false case (57 not visited) in false case (76 not visited) in problem.
Now doing proof search in 59 loop case in false case (60 not visited) in false case (57 not visited) in false case (76 not visited) in problem.
ProofNode ('CaseSplit', (76, 'ASM'), (ProofNode ('Restr', (76, ('Number', (1, 2))), (ProofNode ('Restr', (385, ('Number', (0, 1))), (ProofNode ('Restr', (458, ('Number', (0, 1))), (ProofNode ('Restr', (374, ('Number', (0, 1))), (ProofNode ('Restr', (447, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (76, ('Number', (0, 1))), (ProofNode ('CaseSplit', (57, 'ASM'), (ProofNode ('Restr', (57, ('Number', (1, 2))), (ProofNode ('Restr', (385, ('Number', (0, 1))), (ProofNode ('Restr', (458, ('Number', (0, 5))), (ProofNode ('Restr', (374, ('Number', (0, 1))), (ProofNode ('Restr', (447, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (57, ('Number', (0, 1))), (ProofNode ('Restr', (35, ('Number', (0, 1))), (ProofNode ('CaseSplit', (60, 'ASM'), (ProofNode ('Restr', (60, ('Number', (1, 2))), (ProofNode ('Restr', (385, ('Number', (0, 1))), (ProofNode ('Restr', (458, ('Number', (0, 1))), (ProofNode ('Restr', (374, ('Number', (0, 1))), (ProofNode ('Restr', (447, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (60, ('Number', (0, 1))), (ProofNode ('Restr', (42, ('Number', (0, 1))), (ProofNode ('Restr', (385, ('Number', (0, 6))), (ProofNode ('Restr', (458, ('Number', (0, 1))), (ProofNode ('Restr', (447, ('Number', (0, 1))), (ProofNode ('Split', ((59, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (379, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'receiver___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'receiveIPCBuffer___ptr_to_unsigned_long#v.6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'length___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'receiveIPCBuffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'sender___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'sender___ptr_to_struct_tcb_C#v.1'), Expr ('Var', Type ('Word', 32), name = 'id___anonymous_enum#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.6'))], 2, 1), (ProofNode ('Restr', (59, ('Number', (0, 1))), (ProofNode ('Restr', (379, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (59, ('Offset', (0, 3))), (ProofNode ('Restr', (379, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)),)))),)),)))),))))
 .. proof found.
Step 1: 
  case split on whether 76 is visited
Step 2: case in (1) where 76 is visited
  Prove the number of visits to 76 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 385 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 458 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 374 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 447 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (1) where 76 is not visited
  Prove the number of visits to 76 is in {0 ..< 1}
    .. proven.
Step 9: 
  case split on whether 57 is visited
Step 10: case in (9) where 57 is visited
  Prove the number of visits to 57 is in {1 ..< 2}
    .. proven.
Step 11: 
  Prove the number of visits to 385 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 458 is in {0 ..< 5}
    .. proven.
Step 13: 
  Prove the number of visits to 374 is in {0 ..< 1}
    .. proven.
Step 14: 
  Prove the number of visits to 447 is in {0 ..< 2}
    .. proven.
Step 15: 
  prove all verification conditions
    .. proven.
Step 16: case in (9) where 57 is not visited
  Prove the number of visits to 57 is in {0 ..< 1}
    .. proven.
Step 17: 
  Prove the number of visits to 35 is in {0 ..< 1}
    .. proven.
Step 18: 
  case split on whether 60 is visited
Step 19: case in (18) where 60 is visited
  Prove the number of visits to 60 is in {1 ..< 2}
    .. proven.
Step 20: 
  Prove the number of visits to 385 is in {0 ..< 1}
    .. proven.
Step 21: 
  Prove the number of visits to 458 is in {0 ..< 1}
    .. proven.
Step 22: 
  Prove the number of visits to 374 is in {0 ..< 1}
    .. proven.
Step 23: 
  Prove the number of visits to 447 is in {0 ..< 1}
    .. proven.
Step 24: 
  prove all verification conditions
    .. proven.
Step 25: case in (18) where 60 is not visited
  Prove the number of visits to 60 is in {0 ..< 1}
    .. proven.
Step 26: 
  Prove the number of visits to 42 is in {0 ..< 1}
    .. proven.
Step 27: 
  Prove the number of visits to 385 is in {0 ..< 6}
    .. proven.
Step 28: 
  Prove the number of visits to 458 is in {0 ..< 1}
    .. proven.
Step 29: 
  Prove the number of visits to 447 is in {0 ..< 1}
    .. proven.
Step 30: 
  prove visits to 59 related to visits to 379
    with equalities
      ((Mem) ('mem')) (@ addr 59)
      = ((Mem) ('Mem.6')) (@ addr 379)
    and with invariants
      ((Word32) ('r7')) (@ addr 59)
      ((Word32) ('r4')) (@ addr 59)
      ((Word32) ('r8')) (@ addr 59)
      ((Word32) ('r14')) (@ addr 59)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 59)
      ((Word32) ('r13')) (@ addr 59)
      ((Word32) ('r5')) (@ addr 59)
      ((Word32) ('r0')) (@ addr 59)
      ((Word32) ('r9')) (@ addr 59)
      ((Word32) ('ret')) (@ addr 59)
      ((Word32) ('r2')) (@ addr 59)
      ((Word32) ('r11')) (@ addr 59)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 59)
      ((Word32) ('r10')) (@ addr 59)
      ((Bool) (ROData('mem'))) (@ addr 59)
      ((Word32) ('r6')) (@ addr 59)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 59)
      ((Word32) ('receiver___ptr_to_struct_tcb_C#v')) (@ addr 379)
      ((Word32) ('receiveIPCBuffer___ptr_to_unsigned_long#v.6')) (@ addr 379)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 379)
      ((Word32) ('length___unsigned_long#v')) (@ addr 379)
      ((Word32) ('receiveIPCBuffer___ptr_to_unsigned_long#v')) (@ addr 379)
      ((Word32) ('sender___ptr_to_struct_tcb_C#v')) (@ addr 379)
      ((Word32[50]) ('GhostAssertions.6')) (@ addr 379)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 379)
      ((Word32) ('sender___ptr_to_struct_tcb_C#v.1')) (@ addr 379)
      ((Word32) ('id___anonymous_enum#v')) (@ addr 379)
    .. proven.
Step 31: case in (30) where the length of the sequence < 2
  Prove the number of visits to 59 is in {0 ..< 1}
    .. proven.
Step 32: 
  Prove the number of visits to 379 is in {0 ..< 2}
    .. proven.
Step 33: 
  prove all verification conditions
    .. proven.
Step 34: case in (30) where the length of the sequence is i + 2
  Prove the number of visits to 59 is in {i + 0 ..< i + 3}
    .. proven.
Step 35: 
  Prove the number of visits to 379 is in {i + 0 ..< i + 3}
    .. proven.
Step 36: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C)), time taken: 561.46s
Testing Function pair Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))
  (function pairing 18 of 284)
Aborting Problem (Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))): underspecified Kernel_C.clearExMonitor
Result ProblemAbort for pair Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C)), time taken: 0.00s
Testing Function pair Pairing (Arch_prepareThreadDelete (ASM) <= Kernel_C.Arch_prepareThreadDelete (C))
  (function pairing 19 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_prepareThreadDelete (ASM) <= Kernel_C.Arch_prepareThreadDelete (C)), time taken: 0.20s
Testing Function pair Pairing (tcbSchedAppend (ASM) <= Kernel_C.tcbSchedAppend (C))
  (function pairing 20 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (tcbSchedAppend (ASM) <= Kernel_C.tcbSchedAppend (C)), time taken: 7.08s
Testing Function pair Pairing (memcpy (ASM) <= Kernel_C.memcpy (C))
  (function pairing 21 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [22, 13]
  (in problem)
Now doing proof search in 22 init case in problem.
Now doing proof search in 22 loop case in problem.
ProofNode ('Split', ((22, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (13, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'q___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'p___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'ptr_dst___ptr_to_void#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (22, ('Number', (0, 3))), (ProofNode ('Restr', (13, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (22, ('Offset', (0, 3))), (ProofNode ('Restr', (13, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 22 related to visits to 13
    with equalities
      ((Mem) ('mem')) (@ addr 22)
      = ((Mem) ('Mem')) (@ addr 13)
    and with invariants
      ((Word32) ('r7')) (@ addr 22)
      ((Word32) ('r4')) (@ addr 22)
      ((Word32) ('r8')) (@ addr 22)
      ((Word32) ('r14')) (@ addr 22)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 22)
      ((Word32) ('r5')) (@ addr 22)
      ((Word32) ('r0')) (@ addr 22)
      ((Word32) ('r9')) (@ addr 22)
      ((Word32) ('ret')) (@ addr 22)
      ((Word32) ('r2')) (@ addr 22)
      ((Word32) ('r11')) (@ addr 22)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 22)
      ((Word32) ('r13')) (@ addr 22)
      ((Word32) ('r10')) (@ addr 22)
      ((Bool) (ROData('mem'))) (@ addr 22)
      ((Word32) ('r6')) (@ addr 22)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 22)
      ((Word32) (('q___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
      ((Word32) (('n___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 13)
      ((Word32) (('p___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
      ((Word32) ('ptr_dst___ptr_to_void#v')) (@ addr 13)
      ((Word32[50]) ('GhostAssertions')) (@ addr 13)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 22 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 13 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 22 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 13 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (memcpy (ASM) <= Kernel_C.memcpy (C)), time taken: 40.11s
Testing Function pair Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C))
  (function pairing 22 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C)), time taken: 36.14s
Testing Function pair Pairing (Arch_getObjectSize (ASM) <= Kernel_C.Arch_getObjectSize (C))
  (function pairing 23 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_getObjectSize (ASM) <= Kernel_C.Arch_getObjectSize (C)), time taken: 0.54s
Testing Function pair Pairing (APFromVMRights (ASM) <= Kernel_C.APFromVMRights (C))
  (function pairing 24 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (APFromVMRights (ASM) <= Kernel_C.APFromVMRights (C)), time taken: 0.50s
Testing Function pair Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C))
  (function pairing 25 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C)), time taken: 26.10s
Testing Function pair Pairing (isIOSpaceFrameCap (ASM) <= Kernel_C.isIOSpaceFrameCap (C))
  (function pairing 26 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isIOSpaceFrameCap (ASM) <= Kernel_C.isIOSpaceFrameCap (C)), time taken: 0.22s
Testing Function pair Pairing (handleVMFaultEvent (ASM) <= Kernel_C.handleVMFaultEvent (C))
  (function pairing 27 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleVMFaultEvent (ASM) <= Kernel_C.handleVMFaultEvent (C)), time taken: 1.05s
Testing Function pair Pairing (Arch_activateIdleThread (ASM) <= Kernel_C.Arch_activateIdleThread (C))
  (function pairing 28 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_activateIdleThread (ASM) <= Kernel_C.Arch_activateIdleThread (C)), time taken: 0.18s
Testing Function pair Pairing (branchFlushRange (ASM) <= Kernel_C.branchFlushRange (C))
  (function pairing 29 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [33, 9]
  (in problem)
Now doing proof search in 33 init case in problem.
Now doing proof search in 33 loop case in problem.
ProofNode ('Split', ((33, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r1')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (9, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (33, ('Number', (0, 3))), (ProofNode ('Restr', (9, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (33, ('Offset', (0, 3))), (ProofNode ('Restr', (9, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 33 related to visits to 9
    with equalities
      ((Mem) ('mem')) (@ addr 33)
      = ((Mem) ('Mem')) (@ addr 9)
    and with invariants
      ((Word32) ('r21')) (@ addr 33)
      ((Word32) ('r4')) (@ addr 33)
      ((Word32) ('r27')) (@ addr 33)
      ((Word32) ('r17')) (@ addr 33)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 33)
      ((Word32) ('r23')) (@ addr 33)
      ((Word32) ('r13')) (@ addr 33)
      ((Word32) ('r10')) (@ addr 33)
      ((Word32) ('r28')) (@ addr 33)
      ((Word32) ('r19')) (@ addr 33)
      ((Word32) ('r16')) (@ addr 33)
      ((Word64) ('clock')) (@ addr 33)
      ((Word32) ('r12')) (@ addr 33)
      ((Word32) ('r9')) (@ addr 33)
      ((Word32) ('r6')) (@ addr 33)
      ((Word32) ('r7')) (@ addr 33)
      ((Word32) ('r31')) (@ addr 33)
      ((Word32) ('r25')) (@ addr 33)
      ((Word32) ('r24')) (@ addr 33)
      ((Word32) ('r8')) (@ addr 33)
      ((Word32) ('r29')) (@ addr 33)
      ((Word32) ('r18')) (@ addr 33)
      ((Word32) ('r20')) (@ addr 33)
      ((Word32) ('r30')) (@ addr 33)
      ((Word32) ('r14')) (@ addr 33)
      ((Word32) ('r15')) (@ addr 33)
      ((Word32) ('mode')) (@ addr 33)
      ((Word32) ('r11')) (@ addr 33)
      ((Word32) ('r5')) (@ addr 33)
      ((Word32) ('ret')) (@ addr 33)
      ((Word32) ('r26')) (@ addr 33)
      ((Word32) ('r1')) (@ addr 33)
      ((Word32) ('r2')) (@ addr 33)
      ((Bool) (ROData('mem'))) (@ addr 33)
      ((Word32) ('r22')) (@ addr 33)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 33)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r1')), ((Word32) ('r0')))))) (@ addr 33)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r1')))))) (@ addr 33)
      ((Bool) ('c')) (@ addr 33)
      ((Bool) ('n')) (@ addr 33)
      ((Bool) ('v')) (@ addr 33)
      ((Bool) ('z')) (@ addr 33)
      ((Word32) ('end___unsigned_long#v')) (@ addr 9)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 9)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 9)
      ((Word32) ('start___unsigned_long#v')) (@ addr 9)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 9)
      ((Word32[50]) ('GhostAssertions')) (@ addr 9)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 33 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 9 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 33 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 9 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (branchFlushRange (ASM) <= Kernel_C.branchFlushRange (C)), time taken: 111.10s
Testing Function pair Pairing (invokeTCB_ThreadControl (ASM) <= Kernel_C.invokeTCB_ThreadControl (C))
  (function pairing 30 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_ThreadControl (ASM) <= Kernel_C.invokeTCB_ThreadControl (C)), time taken: 1520.91s
Testing Function pair Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))
  (function pairing 31 of 284)
Aborting Problem (Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))), complex loop
Result ProblemAbort for pair Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C)), time taken: 0.65s
Testing Function pair Pairing (unbindNotification (ASM) <= Kernel_C.unbindNotification (C))
  (function pairing 32 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (unbindNotification (ASM) <= Kernel_C.unbindNotification (C)), time taken: 2.19s
Testing Function pair Pairing (resolveAddressBits (ASM) <= Kernel_C.resolveAddressBits (C))
  (function pairing 33 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [81, 5]
  (in problem)
Now doing proof search in 81 init case in problem.
Now doing proof search in 81 loop case in problem.
ProofNode ('Split', ((81, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'ret_addr_input'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (5, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#5#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C'), Expr ('Var', Type ('Word', 32), name = 'capptr___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'ret___struct_resolveAddressBits_ret_C#v.slot_C'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'n_bits___unsigned_long#v')), (Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'nodeCap___struct_cap_C#v.words_C.1')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'nodeCap___struct_cap_C#v.words_C.0'))], 2, 1), (ProofNode ('Restr', (81, ('Number', (0, 3))), (ProofNode ('Restr', (5, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (81, ('Offset', (0, 3))), (ProofNode ('Restr', (5, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 81 related to visits to 5
    with equalities
      ((Word32) ('r1')) (@ addr 81)
      = ((Word32) ('n_bits___unsigned_long#v')) (@ addr 5)
      ((Word32) ('r12')) (@ addr 81)
      = ((Word32) ('nodeCap___struct_cap_C#v.words_C.1')) (@ addr 5)
      ((Word32) ('r4')) (@ addr 81)
      = ((Word32) ('nodeCap___struct_cap_C#v.words_C.0')) (@ addr 5)
    and with invariants
      ((Word32) ('r0')) (@ addr 81)
      ((Word32) ('r13')) (@ addr 81)
      ((Word32) ('r10')) (@ addr 81)
      ((Word32) ('r9')) (@ addr 81)
      ((Word32) ('r6')) (@ addr 81)
      ((Word32) ('r3')) (@ addr 81)
      ((Word32) ('ret_addr_input')) (@ addr 81)
      ((Word32) ('r11')) (@ addr 81)
      ((Word32) ('ret')) (@ addr 81)
      ((Mem) ('mem')) (@ addr 81)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 81)
      ((Word32) (('loop#5#count' + ((0 - '#seq-visits') * 1)))) (@ addr 5)
      ((Word32) ('ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C')) (@ addr 5)
      ((Word32) ('capptr___unsigned_long#v')) (@ addr 5)
      ((Word32) ('ret___struct_resolveAddressBits_ret_C#v.slot_C')) (@ addr 5)
      ((Mem) ('Mem')) (@ addr 5)
      ((Word32[50]) ('GhostAssertions')) (@ addr 5)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 81 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 5 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 81 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 5 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (resolveAddressBits (ASM) <= Kernel_C.resolveAddressBits (C)), time taken: 362.99s
Testing Function pair Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C))
  (function pairing 34 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [60, 36]
  (in problem)
Now doing proof search in 60 init case in problem.
Discovered that points [13 (loop head)] can be bounded
  (in 60 init case in problem)
Discovered that points [168 (loop head)] can be bounded
  (in 60 init case in problem)
Now doing proof search in 60 loop case in problem.

**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [117, 194]
  (in 60 loop case in problem)
Now doing proof search in 117 init case in 60 loop case in problem.
Now doing proof search in 117 loop case in 60 loop case in problem.
ProofNode ('Split', ((60, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (36, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'buffer___ptr_to_unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#26#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'resumeTarget___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'archInfo___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (60, ('Number', (0, 3))), (ProofNode ('Restr', (36, ('Number', (0, 3))), (ProofNode ('Restr', (13, ('Number', (0, 2))), (ProofNode ('Restr', (168, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (60, ('Offset', (0, 3))), (ProofNode ('Restr', (36, ('Offset', (0, 3))), (ProofNode ('Split', ((117, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (194, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'buffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'archInfo___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#13#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'resumeTarget___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1')), (Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'w___unsigned_long#v')), (Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'reg___unsigned_long#v'))], 2, 1), (ProofNode ('Restr', (117, ('Number', (0, 3))), (ProofNode ('Restr', (194, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (117, ('Offset', (0, 3))), (ProofNode ('Restr', (194, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 60 related to visits to 36
    with equalities
      ((Mem) ('mem')) (@ addr 60)
      = ((Mem) ('Mem')) (@ addr 36)
    and with invariants
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 60)
      ((Word32) ('r13')) (@ addr 60)
      ((Word32) ('r10')) (@ addr 60)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 4)))) (@ addr 60)
      ((Word32) ('r6')) (@ addr 60)
      ((Word32) ('r8')) (@ addr 60)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 60)
      ((Word32) ('r11')) (@ addr 60)
      ((Word32) (('r5' + ((0 - '#seq-visits') * 4)))) (@ addr 60)
      ((Word32) ('r7')) (@ addr 60)
      ((Word32) ('ret')) (@ addr 60)
      ((Word32) ('r1')) (@ addr 60)
      ((Word32) ('r2')) (@ addr 60)
      ((Bool) (ROData('mem'))) (@ addr 60)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 60)
      ((Word32) ('buffer___ptr_to_unsigned_long#v')) (@ addr 36)
      ((Word32) (('loop#26#count' + ((0 - '#seq-visits') * 1)))) (@ addr 36)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 36)
      ((Word32) ('resumeTarget___unsigned_long#v')) (@ addr 36)
      ((Word32) ('n___unsigned_long#v')) (@ addr 36)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 36)
      ((Word32) ('archInfo___unsigned_long#v')) (@ addr 36)
      ((Word32[50]) ('GhostAssertions')) (@ addr 36)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 60 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 36 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 13 is in {0 ..< 2}
    .. proven.
Step 5: 
  Prove the number of visits to 168 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Step 7: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 60 is in {i + 0 ..< i + 3}
    .. proven.
Step 8: 
  Prove the number of visits to 36 is in {i + 0 ..< i + 3}
    .. proven.
Step 9: 
  prove visits to 117 related to visits to 194
    with equalities
      ((Mem) ('mem')) (@ addr 117)
      = ((Mem) ('Mem.1')) (@ addr 194)
      ((Word32) ('r0')) (@ addr 117)
      = ((Word32) ('w___unsigned_long#v')) (@ addr 194)
      ((Word32) ('r12')) (@ addr 117)
      = ((Word32) ('reg___unsigned_long#v')) (@ addr 194)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 4)))) (@ addr 117)
      ((Word32) ('r13')) (@ addr 117)
      ((Word32) ('r10')) (@ addr 117)
      ((Word32) ('r6')) (@ addr 117)
      ((Word32) ('r7')) (@ addr 117)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 117)
      ((Word32) ('r1')) (@ addr 117)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 4)))) (@ addr 117)
      ((Word32) ('r5')) (@ addr 117)
      ((Word32) ('ret')) (@ addr 117)
      ((Word32) ('r11')) (@ addr 117)
      ((Word32) ('r2')) (@ addr 117)
      ((Bool) (ROData('mem'))) (@ addr 117)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 117)
      ((Word32) ('buffer___ptr_to_unsigned_long#v')) (@ addr 194)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 194)
      ((Word32) ('archInfo___unsigned_long#v')) (@ addr 194)
      ((Word32) (('loop#13#count' + ((0 - '#seq-visits') * 1)))) (@ addr 194)
      ((Word32) ('n___unsigned_long#v')) (@ addr 194)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 194)
      ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 194)
      ((Word32) ('resumeTarget___unsigned_long#v')) (@ addr 194)
      ((Word32[50]) ('GhostAssertions.1')) (@ addr 194)
    .. proven.
Step 10: case in (9) where the length of the sequence < 2
  Prove the number of visits to 117 is in {0 ..< 3}
    .. proven.
Step 11: 
  Prove the number of visits to 194 is in {0 ..< 3}
    .. proven.
Step 12: 
  prove all verification conditions
    .. proven.
Step 13: case in (9) where the length of the sequence is j + 2
  Prove the number of visits to 117 is in {j + 0 ..< j + 3}
    .. proven.
Step 14: 
  Prove the number of visits to 194 is in {j + 0 ..< j + 3}
    .. proven.
Step 15: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C)), time taken: 793.97s
Testing Function pair Pairing (cteDeleteOne (ASM) <= Kernel_C.cteDeleteOne (C))
  (function pairing 35 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteDeleteOne (ASM) <= Kernel_C.cteDeleteOne (C)), time taken: 7.16s
Testing Function pair Pairing (replyFromKernel_error (ASM) <= Kernel_C.replyFromKernel_error (C))
  (function pairing 36 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (replyFromKernel_error (ASM) <= Kernel_C.replyFromKernel_error (C)), time taken: 4.93s
Testing Function pair Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C))
  (function pairing 37 of 284)
 .. built problem, finding proof

**************************************
FATAL ERROR
Broken pipe

**************************************


**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [12, 336]
  (in problem)
Now doing proof search in 12 init case in problem.
Now doing proof search in 12 loop case in problem.
ProofNode ('Split', ((12, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (336, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v.1'), Expr ('Var', Type ('Word', 32), name = 'immediate___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'exposed___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#9#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (12, ('Number', (0, 3))), (ProofNode ('Restr', (336, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (12, ('Offset', (0, 3))), (ProofNode ('Restr', (336, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 12 related to visits to 336
    with equalities
      ((Mem) ('mem')) (@ addr 12)
      = ((Mem) ('Mem.1')) (@ addr 336)
    and with invariants
      ((Word32) ('r4')) (@ addr 12)
      ((Word32) ('r8')) (@ addr 12)
      ((Word32) ('r5')) (@ addr 12)
      ((Word32) ('r0')) (@ addr 12)
      ((Bool) (ROData('mem'))) (@ addr 12)
      ((Word32) ('ret')) (@ addr 12)
      ((Word32) ('r7')) (@ addr 12)
      ((Word32) ('r13')) (@ addr 12)
      ((Word32) ('r6')) (@ addr 12)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0))), ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 12)
      ((Word32) ('slot___ptr_to_struct_cte_C#v.1')) (@ addr 336)
      ((Word32) ('immediate___unsigned_long#v')) (@ addr 336)
      ((Word32) ('exposed___unsigned_long#v')) (@ addr 336)
      ((Word32) ('slot___ptr_to_struct_cte_C#v')) (@ addr 336)
      ((Word32) (('loop#9#count' + ((0 - '#seq-visits') * 1)))) (@ addr 336)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 12 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 336 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 12 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 336 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C)), time taken: 3583.25s
Testing Function pair Pairing (populate_bi_frame (ASM) <= Kernel_C.populate_bi_frame (C))
  (function pairing 38 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (populate_bi_frame (ASM) <= Kernel_C.populate_bi_frame (C)), time taken: 13.09s
Testing Function pair Pairing (setExtraBadge (ASM) <= Kernel_C.setExtraBadge (C))
  (function pairing 39 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setExtraBadge (ASM) <= Kernel_C.setExtraBadge (C)), time taken: 0.56s
Testing Function pair Pairing (flushTable (ASM) <= Kernel_C.flushTable (C))
  (function pairing 40 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (flushTable (ASM) <= Kernel_C.flushTable (C)), time taken: 2.56s
Testing Function pair Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C))
  (function pairing 41 of 284)
 .. built problem, finding proof
Decided to case split at (76, 'ASM')
  (in problem)
Now doing proof search in true case (76 visited) in problem.
Now doing proof search in false case (76 not visited) in problem.
Decided to case split at (71, 'ASM')
  (in false case (76 not visited) in problem)
Now doing proof search in true case (71 visited) in false case (76 not visited) in problem.
Now doing proof search in false case (71 not visited) in false case (76 not visited) in problem.
ProofNode ('CaseSplit', (76, 'ASM'), (ProofNode ('Restr', (76, ('Number', (1, 2))), (ProofNode ('Restr', (12, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (76, ('Number', (0, 1))), (ProofNode ('Restr', (12, ('Number', (0, 1))), (ProofNode ('CaseSplit', (71, 'ASM'), (ProofNode ('Restr', (71, ('Number', (1, 2))), (ProofNode ('Restr', (20, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (71, ('Number', (0, 1))), (ProofNode ('Restr', (20, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 76 is visited
Step 2: case in (1) where 76 is visited
  Prove the number of visits to 76 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 12 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. failed to prove this.
      (failure kind: 'sat')
Refinement NOT proven.
Result False for pair Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C)), time taken: 17.04s
Testing Function pair Pairing (armv_contextSwitch_HWASID (ASM) <= Kernel_C.armv_contextSwitch_HWASID (C))
  (function pairing 42 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (armv_contextSwitch_HWASID (ASM) <= Kernel_C.armv_contextSwitch_HWASID (C)), time taken: 1.34s
Testing Function pair Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C))
  (function pairing 43 of 284)
Skipping Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C)), underspecified ASM
Testing Function pair Pairing (create_it_asid_pool (ASM) <= Kernel_C.create_it_asid_pool (C))
  (function pairing 44 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_it_asid_pool (ASM) <= Kernel_C.create_it_asid_pool (C)), time taken: 25.27s
Testing Function pair Pairing (Arch_decodeIRQControlInvocation (ASM) <= Kernel_C.Arch_decodeIRQControlInvocation (C))
  (function pairing 45 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_decodeIRQControlInvocation (ASM) <= Kernel_C.Arch_decodeIRQControlInvocation (C)), time taken: 16.97s
Testing Function pair Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C))
  (function pairing 46 of 284)
Skipping Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C)), underspecified C
Testing Function pair Pairing (doFlush (ASM) <= Kernel_C.doFlush (C))
  (function pairing 47 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doFlush (ASM) <= Kernel_C.doFlush (C)), time taken: 12.62s
Testing Function pair Pairing (arm_errata (ASM) <= Kernel_C.arm_errata (C))
  (function pairing 48 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (arm_errata (ASM) <= Kernel_C.arm_errata (C)), time taken: 0.22s
Testing Function pair Pairing (handleVMFault (ASM) <= Kernel_C.handleVMFault (C))
  (function pairing 49 of 284)
 .. built problem, finding proof
Decided to case split at (28, 'ASM')
  (in problem)
Now doing proof search in true case (28 visited) in problem.
Now doing proof search in false case (28 not visited) in problem.
ProofNode ('CaseSplit', (28, 'ASM'), (ProofNode ('Restr', (28, ('Number', (1, 2))), (ProofNode ('Restr', (10, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (10, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 28 is visited
Step 2: case in (1) where 28 is visited
  Prove the number of visits to 28 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 10 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 28 is not visited
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 10 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleVMFault (ASM) <= Kernel_C.handleVMFault (C)), time taken: 7.91s
Testing Function pair Pairing (create_mapped_it_frame_cap (ASM) <= Kernel_C.create_mapped_it_frame_cap (C))
  (function pairing 50 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_mapped_it_frame_cap (ASM) <= Kernel_C.create_mapped_it_frame_cap (C)), time taken: 13.10s
Testing Function pair Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C))
  (function pairing 51 of 284)
 .. built problem, finding proof
Decided to case split at (52, 'ASM')
  (in problem)
Now doing proof search in true case (52 visited) in problem.
Now doing proof search in false case (52 not visited) in problem.
ProofNode ('CaseSplit', (52, 'ASM'), (ProofNode ('Restr', (52, ('Number', (1, 2))), (ProofNode ('Restr', (45, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (52, ('Number', (0, 1))), (ProofNode ('Restr', (45, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 52 is visited
Step 2: case in (1) where 52 is visited
  Prove the number of visits to 52 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 45 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 52 is not visited
  Prove the number of visits to 52 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 45 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C)), time taken: 42.68s
Testing Function pair Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C))
  (function pairing 52 of 284)
Skipping Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C)), underspecified C
Testing Function pair Pairing (timerTick (ASM) <= Kernel_C.timerTick (C))
  (function pairing 53 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (timerTick (ASM) <= Kernel_C.timerTick (C)), time taken: 8.09s
Testing Function pair Pairing (memzero (ASM) <= Kernel_C.memzero (C))
  (function pairing 54 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [19, 10]
  (in problem)
Now doing proof search in 19 init case in problem.
Now doing proof search in 19 loop case in problem.
ProofNode ('Split', ((19, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967292)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (10, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'p___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (19, ('Number', (0, 3))), (ProofNode ('Restr', (10, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (19, ('Offset', (0, 3))), (ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 19 related to visits to 10
    with equalities
      ((Mem) ('mem')) (@ addr 19)
      = ((Mem) ('Mem')) (@ addr 10)
    and with invariants
      ((Word32) ('r7')) (@ addr 19)
      ((Word32) ('r4')) (@ addr 19)
      ((Word32) ('r8')) (@ addr 19)
      ((Word32) ('r14')) (@ addr 19)
      ((Word32) ('r3')) (@ addr 19)
      ((Word32) ('r5')) (@ addr 19)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 19)
      ((Word32) ('r9')) (@ addr 19)
      ((Word32) ('ret')) (@ addr 19)
      ((Word32) ('r11')) (@ addr 19)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4294967292)))) (@ addr 19)
      ((Word32) ('r13')) (@ addr 19)
      ((Word32) ('r10')) (@ addr 19)
      ((Bool) (ROData('mem'))) (@ addr 19)
      ((Word32) ('r6')) (@ addr 19)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 19)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 10)
      ((Word32) (('n___unsigned_long#v' - ((0 - '#seq-visits') * WordCast(4))))) (@ addr 10)
      ((Word32[50]) ('GhostAssertions')) (@ addr 10)
      ((Word32) (('p___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 4)))) (@ addr 10)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 19 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 10 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 19 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 10 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (memzero (ASM) <= Kernel_C.memzero (C)), time taken: 32.22s
Testing Function pair Pairing (decodeReadRegisters (ASM) <= Kernel_C.decodeReadRegisters (C))
  (function pairing 55 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeReadRegisters (ASM) <= Kernel_C.decodeReadRegisters (C)), time taken: 14.81s
Testing Function pair Pairing (findFreeHWASID (ASM) <= Kernel_C.findFreeHWASID (C))
  (function pairing 56 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [33, 16]
  (in problem)
Now doing proof search in 33 init case in problem.
Now doing proof search in 33 loop case in problem.
ProofNode ('Split', ((33, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (16, (1, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'hw_asid_offset___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#17#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (33, ('Number', (0, 3))), (ProofNode ('Restr', (16, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (33, ('Offset', (0, 3))), (ProofNode ('Restr', (16, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 33 related to visits [2, 3, 4 ...] to 16
    with equalities
    and with invariants
      ((Word32) ('r21')) (@ addr 33)
      ((Word32) ('r4')) (@ addr 33)
      ((Word32) ('r27')) (@ addr 33)
      ((Word32) ('r17')) (@ addr 33)
      ((Word32) ('r11')) (@ addr 33)
      ((Word32) ('r23')) (@ addr 33)
      ((Word32) ('r13')) (@ addr 33)
      ((Word32) ('r10')) (@ addr 33)
      ((Word32) ('r28')) (@ addr 33)
      ((Word32) ('r19')) (@ addr 33)
      ((Word32) ('r16')) (@ addr 33)
      ((Word64) ('clock')) (@ addr 33)
      ((Word32) ('r12')) (@ addr 33)
      ((Word32) ('r9')) (@ addr 33)
      ((Word32) ('r6')) (@ addr 33)
      ((Word32) ('r7')) (@ addr 33)
      ((Word32) ('r31')) (@ addr 33)
      ((Word32) ('r25')) (@ addr 33)
      ((Word32) ('r24')) (@ addr 33)
      ((Word32) ('r8')) (@ addr 33)
      ((Word32) ('r29')) (@ addr 33)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 33)
      ((Word32) ('r18')) (@ addr 33)
      ((Word32) ('r20')) (@ addr 33)
      ((Word32) ('r30')) (@ addr 33)
      ((Word32) ('r14')) (@ addr 33)
      ((Word32) ('r15')) (@ addr 33)
      ((Word32) ('mode')) (@ addr 33)
      ((Word32) ('r5')) (@ addr 33)
      ((Word32) ('ret')) (@ addr 33)
      ((Word32) ('r26')) (@ addr 33)
      ((Word32) ('r1')) (@ addr 33)
      ((Mem) ('mem')) (@ addr 33)
      ((Word32) ('r22')) (@ addr 33)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 33)
      ((Word32) (('hw_asid_offset___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 16)
      ((Mem) ('Mem')) (@ addr 16)
      ((Word32[50]) ('GhostAssertions')) (@ addr 16)
      ((Word32) (('loop#17#count' + ((0 - '#seq-visits') * 1)))) (@ addr 16)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 33 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 16 is in {0 ..< 4}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 33 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 16 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (findFreeHWASID (ASM) <= Kernel_C.findFreeHWASID (C)), time taken: 38.50s
Testing Function pair Pairing (deriveCap (ASM) <= Kernel_C.deriveCap (C))
  (function pairing 57 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deriveCap (ASM) <= Kernel_C.deriveCap (C)), time taken: 15.20s
Testing Function pair Pairing (create_device_untypeds (ASM) <= Kernel_C.create_device_untypeds (C))
  (function pairing 58 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [42, 28]
  (in problem)
Now doing proof search in 42 init case in problem.
Now doing proof search in 42 loop case in problem.
ProofNode ('Split', ((42, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 8)])]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 4)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#13#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'slot_pos_before___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'))], 2, 1), (ProofNode ('Restr', (42, ('Number', (0, 3))), (ProofNode ('Restr', (28, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (42, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 42 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 42)
      = ((Mem) ('Mem')) (@ addr 28)
      ((Word32) ('r3')) (@ addr 42)
      = ((Word32) ('start___unsigned_long#v')) (@ addr 28)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 42)
      ((Word32) ('r13')) (@ addr 42)
      ((Word32) ('r10')) (@ addr 42)
      ((Word32) ('r9')) (@ addr 42)
      ((Word32) ('r6')) (@ addr 42)
      ((Word32) ('r8')) (@ addr 42)
      ((Word32) ('r11')) (@ addr 42)
      ((Word32) (('r5' + ((0 - '#seq-visits') * 8)))) (@ addr 42)
      ((Word32) ('r7')) (@ addr 42)
      ((Word32) ('ret')) (@ addr 42)
      ((Bool) (ROData('mem'))) (@ addr 42)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 4))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 42)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 28)
      ((Word32) (('loop#13#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 28)
      ((Word32) ('slot_pos_before___unsigned_long#v')) (@ addr 28)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 28)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 42 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 28 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 42 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 28 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_device_untypeds (ASM) <= Kernel_C.create_device_untypeds (C)), time taken: 234.37s
Testing Function pair Pairing (deleteASIDPool (ASM) <= Kernel_C.deleteASIDPool (C))
  (function pairing 59 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [31, 16]
  (in problem)
Now doing proof search in 31 init case in problem.
Now doing proof search in 31 loop case in problem.
ProofNode ('Split', ((31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (16, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'asid_base___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'offset___unsigned#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'pool___ptr_to_struct_asid_pool_C#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (31, ('Number', (0, 3))), (ProofNode ('Restr', (16, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Restr', (16, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 31 related to visits to 16
    with equalities
      ((Mem) ('mem')) (@ addr 31)
      = ((Mem) ('Mem')) (@ addr 16)
    and with invariants
      ((Word32) ('r7')) (@ addr 31)
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 31)
      ((Word32) ('r8')) (@ addr 31)
      ((Word32) ('r11')) (@ addr 31)
      ((Word32) (('r5' + ((0 - '#seq-visits') * 4)))) (@ addr 31)
      ((Word32) ('r9')) (@ addr 31)
      ((Word32) ('ret')) (@ addr 31)
      ((Word32) ('r13')) (@ addr 31)
      ((Word32) ('r10')) (@ addr 31)
      ((Word32) ('r6')) (@ addr 31)
      ((Bool) (ROData('mem'))) (@ addr 31)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 31)
      ((Word32) ('asid_base___unsigned_long#v')) (@ addr 16)
      ((Word32) (('offset___unsigned#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 16)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 16)
      ((Word32) ('pool___ptr_to_struct_asid_pool_C#v')) (@ addr 16)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 31 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 16 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 31 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 16 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deleteASIDPool (ASM) <= Kernel_C.deleteASIDPool (C)), time taken: 76.83s
Testing Function pair Pairing (initTimer (ASM) <= Kernel_C.initTimer (C))
  (function pairing 60 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (initTimer (ASM) <= Kernel_C.initTimer (C)), time taken: 0.38s
Testing Function pair Pairing (findPDForASID (ASM) <= Kernel_C.findPDForASID (C))
  (function pairing 61 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (findPDForASID (ASM) <= Kernel_C.findPDForASID (C)), time taken: 0.65s
Testing Function pair Pairing (tcbSchedEnqueue (ASM) <= Kernel_C.tcbSchedEnqueue (C))
  (function pairing 62 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (tcbSchedEnqueue (ASM) <= Kernel_C.tcbSchedEnqueue (C)), time taken: 8.00s
Testing Function pair Pairing (arch_clean_invalidate_L1_caches (ASM) <= Kernel_C.arch_clean_invalidate_L1_caches (C))
  (function pairing 63 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (arch_clean_invalidate_L1_caches (ASM) <= Kernel_C.arch_clean_invalidate_L1_caches (C)), time taken: 1.74s
Testing Function pair Pairing (handleFaultReply (ASM) <= Kernel_C.handleFaultReply (C))
  (function pairing 64 of 284)
 .. built problem, finding proof
Decided to case split at (46, 'ASM')
  (in problem)
Now doing proof search in true case (46 visited) in problem.
Discovered that points [289 (loop head)] can be bounded
  (in true case (46 visited) in problem)
Discovered that points [273 (loop head)] can be bounded
  (in true case (46 visited) in problem)
Discovered that points [254 (loop head)] can be bounded
  (in true case (46 visited) in problem)
Discovered that points [238 (loop head)] can be bounded
  (in true case (46 visited) in problem)
Discovered that points [163 (loop head)] can be bounded
  (in true case (46 visited) in problem)
Discovered that points [187 (loop head)] can be bounded
  (in true case (46 visited) in problem)
Now doing proof search in false case (46 not visited) in problem.
Decided to case split at (151, 'ASM')
  (in false case (46 not visited) in problem)
Now doing proof search in true case (151 visited) in false case (46 not visited) in problem.
Discovered that points [289 (loop head)] can be bounded
  (in true case (151 visited) in false case (46 not visited) in problem)
Discovered that points [273 (loop head)] can be bounded
  (in true case (151 visited) in false case (46 not visited) in problem)
Discovered that points [254 (loop head)] can be bounded
  (in true case (151 visited) in false case (46 not visited) in problem)
Discovered that points [238 (loop head)] can be bounded
  (in true case (151 visited) in false case (46 not visited) in problem)
Now doing proof search in false case (151 not visited) in false case (46 not visited) in problem.
Decided to case split at (43, 'ASM')
  (in false case (151 not visited) in false case (46 not visited) in problem)
Now doing proof search in true case (43 visited) in false case (151 not visited) in false case (46 not visited) in problem.
Discovered that points [289 (loop head)] can be bounded
  (in true case (43 visited) in false case (151 not visited) in false case (46 not visited) in problem)
Discovered that points [273 (loop head)] can be bounded
  (in true case (43 visited) in false case (151 not visited) in false case (46 not visited) in problem)
Discovered that points [32 (loop head)] can be bounded
  (in true case (43 visited) in false case (151 not visited) in false case (46 not visited) in problem)
Discovered that points [254 (loop head)] can be bounded
  (in true case (43 visited) in false case (151 not visited) in false case (46 not visited) in problem)
Discovered a loop relation for split points [90, 246]
  (in true case (43 visited) in false case (151 not visited) in false case (46 not visited) in problem)
Now doing proof search in 90 init case in true case (43 visited) in false case (151 not visited) in false case (46 not visited) in problem.
Now doing proof search in 90 loop case in true case (43 visited) in false case (151 not visited) in false case (46 not visited) in problem.
Now doing proof search in false case (43 not visited) in false case (151 not visited) in false case (46 not visited) in problem.
Discovered that points [289 (loop head)] can be bounded
  (in false case (43 not visited) in false case (151 not visited) in false case (46 not visited) in problem)
Discovered that points [273 (loop head)] can be bounded
  (in false case (43 not visited) in false case (151 not visited) in false case (46 not visited) in problem)
Discovered that points [254 (loop head)] can be bounded
  (in false case (43 not visited) in false case (151 not visited) in false case (46 not visited) in problem)
Discovered that points [238 (loop head)] can be bounded
  (in false case (43 not visited) in false case (151 not visited) in false case (46 not visited) in problem)
Discovered that points [32 (loop head)] can be bounded
  (in false case (43 not visited) in false case (151 not visited) in false case (46 not visited) in problem)
Discovered that points [163 (loop head)] can be bounded
  (in false case (43 not visited) in false case (151 not visited) in false case (46 not visited) in problem)
Discovered that points [187 (loop head)] can be bounded
  (in false case (43 not visited) in false case (151 not visited) in false case (46 not visited) in problem)
Discovered that points [101 (loop head)] can be bounded
  (in false case (43 not visited) in false case (151 not visited) in false case (46 not visited) in problem)
ProofNode ('CaseSplit', (46, 'ASM'), (ProofNode ('Restr', (46, ('Number', (1, 2))), (ProofNode ('Restr', (289, ('Number', (0, 5))), (ProofNode ('Restr', (273, ('Number', (0, 1))), (ProofNode ('Restr', (254, ('Number', (0, 1))), (ProofNode ('Restr', (238, ('Number', (0, 1))), (ProofNode ('Restr', (163, ('Number', (0, 4))), (ProofNode ('Restr', (187, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)), ProofNode ('Restr', (46, ('Number', (0, 1))), (ProofNode ('Restr', (7, ('Number', (0, 1))), (ProofNode ('CaseSplit', (151, 'ASM'), (ProofNode ('Restr', (151, ('Number', (1, 2))), (ProofNode ('Restr', (289, ('Number', (0, 1))), (ProofNode ('Restr', (273, ('Number', (0, 1))), (ProofNode ('Restr', (254, ('Number', (0, 1))), (ProofNode ('Restr', (238, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (151, ('Number', (0, 1))), (ProofNode ('CaseSplit', (43, 'ASM'), (ProofNode ('Restr', (43, ('Number', (1, 2))), (ProofNode ('Restr', (289, ('Number', (0, 1))), (ProofNode ('Restr', (273, ('Number', (0, 1))), (ProofNode ('Restr', (32, ('Number', (0, 5))), (ProofNode ('Restr', (254, ('Number', (0, 6))), (ProofNode ('Split', ((90, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (246, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'receiver___ptr_to_struct_tcb_C#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'length___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'archInfo___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'label___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'sendBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.1'), Expr ('Var', Type ('Word', 32), name = 'id___anonymous_enum#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (90, ('Number', (0, 3))), (ProofNode ('Restr', (246, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (90, ('Offset', (0, 3))), (ProofNode ('Restr', (246, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)),)), ProofNode ('Restr', (43, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (289, ('Number', (0, 1))), (ProofNode ('Restr', (273, ('Number', (0, 1))), (ProofNode ('Restr', (254, ('Number', (0, 1))), (ProofNode ('Restr', (238, ('Number', (0, 1))), (ProofNode ('Restr', (32, ('Number', (0, 1))), (ProofNode ('Restr', (163, ('Number', (0, 1))), (ProofNode ('Restr', (187, ('Number', (0, 1))), (ProofNode ('Restr', (101, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)),)),)))),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 46 is visited
Step 2: case in (1) where 46 is visited
  Prove the number of visits to 46 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 289 is in {0 ..< 5}
    .. proven.
Step 4: 
  Prove the number of visits to 273 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 254 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 238 is in {0 ..< 1}
    .. proven.
Step 7: 
  Prove the number of visits to 163 is in {0 ..< 4}
    .. proven.
Step 8: 
  Prove the number of visits to 187 is in {0 ..< 1}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (1) where 46 is not visited
  Prove the number of visits to 46 is in {0 ..< 1}
    .. proven.
Step 11: 
  Prove the number of visits to 7 is in {0 ..< 1}
    .. proven.
Step 12: 
  case split on whether 151 is visited
Step 13: case in (12) where 151 is visited
  Prove the number of visits to 151 is in {1 ..< 2}
    .. proven.
Step 14: 
  Prove the number of visits to 289 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 273 is in {0 ..< 1}
    .. proven.
Step 16: 
  Prove the number of visits to 254 is in {0 ..< 1}
    .. proven.
Step 17: 
  Prove the number of visits to 238 is in {0 ..< 1}
    .. proven.
Step 18: 
  prove all verification conditions
    .. proven.
Step 19: case in (12) where 151 is not visited
  Prove the number of visits to 151 is in {0 ..< 1}
    .. proven.
Step 20: 
  case split on whether 43 is visited
Step 21: case in (20) where 43 is visited
  Prove the number of visits to 43 is in {1 ..< 2}
    .. proven.
Step 22: 
  Prove the number of visits to 289 is in {0 ..< 1}
    .. proven.
Step 23: 
  Prove the number of visits to 273 is in {0 ..< 1}
    .. proven.
Step 24: 
  Prove the number of visits to 32 is in {0 ..< 5}
    .. proven.
Step 25: 
  Prove the number of visits to 254 is in {0 ..< 6}
    .. proven.
Step 26: 
  prove visits to 90 related to visits to 246
    with equalities
      ((Mem) ('mem')) (@ addr 90)
      = ((Mem) ('Mem.1')) (@ addr 246)
    and with invariants
      ((Word32) ('r7')) (@ addr 90)
      ((Word32) ('r8')) (@ addr 90)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 90)
      ((Word32) ('r5')) (@ addr 90)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 4)))) (@ addr 90)
      ((Word32) ('r9')) (@ addr 90)
      ((Word32) ('ret')) (@ addr 90)
      ((Word32) ('r11')) (@ addr 90)
      ((Word32) ('r13')) (@ addr 90)
      ((Word32) ('r10')) (@ addr 90)
      ((Word32) ('r6')) (@ addr 90)
      ((Bool) (ROData('mem'))) (@ addr 90)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 90)
      ((Word32) ('receiver___ptr_to_struct_tcb_C#v.1')) (@ addr 246)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 246)
      ((Word32) ('length___unsigned_long#v.1')) (@ addr 246)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 246)
      ((Word32) ('archInfo___unsigned_long#v')) (@ addr 246)
      ((Word32) ('label___unsigned_long#v')) (@ addr 246)
      ((Word32) ('sendBuf___ptr_to_unsigned_long#v')) (@ addr 246)
      ((Word32[50]) ('GhostAssertions.1')) (@ addr 246)
      ((Word32) ('id___anonymous_enum#v')) (@ addr 246)
    .. proven.
Step 27: case in (26) where the length of the sequence < 2
  Prove the number of visits to 90 is in {0 ..< 3}
    .. proven.
Step 28: 
  Prove the number of visits to 246 is in {0 ..< 3}
    .. proven.
Step 29: 
  prove all verification conditions
    .. proven.
Step 30: case in (26) where the length of the sequence is i + 2
  Prove the number of visits to 90 is in {i + 0 ..< i + 3}
    .. proven.
Step 31: 
  Prove the number of visits to 246 is in {i + 0 ..< i + 3}
    .. proven.
Step 32: 
  prove all verification conditions
    .. proven.
Step 33: case in (20) where 43 is not visited
  Prove the number of visits to 43 is in {0 ..< 1}
    .. proven.
Step 34: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 35: 
  Prove the number of visits to 289 is in {0 ..< 1}
    .. proven.
Step 36: 
  Prove the number of visits to 273 is in {0 ..< 1}
    .. proven.
Step 37: 
  Prove the number of visits to 254 is in {0 ..< 1}
    .. proven.
Step 38: 
  Prove the number of visits to 238 is in {0 ..< 1}
    .. proven.
Step 39: 
  Prove the number of visits to 32 is in {0 ..< 1}
    .. proven.
Step 40: 
  Prove the number of visits to 163 is in {0 ..< 1}
    .. proven.
Step 41: 
  Prove the number of visits to 187 is in {0 ..< 1}
    .. proven.
Step 42: 
  Prove the number of visits to 101 is in {0 ..< 1}
    .. proven.
Step 43: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleFaultReply (ASM) <= Kernel_C.handleFaultReply (C)), time taken: 376.37s
Testing Function pair Pairing (Arch_updateCapData (ASM) <= Kernel_C.Arch_updateCapData (C))
  (function pairing 65 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_updateCapData (ASM) <= Kernel_C.Arch_updateCapData (C)), time taken: 0.38s
Testing Function pair Pairing (bi_finalise (ASM) <= Kernel_C.bi_finalise (C))
  (function pairing 66 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (bi_finalise (ASM) <= Kernel_C.bi_finalise (C)), time taken: 0.51s
Testing Function pair Pairing (handleUserLevelFault (ASM) <= Kernel_C.handleUserLevelFault (C))
  (function pairing 67 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleUserLevelFault (ASM) <= Kernel_C.handleUserLevelFault (C)), time taken: 1.28s
Testing Function pair Pairing (decodeSetIPCBuffer (ASM) <= Kernel_C.decodeSetIPCBuffer (C))
  (function pairing 68 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeSetIPCBuffer (ASM) <= Kernel_C.decodeSetIPCBuffer (C)), time taken: 68.30s
Testing Function pair Pairing (unmapPageTable (ASM) <= Kernel_C.unmapPageTable (C))
  (function pairing 69 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (unmapPageTable (ASM) <= Kernel_C.unmapPageTable (C)), time taken: 4.00s
Testing Function pair Pairing (chooseThread (ASM) <= Kernel_C.chooseThread (C))
  (function pairing 70 of 284)
 .. built problem, finding proof
Decided to case split at (25, 'ASM')
  (in problem)
Now doing proof search in true case (25 visited) in problem.
Now doing proof search in false case (25 not visited) in problem.
ProofNode ('CaseSplit', (25, 'ASM'), (ProofNode ('Restr', (25, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (25, ('Number', (0, 1))), (ProofNode ('Restr', (9, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 25 is visited
Step 2: case in (1) where 25 is visited
  Prove the number of visits to 25 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 25 is not visited
  Prove the number of visits to 25 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 9 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (chooseThread (ASM) <= Kernel_C.chooseThread (C)), time taken: 34.43s
Testing Function pair Pairing (invokeUntyped_Retype (ASM) <= Kernel_C.invokeUntyped_Retype (C))
  (function pairing 71 of 284)
 .. built problem, finding proof
Decided to case split at (54, 'ASM')
  (in problem)
Now doing proof search in true case (54 visited) in problem.
Discovered a loop relation for split points [130, 215]
  (in true case (54 visited) in problem)
Now doing proof search in 130 init case in true case (54 visited) in problem.
Now doing proof search in 130 loop case in true case (54 visited) in problem.
Now doing proof search in false case (54 not visited) in problem.
Discovered that points [200 (loop head)] can be bounded
  (in false case (54 not visited) in problem)
Discovered that points [130 (loop head)] can be bounded
  (in false case (54 not visited) in problem)
ProofNode ('CaseSplit', (54, 'ASM'), (ProofNode ('Restr', (54, ('Number', (1, 2))), (ProofNode ('Split', ((130, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967040)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967040)])]), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (215, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'userSize___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'chunk___int#v'), Expr ('Var', Type ('Word', 32), name = 'destSlots___struct_slot_range_C#v.offset_C'), Expr ('Var', Type ('Word', 32), name = 'prev_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'offset___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Var', Type ('Word', 32), name = 'chunk___int#v')])])])]), Expr ('Var', Type ('Word', 32), name = 'destSlots___struct_slot_range_C#v.length_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'newType___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'regionBase___ptr_to_void#v'), Expr ('Var', Type ('Word', 32), name = 'destSlots___struct_slot_range_C#v.cnode_C'), Expr ('Var', Type ('Word', 32), name = 'prev_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'regionBase___ptr_to_void#v.1'), Expr ('Var', Type ('Word', 32), name = 'retypeBase___ptr_to_void#v'), Expr ('Var', Type ('Word', 32), name = 'srcSlot___ptr_to_struct_cte_C#v'), Expr ('Var', Type ('Word', 32), name = 'srcSlot___ptr_to_struct_cte_C#v.1'), Expr ('Var', Type ('Word', 32), name = 'deviceMemory___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (130, ('Number', (0, 3))), (ProofNode ('Restr', (215, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (130, ('Offset', (0, 3))), (ProofNode ('Restr', (215, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)), ProofNode ('Restr', (54, ('Number', (0, 1))), (ProofNode ('Restr', (218, ('Number', (0, 1))), (ProofNode ('Restr', (200, ('Number', (0, 1))), (ProofNode ('Restr', (130, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),))))
 .. proof found.
Step 1: 
  case split on whether 54 is visited
Step 2: case in (1) where 54 is visited
  Prove the number of visits to 54 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove visits to 130 related to visits to 215
    with equalities
      ((Mem) ('mem')) (@ addr 130)
      = ((Mem) ('Mem.1')) (@ addr 215)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 4294967040)))) (@ addr 130)
      ((Word32) ('r13')) (@ addr 130)
      ((Word32) ('r10')) (@ addr 130)
      ((Word32) ('r9')) (@ addr 130)
      ((Word32) ('r6')) (@ addr 130)
      ((Word32) (('r7' + ((0 - '#seq-visits') * 4294967040)))) (@ addr 130)
      ((Word32) ('r8')) (@ addr 130)
      ((Word32) ('r5')) (@ addr 130)
      ((Word32) ('ret')) (@ addr 130)
      ((Word32) ('r11')) (@ addr 130)
      ((Bool) (ROData('mem'))) (@ addr 130)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 130)
      ((Word32) ('userSize___unsigned_long#v')) (@ addr 215)
      ((Word32) ('chunk___int#v')) (@ addr 215)
      ((Word32) ('destSlots___struct_slot_range_C#v.offset_C')) (@ addr 215)
      ((Word32) ('prev_cap___struct_cap_C#v.words_C.1')) (@ addr 215)
      ((Word32) (('offset___unsigned_long#v' - ((0 - '#seq-visits') * ShiftLeft(1, WordCast('chunk___int#v')))))) (@ addr 215)
      ((Word32) ('destSlots___struct_slot_range_C#v.length_C')) (@ addr 215)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 215)
      ((Word32) ('newType___unsigned_long#v')) (@ addr 215)
      ((Word32) ('regionBase___ptr_to_void#v')) (@ addr 215)
      ((Word32) ('destSlots___struct_slot_range_C#v.cnode_C')) (@ addr 215)
      ((Word32) ('prev_cap___struct_cap_C#v.words_C.0')) (@ addr 215)
      ((Word32) ('regionBase___ptr_to_void#v.1')) (@ addr 215)
      ((Word32) ('retypeBase___ptr_to_void#v')) (@ addr 215)
      ((Word32) ('srcSlot___ptr_to_struct_cte_C#v')) (@ addr 215)
      ((Word32) ('srcSlot___ptr_to_struct_cte_C#v.1')) (@ addr 215)
      ((Word32) ('deviceMemory___unsigned_long#v')) (@ addr 215)
    .. proven.
Step 4: case in (3) where the length of the sequence < 2
  Prove the number of visits to 130 is in {0 ..< 3}
    .. proven.
Step 5: 
  Prove the number of visits to 215 is in {0 ..< 3}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Step 7: case in (3) where the length of the sequence is i + 2
  Prove the number of visits to 130 is in {i + 0 ..< i + 3}
    .. proven.
Step 8: 
  Prove the number of visits to 215 is in {i + 0 ..< i + 3}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (1) where 54 is not visited
  Prove the number of visits to 54 is in {0 ..< 1}
    .. proven.
Step 11: 
  Prove the number of visits to 218 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 200 is in {0 ..< 1}
    .. proven.
Step 13: 
  Prove the number of visits to 130 is in {0 ..< 1}
    .. proven.
Step 14: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeUntyped_Retype (ASM) <= Kernel_C.invokeUntyped_Retype (C)), time taken: 448.09s
Testing Function pair Pairing (switchToThread (ASM) <= Kernel_C.switchToThread (C))
  (function pairing 72 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (switchToThread (ASM) <= Kernel_C.switchToThread (C)), time taken: 0.71s
Testing Function pair Pairing (dist_init (ASM) <= Kernel_C.dist_init (C))
  (function pairing 73 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [66, 51]
  (in problem)
Now doing proof search in 66 init case in problem.
Discovered a loop relation for split points [72, 42]
  (in 66 init case in problem)
Now doing proof search in 72 init case in 66 init case in problem.
Discovered a loop relation for split points [141, 220]
  (in 72 init case in 66 init case in problem)
Now doing proof search in 141 init case in 72 init case in 66 init case in problem.
Discovered a loop relation for split points [82, 28]
  (in 141 init case in 72 init case in 66 init case in problem)
Now doing proof search in 82 init case in 141 init case in 72 init case in 66 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 82 init case in 141 init case in 72 init case in 66 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 82 init case in 141 init case in 72 init case in 66 init case in problem)
Discovered that points [170 (loop head)] can be bounded
  (in 82 init case in 141 init case in 72 init case in 66 init case in problem)
Discovered that points [185 (loop head)] can be bounded
  (in 82 init case in 141 init case in 72 init case in 66 init case in problem)
Now doing proof search in 82 loop case in 141 init case in 72 init case in 66 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 82 loop case in 141 init case in 72 init case in 66 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 82 loop case in 141 init case in 72 init case in 66 init case in problem)
Discovered that points [170 (loop head)] can be bounded
  (in 82 loop case in 141 init case in 72 init case in 66 init case in problem)
Discovered that points [185 (loop head)] can be bounded
  (in 82 loop case in 141 init case in 72 init case in 66 init case in problem)
Now doing proof search in 141 loop case in 72 init case in 66 init case in problem.
Discovered a loop relation for split points [82, 28]
  (in 141 loop case in 72 init case in 66 init case in problem)
Now doing proof search in 82 init case in 141 loop case in 72 init case in 66 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 82 init case in 141 loop case in 72 init case in 66 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 82 init case in 141 loop case in 72 init case in 66 init case in problem)
Discovered that points [170 (loop head)] can be bounded
  (in 82 init case in 141 loop case in 72 init case in 66 init case in problem)
Discovered that points [185 (loop head)] can be bounded
  (in 82 init case in 141 loop case in 72 init case in 66 init case in problem)
Now doing proof search in 82 loop case in 141 loop case in 72 init case in 66 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 82 loop case in 141 loop case in 72 init case in 66 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 82 loop case in 141 loop case in 72 init case in 66 init case in problem)
Discovered that points [170 (loop head)] can be bounded
  (in 82 loop case in 141 loop case in 72 init case in 66 init case in problem)
Discovered that points [185 (loop head)] can be bounded
  (in 82 loop case in 141 loop case in 72 init case in 66 init case in problem)
Now doing proof search in 72 loop case in 66 init case in problem.
Discovered a loop relation for split points [141, 220]
  (in 72 loop case in 66 init case in problem)
Now doing proof search in 141 init case in 72 loop case in 66 init case in problem.
Discovered a loop relation for split points [82, 28]
  (in 141 init case in 72 loop case in 66 init case in problem)
Now doing proof search in 82 init case in 141 init case in 72 loop case in 66 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 82 init case in 141 init case in 72 loop case in 66 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 82 init case in 141 init case in 72 loop case in 66 init case in problem)
Discovered that points [170 (loop head)] can be bounded
  (in 82 init case in 141 init case in 72 loop case in 66 init case in problem)
Discovered that points [185 (loop head)] can be bounded
  (in 82 init case in 141 init case in 72 loop case in 66 init case in problem)
Now doing proof search in 82 loop case in 141 init case in 72 loop case in 66 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 82 loop case in 141 init case in 72 loop case in 66 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 82 loop case in 141 init case in 72 loop case in 66 init case in problem)
Discovered that points [170 (loop head)] can be bounded
  (in 82 loop case in 141 init case in 72 loop case in 66 init case in problem)
Discovered that points [185 (loop head)] can be bounded
  (in 82 loop case in 141 init case in 72 loop case in 66 init case in problem)
Now doing proof search in 141 loop case in 72 loop case in 66 init case in problem.
Discovered a loop relation for split points [82, 28]
  (in 141 loop case in 72 loop case in 66 init case in problem)
Now doing proof search in 82 init case in 141 loop case in 72 loop case in 66 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 82 init case in 141 loop case in 72 loop case in 66 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 82 init case in 141 loop case in 72 loop case in 66 init case in problem)
Discovered that points [170 (loop head)] can be bounded
  (in 82 init case in 141 loop case in 72 loop case in 66 init case in problem)
Discovered that points [185 (loop head)] can be bounded
  (in 82 init case in 141 loop case in 72 loop case in 66 init case in problem)
Now doing proof search in 82 loop case in 141 loop case in 72 loop case in 66 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 82 loop case in 141 loop case in 72 loop case in 66 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 82 loop case in 141 loop case in 72 loop case in 66 init case in problem)
Discovered that points [170 (loop head)] can be bounded
  (in 82 loop case in 141 loop case in 72 loop case in 66 init case in problem)
Discovered that points [185 (loop head)] can be bounded
  (in 82 loop case in 141 loop case in 72 loop case in 66 init case in problem)
Now doing proof search in 66 loop case in problem.
Discovered a loop relation for split points [72, 42]
  (in 66 loop case in problem)
Now doing proof search in 72 init case in 66 loop case in problem.
Discovered that points [217 (loop head)] can be bounded
  (in 72 init case in 66 loop case in problem)
Discovered that points [24 (loop head)] can be bounded
  (in 72 init case in 66 loop case in problem)
Discovered that points [16 (loop head)] can be bounded
  (in 72 init case in 66 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 72 init case in 66 loop case in problem)
Discovered that points [141 (loop head)] can be bounded
  (in 72 init case in 66 loop case in problem)
Discovered that points [157 (loop head)] can be bounded
  (in 72 init case in 66 loop case in problem)
Discovered that points [170 (loop head)] can be bounded
  (in 72 init case in 66 loop case in problem)
Discovered that points [185 (loop head)] can be bounded
  (in 72 init case in 66 loop case in problem)
Now doing proof search in 72 loop case in 66 loop case in problem.
Discovered a loop relation for split points [141, 220]
  (in 72 loop case in 66 loop case in problem)
Now doing proof search in 141 init case in 72 loop case in 66 loop case in problem.
Discovered a loop relation for split points [82, 28]
  (in 141 init case in 72 loop case in 66 loop case in problem)
Now doing proof search in 82 init case in 141 init case in 72 loop case in 66 loop case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 82 init case in 141 init case in 72 loop case in 66 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 82 init case in 141 init case in 72 loop case in 66 loop case in problem)
Discovered that points [170 (loop head)] can be bounded
  (in 82 init case in 141 init case in 72 loop case in 66 loop case in problem)
Discovered that points [185 (loop head)] can be bounded
  (in 82 init case in 141 init case in 72 loop case in 66 loop case in problem)
Now doing proof search in 82 loop case in 141 init case in 72 loop case in 66 loop case in problem.
Discovered a loop relation for split points [87, 20]
  (in 82 loop case in 141 init case in 72 loop case in 66 loop case in problem)
Now doing proof search in 87 init case in 82 loop case in 141 init case in 72 loop case in 66 loop case in problem.
Discovered that points [185 (loop head)] can be bounded
  (in 87 init case in 82 loop case in 141 init case in 72 loop case in 66 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 87 init case in 82 loop case in 141 init case in 72 loop case in 66 loop case in problem)
Now doing proof search in 87 loop case in 82 loop case in 141 init case in 72 loop case in 66 loop case in problem.
Discovered a loop relation for split points [92, 13]
  (in 87 loop case in 82 loop case in 141 init case in 72 loop case in 66 loop case in problem)
Now doing proof search in 92 init case in 87 loop case in 82 loop case in 141 init case in 72 loop case in 66 loop case in problem.
Now doing proof search in 92 loop case in 87 loop case in 82 loop case in 141 init case in 72 loop case in 66 loop case in problem.
Now doing proof search in 141 loop case in 72 loop case in 66 loop case in problem.
Discovered a loop relation for split points [82, 28]
  (in 141 loop case in 72 loop case in 66 loop case in problem)
Now doing proof search in 82 init case in 141 loop case in 72 loop case in 66 loop case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 82 init case in 141 loop case in 72 loop case in 66 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 82 init case in 141 loop case in 72 loop case in 66 loop case in problem)
Discovered that points [170 (loop head)] can be bounded
  (in 82 init case in 141 loop case in 72 loop case in 66 loop case in problem)
Discovered that points [185 (loop head)] can be bounded
  (in 82 init case in 141 loop case in 72 loop case in 66 loop case in problem)
Now doing proof search in 82 loop case in 141 loop case in 72 loop case in 66 loop case in problem.
Discovered a loop relation for split points [87, 20]
  (in 82 loop case in 141 loop case in 72 loop case in 66 loop case in problem)
Now doing proof search in 87 init case in 82 loop case in 141 loop case in 72 loop case in 66 loop case in problem.
Discovered that points [185 (loop head)] can be bounded
  (in 87 init case in 82 loop case in 141 loop case in 72 loop case in 66 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 87 init case in 82 loop case in 141 loop case in 72 loop case in 66 loop case in problem)
Now doing proof search in 87 loop case in 82 loop case in 141 loop case in 72 loop case in 66 loop case in problem.
Discovered a loop relation for split points [92, 13]
  (in 87 loop case in 82 loop case in 141 loop case in 72 loop case in 66 loop case in problem)
Now doing proof search in 92 init case in 87 loop case in 82 loop case in 141 loop case in 72 loop case in 66 loop case in problem.
Now doing proof search in 92 loop case in 87 loop case in 82 loop case in 141 loop case in 72 loop case in 66 loop case in problem.
ProofNode ('Split', ((66, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (51, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#44#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (66, ('Number', (0, 3))), (ProofNode ('Restr', (51, ('Number', (0, 3))), (ProofNode ('Split', ((72, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (42, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#33#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (72, ('Number', (0, 1))), (ProofNode ('Restr', (42, ('Number', (0, 1))), (ProofNode ('Split', ((141, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (220, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v.1'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])])]), [], 2, 1), (ProofNode ('Restr', (141, ('Number', (0, 3))), (ProofNode ('Restr', (220, ('Number', (0, 3))), (ProofNode ('Split', ((82, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (82, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (170, ('Number', (0, 1))), (ProofNode ('Restr', (185, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (82, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (16, ('Number', (0, 2))), (ProofNode ('Restr', (5, ('Number', (0, 3))), (ProofNode ('Restr', (170, ('Number', (0, 1))), (ProofNode ('Restr', (185, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)))),)),)), ProofNode ('Restr', (141, ('Offset', (0, 3))), (ProofNode ('Restr', (220, ('Offset', (0, 3))), (ProofNode ('Split', ((82, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (82, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (170, ('Number', (0, 1))), (ProofNode ('Restr', (185, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (82, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (16, ('Number', (0, 2))), (ProofNode ('Restr', (5, ('Number', (0, 3))), (ProofNode ('Restr', (170, ('Number', (0, 1))), (ProofNode ('Restr', (185, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)))),)),)))),)),)), ProofNode ('Restr', (72, ('Offset', (0, 3))), (ProofNode ('Restr', (42, ('Offset', (0, 3))), (ProofNode ('Split', ((141, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (220, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v.1'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])])]), [], 2, 1), (ProofNode ('Restr', (141, ('Number', (0, 3))), (ProofNode ('Restr', (220, ('Number', (0, 3))), (ProofNode ('Split', ((82, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (82, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (170, ('Number', (0, 1))), (ProofNode ('Restr', (185, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (82, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (16, ('Number', (0, 2))), (ProofNode ('Restr', (5, ('Number', (0, 4))), (ProofNode ('Restr', (170, ('Number', (0, 1))), (ProofNode ('Restr', (185, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)))),)),)), ProofNode ('Restr', (141, ('Offset', (0, 3))), (ProofNode ('Restr', (220, ('Offset', (0, 3))), (ProofNode ('Split', ((82, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (82, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (170, ('Number', (0, 1))), (ProofNode ('Restr', (185, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (82, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (16, ('Number', (0, 2))), (ProofNode ('Restr', (5, ('Number', (0, 4))), (ProofNode ('Restr', (170, ('Number', (0, 1))), (ProofNode ('Restr', (185, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)))),)),)))),)),)))),)),)), ProofNode ('Restr', (66, ('Offset', (0, 3))), (ProofNode ('Restr', (51, ('Offset', (0, 3))), (ProofNode ('Split', ((72, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (42, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#33#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (72, ('Number', (0, 1))), (ProofNode ('Restr', (42, ('Number', (0, 1))), (ProofNode ('Restr', (217, ('Number', (0, 1))), (ProofNode ('Restr', (24, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (141, ('Number', (0, 1))), (ProofNode ('Restr', (157, ('Number', (0, 1))), (ProofNode ('Restr', (170, ('Number', (0, 1))), (ProofNode ('Restr', (185, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)),)),)), ProofNode ('Restr', (72, ('Offset', (0, 3))), (ProofNode ('Restr', (42, ('Offset', (0, 3))), (ProofNode ('Split', ((141, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (220, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v.1'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])])]), [], 2, 1), (ProofNode ('Restr', (141, ('Number', (0, 3))), (ProofNode ('Restr', (220, ('Number', (0, 3))), (ProofNode ('Split', ((82, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (82, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (170, ('Number', (0, 1))), (ProofNode ('Restr', (185, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (82, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Split', ((87, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (20, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#15#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (87, ('Number', (0, 3))), (ProofNode ('Restr', (20, ('Number', (0, 3))), (ProofNode ('Restr', (185, ('Number', (0, 5))), (ProofNode ('Restr', (5, ('Number', (0, 6))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (87, ('Offset', (0, 3))), (ProofNode ('Restr', (20, ('Offset', (0, 3))), (ProofNode ('Split', ((92, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (13, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (92, ('Number', (0, 1))), (ProofNode ('Restr', (13, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (92, ('Offset', (0, 3))), (ProofNode ('Restr', (13, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)), ProofNode ('Restr', (141, ('Offset', (0, 3))), (ProofNode ('Restr', (220, ('Offset', (0, 3))), (ProofNode ('Split', ((82, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (82, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (170, ('Number', (0, 1))), (ProofNode ('Restr', (185, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (82, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Split', ((87, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (20, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#15#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (87, ('Number', (0, 3))), (ProofNode ('Restr', (20, ('Number', (0, 3))), (ProofNode ('Restr', (185, ('Number', (0, 5))), (ProofNode ('Restr', (5, ('Number', (0, 6))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (87, ('Offset', (0, 3))), (ProofNode ('Restr', (20, ('Offset', (0, 3))), (ProofNode ('Split', ((92, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (13, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (92, ('Number', (0, 1))), (ProofNode ('Restr', (13, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (92, ('Offset', (0, 3))), (ProofNode ('Restr', (13, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 66 related to visits to 51
    with equalities
      ((Mem) ('mem')) (@ addr 66)
      = ((Mem) ('Mem')) (@ addr 51)
    and with invariants
      ((Word32) ('r7')) (@ addr 66)
      ((Word32) ('r4')) (@ addr 66)
      ((Word32) ('r8')) (@ addr 66)
      ((Word32) ('r13')) (@ addr 66)
      ((Word32) ('r5')) (@ addr 66)
      ((Word32) ('r0')) (@ addr 66)
      ((Word32) ('r9')) (@ addr 66)
      ((Word32) ('ret')) (@ addr 66)
      ((Word32) ('r2')) (@ addr 66)
      ((Word32) ('r11')) (@ addr 66)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 66)
      ((Word32) ('r10')) (@ addr 66)
      ((Bool) (ROData('mem'))) (@ addr 66)
      ((Word32) ('r6')) (@ addr 66)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 66)
      ((Word32) ('nirqs___int#v')) (@ addr 51)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 51)
      ((Word32) (('loop#44#count' + ((0 - '#seq-visits') * 1)))) (@ addr 51)
      ((Word32[50]) ('GhostAssertions')) (@ addr 51)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 66 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 51 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove visits to 72 related to visits to 42
    with equalities
      ((Mem) ('mem')) (@ addr 72)
      = ((Mem) ('Mem')) (@ addr 42)
    and with invariants
      ((Word32) ('r7')) (@ addr 72)
      ((Word32) ('r4')) (@ addr 72)
      ((Word32) ('r8')) (@ addr 72)
      ((Word32) ('r5')) (@ addr 72)
      ((Word32) ('r0')) (@ addr 72)
      ((Word32) ('r9')) (@ addr 72)
      ((Word32) ('ret')) (@ addr 72)
      ((Word32) ('r2')) (@ addr 72)
      ((Word32) ('r11')) (@ addr 72)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 72)
      ((Word32) ('r12')) (@ addr 72)
      ((Word32) ('r13')) (@ addr 72)
      ((Word32) ('r10')) (@ addr 72)
      ((Bool) (ROData('mem'))) (@ addr 72)
      ((Word32) ('r6')) (@ addr 72)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 72)
      ((Word32) ('nirqs___int#v')) (@ addr 42)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 42)
      ((Word32) (('loop#33#count' + ((0 - '#seq-visits') * 1)))) (@ addr 42)
      ((Word32[50]) ('GhostAssertions')) (@ addr 42)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 72 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 42 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove visits to 141 related to visits to 220
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 141)
      ((Word32) ('r4')) (@ addr 141)
      ((Word32) ('r8')) (@ addr 141)
      ((Word32) ('r11')) (@ addr 141)
      ((Word32) ('r13')) (@ addr 141)
      ((Word32) ('r0')) (@ addr 141)
      ((Word32) ('r9')) (@ addr 141)
      ((Word32) ('ret')) (@ addr 141)
      ((Word32) ('r2')) (@ addr 141)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 141)
      ((Word32) ('r10')) (@ addr 141)
      ((Mem) ('mem')) (@ addr 141)
      ((Word32) ('r5')) (@ addr 141)
      ((Word32) ('r6')) (@ addr 141)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 141)
      ((Word32) ('nirqs___int#v.1')) (@ addr 220)
      ((Word32) ('nirqs___int#v')) (@ addr 220)
      ((Mem) ('Mem.1')) (@ addr 220)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 220)
      ((Mem) ('Mem')) (@ addr 220)
      ((Word32[50]) ('GhostAssertions')) (@ addr 220)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 220)
    .. proven.
Step 8: case in (7) where the length of the sequence < 2
  Prove the number of visits to 141 is in {0 ..< 3}
    .. proven.
Step 9: 
  Prove the number of visits to 220 is in {0 ..< 3}
    .. proven.
Step 10: 
  prove visits to 82 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 82)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 82)
      ((Word32) ('r4')) (@ addr 82)
      ((Word32) ('r8')) (@ addr 82)
      ((Word32) ('r3')) (@ addr 82)
      ((Word32) ('r13')) (@ addr 82)
      ((Word32) ('r5')) (@ addr 82)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 82)
      ((Word32) ('r9')) (@ addr 82)
      ((Word32) ('ret')) (@ addr 82)
      ((Word32) ('r2')) (@ addr 82)
      ((Word32) ('r11')) (@ addr 82)
      ((Word32) ('r12')) (@ addr 82)
      ((Word32) ('r10')) (@ addr 82)
      ((Bool) (ROData('mem'))) (@ addr 82)
      ((Word32) ('r6')) (@ addr 82)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 82)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 11: case in (10) where the length of the sequence < 2
  Prove the number of visits to 82 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 13: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 14: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 170 is in {0 ..< 1}
    .. proven.
Step 16: 
  Prove the number of visits to 185 is in {0 ..< 1}
    .. proven.
Step 17: 
  prove all verification conditions
    .. proven.
Step 18: case in (10) where the length of the sequence is a + 2
  Prove the number of visits to 82 is in {a + 0 ..< a + 3}
    .. proven.
Step 19: 
  Prove the number of visits to 28 is in {a + 0 ..< a + 3}
    .. proven.
Step 20: 
  Prove the number of visits to 16 is in {0 ..< 2}
    .. proven.
Step 21: 
  Prove the number of visits to 5 is in {0 ..< 3}
    .. proven.
Step 22: 
  Prove the number of visits to 170 is in {0 ..< 1}
    .. proven.
Step 23: 
  Prove the number of visits to 185 is in {0 ..< 2}
    .. proven.
Step 24: 
  prove all verification conditions
    .. proven.
Step 25: case in (7) where the length of the sequence is k + 2
  Prove the number of visits to 141 is in {k + 0 ..< k + 3}
    .. proven.
Step 26: 
  Prove the number of visits to 220 is in {k + 0 ..< k + 3}
    .. proven.
Step 27: 
  prove visits to 82 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 82)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 82)
      ((Word32) ('r4')) (@ addr 82)
      ((Word32) ('r8')) (@ addr 82)
      ((Word32) ('r3')) (@ addr 82)
      ((Word32) ('r13')) (@ addr 82)
      ((Word32) ('r5')) (@ addr 82)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 82)
      ((Word32) ('r9')) (@ addr 82)
      ((Word32) ('ret')) (@ addr 82)
      ((Word32) ('r2')) (@ addr 82)
      ((Word32) ('r11')) (@ addr 82)
      ((Word32) ('r12')) (@ addr 82)
      ((Word32) ('r10')) (@ addr 82)
      ((Bool) (ROData('mem'))) (@ addr 82)
      ((Word32) ('r6')) (@ addr 82)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 82)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 28: case in (27) where the length of the sequence < 2
  Prove the number of visits to 82 is in {0 ..< 1}
    .. proven.
Step 29: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 30: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 31: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 32: 
  Prove the number of visits to 170 is in {0 ..< 1}
    .. proven.
Step 33: 
  Prove the number of visits to 185 is in {0 ..< 1}
    .. proven.
Step 34: 
  prove all verification conditions
    .. proven.
Step 35: case in (27) where the length of the sequence is b + 2
  Prove the number of visits to 82 is in {b + 0 ..< b + 3}
    .. proven.
Step 36: 
  Prove the number of visits to 28 is in {b + 0 ..< b + 3}
    .. proven.
Step 37: 
  Prove the number of visits to 16 is in {0 ..< 2}
    .. proven.
Step 38: 
  Prove the number of visits to 5 is in {0 ..< 3}
    .. proven.
Step 39: 
  Prove the number of visits to 170 is in {0 ..< 1}
    .. proven.
Step 40: 
  Prove the number of visits to 185 is in {0 ..< 2}
    .. proven.
Step 41: 
  prove all verification conditions
    .. proven.
Step 42: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 72 is in {j + 0 ..< j + 3}
    .. proven.
Step 43: 
  Prove the number of visits to 42 is in {j + 0 ..< j + 3}
    .. proven.
Step 44: 
  prove visits to 141 related to visits to 220
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 141)
      ((Word32) ('r4')) (@ addr 141)
      ((Word32) ('r8')) (@ addr 141)
      ((Word32) ('r11')) (@ addr 141)
      ((Word32) ('r13')) (@ addr 141)
      ((Word32) ('r0')) (@ addr 141)
      ((Word32) ('r9')) (@ addr 141)
      ((Word32) ('ret')) (@ addr 141)
      ((Word32) ('r2')) (@ addr 141)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 141)
      ((Word32) ('r10')) (@ addr 141)
      ((Mem) ('mem')) (@ addr 141)
      ((Word32) ('r5')) (@ addr 141)
      ((Word32) ('r6')) (@ addr 141)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 141)
      ((Word32) ('nirqs___int#v.1')) (@ addr 220)
      ((Word32) ('nirqs___int#v')) (@ addr 220)
      ((Mem) ('Mem.1')) (@ addr 220)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 220)
      ((Mem) ('Mem')) (@ addr 220)
      ((Word32[50]) ('GhostAssertions')) (@ addr 220)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 220)
    .. proven.
Step 45: case in (44) where the length of the sequence < 2
  Prove the number of visits to 141 is in {0 ..< 3}
    .. proven.
Step 46: 
  Prove the number of visits to 220 is in {0 ..< 3}
    .. proven.
Step 47: 
  prove visits to 82 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 82)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 82)
      ((Word32) ('r4')) (@ addr 82)
      ((Word32) ('r8')) (@ addr 82)
      ((Word32) ('r3')) (@ addr 82)
      ((Word32) ('r13')) (@ addr 82)
      ((Word32) ('r5')) (@ addr 82)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 82)
      ((Word32) ('r9')) (@ addr 82)
      ((Word32) ('ret')) (@ addr 82)
      ((Word32) ('r2')) (@ addr 82)
      ((Word32) ('r11')) (@ addr 82)
      ((Word32) ('r12')) (@ addr 82)
      ((Word32) ('r10')) (@ addr 82)
      ((Bool) (ROData('mem'))) (@ addr 82)
      ((Word32) ('r6')) (@ addr 82)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 82)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 48: case in (47) where the length of the sequence < 2
  Prove the number of visits to 82 is in {0 ..< 1}
    .. proven.
Step 49: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 50: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 51: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 52: 
  Prove the number of visits to 170 is in {0 ..< 1}
    .. proven.
Step 53: 
  Prove the number of visits to 185 is in {0 ..< 1}
    .. proven.
Step 54: 
  prove all verification conditions
    .. proven.
Step 55: case in (47) where the length of the sequence is i2 + 2
  Prove the number of visits to 82 is in {i2 + 0 ..< i2 + 3}
    .. proven.
Step 56: 
  Prove the number of visits to 28 is in {i2 + 0 ..< i2 + 3}
    .. proven.
Step 57: 
  Prove the number of visits to 16 is in {0 ..< 2}
    .. proven.
Step 58: 
  Prove the number of visits to 5 is in {0 ..< 4}
    .. proven.
Step 59: 
  Prove the number of visits to 170 is in {0 ..< 1}
    .. proven.
Step 60: 
  Prove the number of visits to 185 is in {0 ..< 3}
    .. proven.
Step 61: 
  prove all verification conditions
    .. proven.
Step 62: case in (44) where the length of the sequence is c + 2
  Prove the number of visits to 141 is in {c + 0 ..< c + 3}
    .. proven.
Step 63: 
  Prove the number of visits to 220 is in {c + 0 ..< c + 3}
    .. proven.
Step 64: 
  prove visits to 82 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 82)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 82)
      ((Word32) ('r4')) (@ addr 82)
      ((Word32) ('r8')) (@ addr 82)
      ((Word32) ('r3')) (@ addr 82)
      ((Word32) ('r13')) (@ addr 82)
      ((Word32) ('r5')) (@ addr 82)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 82)
      ((Word32) ('r9')) (@ addr 82)
      ((Word32) ('ret')) (@ addr 82)
      ((Word32) ('r2')) (@ addr 82)
      ((Word32) ('r11')) (@ addr 82)
      ((Word32) ('r12')) (@ addr 82)
      ((Word32) ('r10')) (@ addr 82)
      ((Bool) (ROData('mem'))) (@ addr 82)
      ((Word32) ('r6')) (@ addr 82)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 82)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 65: case in (64) where the length of the sequence < 2
  Prove the number of visits to 82 is in {0 ..< 1}
    .. proven.
Step 66: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 67: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 68: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 69: 
  Prove the number of visits to 170 is in {0 ..< 1}
    .. proven.
Step 70: 
  Prove the number of visits to 185 is in {0 ..< 1}
    .. proven.
Step 71: 
  prove all verification conditions
    .. proven.
Step 72: case in (64) where the length of the sequence is j2 + 2
  Prove the number of visits to 82 is in {j2 + 0 ..< j2 + 3}
    .. proven.
Step 73: 
  Prove the number of visits to 28 is in {j2 + 0 ..< j2 + 3}
    .. proven.
Step 74: 
  Prove the number of visits to 16 is in {0 ..< 2}
    .. proven.
Step 75: 
  Prove the number of visits to 5 is in {0 ..< 4}
    .. proven.
Step 76: 
  Prove the number of visits to 170 is in {0 ..< 1}
    .. proven.
Step 77: 
  Prove the number of visits to 185 is in {0 ..< 3}
    .. proven.
Step 78: 
  prove all verification conditions
    .. proven.
Step 79: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 66 is in {i + 0 ..< i + 3}
    .. proven.
Step 80: 
  Prove the number of visits to 51 is in {i + 0 ..< i + 3}
    .. proven.
Step 81: 
  prove visits to 72 related to visits to 42
    with equalities
      ((Mem) ('mem')) (@ addr 72)
      = ((Mem) ('Mem')) (@ addr 42)
    and with invariants
      ((Word32) ('r7')) (@ addr 72)
      ((Word32) ('r4')) (@ addr 72)
      ((Word32) ('r8')) (@ addr 72)
      ((Word32) ('r5')) (@ addr 72)
      ((Word32) ('r0')) (@ addr 72)
      ((Word32) ('r9')) (@ addr 72)
      ((Word32) ('ret')) (@ addr 72)
      ((Word32) ('r2')) (@ addr 72)
      ((Word32) ('r11')) (@ addr 72)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 72)
      ((Word32) ('r12')) (@ addr 72)
      ((Word32) ('r13')) (@ addr 72)
      ((Word32) ('r10')) (@ addr 72)
      ((Bool) (ROData('mem'))) (@ addr 72)
      ((Word32) ('r6')) (@ addr 72)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 72)
      ((Word32) ('nirqs___int#v')) (@ addr 42)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 42)
      ((Word32) (('loop#33#count' + ((0 - '#seq-visits') * 1)))) (@ addr 42)
      ((Word32[50]) ('GhostAssertions')) (@ addr 42)
    .. proven.
Step 82: case in (81) where the length of the sequence < 2
  Prove the number of visits to 72 is in {0 ..< 1}
    .. proven.
Step 83: 
  Prove the number of visits to 42 is in {0 ..< 1}
    .. proven.
Step 84: 
  Prove the number of visits to 217 is in {0 ..< 1}
    .. proven.
Step 85: 
  Prove the number of visits to 24 is in {0 ..< 1}
    .. proven.
Step 86: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 87: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 88: 
  Prove the number of visits to 141 is in {0 ..< 1}
    .. proven.
Step 89: 
  Prove the number of visits to 157 is in {0 ..< 1}
    .. proven.
Step 90: 
  Prove the number of visits to 170 is in {0 ..< 1}
    .. proven.
Step 91: 
  Prove the number of visits to 185 is in {0 ..< 1}
    .. proven.
Step 92: 
  prove all verification conditions
    .. proven.
Step 93: case in (81) where the length of the sequence is k2 + 2
  Prove the number of visits to 72 is in {k2 + 0 ..< k2 + 3}
    .. proven.
Step 94: 
  Prove the number of visits to 42 is in {k2 + 0 ..< k2 + 3}
    .. proven.
Step 95: 
  prove visits to 141 related to visits to 220
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 141)
      ((Word32) ('r4')) (@ addr 141)
      ((Word32) ('r8')) (@ addr 141)
      ((Word32) ('r11')) (@ addr 141)
      ((Word32) ('r13')) (@ addr 141)
      ((Word32) ('r0')) (@ addr 141)
      ((Word32) ('r9')) (@ addr 141)
      ((Word32) ('ret')) (@ addr 141)
      ((Word32) ('r2')) (@ addr 141)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 141)
      ((Word32) ('r10')) (@ addr 141)
      ((Mem) ('mem')) (@ addr 141)
      ((Word32) ('r5')) (@ addr 141)
      ((Word32) ('r6')) (@ addr 141)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 141)
      ((Word32) ('nirqs___int#v.1')) (@ addr 220)
      ((Word32) ('nirqs___int#v')) (@ addr 220)
      ((Mem) ('Mem.1')) (@ addr 220)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 220)
      ((Mem) ('Mem')) (@ addr 220)
      ((Word32[50]) ('GhostAssertions')) (@ addr 220)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 220)
    .. proven.
Step 96: case in (95) where the length of the sequence < 2
  Prove the number of visits to 141 is in {0 ..< 3}
    .. proven.
Step 97: 
  Prove the number of visits to 220 is in {0 ..< 3}
    .. proven.
Step 98: 
  prove visits to 82 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 82)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 82)
      ((Word32) ('r4')) (@ addr 82)
      ((Word32) ('r8')) (@ addr 82)
      ((Word32) ('r3')) (@ addr 82)
      ((Word32) ('r13')) (@ addr 82)
      ((Word32) ('r5')) (@ addr 82)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 82)
      ((Word32) ('r9')) (@ addr 82)
      ((Word32) ('ret')) (@ addr 82)
      ((Word32) ('r2')) (@ addr 82)
      ((Word32) ('r11')) (@ addr 82)
      ((Word32) ('r12')) (@ addr 82)
      ((Word32) ('r10')) (@ addr 82)
      ((Bool) (ROData('mem'))) (@ addr 82)
      ((Word32) ('r6')) (@ addr 82)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 82)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 99: case in (98) where the length of the sequence < 2
  Prove the number of visits to 82 is in {0 ..< 1}
    .. proven.
Step 100: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 101: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 102: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 103: 
  Prove the number of visits to 170 is in {0 ..< 1}
    .. proven.
Step 104: 
  Prove the number of visits to 185 is in {0 ..< 1}
    .. proven.
Step 105: 
  prove all verification conditions
    .. proven.
Step 106: case in (98) where the length of the sequence is b2 + 2
  Prove the number of visits to 82 is in {b2 + 0 ..< b2 + 3}
    .. proven.
Step 107: 
  Prove the number of visits to 28 is in {b2 + 0 ..< b2 + 3}
    .. proven.
Step 108: 
  prove visits to 87 related to visits to 20
    with equalities
      ((Mem) ('mem')) (@ addr 87)
      = ((Mem) ('Mem')) (@ addr 20)
    and with invariants
      ((Word32) ('r7')) (@ addr 87)
      ((Word32) ('r4')) (@ addr 87)
      ((Word32) ('r8')) (@ addr 87)
      ((Word32) ('r14')) (@ addr 87)
      ((Word32) ('r13')) (@ addr 87)
      ((Word32) ('r5')) (@ addr 87)
      ((Word32) ('r0')) (@ addr 87)
      ((Word32) ('r9')) (@ addr 87)
      ((Word32) ('ret')) (@ addr 87)
      ((Word32) ('r2')) (@ addr 87)
      ((Word32) ('r11')) (@ addr 87)
      ((Word32) ('r12')) (@ addr 87)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 87)
      ((Word32) ('r10')) (@ addr 87)
      ((Bool) (ROData('mem'))) (@ addr 87)
      ((Word32) ('r6')) (@ addr 87)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 87)
      ((Word32) (('loop#15#count' + ((0 - '#seq-visits') * 1)))) (@ addr 20)
      ((Word32) ('nirqs___int#v')) (@ addr 20)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 20)
      ((Word32[50]) ('GhostAssertions')) (@ addr 20)
    .. proven.
Step 109: case in (108) where the length of the sequence < 2
  Prove the number of visits to 87 is in {0 ..< 3}
    .. proven.
Step 110: 
  Prove the number of visits to 20 is in {0 ..< 3}
    .. proven.
Step 111: 
  Prove the number of visits to 185 is in {0 ..< 5}
    .. proven.
Step 112: 
  Prove the number of visits to 5 is in {0 ..< 6}
    .. proven.
Step 113: 
  prove all verification conditions
    .. proven.
Step 114: case in (108) where the length of the sequence is c2 + 2
  Prove the number of visits to 87 is in {c2 + 0 ..< c2 + 3}
    .. proven.
Step 115: 
  Prove the number of visits to 20 is in {c2 + 0 ..< c2 + 3}
    .. proven.
Step 116: 
  prove visits to 92 related to visits to 13
    with equalities
      ((Mem) ('mem')) (@ addr 92)
      = ((Mem) ('Mem')) (@ addr 13)
    and with invariants
      ((Word32) ('r7')) (@ addr 92)
      ((Word32) ('r4')) (@ addr 92)
      ((Word32) ('r8')) (@ addr 92)
      ((Word32) ('r5')) (@ addr 92)
      ((Word32) ('r0')) (@ addr 92)
      ((Word32) ('r9')) (@ addr 92)
      ((Word32) ('ret')) (@ addr 92)
      ((Word32) ('r2')) (@ addr 92)
      ((Word32) ('r11')) (@ addr 92)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 92)
      ((Word32) ('r12')) (@ addr 92)
      ((Word32) ('r13')) (@ addr 92)
      ((Word32) ('r10')) (@ addr 92)
      ((Bool) (ROData('mem'))) (@ addr 92)
      ((Word32) ('r6')) (@ addr 92)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 92)
      ((Word32) ('nirqs___int#v')) (@ addr 13)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 13)
      ((Word32[50]) ('GhostAssertions')) (@ addr 13)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
    .. proven.
Step 117: case in (116) where the length of the sequence < 2
  Prove the number of visits to 92 is in {0 ..< 1}
    .. proven.
Step 118: 
  Prove the number of visits to 13 is in {0 ..< 1}
    .. proven.
Step 119: 
  prove all verification conditions
    .. proven.
Step 120: case in (116) where the length of the sequence is i3 + 2
  Prove the number of visits to 92 is in {i3 + 0 ..< i3 + 3}
    .. proven.
Step 121: 
  Prove the number of visits to 13 is in {i3 + 0 ..< i3 + 3}
    .. proven.
Step 122: 
  prove all verification conditions
    .. proven.
Step 123: case in (95) where the length of the sequence is a2 + 2
  Prove the number of visits to 141 is in {a2 + 0 ..< a2 + 3}
    .. proven.
Step 124: 
  Prove the number of visits to 220 is in {a2 + 0 ..< a2 + 3}
    .. proven.
Step 125: 
  prove visits to 82 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 82)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 82)
      ((Word32) ('r4')) (@ addr 82)
      ((Word32) ('r8')) (@ addr 82)
      ((Word32) ('r3')) (@ addr 82)
      ((Word32) ('r13')) (@ addr 82)
      ((Word32) ('r5')) (@ addr 82)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 82)
      ((Word32) ('r9')) (@ addr 82)
      ((Word32) ('ret')) (@ addr 82)
      ((Word32) ('r2')) (@ addr 82)
      ((Word32) ('r11')) (@ addr 82)
      ((Word32) ('r12')) (@ addr 82)
      ((Word32) ('r10')) (@ addr 82)
      ((Bool) (ROData('mem'))) (@ addr 82)
      ((Word32) ('r6')) (@ addr 82)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 82)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 126: case in (125) where the length of the sequence < 2
  Prove the number of visits to 82 is in {0 ..< 1}
    .. proven.
Step 127: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 128: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 129: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 130: 
  Prove the number of visits to 170 is in {0 ..< 1}
    .. proven.
Step 131: 
  Prove the number of visits to 185 is in {0 ..< 1}
    .. proven.
Step 132: 
  prove all verification conditions
    .. proven.
Step 133: case in (125) where the length of the sequence is j3 + 2
  Prove the number of visits to 82 is in {j3 + 0 ..< j3 + 3}
    .. proven.
Step 134: 
  Prove the number of visits to 28 is in {j3 + 0 ..< j3 + 3}
    .. proven.
Step 135: 
  prove visits to 87 related to visits to 20
    with equalities
      ((Mem) ('mem')) (@ addr 87)
      = ((Mem) ('Mem')) (@ addr 20)
    and with invariants
      ((Word32) ('r7')) (@ addr 87)
      ((Word32) ('r4')) (@ addr 87)
      ((Word32) ('r8')) (@ addr 87)
      ((Word32) ('r14')) (@ addr 87)
      ((Word32) ('r13')) (@ addr 87)
      ((Word32) ('r5')) (@ addr 87)
      ((Word32) ('r0')) (@ addr 87)
      ((Word32) ('r9')) (@ addr 87)
      ((Word32) ('ret')) (@ addr 87)
      ((Word32) ('r2')) (@ addr 87)
      ((Word32) ('r11')) (@ addr 87)
      ((Word32) ('r12')) (@ addr 87)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 87)
      ((Word32) ('r10')) (@ addr 87)
      ((Bool) (ROData('mem'))) (@ addr 87)
      ((Word32) ('r6')) (@ addr 87)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 87)
      ((Word32) (('loop#15#count' + ((0 - '#seq-visits') * 1)))) (@ addr 20)
      ((Word32) ('nirqs___int#v')) (@ addr 20)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 20)
      ((Word32[50]) ('GhostAssertions')) (@ addr 20)
    .. proven.
Step 136: case in (135) where the length of the sequence < 2
  Prove the number of visits to 87 is in {0 ..< 3}
    .. proven.
Step 137: 
  Prove the number of visits to 20 is in {0 ..< 3}
    .. proven.
Step 138: 
  Prove the number of visits to 185 is in {0 ..< 5}
    .. proven.
Step 139: 
  Prove the number of visits to 5 is in {0 ..< 6}
    .. proven.
Step 140: 
  prove all verification conditions
    .. proven.
Step 141: case in (135) where the length of the sequence is k3 + 2
  Prove the number of visits to 87 is in {k3 + 0 ..< k3 + 3}
    .. proven.
Step 142: 
  Prove the number of visits to 20 is in {k3 + 0 ..< k3 + 3}
    .. proven.
Step 143: 
  prove visits to 92 related to visits to 13
    with equalities
      ((Mem) ('mem')) (@ addr 92)
      = ((Mem) ('Mem')) (@ addr 13)
    and with invariants
      ((Word32) ('r7')) (@ addr 92)
      ((Word32) ('r4')) (@ addr 92)
      ((Word32) ('r8')) (@ addr 92)
      ((Word32) ('r5')) (@ addr 92)
      ((Word32) ('r0')) (@ addr 92)
      ((Word32) ('r9')) (@ addr 92)
      ((Word32) ('ret')) (@ addr 92)
      ((Word32) ('r2')) (@ addr 92)
      ((Word32) ('r11')) (@ addr 92)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 92)
      ((Word32) ('r12')) (@ addr 92)
      ((Word32) ('r13')) (@ addr 92)
      ((Word32) ('r10')) (@ addr 92)
      ((Bool) (ROData('mem'))) (@ addr 92)
      ((Word32) ('r6')) (@ addr 92)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 92)
      ((Word32) ('nirqs___int#v')) (@ addr 13)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 13)
      ((Word32[50]) ('GhostAssertions')) (@ addr 13)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
    .. proven.
Step 144: case in (143) where the length of the sequence < 2
  Prove the number of visits to 92 is in {0 ..< 1}
    .. proven.
Step 145: 
  Prove the number of visits to 13 is in {0 ..< 1}
    .. proven.
Step 146: 
  prove all verification conditions
    .. proven.
Step 147: case in (143) where the length of the sequence is a3 + 2
  Prove the number of visits to 92 is in {a3 + 0 ..< a3 + 3}
    .. proven.
Step 148: 
  Prove the number of visits to 13 is in {a3 + 0 ..< a3 + 3}
    .. proven.
Step 149: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (dist_init (ASM) <= Kernel_C.dist_init (C)), time taken: 2258.77s
Testing Function pair Pairing (create_bi_frame_cap (ASM) <= Kernel_C.create_bi_frame_cap (C))
  (function pairing 74 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_bi_frame_cap (ASM) <= Kernel_C.create_bi_frame_cap (C)), time taken: 14.13s
Testing Function pair Pairing (isFinalCapability (ASM) <= Kernel_C.isFinalCapability (C))
  (function pairing 75 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isFinalCapability (ASM) <= Kernel_C.isFinalCapability (C)), time taken: 9.34s
Testing Function pair Pairing (decodeCNodeInvocation (ASM) <= Kernel_C.decodeCNodeInvocation (C))
  (function pairing 76 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeCNodeInvocation (ASM) <= Kernel_C.decodeCNodeInvocation (C)), time taken: 1669.04s
Testing Function pair Pairing (sendIPC (ASM) <= Kernel_C.sendIPC (C))
  (function pairing 77 of 284)
 .. built problem, finding proof
Decided to case split at (53, 'ASM')
  (in problem)
Now doing proof search in true case (53 visited) in problem.
Now doing proof search in false case (53 not visited) in problem.
ProofNode ('CaseSplit', (53, 'ASM'), (ProofNode ('Restr', (53, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (53, ('Number', (0, 1))), (ProofNode ('Restr', (42, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 53 is visited
Step 2: case in (1) where 53 is visited
  Prove the number of visits to 53 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 53 is not visited
  Prove the number of visits to 53 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 42 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (sendIPC (ASM) <= Kernel_C.sendIPC (C)), time taken: 62.36s
Testing Function pair Pairing (invokeIRQHandler_AckIRQ (ASM) <= Kernel_C.invokeIRQHandler_AckIRQ (C))
  (function pairing 78 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeIRQHandler_AckIRQ (ASM) <= Kernel_C.invokeIRQHandler_AckIRQ (C)), time taken: 0.37s
Testing Function pair Pairing (create_ipcbuf_frame_cap (ASM) <= Kernel_C.create_ipcbuf_frame_cap (C))
  (function pairing 79 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_ipcbuf_frame_cap (ASM) <= Kernel_C.create_ipcbuf_frame_cap (C)), time taken: 20.83s
Testing Function pair Pairing (lockTLBEntry (ASM) <= Kernel_C.lockTLBEntry (C))
  (function pairing 80 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lockTLBEntry (ASM) <= Kernel_C.lockTLBEntry (C)), time taken: 0.78s
Testing Function pair Pairing (lookupPivotSlot (ASM) <= Kernel_C.lookupPivotSlot (C))
  (function pairing 81 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupPivotSlot (ASM) <= Kernel_C.lookupPivotSlot (C)), time taken: 5.23s
Testing Function pair Pairing (write_it_asid_pool (ASM) <= Kernel_C.write_it_asid_pool (C))
  (function pairing 82 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (write_it_asid_pool (ASM) <= Kernel_C.write_it_asid_pool (C)), time taken: 17.92s
Testing Function pair Pairing (decodeWriteRegisters (ASM) <= Kernel_C.decodeWriteRegisters (C))
  (function pairing 83 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeWriteRegisters (ASM) <= Kernel_C.decodeWriteRegisters (C)), time taken: 9.81s
Testing Function pair Pairing (initL2Cache (ASM) <= Kernel_C.initL2Cache (C))
  (function pairing 84 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [82, 46]
  (in problem)
Now doing proof search in 82 init case in problem.
Now doing proof search in 82 loop case in problem.
ProofNode ('Split', ((82, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (46, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#46#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (82, ('Number', (0, 1))), (ProofNode ('Restr', (46, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (82, ('Offset', (0, 1))), (ProofNode ('Restr', (46, ('Offset', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 82 related to visits to 46
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 82)
      ((Word32) ('r4')) (@ addr 82)
      ((Word32) ('r8')) (@ addr 82)
      ((Word32) ('r11')) (@ addr 82)
      ((Word32) ('r5')) (@ addr 82)
      ((Word32) ('r6')) (@ addr 82)
      ((Word32) ('r0')) (@ addr 82)
      ((Word32) ('r9')) (@ addr 82)
      ((Word32) ('ret')) (@ addr 82)
      ((Word32) ('r2')) (@ addr 82)
      ((Word32) ('r13')) (@ addr 82)
      ((Word32) ('r10')) (@ addr 82)
      ((Mem) ('mem')) (@ addr 82)
      ((Word32) ('r14')) (@ addr 82)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 82)
      ((Word32) (('loop#46#count' + ((0 - '#seq-visits') * 1)))) (@ addr 46)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 82 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 46 is in {0 ..< 1}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 82 is in {i + 0 ..< i + 1}
    .. proven.
Step 6: 
  Prove the number of visits to 46 is in {i + 0 ..< i + 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (initL2Cache (ASM) <= Kernel_C.initL2Cache (C)), time taken: 9.15s
Testing Function pair Pairing (decodeIRQHandlerInvocation (ASM) <= Kernel_C.decodeIRQHandlerInvocation (C))
  (function pairing 85 of 284)
 .. built problem, finding proof
Decided to case split at (53, 'ASM')
  (in problem)
Now doing proof search in true case (53 visited) in problem.
Now doing proof search in false case (53 not visited) in problem.
ProofNode ('CaseSplit', (53, 'ASM'), (ProofNode ('Restr', (53, ('Number', (1, 2))), (ProofNode ('Restr', (35, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (53, ('Number', (0, 1))), (ProofNode ('Restr', (35, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 53 is visited
Step 2: case in (1) where 53 is visited
  Prove the number of visits to 53 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 35 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 53 is not visited
  Prove the number of visits to 53 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 35 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeIRQHandlerInvocation (ASM) <= Kernel_C.decodeIRQHandlerInvocation (C)), time taken: 22.97s
Testing Function pair Pairing (Arch_finaliseCap (ASM) <= Kernel_C.Arch_finaliseCap (C))
  (function pairing 86 of 284)
 .. built problem, finding proof
Decided to case split at (92, 'ASM')
  (in problem)
Now doing proof search in true case (92 visited) in problem.
Now doing proof search in false case (92 not visited) in problem.
Decided to case split at (98, 'ASM')
  (in false case (92 not visited) in problem)
Now doing proof search in true case (98 visited) in false case (92 not visited) in problem.
Now doing proof search in false case (98 not visited) in false case (92 not visited) in problem.
Decided to case split at (80, 'ASM')
  (in false case (98 not visited) in false case (92 not visited) in problem)
Now doing proof search in true case (80 visited) in false case (98 not visited) in false case (92 not visited) in problem.
Now doing proof search in false case (80 not visited) in false case (98 not visited) in false case (92 not visited) in problem.
ProofNode ('CaseSplit', (92, 'ASM'), (ProofNode ('Restr', (92, ('Number', (1, 2))), (ProofNode ('Restr', (14, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (92, ('Number', (0, 1))), (ProofNode ('Restr', (14, ('Number', (0, 1))), (ProofNode ('CaseSplit', (98, 'ASM'), (ProofNode ('Restr', (98, ('Number', (1, 2))), (ProofNode ('Restr', (38, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (98, ('Number', (0, 1))), (ProofNode ('Restr', (38, ('Number', (0, 1))), (ProofNode ('CaseSplit', (80, 'ASM'), (ProofNode ('Restr', (80, ('Number', (1, 2))), (ProofNode ('Restr', (48, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (80, ('Number', (0, 1))), (ProofNode ('Restr', (48, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 92 is visited
Step 2: case in (1) where 92 is visited
  Prove the number of visits to 92 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 14 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 92 is not visited
  Prove the number of visits to 92 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 14 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 98 is visited
Step 8: case in (7) where 98 is visited
  Prove the number of visits to 98 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 38 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 98 is not visited
  Prove the number of visits to 98 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 38 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 80 is visited
Step 14: case in (13) where 80 is visited
  Prove the number of visits to 80 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 48 is in {1 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where 80 is not visited
  Prove the number of visits to 80 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 48 is in {0 ..< 1}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_finaliseCap (ASM) <= Kernel_C.Arch_finaliseCap (C)), time taken: 123.54s
Testing Function pair Pairing (invokeIRQHandler_ClearIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_ClearIRQHandler (C))
  (function pairing 87 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeIRQHandler_ClearIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_ClearIRQHandler (C)), time taken: 0.60s
Testing Function pair Pairing (calculate_extra_bi_size_bits (ASM) <= Kernel_C.calculate_extra_bi_size_bits (C))
  (function pairing 88 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (calculate_extra_bi_size_bits (ASM) <= Kernel_C.calculate_extra_bi_size_bits (C)), time taken: 4.82s
Testing Function pair Pairing (c_handle_interrupt (ASM) <= Kernel_C.c_handle_interrupt (C))
  (function pairing 89 of 284)
 .. built problem, finding proof
Discovered that points [6 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (6, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 6 is in {0 ..< 2}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (c_handle_interrupt (ASM) <= Kernel_C.c_handle_interrupt (C)), time taken: 1.17s
Testing Function pair Pairing (Arch_decodeTransfer (ASM) <= Kernel_C.Arch_decodeTransfer (C))
  (function pairing 90 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_decodeTransfer (ASM) <= Kernel_C.Arch_decodeTransfer (C)), time taken: 0.21s
Testing Function pair Pairing (ensureEmptySlot (ASM) <= Kernel_C.ensureEmptySlot (C))
  (function pairing 91 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (ensureEmptySlot (ASM) <= Kernel_C.ensureEmptySlot (C)), time taken: 0.94s
Testing Function pair Pairing (decodeTCBConfigure (ASM) <= Kernel_C.decodeTCBConfigure (C))
  (function pairing 92 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeTCBConfigure (ASM) <= Kernel_C.decodeTCBConfigure (C)), time taken: 1003.75s
Testing Function pair Pairing (checkValidIPCBuffer (ASM) <= Kernel_C.checkValidIPCBuffer (C))
  (function pairing 93 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (checkValidIPCBuffer (ASM) <= Kernel_C.checkValidIPCBuffer (C)), time taken: 1.70s
Testing Function pair Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C))
  (function pairing 94 of 284)
 .. built problem, finding proof

**************************************
FATAL ERROR
Broken pipe

**************************************

Decided to case split at (356, 'ASM')
  (in problem)
Now doing proof search in true case (356 visited) in problem.
Now doing proof search in false case (356 not visited) in problem.
Decided to case split at (354, 'ASM')
  (in false case (356 not visited) in problem)
Now doing proof search in true case (354 visited) in false case (356 not visited) in problem.
Now doing proof search in false case (354 not visited) in false case (356 not visited) in problem.
Decided to case split at (989, 'ASM')
  (in false case (354 not visited) in false case (356 not visited) in problem)
Now doing proof search in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem.

**************************************
FATAL ERROR
Broken pipe

**************************************


**************************************
FATAL ERROR
Broken pipe

**************************************


**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [1394, 4140]
  (in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem)
Now doing proof search in 1394 init case in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem.
Discovered that points [4066 (loop head)] can be bounded
  (in 1394 init case in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem)
Decided to case split at (6679, 'ASM')
  (in 1394 init case in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem)
Now doing proof search in true case (6679 visited) in 1394 init case in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem.
Discovered that points [4012 (loop head)] can be bounded
  (in true case (6679 visited) in 1394 init case in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem)
Discovered that points [3963 (loop head)] can be bounded
  (in true case (6679 visited) in 1394 init case in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem)
Discovered that points [2383 (loop head)] can be bounded
  (in true case (6679 visited) in 1394 init case in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem)
Now doing proof search in false case (6679 not visited) in 1394 init case in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem.
Result ProofNoSplit for pair Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C)), time taken: 1774.33s
Testing Function pair Pairing (create_kernel_untypeds (ASM) <= Kernel_C.create_kernel_untypeds (C))
  (function pairing 95 of 284)
 .. built problem, finding proof
Discovered that points [38 (loop head)] can be bounded
  (in problem)
Traceback (most recent call last):
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1712, in build_proof_rec
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1756, in build_proof_rec_with_restrs
    kind, must_find = must_find)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1785, in get_proof_split_limit
    hints = [limit, limit + 1], use_rep = mk_graph_slice (p))
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 113, in find_split_limit
    assert not 'split limit found'
AssertionError
Result ProofEXCEPT for pair Pairing (create_kernel_untypeds (ASM) <= Kernel_C.create_kernel_untypeds (C)), time taken: 40.01s
Testing Function pair Pairing (deletingIRQHandler (ASM) <= Kernel_C.deletingIRQHandler (C))
  (function pairing 96 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deletingIRQHandler (ASM) <= Kernel_C.deletingIRQHandler (C)), time taken: 0.62s
Testing Function pair Pairing (cleanInvalidateCacheRange_RAM (ASM) <= Kernel_C.cleanInvalidateCacheRange_RAM (C))
  (function pairing 97 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [21, 191]
  (in problem)
Now doing proof search in 21 init case in problem.
Discovered that points [113 (loop head)] can be bounded
  (in 21 init case in problem)
Discovered that points [174 (loop head)] can be bounded
  (in 21 init case in problem)
Discovered that points [4 (loop head)] can be bounded
  (in 21 init case in problem)
Discovered that points [67 (loop head)] can be bounded
  (in 21 init case in problem)
Discovered that points [68 (loop head)] can be bounded
  (in 21 init case in problem)
Discovered that points [37 (loop head)] can be bounded
  (in 21 init case in problem)
Now doing proof search in 21 loop case in problem.
Discovered a loop relation for split points [44, 119]
  (in 21 loop case in problem)
Now doing proof search in 44 init case in 21 loop case in problem.
Discovered that points [174 (loop head)] can be bounded
  (in 44 init case in 21 loop case in problem)
Discovered that points [68 (loop head)] can be bounded
  (in 44 init case in 21 loop case in problem)
Discovered a loop relation for split points [23, 106]
  (in 44 init case in 21 loop case in problem)
Now doing proof search in 23 init case in 44 init case in 21 loop case in problem.
Now doing proof search in 23 loop case in 44 init case in 21 loop case in problem.
Now doing proof search in 44 loop case in 21 loop case in problem.
Discovered that points [174 (loop head)] can be bounded
  (in 44 loop case in 21 loop case in problem)
Discovered that points [68 (loop head)] can be bounded
  (in 44 loop case in 21 loop case in problem)
Discovered a loop relation for split points [23, 106]
  (in 44 loop case in 21 loop case in problem)
Now doing proof search in 23 init case in 44 loop case in 21 loop case in problem.
Now doing proof search in 23 loop case in 44 loop case in 21 loop case in problem.
ProofNode ('Split', ((21, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (191, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.2'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.2'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.9'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.12'))], 2, 1), (ProofNode ('Restr', (21, ('Number', (0, 3))), (ProofNode ('Restr', (191, ('Number', (0, 3))), (ProofNode ('Restr', (113, ('Number', (0, 5))), (ProofNode ('Restr', (174, ('Number', (0, 2))), (ProofNode ('Restr', (4, ('Number', (0, 4))), (ProofNode ('Restr', (67, ('Number', (0, 4))), (ProofNode ('Restr', (68, ('Number', (0, 2))), (ProofNode ('Restr', (37, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)), ProofNode ('Restr', (21, ('Offset', (0, 3))), (ProofNode ('Restr', (191, ('Offset', (0, 3))), (ProofNode ('Split', ((44, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (119, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.3'), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.1'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 5)])])])]), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.3'))], 2, 1), (ProofNode ('Restr', (44, ('Number', (0, 3))), (ProofNode ('Restr', (119, ('Number', (0, 3))), (ProofNode ('Restr', (174, ('Number', (0, 2))), (ProofNode ('Restr', (68, ('Number', (0, 2))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (106, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.2'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.2'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 3))), (ProofNode ('Restr', (106, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (106, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)), ProofNode ('Restr', (44, ('Offset', (0, 3))), (ProofNode ('Restr', (119, ('Offset', (0, 3))), (ProofNode ('Restr', (174, ('Number', (0, 2))), (ProofNode ('Restr', (68, ('Number', (0, 2))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (106, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.2'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.2'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 3))), (ProofNode ('Restr', (106, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (106, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 21 related to visits to 191
    with equalities
      ((Mem) ('mem')) (@ addr 21)
      = ((Mem) ('Mem.12')) (@ addr 191)
    and with invariants
      ((Word32) ('r21')) (@ addr 21)
      ((Word32) ('r27')) (@ addr 21)
      ((Word32) ('r17')) (@ addr 21)
      ((Word32) ('r0')) (@ addr 21)
      ((Word32) ('r23')) (@ addr 21)
      ((Word32) ('r13')) (@ addr 21)
      ((Word32) ('r10')) (@ addr 21)
      ((Word32) ('r28')) (@ addr 21)
      ((Word32) ('r19')) (@ addr 21)
      ((Word32) ('r16')) (@ addr 21)
      ((Word64) ('clock')) (@ addr 21)
      ((Word32) ('r12')) (@ addr 21)
      ((Word32) ('r9')) (@ addr 21)
      ((Word32) ('r6')) (@ addr 21)
      ((Word32) ('r7')) (@ addr 21)
      ((Word32) ('r31')) (@ addr 21)
      ((Word32) ('r25')) (@ addr 21)
      ((Word32) ('r24')) (@ addr 21)
      ((Word32) ('r8')) (@ addr 21)
      ((Word32) ('r29')) (@ addr 21)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 21)
      ((Word32) ('r1')) (@ addr 21)
      ((Word32) ('r18')) (@ addr 21)
      ((Word32) ('r20')) (@ addr 21)
      ((Word32) ('r30')) (@ addr 21)
      ((Word32) ('r14')) (@ addr 21)
      ((Word32) ('r15')) (@ addr 21)
      ((Word32) ('mode')) (@ addr 21)
      ((Word32) ('r5')) (@ addr 21)
      ((Word32) ('ret')) (@ addr 21)
      ((Word32) ('r26')) (@ addr 21)
      ((Word32) ('r11')) (@ addr 21)
      ((Word32) ('r2')) (@ addr 21)
      ((Bool) (ROData('mem'))) (@ addr 21)
      ((Word32) ('r22')) (@ addr 21)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 21)
      ((Bool) ('c')) (@ addr 21)
      ((Bool) ('n')) (@ addr 21)
      ((Bool) ('v')) (@ addr 21)
      ((Bool) ('z')) (@ addr 21)
      ((Word32) ('end___unsigned_long#v')) (@ addr 191)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 191)
      ((Word32) ('end___unsigned_long#v.2')) (@ addr 191)
      ((Word32) ('start___unsigned_long#v.2')) (@ addr 191)
      ((Word32) ('start___unsigned_long#v')) (@ addr 191)
      ((Word32[50]) ('GhostAssertions.9')) (@ addr 191)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 191)
      ((Word32) ('pstart___unsigned_long#v.1')) (@ addr 191)
      ((Word32) (('index___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 191)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 21 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 191 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 113 is in {0 ..< 5}
    .. proven.
Step 5: 
  Prove the number of visits to 174 is in {0 ..< 2}
    .. proven.
Step 6: 
  Prove the number of visits to 4 is in {0 ..< 4}
    .. proven.
Step 7: 
  Prove the number of visits to 67 is in {0 ..< 4}
    .. proven.
Step 8: 
  Prove the number of visits to 68 is in {0 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 37 is in {0 ..< 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 21 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 191 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 44 related to visits to 119
    with equalities
      ((Mem) ('mem')) (@ addr 44)
      = ((Mem) ('Mem.3')) (@ addr 119)
    and with invariants
      ((Word32) ('r21')) (@ addr 44)
      ((Word32) ('r4')) (@ addr 44)
      ((Word32) ('r27')) (@ addr 44)
      ((Word32) ('r17')) (@ addr 44)
      ((Word32) ('r0')) (@ addr 44)
      ((Word32) ('r23')) (@ addr 44)
      ((Word32) ('r13')) (@ addr 44)
      ((Word32) ('r10')) (@ addr 44)
      ((Word32) ('r28')) (@ addr 44)
      ((Word32) ('r19')) (@ addr 44)
      ((Word32) ('r16')) (@ addr 44)
      ((Word64) ('clock')) (@ addr 44)
      ((Word32) ('r12')) (@ addr 44)
      ((Word32) ('r9')) (@ addr 44)
      ((Word32) ('r6')) (@ addr 44)
      ((Word32) ('r7')) (@ addr 44)
      ((Word32) ('r31')) (@ addr 44)
      ((Word32) ('r25')) (@ addr 44)
      ((Word32) ('r24')) (@ addr 44)
      ((Word32) ('r8')) (@ addr 44)
      ((Word32) ('r29')) (@ addr 44)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 44)
      ((Word32) ('r1')) (@ addr 44)
      ((Word32) ('r18')) (@ addr 44)
      ((Word32) ('r20')) (@ addr 44)
      ((Word32) ('r30')) (@ addr 44)
      ((Word32) ('r14')) (@ addr 44)
      ((Word32) ('r15')) (@ addr 44)
      ((Word32) ('mode')) (@ addr 44)
      ((Word32) ('r5')) (@ addr 44)
      ((Word32) ('ret')) (@ addr 44)
      ((Word32) ('r26')) (@ addr 44)
      ((Word32) ('r11')) (@ addr 44)
      ((Word32) ('r2')) (@ addr 44)
      ((Bool) (ROData('mem'))) (@ addr 44)
      ((Word32) ('r22')) (@ addr 44)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 44)
      ((Word32) ('end___unsigned_long#v')) (@ addr 119)
      ((Word32[50]) ('GhostAssertions.3')) (@ addr 119)
      ((Word32) ('end___unsigned_long#v.1')) (@ addr 119)
      ((Word32) ('start___unsigned_long#v')) (@ addr 119)
      ((Word32) (('loop#3#count.1' + ((0 - '#seq-visits') * 1)))) (@ addr 119)
      ((Word32) (('start___unsigned_long#v.1' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast(5)))))) (@ addr 119)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 119)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 44 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 119 is in {0 ..< 3}
    .. proven.
Step 16: 
  Prove the number of visits to 174 is in {0 ..< 2}
    .. proven.
Step 17: 
  Prove the number of visits to 68 is in {0 ..< 2}
    .. proven.
Step 18: 
  prove visits to 23 related to visits to 106
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem.2')) (@ addr 106)
    and with invariants
      ((Word32) ('r21')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r27')) (@ addr 23)
      ((Word32) ('r17')) (@ addr 23)
      ((Word32) ('r0')) (@ addr 23)
      ((Word32) ('r23')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Word32) ('r28')) (@ addr 23)
      ((Word32) ('r19')) (@ addr 23)
      ((Word32) ('r16')) (@ addr 23)
      ((Word64) ('clock')) (@ addr 23)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 1)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r31')) (@ addr 23)
      ((Word32) ('r25')) (@ addr 23)
      ((Word32) ('r24')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r29')) (@ addr 23)
      ((Word32) ('r1')) (@ addr 23)
      ((Word32) ('r18')) (@ addr 23)
      ((Word32) ('r20')) (@ addr 23)
      ((Word32) ('r30')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r15')) (@ addr 23)
      ((Word32) ('mode')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r26')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r22')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Bool) ('c')) (@ addr 23)
      ((Bool) ('n')) (@ addr 23)
      ((Bool) ('v')) (@ addr 23)
      ((Bool) ('z')) (@ addr 23)
      ((Word32) ('end___unsigned_long#v')) (@ addr 106)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 106)
      ((Word32[50]) ('GhostAssertions.2')) (@ addr 106)
      ((Word32) ('start___unsigned_long#v')) (@ addr 106)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 106)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 106)
    .. proven.
Step 19: case in (18) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 3}
    .. proven.
Step 20: 
  Prove the number of visits to 106 is in {0 ..< 3}
    .. proven.
Step 21: 
  prove all verification conditions
    .. proven.
Step 22: case in (18) where the length of the sequence is k + 2
  Prove the number of visits to 23 is in {k + 0 ..< k + 3}
    .. proven.
Step 23: 
  Prove the number of visits to 106 is in {k + 0 ..< k + 3}
    .. proven.
Step 24: 
  prove all verification conditions
    .. proven.
Step 25: case in (13) where the length of the sequence is j + 2
  Prove the number of visits to 44 is in {j + 0 ..< j + 3}
    .. proven.
Step 26: 
  Prove the number of visits to 119 is in {j + 0 ..< j + 3}
    .. proven.
Step 27: 
  Prove the number of visits to 174 is in {0 ..< 2}
    .. proven.
Step 28: 
  Prove the number of visits to 68 is in {0 ..< 2}
    .. proven.
Step 29: 
  prove visits to 23 related to visits to 106
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem.2')) (@ addr 106)
    and with invariants
      ((Word32) ('r21')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r27')) (@ addr 23)
      ((Word32) ('r17')) (@ addr 23)
      ((Word32) ('r0')) (@ addr 23)
      ((Word32) ('r23')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Word32) ('r28')) (@ addr 23)
      ((Word32) ('r19')) (@ addr 23)
      ((Word32) ('r16')) (@ addr 23)
      ((Word64) ('clock')) (@ addr 23)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 1)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r31')) (@ addr 23)
      ((Word32) ('r25')) (@ addr 23)
      ((Word32) ('r24')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r29')) (@ addr 23)
      ((Word32) ('r1')) (@ addr 23)
      ((Word32) ('r18')) (@ addr 23)
      ((Word32) ('r20')) (@ addr 23)
      ((Word32) ('r30')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r15')) (@ addr 23)
      ((Word32) ('mode')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r26')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r22')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Bool) ('c')) (@ addr 23)
      ((Bool) ('n')) (@ addr 23)
      ((Bool) ('v')) (@ addr 23)
      ((Bool) ('z')) (@ addr 23)
      ((Word32) ('end___unsigned_long#v')) (@ addr 106)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 106)
      ((Word32[50]) ('GhostAssertions.2')) (@ addr 106)
      ((Word32) ('start___unsigned_long#v')) (@ addr 106)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 106)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 106)
    .. proven.
Step 30: case in (29) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 3}
    .. proven.
Step 31: 
  Prove the number of visits to 106 is in {0 ..< 3}
    .. proven.
Step 32: 
  prove all verification conditions
    .. proven.
Step 33: case in (29) where the length of the sequence is a + 2
  Prove the number of visits to 23 is in {a + 0 ..< a + 3}
    .. proven.
Step 34: 
  Prove the number of visits to 106 is in {a + 0 ..< a + 3}
    .. proven.
Step 35: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cleanInvalidateCacheRange_RAM (ASM) <= Kernel_C.cleanInvalidateCacheRange_RAM (C)), time taken: 831.82s
Testing Function pair Pairing (alloc_rootserver_obj (ASM) <= Kernel_C.alloc_rootserver_obj (C))
  (function pairing 98 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (alloc_rootserver_obj (ASM) <= Kernel_C.alloc_rootserver_obj (C)), time taken: 0.96s
Testing Function pair Pairing (doIPCTransfer (ASM) <= Kernel_C.doIPCTransfer (C))
  (function pairing 99 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doIPCTransfer (ASM) <= Kernel_C.doIPCTransfer (C)), time taken: 14.16s
Testing Function pair Pairing (setIRQTrigger (ASM) <= Kernel_C.setIRQTrigger (C))
  (function pairing 100 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setIRQTrigger (ASM) <= Kernel_C.setIRQTrigger (C)), time taken: 0.94s
Testing Function pair Pairing (updateCapData (ASM) <= Kernel_C.updateCapData (C))
  (function pairing 101 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (updateCapData (ASM) <= Kernel_C.updateCapData (C)), time taken: 2.26s
Testing Function pair Pairing (tcbEPAppend (ASM) <= Kernel_C.tcbEPAppend (C))
  (function pairing 102 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (tcbEPAppend (ASM) <= Kernel_C.tcbEPAppend (C)), time taken: 6.34s
Testing Function pair Pairing (sendFaultIPC (ASM) <= Kernel_C.sendFaultIPC (C))
  (function pairing 103 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (sendFaultIPC (ASM) <= Kernel_C.sendFaultIPC (C)), time taken: 11.66s
Testing Function pair Pairing (setDomain (ASM) <= Kernel_C.setDomain (C))
  (function pairing 104 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setDomain (ASM) <= Kernel_C.setDomain (C)), time taken: 5.31s
Testing Function pair Pairing (decodeSetMCPriority (ASM) <= Kernel_C.decodeSetMCPriority (C))
  (function pairing 105 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeSetMCPriority (ASM) <= Kernel_C.decodeSetMCPriority (C)), time taken: 14.85s
Testing Function pair Pairing (create_domain_cap (ASM) <= Kernel_C.create_domain_cap (C))
  (function pairing 106 of 284)
 .. built problem, finding proof
Discovered that points [10 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (10, ('Number', (0, 5))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 10 is in {0 ..< 5}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_domain_cap (ASM) <= Kernel_C.create_domain_cap (C)), time taken: 19.81s
Testing Function pair Pairing (lookupIPCBuffer (ASM) <= Kernel_C.lookupIPCBuffer (C))
  (function pairing 107 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupIPCBuffer (ASM) <= Kernel_C.lookupIPCBuffer (C)), time taken: 3.47s
Testing Function pair Pairing (create_initial_thread (ASM) <= Kernel_C.create_initial_thread (C))
  (function pairing 108 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_initial_thread (ASM) <= Kernel_C.create_initial_thread (C)), time taken: 144.96s
Testing Function pair Pairing (unmapPage (ASM) <= Kernel_C.unmapPage (C))
  (function pairing 109 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [192, 79]
  (in problem)
Now doing proof search in 192 init case in problem.
Discovered a loop relation for split points [165, 33]
  (in 192 init case in problem)
Now doing proof search in 165 init case in 192 init case in problem.
Now doing proof search in 165 loop case in 192 init case in problem.
Now doing proof search in 192 loop case in problem.
ProofNode ('Split', ((192, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (79, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#72#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'pd___ptr_to_struct_pde_C#v'), Expr ('Var', Type ('Word', 32), name = 'find_ret___struct_findPDForASID_ret_C#v.pd_C'), Expr ('Var', Type ('Word', 32), name = 'page_size___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'ret__struct_pde_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'vptr___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (192, ('Number', (0, 1))), (ProofNode ('Restr', (79, ('Number', (0, 1))), (ProofNode ('Split', ((165, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (33, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#26#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'ret__struct_pte_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'find_ret___struct_findPDForASID_ret_C#v.pd_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'page_size___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C'), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'vptr___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (165, ('Number', (0, 1))), (ProofNode ('Restr', (33, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (165, ('Offset', (0, 3))), (ProofNode ('Restr', (33, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (192, ('Offset', (0, 3))), (ProofNode ('Restr', (79, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 192 related to visits to 79
    with equalities
      ((Mem) ('mem')) (@ addr 192)
      = ((Mem) ('Mem')) (@ addr 79)
    and with invariants
      ((Word32) ('r4')) (@ addr 192)
      ((Word32) ('r13')) (@ addr 192)
      ((Word32) ('r10')) (@ addr 192)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 4)))) (@ addr 192)
      ((Word32) ('r9')) (@ addr 192)
      ((Word32) ('r6')) (@ addr 192)
      ((Word32) ('r7')) (@ addr 192)
      ((Word32) ('r3')) (@ addr 192)
      ((Word32) ('r11')) (@ addr 192)
      ((Word32) ('r5')) (@ addr 192)
      ((Word32) ('ret')) (@ addr 192)
      ((Word32) ('r1')) (@ addr 192)
      ((Word32) ('r2')) (@ addr 192)
      ((Bool) (ROData('mem'))) (@ addr 192)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 192)
      ((Word32) (('loop#72#count' + ((0 - '#seq-visits') * 1)))) (@ addr 79)
      ((Word32) ('pd___ptr_to_struct_pde_C#v')) (@ addr 79)
      ((Word32) ('find_ret___struct_findPDForASID_ret_C#v.pd_C')) (@ addr 79)
      ((Word32) ('page_size___unsigned_long#v')) (@ addr 79)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 79)
      ((Word32) ('asid___unsigned_long#v')) (@ addr 79)
      ((Word32[50]) ('GhostAssertions')) (@ addr 79)
      ((Word32) ('ret__struct_pde_C#v.words_C.0')) (@ addr 79)
      ((Word32) ('vptr___unsigned_long#v')) (@ addr 79)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 192 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 79 is in {0 ..< 1}
    .. proven.
Step 4: 
  prove visits to 165 related to visits to 33
    with equalities
      ((Mem) ('mem')) (@ addr 165)
      = ((Mem) ('Mem')) (@ addr 33)
    and with invariants
      ((Word32) ('r4')) (@ addr 165)
      ((Word32) ('r13')) (@ addr 165)
      ((Word32) ('r10')) (@ addr 165)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 4)))) (@ addr 165)
      ((Word32) ('r9')) (@ addr 165)
      ((Word32) ('r6')) (@ addr 165)
      ((Word32) ('r7')) (@ addr 165)
      ((Word32) ('r3')) (@ addr 165)
      ((Word32) ('r11')) (@ addr 165)
      ((Word32) ('r5')) (@ addr 165)
      ((Word32) ('ret')) (@ addr 165)
      ((Word32) ('r1')) (@ addr 165)
      ((Word32) ('r2')) (@ addr 165)
      ((Bool) (ROData('mem'))) (@ addr 165)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 165)
      ((Word32) (('loop#26#count' + ((0 - '#seq-visits') * 1)))) (@ addr 33)
      ((Word32) ('ret__struct_pte_C#v.words_C.0')) (@ addr 33)
      ((Word32) ('find_ret___struct_findPDForASID_ret_C#v.pd_C')) (@ addr 33)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 33)
      ((Word32) ('page_size___unsigned_long#v')) (@ addr 33)
      ((Word32) ('lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C')) (@ addr 33)
      ((Word32) ('asid___unsigned_long#v')) (@ addr 33)
      ((Word32[50]) ('GhostAssertions')) (@ addr 33)
      ((Word32) ('vptr___unsigned_long#v')) (@ addr 33)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 165 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 33 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 165 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 33 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 192 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 79 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (unmapPage (ASM) <= Kernel_C.unmapPage (C)), time taken: 265.11s
Testing Function pair Pairing (handleDoubleFault (ASM) <= Kernel_C.handleDoubleFault (C))
  (function pairing 110 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleDoubleFault (ASM) <= Kernel_C.handleDoubleFault (C)), time taken: 0.63s
Testing Function pair Pairing (create_it_address_space (ASM) <= Kernel_C.create_it_address_space (C))
  (function pairing 111 of 284)
 .. built problem, finding proof

**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [199, 24]
  (in problem)
Now doing proof search in 199 init case in problem.
Now doing proof search in 199 loop case in problem.
ProofNode ('Split', ((199, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1048576)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'ret_addr_input'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (24, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'it_v_reg___struct_v_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'slot_pos_before___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'pt_vptr___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Num', Type ('Word', 32), val = 8), Expr ('Num', Type ('Word', 32), val = 12)])])])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (199, ('Number', (0, 3))), (ProofNode ('Restr', (24, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (199, ('Offset', (0, 3))), (ProofNode ('Restr', (24, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 199 related to visits to 24
    with equalities
      ((Mem) ('mem')) (@ addr 199)
      = ((Mem) ('Mem')) (@ addr 24)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1048576)))) (@ addr 199)
      ((Word32) ('r13')) (@ addr 199)
      ((Word32) ('r10')) (@ addr 199)
      ((Word32) ('r9')) (@ addr 199)
      ((Word32) ('r6')) (@ addr 199)
      ((Word32) ('r7')) (@ addr 199)
      ((Word32) ('r8')) (@ addr 199)
      ((Word32) ('ret_addr_input')) (@ addr 199)
      ((Word32) ('r11')) (@ addr 199)
      ((Word32) ('r5')) (@ addr 199)
      ((Word32) ('ret')) (@ addr 199)
      ((Bool) (ROData('mem'))) (@ addr 199)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 199)
      ((Word32) ('it_v_reg___struct_v_region_C#v.end_C')) (@ addr 24)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 24)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.1')) (@ addr 24)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 24)
      ((Word32) ('slot_pos_before___unsigned_long#v')) (@ addr 24)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.0')) (@ addr 24)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 24)
      ((Word32) (('pt_vptr___unsigned_long#v' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast((8 + 12))))))) (@ addr 24)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 199 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 24 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 199 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 24 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_it_address_space (ASM) <= Kernel_C.create_it_address_space (C)), time taken: 581.74s
Testing Function pair Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C))
  (function pairing 112 of 284)
 .. built problem, finding proof
Discovered that points [188 (loop head)] can be bounded
  (in problem)
Discovered that points [44 (loop head)] can be bounded
  (in problem)

**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [129, 38]
  (in problem)
Now doing proof search in 129 init case in problem.
Discovered that points [21 (loop head)] can be bounded
  (in 129 init case in problem)
Discovered that points [10 (loop head)] can be bounded
  (in 129 init case in problem)
Discovered that points [243 (loop head)] can be bounded
  (in 129 init case in problem)
Now doing proof search in 129 loop case in problem.
Discovered that points [21 (loop head)] can be bounded
  (in 129 loop case in problem)

**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [144, 15]
  (in 129 loop case in problem)
Now doing proof search in 144 init case in 129 loop case in problem.
Now doing proof search in 144 loop case in 129 loop case in problem.
ProofNode ('Restr', (188, ('Number', (0, 5))), (ProofNode ('Restr', (44, ('Number', (0, 6))), (ProofNode ('Split', ((129, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (38, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'ipcBuffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#33#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (129, ('Number', (0, 3))), (ProofNode ('Restr', (38, ('Number', (0, 3))), (ProofNode ('Restr', (21, ('Number', (0, 2))), (ProofNode ('Restr', (10, ('Number', (0, 1))), (ProofNode ('Restr', (243, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (129, ('Offset', (0, 3))), (ProofNode ('Restr', (38, ('Offset', (0, 3))), (ProofNode ('Restr', (21, ('Number', (0, 2))), (ProofNode ('Split', ((144, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (15, (1, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'ipcBuffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'j___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (144, ('Number', (0, 3))), (ProofNode ('Restr', (15, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (144, ('Offset', (0, 3))), (ProofNode ('Restr', (15, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)))),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 188 is in {0 ..< 5}
    .. proven.
Step 2: 
  Prove the number of visits to 44 is in {0 ..< 6}
    .. proven.
Step 3: 
  prove visits to 129 related to visits to 38
    with equalities
      ((Mem) ('mem')) (@ addr 129)
      = ((Mem) ('Mem')) (@ addr 38)
    and with invariants
      ((Word32) ('r4')) (@ addr 129)
      ((Word32) ('r0')) (@ addr 129)
      ((Word32) ('r13')) (@ addr 129)
      ((Word32) ('r10')) (@ addr 129)
      ((Word32) ('r12')) (@ addr 129)
      ((Word32) ('r9')) (@ addr 129)
      ((Word32) ('r6')) (@ addr 129)
      ((Word32) ('r7')) (@ addr 129)
      ((Word32) ('r8')) (@ addr 129)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 129)
      ((Word32) ('r11')) (@ addr 129)
      ((Word32) ('r5')) (@ addr 129)
      ((Word32) ('ret')) (@ addr 129)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 129)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 4)))) (@ addr 129)
      ((Bool) (ROData('mem'))) (@ addr 129)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 129)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 38)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 38)
      ((Word32) ('n___unsigned_long#v')) (@ addr 38)
      ((Word32) ('ipcBuffer___ptr_to_unsigned_long#v')) (@ addr 38)
      ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 38)
      ((Word32) (('loop#33#count' + ((0 - '#seq-visits') * 1)))) (@ addr 38)
      ((Word32[50]) ('GhostAssertions')) (@ addr 38)
    .. proven.
Step 4: case in (3) where the length of the sequence < 2
  Prove the number of visits to 129 is in {0 ..< 3}
    .. proven.
Step 5: 
  Prove the number of visits to 38 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 21 is in {0 ..< 2}
    .. proven.
Step 7: 
  Prove the number of visits to 10 is in {0 ..< 1}
    .. proven.
Step 8: 
  Prove the number of visits to 243 is in {0 ..< 1}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (3) where the length of the sequence is i + 2
  Prove the number of visits to 129 is in {i + 0 ..< i + 3}
    .. proven.
Step 11: 
  Prove the number of visits to 38 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 21 is in {0 ..< 2}
    .. proven.
Step 13: 
  prove visits to 144 related to visits [2, 3, 4 ...] to 15
    with equalities
      ((Mem) ('mem')) (@ addr 144)
      = ((Mem) ('Mem')) (@ addr 15)
    and with invariants
      ((Word32) ('r4')) (@ addr 144)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 144)
      ((Word32) ('r13')) (@ addr 144)
      ((Word32) ('r10')) (@ addr 144)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 1)))) (@ addr 144)
      ((Word32) ('r9')) (@ addr 144)
      ((Word32) ('r6')) (@ addr 144)
      ((Word32) ('r7')) (@ addr 144)
      ((Word32) ('r8')) (@ addr 144)
      ((Word32) ('r3')) (@ addr 144)
      ((Word32) ('r11')) (@ addr 144)
      ((Word32) ('r5')) (@ addr 144)
      ((Word32) ('ret')) (@ addr 144)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 4)))) (@ addr 144)
      ((Bool) (ROData('mem'))) (@ addr 144)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 144)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 15)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 15)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 15)
      ((Word32) ('n___unsigned_long#v')) (@ addr 15)
      ((Word32) ('ipcBuffer___ptr_to_unsigned_long#v')) (@ addr 15)
      ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 15)
      ((Word32[50]) ('GhostAssertions')) (@ addr 15)
      ((Word32) ('j___unsigned_long#v')) (@ addr 15)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 144 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 15 is in {0 ..< 4}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is j + 2
  Prove the number of visits to 144 is in {j + 0 ..< j + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 15 is in {j + 0 ..< j + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C)), time taken: 830.72s
Testing Function pair Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C))
  (function pairing 113 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [110, 21]
  (in problem)
Now doing proof search in 110 init case in problem.
Now doing proof search in 110 loop case in problem.
ProofNode ('Split', ((110, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 4)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (21, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'badge___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'epptr___ptr_to_struct_endpoint_C#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v')), (Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'queue___struct_tcb_queue_C#v.end_C')), (Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'queue___struct_tcb_queue_C#v.head_C'))], 2, 1), (ProofNode ('Restr', (110, ('Number', (0, 3))), (ProofNode ('Restr', (21, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (110, ('Offset', (0, 3))), (ProofNode ('Restr', (21, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 110 related to visits to 21
    with equalities
      ((Mem) ('mem')) (@ addr 110)
      = ((Mem) ('Mem')) (@ addr 21)
      ((Word32) ('r4')) (@ addr 110)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 21)
      ((Word32) ('r8')) (@ addr 110)
      = ((Word32) ('queue___struct_tcb_queue_C#v.end_C')) (@ addr 21)
      ((Word32) ('r9')) (@ addr 110)
      = ((Word32) ('queue___struct_tcb_queue_C#v.head_C')) (@ addr 21)
    and with invariants
      ((Word32) ('r13')) (@ addr 110)
      ((Word32) ('r10')) (@ addr 110)
      ((Word32) ('r6')) (@ addr 110)
      ((Word32) ('r7')) (@ addr 110)
      ((Word32) ('r11')) (@ addr 110)
      ((Word32) ('ret')) (@ addr 110)
      ((Bool) (ROData('mem'))) (@ addr 110)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 4))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 110)
      ((Word32) ('badge___unsigned_long#v')) (@ addr 21)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 21)
      ((Word32) ('epptr___ptr_to_struct_endpoint_C#v')) (@ addr 21)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 110 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 21 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 110 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 21 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C)), time taken: 324.87s
Testing Function pair Pairing (handleFault (ASM) <= Kernel_C.handleFault (C))
  (function pairing 114 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleFault (ASM) <= Kernel_C.handleFault (C)), time taken: 0.93s
Testing Function pair Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C))
  (function pairing 115 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [410, 193]
  (in problem)
Now doing proof search in 410 init case in problem.
Discovered a loop relation for split points [413, 187]
  (in 410 init case in problem)
Now doing proof search in 413 init case in 410 init case in problem.
Discovered that points [177 (loop head)] can be bounded
  (in 413 init case in 410 init case in problem)
Discovered that points [150 (loop head)] can be bounded
  (in 413 init case in 410 init case in problem)
Discovered that points [425 (loop head)] can be bounded
  (in 413 init case in 410 init case in problem)

**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [294, 146]
  (in 413 init case in 410 init case in problem)
Now doing proof search in 294 init case in 413 init case in 410 init case in problem.
Discovered that points [70 (loop head)] can be bounded
  (in 294 init case in 413 init case in 410 init case in problem)
Discovered that points [59 (loop head)] can be bounded
  (in 294 init case in 413 init case in 410 init case in problem)
Discovered that points [36 (loop head)] can be bounded
  (in 294 init case in 413 init case in 410 init case in problem)
Discovered that points [3 (loop head)] can be bounded
  (in 294 init case in 413 init case in 410 init case in problem)
Discovered that points [532 (loop head)] can be bounded
  (in 294 init case in 413 init case in 410 init case in problem)
Discovered that points [553 (loop head)] can be bounded
  (in 294 init case in 413 init case in 410 init case in problem)
Discovered that points [576 (loop head)] can be bounded
  (in 294 init case in 413 init case in 410 init case in problem)
Discovered that points [638 (loop head)] can be bounded
  (in 294 init case in 413 init case in 410 init case in problem)
