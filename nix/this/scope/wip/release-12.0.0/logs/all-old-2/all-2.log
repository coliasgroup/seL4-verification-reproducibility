this derivation will be built:
  /nix/store/56680sn77q3r72fkyi62fz51hzj739qv-graph-refine.drv
building '/nix/store/56680sn77q3r72fkyi62fz51hzj739qv-graph-refine.drv'...
Loading syntax from ./CFunctions.txt
Loaded 835 functions, 75 structs, 0 globals.
Loading syntax from ./ASMFunctions.txt
Missing nodes after calls to instruction'isb_sy_E0000C18
  in ['fpsimd_HWCapTest']
Missing nodes after calls to restore_user_context
  in ['slowpath', 'c_handle_data_fault', 'c_handle_interrupt', 'c_handle_undefined_instruction']
Missing nodes after calls to halt
  in ['activateThread', 'handleReply', 'arm_reset_exception', 'completeSignal', 'doFlush']
Missing nodes after calls to instruction'ldr_pc_pc_20_e0010038_arm_vector_table_0x38_E001001C
  in ['arm_vector_table']
Warning: dead arc in c_handle_syscall: 71 -> 3758164096
  (follows Basic node!)
Warning: dead arc in c_handle_syscall: 73 -> 3758164096
  (follows Basic node!)
Warning: dead arc in arm_fiq_exception: 7 -> 3758162208
  (follows Basic node!)
Warning: dead arc in arm_fiq_exception: 9 -> 3758162208
  (follows Basic node!)
Warning: dead arc in c_handle_instruction_fault: 3758162396 -> 3758162400
  (follows Basic node!)
Warning: dead arc in _start: 3758096388 -> 3758096392
  (follows Basic node!)
Loaded 491 functions, 0 structs, 0 globals.
Pseudo-Compiling.
Doing stack/inst logic.
Warning: asm instruction name: formatting: "asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"
Warning: asm instruction name: formatting: "asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"
Function 'init_kernel' contains unhandled instructions:
  ["instruction'vmsr_fpexc_r3_E0004B48", "instruction'vmrs_r3_fpexc_E0004B40"]
Function 'Arch_switchToThread' contains unhandled instructions:
  ["instruction'strex_r0_r1_r3_E0011338"]
Function 'Kernel_C.fpsimd_HWCapTest' contains unhandled instructions:
  ["asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"]
Function 'arm_vector_table' contains unhandled instructions:
  ["instruction'ldr_pc_pc_24_e0010020_arm_vector_table_0x20_E0010000", "instruction'ldr_pc_pc_24_e001002c_arm_vector_table_0x2c_E001000C", "instruction'ldr_pc_pc_20_e0010038_arm_vector_table_0x38_E001001C", "instruction'ldr_pc_pc_24_e0010024_arm_vector_table_0x24_E0010004", "instruction'ldr_pc_pc_24_e0010030_arm_vector_table_0x30_E0010010", "instruction'ldr_pc_pc_24_e0010028_arm_vector_table_0x28_E0010008", "instruction'ldr_pc_pc_20_e0010034_arm_vector_table_0x34_E0010018", "instruction'ldr_pc_pc_4_e0010020_arm_vector_table_0x20_E0010014"]
Function 'arm_undefined_inst_exception' contains unhandled instructions:
  ["instruction'cps_19_E0010040", "instruction'srsia_sp_19_E001003C", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E0010044"]
Function 'arm_data_abort_exception' contains unhandled instructions:
  ["instruction'cps_19_E00100BC", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E00100C0", "instruction'srsia_sp_19_E00100B8"]
Function 'Kernel_C.supportsAsyncExceptions' contains unhandled instructions:
  ["asm_instruction'.fpu_vfp\\nvmsr_fpexc,_%0", "asm_instruction'.fpu_vfp\\nvmrs_%0,_fpexc"]
Function 'Kernel_C.clearEnFPEXC' contains unhandled instructions:
  ["asm_instruction'.fpu_vfp\\nvmsr_fpexc,_%0", "asm_instruction'.fpu_vfp\\nvmrs_%0,_fpexc"]
Function 'arm_irq_exception' contains unhandled instructions:
  ["instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E00100F4", "instruction'cps_19_E00100F0", "instruction'srsia_sp_19_E00100EC"]
Function 'fpsimd_HWCapTest' contains unhandled instructions:
  ["instruction'vmrs_r3_fpexc_E0000C38", "instruction'vmsr_fpexc_r3_E0000C34", "instruction'vmrs_r3_fpexc_E0000C2C"]
Function '_start' contains unhandled instructions:
  ["instruction'cps_23_E0000034", "instruction'cps_19_E000003C"]
Function 'arm_prefetch_abort_exception' contains unhandled instructions:
  ["instruction'cps_19_E001008C", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E0010090", "instruction'srsia_sp_19_E0010088"]
Function 'halt' contains unhandled instructions:
  ["instruction'cpsid_aif_E00109DC"]
Checking.
Checking 176 function pair problems
Testing Function pair Pairing (Arch_createObject (ASM) <= Kernel_C.Arch_createObject (C))
  (function pairing 1 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_createObject (ASM) <= Kernel_C.Arch_createObject (C)), time taken: 12.64s
Testing Function pair Pairing (preemptionPoint (ASM) <= Kernel_C.preemptionPoint (C))
  (function pairing 2 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (preemptionPoint (ASM) <= Kernel_C.preemptionPoint (C)), time taken: 0.34s
Testing Function pair Pairing (halt (ASM) <= Kernel_C.halt (C))
  (function pairing 3 of 176)
Skipping Pairing (halt (ASM) <= Kernel_C.halt (C)), underspecified C
Testing Function pair Pairing (cleanCacheRange_RAM (ASM) <= Kernel_C.cleanCacheRange_RAM (C))
  (function pairing 4 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [44, 96]
  (in problem)
Now doing proof search in 44 init case in problem.
Discovered that points [71 (loop head)] can be bounded
  (in 44 init case in problem)
Discovered that points [113 (loop head)] can be bounded
  (in 44 init case in problem)
Discovered that points [65 (loop head)] can be bounded
  (in 44 init case in problem)
Discovered that points [56 (loop head)] can be bounded
  (in 44 init case in problem)
Now doing proof search in 44 loop case in problem.
Discovered a loop relation for split points [10, 70]
  (in 44 loop case in problem)
Now doing proof search in 10 init case in 44 loop case in problem.
Discovered that points [113 (loop head)] can be bounded
  (in 10 init case in 44 loop case in problem)
Discovered that points [56 (loop head)] can be bounded
  (in 10 init case in 44 loop case in problem)
Now doing proof search in 10 loop case in 44 loop case in problem.
Discovered that points [113 (loop head)] can be bounded
  (in 10 loop case in 44 loop case in problem)
Discovered that points [56 (loop head)] can be bounded
  (in 10 loop case in 44 loop case in problem)
ProofNode ('Split', ((44, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r14')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (96, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.3'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.2'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.2'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.3'))], 2, 1), (ProofNode ('Restr', (44, ('Number', (0, 3))), (ProofNode ('Restr', (96, ('Number', (0, 3))), (ProofNode ('Restr', (71, ('Number', (0, 5))), (ProofNode ('Restr', (113, ('Number', (0, 2))), (ProofNode ('Restr', (65, ('Number', (0, 4))), (ProofNode ('Restr', (56, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (44, ('Offset', (0, 3))), (ProofNode ('Restr', (96, ('Offset', (0, 3))), (ProofNode ('Split', ((10, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (70, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 5)])])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (10, ('Number', (0, 3))), (ProofNode ('Restr', (70, ('Number', (0, 3))), (ProofNode ('Restr', (113, ('Number', (0, 2))), (ProofNode ('Restr', (56, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Restr', (70, ('Offset', (0, 3))), (ProofNode ('Restr', (113, ('Number', (0, 2))), (ProofNode ('Restr', (56, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 44 related to visits to 96
    with equalities
      ((Mem) ('mem')) (@ addr 44)
      = ((Mem) ('Mem.3')) (@ addr 96)
    and with invariants
      ((Word32) ('r21')) (@ addr 44)
      ((Word32) ('r4')) (@ addr 44)
      ((Word32) ('r27')) (@ addr 44)
      ((Word32) ('r17')) (@ addr 44)
      ((Word32) ('r0')) (@ addr 44)
      ((Word32) ('r23')) (@ addr 44)
      ((Word32) ('r13')) (@ addr 44)
      ((Word32) ('r10')) (@ addr 44)
      ((Word32) ('r28')) (@ addr 44)
      ((Word32) ('r19')) (@ addr 44)
      ((Word32) ('r16')) (@ addr 44)
      ((Word64) ('clock')) (@ addr 44)
      ((Word32) ('r9')) (@ addr 44)
      ((Word32) ('r6')) (@ addr 44)
      ((Word32) ('r7')) (@ addr 44)
      ((Word32) ('r31')) (@ addr 44)
      ((Word32) ('r25')) (@ addr 44)
      ((Word32) ('r24')) (@ addr 44)
      ((Word32) ('r8')) (@ addr 44)
      ((Word32) ('r29')) (@ addr 44)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 44)
      ((Word32) ('r18')) (@ addr 44)
      ((Word32) ('r20')) (@ addr 44)
      ((Word32) ('r30')) (@ addr 44)
      ((Word32) ('r14')) (@ addr 44)
      ((Word32) ('r15')) (@ addr 44)
      ((Word32) ('mode')) (@ addr 44)
      ((Word32) ('r11')) (@ addr 44)
      ((Word32) ('r5')) (@ addr 44)
      ((Word32) ('ret')) (@ addr 44)
      ((Word32) ('r26')) (@ addr 44)
      ((Word32) ('r1')) (@ addr 44)
      ((Word32) ('r2')) (@ addr 44)
      ((Bool) (ROData('mem'))) (@ addr 44)
      ((Word32) ('r22')) (@ addr 44)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 44)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r14')), ((Word32) ('r3')))))) (@ addr 44)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r3')), ((Word32) ('r14')))))) (@ addr 44)
      ((Bool) ('c')) (@ addr 44)
      ((Bool) ('n')) (@ addr 44)
      ((Bool) ('v')) (@ addr 44)
      ((Bool) ('z')) (@ addr 44)
      ((Word32) ('end___unsigned_long#v')) (@ addr 96)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 96)
      ((Word32[50]) ('GhostAssertions.3')) (@ addr 96)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 96)
      ((Word32) ('end___unsigned_long#v.2')) (@ addr 96)
      ((Word32) ('start___unsigned_long#v.2')) (@ addr 96)
      ((Word32) ('start___unsigned_long#v')) (@ addr 96)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 96)
      ((Word32) ('pstart___unsigned_long#v.1')) (@ addr 96)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 44 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 96 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 71 is in {0 ..< 5}
    .. proven.
Step 5: 
  Prove the number of visits to 113 is in {0 ..< 2}
    .. proven.
Step 6: 
  Prove the number of visits to 65 is in {0 ..< 4}
    .. proven.
Step 7: 
  Prove the number of visits to 56 is in {0 ..< 2}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Step 9: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 44 is in {i + 0 ..< i + 3}
    .. proven.
Step 10: 
  Prove the number of visits to 96 is in {i + 0 ..< i + 3}
    .. proven.
Step 11: 
  prove visits to 10 related to visits to 70
    with equalities
      ((Mem) ('mem')) (@ addr 10)
      = ((Mem) ('Mem.1')) (@ addr 70)
    and with invariants
      ((Word32) ('r21')) (@ addr 10)
      ((Word32) ('r4')) (@ addr 10)
      ((Word32) ('r27')) (@ addr 10)
      ((Word32) ('r17')) (@ addr 10)
      ((Word32) ('r0')) (@ addr 10)
      ((Word32) ('r23')) (@ addr 10)
      ((Word32) ('r13')) (@ addr 10)
      ((Word32) ('r10')) (@ addr 10)
      ((Word32) ('r28')) (@ addr 10)
      ((Word32) ('r19')) (@ addr 10)
      ((Word32) ('r16')) (@ addr 10)
      ((Word64) ('clock')) (@ addr 10)
      ((Word32) ('r12')) (@ addr 10)
      ((Word32) ('r9')) (@ addr 10)
      ((Word32) ('r6')) (@ addr 10)
      ((Word32) ('r7')) (@ addr 10)
      ((Word32) ('r31')) (@ addr 10)
      ((Word32) ('r25')) (@ addr 10)
      ((Word32) ('r24')) (@ addr 10)
      ((Word32) ('r8')) (@ addr 10)
      ((Word32) ('r29')) (@ addr 10)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 10)
      ((Word32) ('r1')) (@ addr 10)
      ((Word32) ('r18')) (@ addr 10)
      ((Word32) ('r20')) (@ addr 10)
      ((Word32) ('r30')) (@ addr 10)
      ((Word32) ('r14')) (@ addr 10)
      ((Word32) ('r15')) (@ addr 10)
      ((Word32) ('mode')) (@ addr 10)
      ((Word32) ('r11')) (@ addr 10)
      ((Word32) ('r5')) (@ addr 10)
      ((Word32) ('ret')) (@ addr 10)
      ((Word32) ('r26')) (@ addr 10)
      ((Word32) ('r2')) (@ addr 10)
      ((Bool) (ROData('mem'))) (@ addr 10)
      ((Word32) ('r22')) (@ addr 10)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 10)
      ((Word32) ('end___unsigned_long#v.1')) (@ addr 70)
      ((Word32) (('start___unsigned_long#v.1' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast(5)))))) (@ addr 70)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 70)
      ((Word32[50]) ('GhostAssertions.1')) (@ addr 70)
    .. proven.
Step 12: case in (11) where the length of the sequence < 2
  Prove the number of visits to 10 is in {0 ..< 3}
    .. proven.
Step 13: 
  Prove the number of visits to 70 is in {0 ..< 3}
    .. proven.
Step 14: 
  Prove the number of visits to 113 is in {0 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 56 is in {0 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (11) where the length of the sequence is j + 2
  Prove the number of visits to 10 is in {j + 0 ..< j + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 70 is in {j + 0 ..< j + 3}
    .. proven.
Step 19: 
  Prove the number of visits to 113 is in {0 ..< 2}
    .. proven.
Step 20: 
  Prove the number of visits to 56 is in {0 ..< 2}
    .. proven.
Step 21: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cleanCacheRange_RAM (ASM) <= Kernel_C.cleanCacheRange_RAM (C)), time taken: 258.52s
Testing Function pair Pairing (map_kernel_devices (ASM) <= Kernel_C.map_kernel_devices (C))
  (function pairing 5 of 176)
 .. built problem, finding proof
Discovered that points [3 (loop head)] can be bounded
  (in problem)
Discovered that points [60 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (3, ('Number', (0, 5))), (ProofNode ('Restr', (60, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 3 is in {0 ..< 5}
    .. proven.
Step 2: 
  Prove the number of visits to 60 is in {0 ..< 4}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (map_kernel_devices (ASM) <= Kernel_C.map_kernel_devices (C)), time taken: 20.37s
Testing Function pair Pairing (str_to_long (ASM) <= Kernel_C.str_to_long (C))
  (function pairing 6 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [45, 11]
  (in problem)
Now doing proof search in 45 init case in problem.
Now doing proof search in 45 loop case in problem.
ProofNode ('Split', ((45, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (11, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'base___unsigned#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'str___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'res___long#v')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'val___long#v'))], 2, 1), (ProofNode ('Restr', (45, ('Number', (0, 3))), (ProofNode ('Restr', (11, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (45, ('Offset', (0, 3))), (ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 45 related to visits to 11
    with equalities
      ((Word32) ('r0')) (@ addr 45)
      = ((Word32) ('res___long#v')) (@ addr 11)
      ((Word32) ('r4')) (@ addr 45)
      = ((Word32) ('val___long#v')) (@ addr 11)
    and with invariants
      ((Word32) ('r7')) (@ addr 45)
      ((Word32) ('r8')) (@ addr 45)
      ((Word32) (('r5' + ((0 - '#seq-visits') * 1)))) (@ addr 45)
      ((Word32) ('r9')) (@ addr 45)
      ((Word32) ('ret')) (@ addr 45)
      ((Word32) ('r11')) (@ addr 45)
      ((Word32) ('r13')) (@ addr 45)
      ((Word32) ('r10')) (@ addr 45)
      ((Mem) ('mem')) (@ addr 45)
      ((Word32) ('r6')) (@ addr 45)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 45)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 11)
      ((Word32) ('base___unsigned#v')) (@ addr 11)
      ((Mem) ('Mem')) (@ addr 11)
      ((Word32) (('str___ptr_to_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 11)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 45 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 11 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 45 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 11 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (str_to_long (ASM) <= Kernel_C.str_to_long (C)), time taken: 136.28s
Testing Function pair Pairing (cancelAllIPC (ASM) <= Kernel_C.cancelAllIPC (C))
  (function pairing 7 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [22, 10]
  (in problem)
Now doing proof search in 22 init case in problem.
Now doing proof search in 22 loop case in problem.
ProofNode ('Split', ((22, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (10, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'))], 2, 1), (ProofNode ('Restr', (22, ('Number', (0, 3))), (ProofNode ('Restr', (10, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (22, ('Offset', (0, 3))), (ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 22 related to visits to 10
    with equalities
      ((Mem) ('mem')) (@ addr 22)
      = ((Mem) ('Mem')) (@ addr 10)
      ((Word32) ('r0')) (@ addr 22)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 10)
      ((Word32) ('r4')) (@ addr 22)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 10)
    and with invariants
      ((Word32) ('r7')) (@ addr 22)
      ((Word32) ('r8')) (@ addr 22)
      ((Word32) ('r5')) (@ addr 22)
      ((Word32) ('r9')) (@ addr 22)
      ((Word32) ('ret')) (@ addr 22)
      ((Word32) ('r11')) (@ addr 22)
      ((Word32) ('r13')) (@ addr 22)
      ((Word32) ('r10')) (@ addr 22)
      ((Bool) (ROData('mem'))) (@ addr 22)
      ((Word32) ('r6')) (@ addr 22)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 22)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 10)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 22 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 10 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 22 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 10 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cancelAllIPC (ASM) <= Kernel_C.cancelAllIPC (C)), time taken: 128.79s
Testing Function pair Pairing (tcbEPDequeue (ASM) <= Kernel_C.tcbEPDequeue (C))
  (function pairing 8 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (tcbEPDequeue (ASM) <= Kernel_C.tcbEPDequeue (C)), time taken: 7.04s
Testing Function pair Pairing (handleRecv (ASM) <= Kernel_C.handleRecv (C))
  (function pairing 9 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleRecv (ASM) <= Kernel_C.handleRecv (C)), time taken: 22.84s
Testing Function pair Pairing (makeUserPDE (ASM) <= Kernel_C.makeUserPDE (C))
  (function pairing 10 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (makeUserPDE (ASM) <= Kernel_C.makeUserPDE (C)), time taken: 4.75s
Testing Function pair Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C))
  (function pairing 11 of 176)
Aborting Problem (Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C))), complex loop
Result ProblemAbort for pair Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C)), time taken: 27.70s
Testing Function pair Pairing (sameObjectAs (ASM) <= Kernel_C.sameObjectAs (C))
  (function pairing 12 of 176)
 .. built problem, finding proof
Decided to case split at (62, 'ASM')
  (in problem)
Now doing proof search in true case (62 visited) in problem.
Now doing proof search in false case (62 not visited) in problem.
ProofNode ('CaseSplit', (62, 'ASM'), (ProofNode ('Restr', (62, ('Number', (1, 2))), (ProofNode ('Restr', (7, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (62, ('Number', (0, 1))), (ProofNode ('Restr', (7, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 62 is visited
Step 2: case in (1) where 62 is visited
  Prove the number of visits to 62 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 7 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 62 is not visited
  Prove the number of visits to 62 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 7 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (sameObjectAs (ASM) <= Kernel_C.sameObjectAs (C)), time taken: 8.56s
Testing Function pair Pairing (invokeCNodeMove (ASM) <= Kernel_C.invokeCNodeMove (C))
  (function pairing 13 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeMove (ASM) <= Kernel_C.invokeCNodeMove (C)), time taken: 0.55s
Testing Function pair Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C))
  (function pairing 14 of 176)
 .. built problem, finding proof
Decided to case split at (39, 'ASM')
  (in problem)
Now doing proof search in true case (39 visited) in problem.
Now doing proof search in false case (39 not visited) in problem.
ProofNode ('CaseSplit', (39, 'ASM'), (ProofNode ('Restr', (39, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (39, ('Number', (0, 1))), (ProofNode ('Restr', (15, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 39 is visited
Step 2: case in (1) where 39 is visited
  Prove the number of visits to 39 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 39 is not visited
  Prove the number of visits to 39 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 15 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C)), time taken: 15.36s
Testing Function pair Pairing (setupReplyMaster (ASM) <= Kernel_C.setupReplyMaster (C))
  (function pairing 15 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setupReplyMaster (ASM) <= Kernel_C.setupReplyMaster (C)), time taken: 1.04s
Testing Function pair Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C))
  (function pairing 16 of 176)
 .. built problem, finding proof
Discovered that points [80 (loop head)] can be bounded
  (in problem)
Discovered that points [13 (loop head)] can be bounded
  (in problem)
Found a future induction at 4
Now doing proof search in problem.
Discovered a loop relation for split points [48, 9]
  (in problem)
Now doing proof search in 48 init case in problem.
Now doing proof search in 48 loop case in problem.
ProofNode ('Restr', (80, ('Number', (0, 5))), (ProofNode ('Restr', (13, ('Number', (0, 6))), (ProofNode ('SingleRevInduct', (4, ([Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'recvBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'sendBuf___ptr_to_unsigned_long#v'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])])], 1), (Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Num', Type ('Word', 32), val = 939529486)]), 4294967293)), (ProofNode ('Split', ((48, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (9, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'sendBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'recvBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (48, ('Number', (0, 3))), (ProofNode ('Restr', (9, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (48, ('Offset', (0, 3))), (ProofNode ('Restr', (9, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 80 is in {0 ..< 5}
    .. proven.
Step 2: 
  Prove the number of visits to 13 is in {0 ..< 6}
    .. proven.
Step 3: 
  Proving a predicate by future induction.
    proving these invariants by 1-induction
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('n___unsigned_long#v')) (@ addr 4)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 4)
      ((Word32) ('recvBuf___ptr_to_unsigned_long#v')) (@ addr 4)
      ((Word32[50]) ('GhostAssertions')) (@ addr 4)
      ((Word32) ('sendBuf___ptr_to_unsigned_long#v')) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))), ((Word32) ('i___unsigned_long#v'))), Less(((Word32) ((0 - WordCastSigned(1)))), ((Word32) ('i___unsigned_long#v')))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))), ((Word32) ('i___unsigned_long#v'))), Less(((Word32) ('i___unsigned_long#v')), ((Word32) ((0 - WordCastSigned(1)))))))) (@ addr 4)
    then establishing this predicate
      ((Bool) (Less(((Word32) ('n___unsigned_long#v')), ((Word32) (939529486))))) (@ addr 4)
    at large iterations (4294967293) and by back induction.
    .. proven.
Step 4: 
  prove visits to 48 related to visits to 9
    with equalities
      ((Mem) ('mem')) (@ addr 48)
      = ((Mem) ('Mem')) (@ addr 9)
    and with invariants
      ((Word32) ('r8')) (@ addr 48)
      ((Word32) ('r1')) (@ addr 48)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 48)
      ((Word32) ('r9')) (@ addr 48)
      ((Word32) ('ret')) (@ addr 48)
      ((Word32) ('r11')) (@ addr 48)
      ((Word32) ('r13')) (@ addr 48)
      ((Word32) ('r10')) (@ addr 48)
      ((Bool) (ROData('mem'))) (@ addr 48)
      ((Word32) ('r5')) (@ addr 48)
      ((Word32) ('r7')) (@ addr 48)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 4)))) (@ addr 48)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 48)
      ((Word32) ('sendBuf___ptr_to_unsigned_long#v')) (@ addr 9)
      ((Word32) ('n___unsigned_long#v')) (@ addr 9)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 9)
      ((Word32) ('recvBuf___ptr_to_unsigned_long#v')) (@ addr 9)
      ((Word32[50]) ('GhostAssertions')) (@ addr 9)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 9)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 48 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 9 is in {0 ..< 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is i + 2
  Prove the number of visits to 48 is in {i + 0 ..< i + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 9 is in {i + 0 ..< i + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C)), time taken: 267.58s
Testing Function pair Pairing (lookupSlot (ASM) <= Kernel_C.lookupSlot (C))
  (function pairing 17 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupSlot (ASM) <= Kernel_C.lookupSlot (C)), time taken: 10.58s
Testing Function pair Pairing (Arch_switchToIdleThread (ASM) <= Kernel_C.Arch_switchToIdleThread (C))
  (function pairing 18 of 176)
 .. built problem, finding proof
Discovered that points [5 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_switchToIdleThread (ASM) <= Kernel_C.Arch_switchToIdleThread (C)), time taken: 0.76s
Testing Function pair Pairing (invokeTCB_Resume (ASM) <= Kernel_C.invokeTCB_Resume (C))
  (function pairing 19 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_Resume (ASM) <= Kernel_C.invokeTCB_Resume (C)), time taken: 0.49s
Testing Function pair Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))
  (function pairing 20 of 176)
Aborting Problem (Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))), complex loop
Result ProblemAbort for pair Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C)), time taken: 28.52s
Testing Function pair Pairing (invokeCNodeRevoke (ASM) <= Kernel_C.invokeCNodeRevoke (C))
  (function pairing 21 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeRevoke (ASM) <= Kernel_C.invokeCNodeRevoke (C)), time taken: 0.49s
Testing Function pair Pairing (restore_user_context (ASM) <= Kernel_C.restore_user_context (C))
  (function pairing 22 of 176)
Skipping Pairing (restore_user_context (ASM) <= Kernel_C.restore_user_context (C)), underspecified C
Testing Function pair Pairing (setIRQState (ASM) <= Kernel_C.setIRQState (C))
  (function pairing 23 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setIRQState (ASM) <= Kernel_C.setIRQState (C)), time taken: 0.70s
Testing Function pair Pairing (decodeDomainInvocation (ASM) <= Kernel_C.decodeDomainInvocation (C))
  (function pairing 24 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeDomainInvocation (ASM) <= Kernel_C.decodeDomainInvocation (C)), time taken: 15.06s
Testing Function pair Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))
  (function pairing 25 of 176)
Aborting Problem (Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))): underspecified Kernel_C.clearExMonitor
Result ProblemAbort for pair Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C)), time taken: 0.00s
Testing Function pair Pairing (idle_thread (ASM) <= Kernel_C.idle_thread (C))
  (function pairing 26 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [8, 2]
  (in problem)
Now doing proof search in 8 init case in problem.
Now doing proof search in 8 loop case in problem.
ProofNode ('Split', ((8, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (2, (0, 1), [Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Restr', (2, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (8, ('Offset', (0, 1))), (ProofNode ('Restr', (2, ('Offset', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 8 related to visits to 2
    with equalities
      ((Mem) ('mem')) (@ addr 8)
      = ((Mem) ('Mem')) (@ addr 2)
    and with invariants
      ((Word32) ('r21')) (@ addr 8)
      ((Word32) ('r4')) (@ addr 8)
      ((Bool) ('v')) (@ addr 8)
      ((Word32) ('r27')) (@ addr 8)
      ((Word32) ('r17')) (@ addr 8)
      ((Word32) ('r0')) (@ addr 8)
      ((Word32) ('r23')) (@ addr 8)
      ((Word32) ('r13')) (@ addr 8)
      ((Word32) ('r10')) (@ addr 8)
      ((Word32) ('r28')) (@ addr 8)
      ((Word32) ('r19')) (@ addr 8)
      ((Word32) ('r16')) (@ addr 8)
      ((Word64) ('clock')) (@ addr 8)
      ((Word32) ('r12')) (@ addr 8)
      ((Word32) ('r9')) (@ addr 8)
      ((Bool) ('z')) (@ addr 8)
      ((Word32) ('r6')) (@ addr 8)
      ((Word32) ('r7')) (@ addr 8)
      ((Word32) ('r31')) (@ addr 8)
      ((Word32) ('r25')) (@ addr 8)
      ((Word32) ('r24')) (@ addr 8)
      ((Word32) ('r8')) (@ addr 8)
      ((Word32) ('r29')) (@ addr 8)
      ((Word32) ('r3')) (@ addr 8)
      ((Bool) ('n')) (@ addr 8)
      ((Bool) ('c')) (@ addr 8)
      ((Word32) ('r18')) (@ addr 8)
      ((Word32) ('r20')) (@ addr 8)
      ((Word32) ('r30')) (@ addr 8)
      ((Word32) ('r14')) (@ addr 8)
      ((Word32) ('r15')) (@ addr 8)
      ((Word32) ('mode')) (@ addr 8)
      ((Word32) ('r11')) (@ addr 8)
      ((Word32) ('r5')) (@ addr 8)
      ((Word32) ('r26')) (@ addr 8)
      ((Word32) ('r1')) (@ addr 8)
      ((Word32) ('r2')) (@ addr 8)
      ((Bool) (ROData('mem'))) (@ addr 8)
      ((Word32) ('r22')) (@ addr 8)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 8)
      ((Word32[50]) ('GhostAssertions')) (@ addr 2)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 2)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 2 is in {0 ..< 1}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 8 is in {i + 0 ..< i + 1}
    .. proven.
Step 6: 
  Prove the number of visits to 2 is in {i + 0 ..< i + 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (idle_thread (ASM) <= Kernel_C.idle_thread (C)), time taken: 11.37s
Testing Function pair Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C))
  (function pairing 27 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [24, 11]
  (in problem)
Now doing proof search in 24 init case in problem.
Now doing proof search in 24 loop case in problem.
ProofNode ('Split', ((24, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'MemAcc', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (11, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'userSize___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 't___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'objectSize___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'slots___struct_slot_range_C#v.offset_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'slots___struct_slot_range_C#v.cnode_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'nextFreeArea___ptr_to_void#v'), Expr ('Var', Type ('Word', 32), name = 'deviceMemory___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'parent___ptr_to_struct_cte_C#v'), Expr ('Var', Type ('Word', 32), name = 'slots___struct_slot_range_C#v.length_C')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (24, ('Number', (0, 3))), (ProofNode ('Restr', (11, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (24, ('Offset', (0, 3))), (ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 24 related to visits to 11
    with equalities
      ((Mem) ('mem')) (@ addr 24)
      = ((Mem) ('Mem')) (@ addr 11)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 24)
      ((Word32) ('r0')) (@ addr 24)
      ((Word32) ('r11')) (@ addr 24)
      ((Word32) ('r13')) (@ addr 24)
      ((Word32) ('r10')) (@ addr 24)
      ((Word32) ('r9')) (@ addr 24)
      ((Word32) ('r6')) (@ addr 24)
      ((Word32) ('r8')) (@ addr 24)
      ((Word32) (MemAcc('stack', ('r13' + 0)))) (@ addr 24)
      ((Word32) ('r5')) (@ addr 24)
      ((Word32) ('r7')) (@ addr 24)
      ((Word32) ('ret')) (@ addr 24)
      ((Word32) ('r1')) (@ addr 24)
      ((Bool) (ROData('mem'))) (@ addr 24)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 24)
      ((Word32) ('userSize___unsigned_long#v')) (@ addr 11)
      ((Word32) ('t___unsigned_long#v')) (@ addr 11)
      ((Word32) ('objectSize___unsigned_long#v')) (@ addr 11)
      ((Word32) ('slots___struct_slot_range_C#v.offset_C')) (@ addr 11)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 11)
      ((Word32) ('slots___struct_slot_range_C#v.cnode_C')) (@ addr 11)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 11)
      ((Word32) ('nextFreeArea___ptr_to_void#v')) (@ addr 11)
      ((Word32) ('deviceMemory___unsigned_long#v')) (@ addr 11)
      ((Word32) ('parent___ptr_to_struct_cte_C#v')) (@ addr 11)
      ((Word32) ('slots___struct_slot_range_C#v.length_C')) (@ addr 11)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 24 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 11 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 24 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 11 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C)), time taken: 380.54s
Testing Function pair Pairing (invalidateTLBByASID (ASM) <= Kernel_C.invalidateTLBByASID (C))
  (function pairing 28 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invalidateTLBByASID (ASM) <= Kernel_C.invalidateTLBByASID (C)), time taken: 1.10s
Testing Function pair Pairing (char_to_long (ASM) <= Kernel_C.char_to_long (C))
  (function pairing 29 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (char_to_long (ASM) <= Kernel_C.char_to_long (C)), time taken: 0.34s
Testing Function pair Pairing (create_unmapped_it_frame_cap (ASM) <= Kernel_C.create_unmapped_it_frame_cap (C))
  (function pairing 30 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_unmapped_it_frame_cap (ASM) <= Kernel_C.create_unmapped_it_frame_cap (C)), time taken: 0.42s
Testing Function pair Pairing (lookupCap (ASM) <= Kernel_C.lookupCap (C))
  (function pairing 31 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupCap (ASM) <= Kernel_C.lookupCap (C)), time taken: 10.48s
Testing Function pair Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C))
  (function pairing 32 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [28, 6]
  (in problem)
Now doing proof search in 28 init case in problem.
Now doing proof search in 28 loop case in problem.
ProofNode ('Split', ((28, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r12')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r12')])])]), (6, (1, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (28, ('Number', (0, 3))), (ProofNode ('Restr', (6, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (6, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 28 related to visits [2, 3, 4 ...] to 6
    with equalities
      ((Mem) ('mem')) (@ addr 28)
      = ((Mem) ('Mem')) (@ addr 6)
    and with invariants
      ((Word32) ('r4')) (@ addr 28)
      ((Word32) ('r8')) (@ addr 28)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
      ((Word32) ('r11')) (@ addr 28)
      ((Word32) ('r5')) (@ addr 28)
      ((Word32) ('r9')) (@ addr 28)
      ((Word32) ('ret')) (@ addr 28)
      ((Word32) ('r2')) (@ addr 28)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
      ((Word32) ('r13')) (@ addr 28)
      ((Word32) ('r10')) (@ addr 28)
      ((Bool) (ROData('mem'))) (@ addr 28)
      ((Word32) ('r6')) (@ addr 28)
      ((Word32) ('r7')) (@ addr 28)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 28)
      ((Bool) (Equals(LessEquals(((Word32) (('r12' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r12'))), Less(((Word32) ('r2')), ((Word32) ('r12')))))) (@ addr 28)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 6)
      ((Word32) ('size___unsigned_long#v')) (@ addr 6)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 6)
      ((Word32) ('src___ptr_to_char#v')) (@ addr 6)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 6)
      ((Word32[50]) ('GhostAssertions')) (@ addr 6)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 28 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 6 is in {0 ..< 4}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 28 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 6 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C)), time taken: 187.19s
Testing Function pair Pairing (deletedIRQHandler (ASM) <= Kernel_C.deletedIRQHandler (C))
  (function pairing 33 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deletedIRQHandler (ASM) <= Kernel_C.deletedIRQHandler (C)), time taken: 0.55s
Testing Function pair Pairing (loadHWASID (ASM) <= Kernel_C.loadHWASID (C))
  (function pairing 34 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (loadHWASID (ASM) <= Kernel_C.loadHWASID (C)), time taken: 0.37s
Testing Function pair Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C))
  (function pairing 35 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [46, 27]
  (in problem)
Now doing proof search in 46 init case in problem.
Now doing proof search in 46 loop case in problem.
ProofNode ('Split', ((46, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (27, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'first_untyped_slot___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'device_memory___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_region_C#v.end_C')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_region_C#v.start_C'))], 2, 1), (ProofNode ('Restr', (46, ('Number', (0, 3))), (ProofNode ('Restr', (27, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (46, ('Offset', (0, 3))), (ProofNode ('Restr', (27, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 46 related to visits to 27
    with equalities
      ((Mem) ('mem')) (@ addr 46)
      = ((Mem) ('Mem')) (@ addr 27)
      ((Word32) ('r5')) (@ addr 46)
      = ((Word32) ('reg___struct_region_C#v.start_C')) (@ addr 27)
    and with invariants
      ((Word32) ('r13')) (@ addr 46)
      ((Word32) ('r10')) (@ addr 46)
      ((Word32) ('r9')) (@ addr 46)
      ((Word32) ('r6')) (@ addr 46)
      ((Word32) ('r7')) (@ addr 46)
      ((Word32) ('r8')) (@ addr 46)
      ((Word32) ('r11')) (@ addr 46)
      ((Word32) ('ret')) (@ addr 46)
      ((Bool) (ROData('mem'))) (@ addr 46)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 46)
      ((Word32) ('first_untyped_slot___unsigned_long#v')) (@ addr 27)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 27)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 27)
      ((Word32) ('device_memory___unsigned_long#v')) (@ addr 27)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 27)
      ((Word32) ('reg___struct_region_C#v.end_C')) (@ addr 27)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 46 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 27 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 46 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 27 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C)), time taken: 900.16s
Testing Function pair Pairing (cancelAllSignals (ASM) <= Kernel_C.cancelAllSignals (C))
  (function pairing 36 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [31, 10]
  (in problem)
Now doing proof search in 31 init case in problem.
Now doing proof search in 31 loop case in problem.
ProofNode ('Split', ((31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (10, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'))], 2, 1), (ProofNode ('Restr', (31, ('Number', (0, 3))), (ProofNode ('Restr', (10, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 31 related to visits to 10
    with equalities
      ((Mem) ('mem')) (@ addr 31)
      = ((Mem) ('Mem')) (@ addr 10)
      ((Word32) ('r0')) (@ addr 31)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 10)
      ((Word32) ('r4')) (@ addr 31)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 10)
    and with invariants
      ((Word32) ('r7')) (@ addr 31)
      ((Word32) ('r8')) (@ addr 31)
      ((Word32) ('r11')) (@ addr 31)
      ((Word32) ('r13')) (@ addr 31)
      ((Word32) ('r9')) (@ addr 31)
      ((Word32) ('ret')) (@ addr 31)
      ((Word32) ('r1')) (@ addr 31)
      ((Word32) ('r10')) (@ addr 31)
      ((Bool) (ROData('mem'))) (@ addr 31)
      ((Word32) ('r5')) (@ addr 31)
      ((Word32) ('r6')) (@ addr 31)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 31)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 10)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 31 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 10 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 31 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 10 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cancelAllSignals (ASM) <= Kernel_C.cancelAllSignals (C)), time taken: 122.03s
Testing Function pair Pairing (finaliseCap (ASM) <= Kernel_C.finaliseCap (C))
  (function pairing 37 of 176)
 .. built problem, finding proof
Decided to case split at (146, 'ASM')
  (in problem)
Now doing proof search in true case (146 visited) in problem.
Now doing proof search in false case (146 not visited) in problem.
Decided to case split at (434, 'ASM')
  (in false case (146 not visited) in problem)
Now doing proof search in true case (434 visited) in false case (146 not visited) in problem.
Now doing proof search in false case (434 not visited) in false case (146 not visited) in problem.
ProofNode ('CaseSplit', (146, 'ASM'), (ProofNode ('Restr', (146, ('Number', (1, 2))), (ProofNode ('Restr', (77, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (146, ('Number', (0, 1))), (ProofNode ('Restr', (77, ('Number', (0, 1))), (ProofNode ('CaseSplit', (434, 'ASM'), (ProofNode ('Restr', (434, ('Number', (1, 2))), (ProofNode ('Restr', (90, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (434, ('Number', (0, 1))), (ProofNode ('Restr', (90, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 146 is visited
Step 2: case in (1) where 146 is visited
  Prove the number of visits to 146 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 77 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 146 is not visited
  Prove the number of visits to 146 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 77 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 434 is visited
Step 8: case in (7) where 434 is visited
  Prove the number of visits to 434 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 90 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 434 is not visited
  Prove the number of visits to 434 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 90 is in {0 ..< 1}
    .. proven.
Step 13: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (finaliseCap (ASM) <= Kernel_C.finaliseCap (C)), time taken: 103.99s
Testing Function pair Pairing (lookupPTSlot (ASM) <= Kernel_C.lookupPTSlot (C))
  (function pairing 38 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupPTSlot (ASM) <= Kernel_C.lookupPTSlot (C)), time taken: 0.66s
Testing Function pair Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C))
  (function pairing 39 of 176)
Aborting Problem (Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C)), time taken: 0.00s
Testing Function pair Pairing (setNextPC (ASM) <= Kernel_C.setNextPC (C))
  (function pairing 40 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setNextPC (ASM) <= Kernel_C.setNextPC (C)), time taken: 0.44s
Testing Function pair Pairing (isIRQActive (ASM) <= Kernel_C.isIRQActive (C))
  (function pairing 41 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isIRQActive (ASM) <= Kernel_C.isIRQActive (C)), time taken: 0.26s
Testing Function pair Pairing (insert_region (ASM) <= Kernel_C.insert_region (C))
  (function pairing 42 of 176)
 .. built problem, finding proof
Discovered that points [28 (loop head)] can be bounded
  (in problem)
Discovered that points [4 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (28, ('Number', (0, 4))), (ProofNode ('Restr', (4, ('Number', (0, 6))), (ProofNode ('Leaf', None, ()),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 28 is in {0 ..< 4}
    .. proven.
Step 2: 
  Prove the number of visits to 4 is in {0 ..< 6}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (insert_region (ASM) <= Kernel_C.insert_region (C)), time taken: 11.98s
Testing Function pair Pairing (create_root_cnode (ASM) <= Kernel_C.create_root_cnode (C))
  (function pairing 43 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_root_cnode (ASM) <= Kernel_C.create_root_cnode (C)), time taken: 3.22s
Testing Function pair Pairing (performInvocation_Reply (ASM) <= Kernel_C.performInvocation_Reply (C))
  (function pairing 44 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (performInvocation_Reply (ASM) <= Kernel_C.performInvocation_Reply (C)), time taken: 0.53s
Testing Function pair Pairing (Arch_configureIdleThread (ASM) <= Kernel_C.Arch_configureIdleThread (C))
  (function pairing 45 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_configureIdleThread (ASM) <= Kernel_C.Arch_configureIdleThread (C)), time taken: 0.43s
Testing Function pair Pairing (bindNotification (ASM) <= Kernel_C.bindNotification (C))
  (function pairing 46 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (bindNotification (ASM) <= Kernel_C.bindNotification (C)), time taken: 0.49s
Testing Function pair Pairing (l_impl'dsb (ASM) <= r_impl'dsb (C))
  (function pairing 47 of 176)
Skipping Pairing (l_impl'dsb (ASM) <= r_impl'dsb (C)), underspecified C
Testing Function pair Pairing (invokeTCB_Suspend (ASM) <= Kernel_C.invokeTCB_Suspend (C))
  (function pairing 48 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_Suspend (ASM) <= Kernel_C.invokeTCB_Suspend (C)), time taken: 0.49s
Testing Function pair Pairing (getReceiveSlots (ASM) <= Kernel_C.getReceiveSlots (C))
  (function pairing 49 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (getReceiveSlots (ASM) <= Kernel_C.getReceiveSlots (C)), time taken: 14.38s
Testing Function pair Pairing (setMCPriority (ASM) <= Kernel_C.setMCPriority (C))
  (function pairing 50 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setMCPriority (ASM) <= Kernel_C.setMCPriority (C)), time taken: 0.42s
Testing Function pair Pairing (maskCapRights (ASM) <= Kernel_C.maskCapRights (C))
  (function pairing 51 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (maskCapRights (ASM) <= Kernel_C.maskCapRights (C)), time taken: 14.24s
Testing Function pair Pairing (cpu_initLocalIRQController (ASM) <= Kernel_C.cpu_initLocalIRQController (C))
  (function pairing 52 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cpu_initLocalIRQController (ASM) <= Kernel_C.cpu_initLocalIRQController (C)), time taken: 0.49s
Testing Function pair Pairing (tcbSchedDequeue (ASM) <= Kernel_C.tcbSchedDequeue (C))
  (function pairing 53 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (tcbSchedDequeue (ASM) <= Kernel_C.tcbSchedDequeue (C)), time taken: 10.07s
Testing Function pair Pairing (performInvocation_Endpoint (ASM) <= Kernel_C.performInvocation_Endpoint (C))
  (function pairing 54 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (performInvocation_Endpoint (ASM) <= Kernel_C.performInvocation_Endpoint (C)), time taken: 1.46s
Testing Function pair Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C))
  (function pairing 55 of 176)
 .. built problem, finding proof
Decided to case split at (50, 'ASM')
  (in problem)
Now doing proof search in true case (50 visited) in problem.
Now doing proof search in false case (50 not visited) in problem.
ProofNode ('CaseSplit', (50, 'ASM'), (ProofNode ('Restr', (50, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (50, ('Number', (0, 1))), (ProofNode ('Restr', (15, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 50 is visited
Step 2: case in (1) where 50 is visited
  Prove the number of visits to 50 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 50 is not visited
  Prove the number of visits to 50 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 15 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C)), time taken: 34.93s
Testing Function pair Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))
  (function pairing 56 of 176)
Aborting Problem (Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))): underspecified instruction'vmrs_r3_fpexc_E0004B40
Result ProblemAbort for pair Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C)), time taken: 0.10s
Testing Function pair Pairing (flushPage (ASM) <= Kernel_C.flushPage (C))
  (function pairing 57 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (flushPage (ASM) <= Kernel_C.flushPage (C)), time taken: 2.25s
Testing Function pair Pairing (cteMove (ASM) <= Kernel_C.cteMove (C))
  (function pairing 58 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteMove (ASM) <= Kernel_C.cteMove (C)), time taken: 7.73s
Testing Function pair Pairing (lookupCapAndSlot (ASM) <= Kernel_C.lookupCapAndSlot (C))
  (function pairing 59 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupCapAndSlot (ASM) <= Kernel_C.lookupCapAndSlot (C)), time taken: 8.90s
Testing Function pair Pairing (rescheduleRequired (ASM) <= Kernel_C.rescheduleRequired (C))
  (function pairing 60 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (rescheduleRequired (ASM) <= Kernel_C.rescheduleRequired (C)), time taken: 0.92s
Testing Function pair Pairing (createObject (ASM) <= Kernel_C.createObject (C))
  (function pairing 61 of 176)
 .. built problem, finding proof
Decided to case split at (61, 'ASM')
  (in problem)
Now doing proof search in true case (61 visited) in problem.
Now doing proof search in false case (61 not visited) in problem.
ProofNode ('CaseSplit', (61, 'ASM'), (ProofNode ('Restr', (61, ('Number', (1, 2))), (ProofNode ('Restr', (45, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (61, ('Number', (0, 1))), (ProofNode ('Restr', (45, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 61 is visited
Step 2: case in (1) where 61 is visited
  Prove the number of visits to 61 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 45 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 61 is not visited
  Prove the number of visits to 61 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 45 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (createObject (ASM) <= Kernel_C.createObject (C)), time taken: 15.92s
Testing Function pair Pairing (create_rootserver_objects (ASM) <= Kernel_C.create_rootserver_objects (C))
  (function pairing 62 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_rootserver_objects (ASM) <= Kernel_C.create_rootserver_objects (C)), time taken: 14.62s
Testing Function pair Pairing (replyFromKernel_success_empty (ASM) <= Kernel_C.replyFromKernel_success_empty (C))
  (function pairing 63 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (replyFromKernel_success_empty (ASM) <= Kernel_C.replyFromKernel_success_empty (C)), time taken: 1.00s
Testing Function pair Pairing (handleUnknownSyscall (ASM) <= Kernel_C.handleUnknownSyscall (C))
  (function pairing 64 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleUnknownSyscall (ASM) <= Kernel_C.handleUnknownSyscall (C)), time taken: 1.22s
Testing Function pair Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C))
  (function pairing 65 of 176)
Skipping Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C)), underspecified C
Testing Function pair Pairing (pageTableMapped (ASM) <= Kernel_C.pageTableMapped (C))
  (function pairing 66 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (pageTableMapped (ASM) <= Kernel_C.pageTableMapped (C)), time taken: 1.22s
Testing Function pair Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C))
  (function pairing 67 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [38, 14]
  (in problem)
Now doing proof search in 38 init case in problem.
Now doing proof search in 38 loop case in problem.
ProofNode ('Split', ((38, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4096)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'ret_addr_input'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 24)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 4)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 28)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (14, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'do_map___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'f___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 12)])])])]), Expr ('Var', Type ('Word', 32), name = 'slot_pos_before___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'pv_offset___long#v')]), [(Expr ('Op', Type ('Word', 32), name = 'MemAcc', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 24)])]), Expr ('Var', Type ('Word', 32), name = 'frame_cap___struct_cap_C#v.words_C.0')), (Expr ('Op', Type ('Word', 32), name = 'MemAcc', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 28)])]), Expr ('Var', Type ('Word', 32), name = 'frame_cap___struct_cap_C#v.words_C.1')), (Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (38, ('Number', (0, 3))), (ProofNode ('Restr', (14, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (38, ('Offset', (0, 3))), (ProofNode ('Restr', (14, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 38 related to visits to 14
    with equalities
      ((Word32) (MemAcc('stack', ('r13' + 24)))) (@ addr 38)
      = ((Word32) ('frame_cap___struct_cap_C#v.words_C.0')) (@ addr 14)
      ((Word32) (MemAcc('stack', ('r13' + 28)))) (@ addr 38)
      = ((Word32) ('frame_cap___struct_cap_C#v.words_C.1')) (@ addr 14)
      ((Mem) ('mem')) (@ addr 38)
      = ((Mem) ('Mem')) (@ addr 14)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 4096)))) (@ addr 38)
      ((Word32) ('r13')) (@ addr 38)
      ((Word32) ('r10')) (@ addr 38)
      ((Word32) ('r9')) (@ addr 38)
      ((Word32) ('r6')) (@ addr 38)
      ((Word32) ('r7')) (@ addr 38)
      ((Word32) ('r8')) (@ addr 38)
      ((Word32) ('ret_addr_input')) (@ addr 38)
      ((Bool) (ROData('mem'))) (@ addr 38)
      ((Word32) ('r11')) (@ addr 38)
      ((Word32) ('r5')) (@ addr 38)
      ((Word32) ('ret')) (@ addr 38)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 24))), ((Word32) (0))), ((Word32) (('r13' + 4))), ((Word32) (0))), ((Word32) (('r13' + 28))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 38)
      ((Word32) ('do_map___unsigned_long#v')) (@ addr 14)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 14)
      ((Word32) (('f___unsigned_long#v' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast(12)))))) (@ addr 14)
      ((Word32) ('slot_pos_before___unsigned_long#v')) (@ addr 14)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.1')) (@ addr 14)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 14)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.0')) (@ addr 14)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 14)
      ((Word32) ('reg___struct_region_C#v.end_C')) (@ addr 14)
      ((Word32) ('pv_offset___long#v')) (@ addr 14)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 38 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 14 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 38 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 14 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C)), time taken: 1343.85s
Testing Function pair Pairing (sameRegionAs (ASM) <= Kernel_C.sameRegionAs (C))
  (function pairing 68 of 176)
 .. built problem, finding proof
Decided to case split at (122, 'ASM')
  (in problem)
Now doing proof search in true case (122 visited) in problem.
Now doing proof search in false case (122 not visited) in problem.
ProofNode ('CaseSplit', (122, 'ASM'), (ProofNode ('Restr', (122, ('Number', (1, 2))), (ProofNode ('Restr', (20, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (122, ('Number', (0, 1))), (ProofNode ('Restr', (20, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 122 is visited
Step 2: case in (1) where 122 is visited
  Prove the number of visits to 122 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 20 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 122 is not visited
  Prove the number of visits to 122 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 20 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (sameRegionAs (ASM) <= Kernel_C.sameRegionAs (C)), time taken: 171.90s
Testing Function pair Pairing (slotCapLongRunningDelete (ASM) <= Kernel_C.slotCapLongRunningDelete (C))
  (function pairing 69 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (slotCapLongRunningDelete (ASM) <= Kernel_C.slotCapLongRunningDelete (C)), time taken: 1.27s
Testing Function pair Pairing (Arch_isFrameType (ASM) <= Kernel_C.Arch_isFrameType (C))
  (function pairing 70 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_isFrameType (ASM) <= Kernel_C.Arch_isFrameType (C)), time taken: 0.28s
Testing Function pair Pairing (setThreadState (ASM) <= Kernel_C.setThreadState (C))
  (function pairing 71 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setThreadState (ASM) <= Kernel_C.setThreadState (C)), time taken: 2.41s
Testing Function pair Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C))
  (function pairing 72 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C)), time taken: 24.80s
Testing Function pair Pairing (lookupSlotForCNodeOp (ASM) <= Kernel_C.lookupSlotForCNodeOp (C))
  (function pairing 73 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupSlotForCNodeOp (ASM) <= Kernel_C.lookupSlotForCNodeOp (C)), time taken: 14.40s
Testing Function pair Pairing (copyGlobalMappings (ASM) <= Kernel_C.copyGlobalMappings (C))
  (function pairing 74 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [33, 10]
  (in problem)
Now doing proof search in 33 init case in problem.
Now doing proof search in 33 loop case in problem.
ProofNode ('Split', ((33, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (10, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'newPD___ptr_to_struct_pde_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'global_pd___ptr_to_struct_pde_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (33, ('Number', (0, 1))), (ProofNode ('Restr', (10, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (33, ('Offset', (0, 3))), (ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 33 related to visits to 10
    with equalities
      ((Mem) ('mem')) (@ addr 33)
      = ((Mem) ('Mem')) (@ addr 10)
    and with invariants
      ((Word32) ('r7')) (@ addr 33)
      ((Word32) ('r4')) (@ addr 33)
      ((Word32) ('r8')) (@ addr 33)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 33)
      ((Word32) ('r5')) (@ addr 33)
      ((Word32) ('r6')) (@ addr 33)
      ((Word32) ('r0')) (@ addr 33)
      ((Word32) ('r9')) (@ addr 33)
      ((Word32) ('ret')) (@ addr 33)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 1)))) (@ addr 33)
      ((Word32) ('r11')) (@ addr 33)
      ((Word32) ('r12')) (@ addr 33)
      ((Word32) ('r13')) (@ addr 33)
      ((Word32) ('r10')) (@ addr 33)
      ((Bool) (ROData('mem'))) (@ addr 33)
      ((Word32) ('r14')) (@ addr 33)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 33)
      ((Word32) ('newPD___ptr_to_struct_pde_C#v')) (@ addr 10)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 10)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 10)
      ((Word32) ('global_pd___ptr_to_struct_pde_C#v')) (@ addr 10)
      ((Word32[50]) ('GhostAssertions')) (@ addr 10)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 33 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 10 is in {0 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 33 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 10 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (copyGlobalMappings (ASM) <= Kernel_C.copyGlobalMappings (C)), time taken: 74.67s
Testing Function pair Pairing (maybe_alloc_extra_bi (ASM) <= Kernel_C.maybe_alloc_extra_bi (C))
  (function pairing 75 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (maybe_alloc_extra_bi (ASM) <= Kernel_C.maybe_alloc_extra_bi (C)), time taken: 0.78s
Testing Function pair Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))
  (function pairing 76 of 176)
Aborting Problem (Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))), complex loop
Result ProblemAbort for pair Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C)), time taken: 0.63s
Testing Function pair Pairing (possibleSwitchTo (ASM) <= Kernel_C.possibleSwitchTo (C))
  (function pairing 77 of 176)
 .. built problem, finding proof
Decided to case split at (18, 'ASM')
  (in problem)
Now doing proof search in true case (18 visited) in problem.
Now doing proof search in false case (18 not visited) in problem.
ProofNode ('CaseSplit', (18, 'ASM'), (ProofNode ('Restr', (18, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (18, ('Number', (0, 1))), (ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 18 is visited
Step 2: case in (1) where 18 is visited
  Prove the number of visits to 18 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 18 is not visited
  Prove the number of visits to 18 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (possibleSwitchTo (ASM) <= Kernel_C.possibleSwitchTo (C)), time taken: 6.10s
Testing Function pair Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))
  (function pairing 78 of 176)
Aborting Problem (Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))): underspecified asm_instruction'.word_0xeef00a10__\nmov_%0,_r0________\n
Result ProblemAbort for pair Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C)), time taken: 0.00s
Testing Function pair Pairing (lookupTargetSlot (ASM) <= Kernel_C.lookupTargetSlot (C))
  (function pairing 79 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupTargetSlot (ASM) <= Kernel_C.lookupTargetSlot (C)), time taken: 6.00s
Testing Function pair Pairing (l_impl'wfi (ASM) <= r_impl'wfi (C))
  (function pairing 80 of 176)
Skipping Pairing (l_impl'wfi (ASM) <= r_impl'wfi (C)), underspecified C
Testing Function pair Pairing (cancelSignal (ASM) <= Kernel_C.cancelSignal (C))
  (function pairing 81 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cancelSignal (ASM) <= Kernel_C.cancelSignal (C)), time taken: 8.34s
Testing Function pair Pairing (invalidateASIDEntry (ASM) <= Kernel_C.invalidateASIDEntry (C))
  (function pairing 82 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invalidateASIDEntry (ASM) <= Kernel_C.invalidateASIDEntry (C)), time taken: 10.06s
Testing Function pair Pairing (strncmp (ASM) <= Kernel_C.strncmp (C))
  (function pairing 83 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [38, 15]
  (in problem)
Now doing proof search in 38 init case in problem.
Now doing proof search in 38 loop case in problem.
ProofNode ('Split', ((38, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (15, (1, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'n___int#v'), Expr ('Var', Type ('Word', 32), name = 's1___ptr_to_char#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('Word', 32), name = 's2___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (38, ('Number', (0, 3))), (ProofNode ('Restr', (15, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (38, ('Offset', (0, 3))), (ProofNode ('Restr', (15, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 38 related to visits [2, 3, 4 ...] to 15
    with equalities
    and with invariants
      ((Word32) ('r2')) (@ addr 38)
      ((Word32) ('r8')) (@ addr 38)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 1)))) (@ addr 38)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 38)
      ((Word32) ('r9')) (@ addr 38)
      ((Word32) ('ret')) (@ addr 38)
      ((Word32) ('r11')) (@ addr 38)
      ((Word32) ('r13')) (@ addr 38)
      ((Word32) ('r10')) (@ addr 38)
      ((Mem) ('mem')) (@ addr 38)
      ((Word32) ('r6')) (@ addr 38)
      ((Word32) ('r7')) (@ addr 38)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 38)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 15)
      ((Word32) ('n___int#v')) (@ addr 15)
      ((Word32) ('s1___ptr_to_char#v')) (@ addr 15)
      ((Mem) ('Mem')) (@ addr 15)
      ((Word32) ('s2___ptr_to_char#v')) (@ addr 15)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 15)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 38 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 15 is in {0 ..< 4}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 38 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 15 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (strncmp (ASM) <= Kernel_C.strncmp (C)), time taken: 92.53s
Testing Function pair Pairing (invalidateCacheRange_RAM (ASM) <= Kernel_C.invalidateCacheRange_RAM (C))
  (function pairing 84 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [38, 129]
  (in problem)
Now doing proof search in 38 init case in problem.
Discovered that points [154 (loop head)] can be bounded
  (in 38 init case in problem)
Discovered that points [85 (loop head)] can be bounded
  (in 38 init case in problem)
Discovered a loop relation for split points [102, 10]
  (in 38 init case in problem)
Now doing proof search in 102 init case in 38 init case in problem.
Now doing proof search in 102 loop case in 38 init case in problem.
Now doing proof search in 38 loop case in problem.
Discovered that points [154 (loop head)] can be bounded
  (in 38 loop case in problem)
Discovered that points [85 (loop head)] can be bounded
  (in 38 loop case in problem)
Discovered a loop relation for split points [102, 10]
  (in 38 loop case in problem)
Now doing proof search in 102 init case in 38 loop case in problem.
Now doing proof search in 102 loop case in 38 loop case in problem.
ProofNode ('Split', ((38, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (129, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.3'), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.1'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 5)])])])]), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.3'))], 2, 1), (ProofNode ('Restr', (38, ('Number', (0, 3))), (ProofNode ('Restr', (129, ('Number', (0, 3))), (ProofNode ('Restr', (154, ('Number', (0, 2))), (ProofNode ('Restr', (85, ('Number', (0, 2))), (ProofNode ('Split', ((102, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r2')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (10, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (102, ('Number', (0, 3))), (ProofNode ('Restr', (10, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (102, ('Offset', (0, 3))), (ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)), ProofNode ('Restr', (38, ('Offset', (0, 3))), (ProofNode ('Restr', (129, ('Offset', (0, 3))), (ProofNode ('Restr', (154, ('Number', (0, 2))), (ProofNode ('Restr', (85, ('Number', (0, 2))), (ProofNode ('Split', ((102, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r2')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (10, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (102, ('Number', (0, 3))), (ProofNode ('Restr', (10, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (102, ('Offset', (0, 3))), (ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),))))
 .. proof found.
Step 1: 
  prove visits to 38 related to visits to 129
    with equalities
      ((Mem) ('mem')) (@ addr 38)
      = ((Mem) ('Mem.3')) (@ addr 129)
    and with invariants
      ((Word32) ('r21')) (@ addr 38)
      ((Word32) ('r4')) (@ addr 38)
      ((Word32) ('r27')) (@ addr 38)
      ((Word32) ('r17')) (@ addr 38)
      ((Word32) ('r0')) (@ addr 38)
      ((Word32) ('r11')) (@ addr 38)
      ((Word32) ('r23')) (@ addr 38)
      ((Word32) ('r13')) (@ addr 38)
      ((Word32) ('r10')) (@ addr 38)
      ((Word32) ('r28')) (@ addr 38)
      ((Word32) ('r19')) (@ addr 38)
      ((Word32) ('r16')) (@ addr 38)
      ((Word64) ('clock')) (@ addr 38)
      ((Word32) ('r12')) (@ addr 38)
      ((Word32) ('r9')) (@ addr 38)
      ((Word32) ('r6')) (@ addr 38)
      ((Word32) ('r7')) (@ addr 38)
      ((Word32) ('r31')) (@ addr 38)
      ((Word32) ('r25')) (@ addr 38)
      ((Word32) ('r24')) (@ addr 38)
      ((Word32) ('r8')) (@ addr 38)
      ((Word32) ('r29')) (@ addr 38)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 38)
      ((Word32) ('r18')) (@ addr 38)
      ((Word32) ('r20')) (@ addr 38)
      ((Word32) ('r30')) (@ addr 38)
      ((Word32) ('r14')) (@ addr 38)
      ((Word32) ('r15')) (@ addr 38)
      ((Word32) ('mode')) (@ addr 38)
      ((Word32) ('r5')) (@ addr 38)
      ((Word32) ('ret')) (@ addr 38)
      ((Word32) ('r26')) (@ addr 38)
      ((Word32) ('r1')) (@ addr 38)
      ((Word32) ('r2')) (@ addr 38)
      ((Bool) (ROData('mem'))) (@ addr 38)
      ((Word32) ('r22')) (@ addr 38)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 38)
      ((Word32) ('end___unsigned_long#v')) (@ addr 129)
      ((Word32[50]) ('GhostAssertions.3')) (@ addr 129)
      ((Word32) ('end___unsigned_long#v.1')) (@ addr 129)
      ((Word32) ('start___unsigned_long#v')) (@ addr 129)
      ((Word32) (('loop#3#count.1' + ((0 - '#seq-visits') * 1)))) (@ addr 129)
      ((Word32) (('start___unsigned_long#v.1' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast(5)))))) (@ addr 129)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 129)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 38 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 129 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 154 is in {0 ..< 2}
    .. proven.
Step 5: 
  Prove the number of visits to 85 is in {0 ..< 2}
    .. proven.
Step 6: 
  prove visits to 102 related to visits to 10
    with equalities
      ((Mem) ('mem')) (@ addr 102)
      = ((Mem) ('Mem')) (@ addr 10)
    and with invariants
      ((Word32) ('r21')) (@ addr 102)
      ((Word32) ('r4')) (@ addr 102)
      ((Word32) ('r27')) (@ addr 102)
      ((Word32) ('r17')) (@ addr 102)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 102)
      ((Word32) ('r23')) (@ addr 102)
      ((Word32) ('r13')) (@ addr 102)
      ((Word32) ('r10')) (@ addr 102)
      ((Word32) ('r28')) (@ addr 102)
      ((Word32) ('r19')) (@ addr 102)
      ((Word32) ('r16')) (@ addr 102)
      ((Word64) ('clock')) (@ addr 102)
      ((Word32) ('r12')) (@ addr 102)
      ((Word32) ('r9')) (@ addr 102)
      ((Word32) ('r6')) (@ addr 102)
      ((Word32) ('r7')) (@ addr 102)
      ((Word32) ('r31')) (@ addr 102)
      ((Word32) ('r25')) (@ addr 102)
      ((Word32) ('r24')) (@ addr 102)
      ((Word32) ('r8')) (@ addr 102)
      ((Word32) ('r29')) (@ addr 102)
      ((Word32) ('r18')) (@ addr 102)
      ((Word32) ('r20')) (@ addr 102)
      ((Word32) ('r30')) (@ addr 102)
      ((Word32) ('r14')) (@ addr 102)
      ((Word32) ('r15')) (@ addr 102)
      ((Word32) ('mode')) (@ addr 102)
      ((Word32) ('r11')) (@ addr 102)
      ((Word32) ('r5')) (@ addr 102)
      ((Word32) ('ret')) (@ addr 102)
      ((Word32) ('r26')) (@ addr 102)
      ((Word32) ('r1')) (@ addr 102)
      ((Word32) ('r2')) (@ addr 102)
      ((Bool) (ROData('mem'))) (@ addr 102)
      ((Word32) ('r22')) (@ addr 102)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 102)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r2')), ((Word32) ('r0')))))) (@ addr 102)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r2')))))) (@ addr 102)
      ((Bool) ('c')) (@ addr 102)
      ((Bool) ('n')) (@ addr 102)
      ((Bool) ('v')) (@ addr 102)
      ((Bool) ('z')) (@ addr 102)
      ((Word32) ('end___unsigned_long#v')) (@ addr 10)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 10)
      ((Word32) ('start___unsigned_long#v')) (@ addr 10)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 10)
      ((Word32[50]) ('GhostAssertions')) (@ addr 10)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 10)
    .. proven.
Step 7: case in (6) where the length of the sequence < 2
  Prove the number of visits to 102 is in {0 ..< 3}
    .. proven.
Step 8: 
  Prove the number of visits to 10 is in {0 ..< 3}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (6) where the length of the sequence is j + 2
  Prove the number of visits to 102 is in {j + 0 ..< j + 3}
    .. proven.
Step 11: 
  Prove the number of visits to 10 is in {j + 0 ..< j + 3}
    .. proven.
Step 12: 
  prove all verification conditions
    .. proven.
Step 13: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 38 is in {i + 0 ..< i + 3}
    .. proven.
Step 14: 
  Prove the number of visits to 129 is in {i + 0 ..< i + 3}
    .. proven.
Step 15: 
  Prove the number of visits to 154 is in {0 ..< 2}
    .. proven.
Step 16: 
  Prove the number of visits to 85 is in {0 ..< 2}
    .. proven.
Step 17: 
  prove visits to 102 related to visits to 10
    with equalities
      ((Mem) ('mem')) (@ addr 102)
      = ((Mem) ('Mem')) (@ addr 10)
    and with invariants
      ((Word32) ('r21')) (@ addr 102)
      ((Word32) ('r4')) (@ addr 102)
      ((Word32) ('r27')) (@ addr 102)
      ((Word32) ('r17')) (@ addr 102)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 102)
      ((Word32) ('r23')) (@ addr 102)
      ((Word32) ('r13')) (@ addr 102)
      ((Word32) ('r10')) (@ addr 102)
      ((Word32) ('r28')) (@ addr 102)
      ((Word32) ('r19')) (@ addr 102)
      ((Word32) ('r16')) (@ addr 102)
      ((Word64) ('clock')) (@ addr 102)
      ((Word32) ('r12')) (@ addr 102)
      ((Word32) ('r9')) (@ addr 102)
      ((Word32) ('r6')) (@ addr 102)
      ((Word32) ('r7')) (@ addr 102)
      ((Word32) ('r31')) (@ addr 102)
      ((Word32) ('r25')) (@ addr 102)
      ((Word32) ('r24')) (@ addr 102)
      ((Word32) ('r8')) (@ addr 102)
      ((Word32) ('r29')) (@ addr 102)
      ((Word32) ('r18')) (@ addr 102)
      ((Word32) ('r20')) (@ addr 102)
      ((Word32) ('r30')) (@ addr 102)
      ((Word32) ('r14')) (@ addr 102)
      ((Word32) ('r15')) (@ addr 102)
      ((Word32) ('mode')) (@ addr 102)
      ((Word32) ('r11')) (@ addr 102)
      ((Word32) ('r5')) (@ addr 102)
      ((Word32) ('ret')) (@ addr 102)
      ((Word32) ('r26')) (@ addr 102)
      ((Word32) ('r1')) (@ addr 102)
      ((Word32) ('r2')) (@ addr 102)
      ((Bool) (ROData('mem'))) (@ addr 102)
      ((Word32) ('r22')) (@ addr 102)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 102)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r2')), ((Word32) ('r0')))))) (@ addr 102)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r2')))))) (@ addr 102)
      ((Bool) ('c')) (@ addr 102)
      ((Bool) ('n')) (@ addr 102)
      ((Bool) ('v')) (@ addr 102)
      ((Bool) ('z')) (@ addr 102)
      ((Word32) ('end___unsigned_long#v')) (@ addr 10)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 10)
      ((Word32) ('start___unsigned_long#v')) (@ addr 10)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 10)
      ((Word32[50]) ('GhostAssertions')) (@ addr 10)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 10)
    .. proven.
Step 18: case in (17) where the length of the sequence < 2
  Prove the number of visits to 102 is in {0 ..< 3}
    .. proven.
Step 19: 
  Prove the number of visits to 10 is in {0 ..< 3}
    .. proven.
Step 20: 
  prove all verification conditions
    .. proven.
Step 21: case in (17) where the length of the sequence is k + 2
  Prove the number of visits to 102 is in {k + 0 ..< k + 3}
    .. proven.
Step 22: 
  Prove the number of visits to 10 is in {k + 0 ..< k + 3}
    .. proven.
Step 23: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invalidateCacheRange_RAM (ASM) <= Kernel_C.invalidateCacheRange_RAM (C)), time taken: 871.96s
Testing Function pair Pairing (activateThread (ASM) <= Kernel_C.activateThread (C))
  (function pairing 85 of 176)
 .. built problem, finding proof
Decided to case split at (32, 'ASM')
  (in problem)
Now doing proof search in true case (32 visited) in problem.
Now doing proof search in false case (32 not visited) in problem.
Decided to case split at (29, 'ASM')
  (in false case (32 not visited) in problem)
Now doing proof search in true case (29 visited) in false case (32 not visited) in problem.
Now doing proof search in false case (29 not visited) in false case (32 not visited) in problem.
ProofNode ('CaseSplit', (32, 'ASM'), (ProofNode ('Restr', (32, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (32, ('Number', (0, 1))), (ProofNode ('CaseSplit', (29, 'ASM'), (ProofNode ('Restr', (29, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (29, ('Number', (0, 1))), (ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),))))
 .. proof found.
Step 1: 
  case split on whether 32 is visited
Step 2: case in (1) where 32 is visited
  Prove the number of visits to 32 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 32 is not visited
  Prove the number of visits to 32 is in {0 ..< 1}
    .. proven.
Step 5: 
  case split on whether 29 is visited
Step 6: case in (5) where 29 is visited
  Prove the number of visits to 29 is in {1 ..< 2}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (5) where 29 is not visited
  Prove the number of visits to 29 is in {0 ..< 1}
    .. proven.
Step 9: 
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (activateThread (ASM) <= Kernel_C.activateThread (C)), time taken: 11.20s
Testing Function pair Pairing (lookupPDSlot (ASM) <= Kernel_C.lookupPDSlot (C))
  (function pairing 86 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupPDSlot (ASM) <= Kernel_C.lookupPDSlot (C)), time taken: 0.21s
Testing Function pair Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C))
  (function pairing 87 of 176)
 .. built problem, finding proof
Decided to case split at (356, 'ASM')
  (in problem)
Now doing proof search in true case (356 visited) in problem.
Now doing proof search in false case (356 not visited) in problem.
Decided to case split at (354, 'ASM')
  (in false case (356 not visited) in problem)
Now doing proof search in true case (354 visited) in false case (356 not visited) in problem.
Now doing proof search in false case (354 not visited) in false case (356 not visited) in problem.
Decided to case split at (989, 'ASM')
  (in false case (354 not visited) in false case (356 not visited) in problem)
Now doing proof search in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem.

**************************************
FATAL ERROR
Broken pipe

**************************************


**************************************
FATAL ERROR
Broken pipe

**************************************


**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [1394, 4140]
  (in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem)
Now doing proof search in 1394 init case in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem.
Discovered that points [4066 (loop head)] can be bounded
  (in 1394 init case in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem)
Decided to case split at (6679, 'ASM')
  (in 1394 init case in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem)
Now doing proof search in true case (6679 visited) in 1394 init case in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem.
Discovered that points [4012 (loop head)] can be bounded
  (in true case (6679 visited) in 1394 init case in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem)
Discovered that points [3963 (loop head)] can be bounded
  (in true case (6679 visited) in 1394 init case in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem)
Discovered that points [2383 (loop head)] can be bounded
  (in true case (6679 visited) in 1394 init case in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem)
Now doing proof search in false case (6679 not visited) in 1394 init case in true case (989 visited) in false case (354 not visited) in false case (356 not visited) in problem.
Traceback (most recent call last):
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1738, in build_proof_rec
    p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1738, in build_proof_rec
    p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1738, in build_proof_rec
    p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1738, in build_proof_rec
    p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1712, in build_proof_rec
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1738, in build_proof_rec
    p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 692, in find_split_loop
    i_opts, j_opts, node_restrs = node_restrs)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1245, in find_split
    i_opts, j_opts, unfold_limit, tags, node_restrs = node_restrs)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1044, in setup_split_search
    get_pc (head, unfold_limit)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 1039, in get_pc
    restrs2 = get_nth_visit_restrs (rep, restrs, hyps, n, k)
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 403, in get_nth_visit_restrs
    if i in get_entry_visits_up_to (rep, head, restrs, hyps):
  File "/nix/store/3mrdy430sjhmj66qp07p31w54zapx42i-source/search.py", line 383, in get_entry_visits_up_to
    [entry] = get_loop_entry_sites (rep, restrs, hyps, head)
ValueError: need more than 0 values to unpack
Result ProofEXCEPT for pair Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C)), time taken: 1797.54s
Testing Function pair Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C))
  (function pairing 88 of 176)
Skipping Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C)), underspecified ASM
Testing Function pair Pairing (getExtraCPtr (ASM) <= Kernel_C.getExtraCPtr (C))
  (function pairing 89 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (getExtraCPtr (ASM) <= Kernel_C.getExtraCPtr (C)), time taken: 0.32s
Testing Function pair Pairing (lockTLBEntryCritical (ASM) <= Kernel_C.lockTLBEntryCritical (C))
  (function pairing 90 of 176)
Skipping Pairing (lockTLBEntryCritical (ASM) <= Kernel_C.lockTLBEntryCritical (C)), underspecified C
Testing Function pair Pairing (completeSignal (ASM) <= Kernel_C.completeSignal (C))
  (function pairing 91 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (completeSignal (ASM) <= Kernel_C.completeSignal (C)), time taken: 3.26s
Testing Function pair Pairing (decodeUnbindNotification (ASM) <= Kernel_C.decodeUnbindNotification (C))
  (function pairing 92 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeUnbindNotification (ASM) <= Kernel_C.decodeUnbindNotification (C)), time taken: 1.39s
Testing Function pair Pairing (invokeTCB_CopyRegisters (ASM) <= Kernel_C.invokeTCB_CopyRegisters (C))
  (function pairing 93 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [55, 29]
  (in problem)
Now doing proof search in 55 init case in problem.
Discovered a loop relation for split points [41, 14]
  (in 55 init case in problem)
Now doing proof search in 41 init case in 55 init case in problem.
Now doing proof search in 41 loop case in 55 init case in problem.
Now doing proof search in 55 loop case in problem.
Discovered a loop relation for split points [41, 14]
  (in 55 loop case in problem)
Now doing proof search in 41 init case in 55 loop case in problem.
Now doing proof search in 41 loop case in 55 loop case in problem.
ProofNode ('Split', ((55, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (29, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'transferArch___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#25#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'transferInteger___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (55, ('Number', (0, 1))), (ProofNode ('Restr', (29, ('Number', (0, 2))), (ProofNode ('Split', ((41, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (14, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'transferArch___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (41, ('Number', (0, 1))), (ProofNode ('Restr', (14, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (41, ('Offset', (0, 3))), (ProofNode ('Restr', (14, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (55, ('Offset', (0, 3))), (ProofNode ('Restr', (29, ('Offset', (0, 3))), (ProofNode ('Split', ((41, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (14, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'transferArch___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (41, ('Number', (0, 1))), (ProofNode ('Restr', (14, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (41, ('Offset', (0, 3))), (ProofNode ('Restr', (14, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 55 related to visits to 29
    with equalities
      ((Mem) ('mem')) (@ addr 55)
      = ((Mem) ('Mem')) (@ addr 29)
    and with invariants
      ((Word32) ('r4')) (@ addr 55)
      ((Word32) ('r8')) (@ addr 55)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 55)
      ((Word32) ('r5')) (@ addr 55)
      ((Word32) ('r0')) (@ addr 55)
      ((Word32) ('r9')) (@ addr 55)
      ((Word32) ('ret')) (@ addr 55)
      ((Word32) ('r11')) (@ addr 55)
      ((Word32) ('r13')) (@ addr 55)
      ((Word32) ('r10')) (@ addr 55)
      ((Word32) ('r6')) (@ addr 55)
      ((Bool) (ROData('mem'))) (@ addr 55)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 55)
      ((Word32) ('transferArch___unsigned_long#v')) (@ addr 29)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 29)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 29)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 29)
      ((Word32) (('loop#25#count' + ((0 - '#seq-visits') * 1)))) (@ addr 29)
      ((Word32) ('transferInteger___unsigned_long#v')) (@ addr 29)
      ((Word32[50]) ('GhostAssertions')) (@ addr 29)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 55 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 29 is in {0 ..< 2}
    .. proven.
Step 4: 
  prove visits to 41 related to visits to 14
    with equalities
      ((Mem) ('mem')) (@ addr 41)
      = ((Mem) ('Mem')) (@ addr 14)
    and with invariants
      ((Word32) ('r4')) (@ addr 41)
      ((Word32) ('r8')) (@ addr 41)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 41)
      ((Word32) ('r5')) (@ addr 41)
      ((Word32) ('r0')) (@ addr 41)
      ((Word32) ('r9')) (@ addr 41)
      ((Word32) ('ret')) (@ addr 41)
      ((Word32) ('r11')) (@ addr 41)
      ((Word32) ('r13')) (@ addr 41)
      ((Word32) ('r10')) (@ addr 41)
      ((Bool) (ROData('mem'))) (@ addr 41)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 41)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 14)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 14)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 14)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 14)
      ((Word32) ('transferArch___unsigned_long#v')) (@ addr 14)
      ((Word32[50]) ('GhostAssertions')) (@ addr 14)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 41 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 14 is in {0 ..< 2}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 41 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 14 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 55 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 29 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 41 related to visits to 14
    with equalities
      ((Mem) ('mem')) (@ addr 41)
      = ((Mem) ('Mem')) (@ addr 14)
    and with invariants
      ((Word32) ('r4')) (@ addr 41)
      ((Word32) ('r8')) (@ addr 41)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 41)
      ((Word32) ('r5')) (@ addr 41)
      ((Word32) ('r0')) (@ addr 41)
      ((Word32) ('r9')) (@ addr 41)
      ((Word32) ('ret')) (@ addr 41)
      ((Word32) ('r11')) (@ addr 41)
      ((Word32) ('r13')) (@ addr 41)
      ((Word32) ('r10')) (@ addr 41)
      ((Bool) (ROData('mem'))) (@ addr 41)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 41)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 14)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 14)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 14)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 14)
      ((Word32) ('transferArch___unsigned_long#v')) (@ addr 14)
      ((Word32[50]) ('GhostAssertions')) (@ addr 14)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 41 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 14 is in {0 ..< 1}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 41 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 14 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_CopyRegisters (ASM) <= Kernel_C.invokeTCB_CopyRegisters (C)), time taken: 541.84s
Testing Function pair Pairing (handleInterruptEntry (ASM) <= Kernel_C.handleInterruptEntry (C))
  (function pairing 94 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. failed to prove this.
      (failure kind: 'sat')
Refinement NOT proven.
Result False for pair Pairing (handleInterruptEntry (ASM) <= Kernel_C.handleInterruptEntry (C)), time taken: 2.38s
Testing Function pair Pairing (invokeCNodeDelete (ASM) <= Kernel_C.invokeCNodeDelete (C))
  (function pairing 95 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeDelete (ASM) <= Kernel_C.invokeCNodeDelete (C)), time taken: 0.57s
Testing Function pair Pairing (scheduleTCB (ASM) <= Kernel_C.scheduleTCB (C))
  (function pairing 96 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (scheduleTCB (ASM) <= Kernel_C.scheduleTCB (C)), time taken: 1.09s
Testing Function pair Pairing (arch_get_n_paging (ASM) <= Kernel_C.arch_get_n_paging (C))
  (function pairing 97 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (arch_get_n_paging (ASM) <= Kernel_C.arch_get_n_paging (C)), time taken: 0.35s
Testing Function pair Pairing (create_idle_thread (ASM) <= Kernel_C.create_idle_thread (C))
  (function pairing 98 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_idle_thread (ASM) <= Kernel_C.create_idle_thread (C)), time taken: 0.71s
Testing Function pair Pairing (loadCapTransfer (ASM) <= Kernel_C.loadCapTransfer (C))
  (function pairing 99 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (loadCapTransfer (ASM) <= Kernel_C.loadCapTransfer (C)), time taken: 0.72s
Testing Function pair Pairing (get_num_avail_p_regs (ASM) <= Kernel_C.get_num_avail_p_regs (C))
  (function pairing 100 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (get_num_avail_p_regs (ASM) <= Kernel_C.get_num_avail_p_regs (C)), time taken: 0.24s
Testing Function pair Pairing (hasCancelSendRights (ASM) <= Kernel_C.hasCancelSendRights (C))
  (function pairing 101 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (hasCancelSendRights (ASM) <= Kernel_C.hasCancelSendRights (C)), time taken: 0.61s
Testing Function pair Pairing (setPriority (ASM) <= Kernel_C.setPriority (C))
  (function pairing 102 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setPriority (ASM) <= Kernel_C.setPriority (C)), time taken: 4.92s
Testing Function pair Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C))
  (function pairing 103 of 176)
Skipping Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C)), underspecified C
Testing Function pair Pairing (handleInterrupt (ASM) <= Kernel_C.handleInterrupt (C))
  (function pairing 104 of 176)
 .. built problem, finding proof
Decided to case split at (62, 'ASM')
  (in problem)
Now doing proof search in true case (62 visited) in problem.
Now doing proof search in false case (62 not visited) in problem.
Decided to case split at (54, 'ASM')
  (in false case (62 not visited) in problem)
Now doing proof search in true case (54 visited) in false case (62 not visited) in problem.
Now doing proof search in false case (54 not visited) in false case (62 not visited) in problem.
ProofNode ('CaseSplit', (62, 'ASM'), (ProofNode ('Restr', (62, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (62, ('Number', (0, 1))), (ProofNode ('Restr', (18, ('Number', (0, 1))), (ProofNode ('CaseSplit', (54, 'ASM'), (ProofNode ('Restr', (54, ('Number', (1, 2))), (ProofNode ('Restr', (36, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (54, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 62 is visited
Step 2: case in (1) where 62 is visited
  Prove the number of visits to 62 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 62 is not visited
  Prove the number of visits to 62 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 18 is in {0 ..< 1}
    .. proven.
Step 6: 
  case split on whether 54 is visited
Step 7: case in (6) where 54 is visited
  Prove the number of visits to 54 is in {1 ..< 2}
    .. proven.
Step 8: 
  Prove the number of visits to 36 is in {1 ..< 2}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (6) where 54 is not visited
  Prove the number of visits to 54 is in {0 ..< 1}
    .. proven.
Step 11: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleInterrupt (ASM) <= Kernel_C.handleInterrupt (C)), time taken: 66.11s
Testing Function pair Pairing (strlcat (ASM) <= Kernel_C.strlcat (C))
  (function pairing 105 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [96, 29]
  (in problem)
Now doing proof search in 96 init case in problem.
Discovered a loop relation for split points [66, 5]
  (in 96 init case in problem)
Now doing proof search in 66 init case in 96 init case in problem.
Now doing proof search in 66 loop case in 96 init case in problem.
Now doing proof search in 96 loop case in problem.
Discovered a loop relation for split points [66, 5]
  (in 96 loop case in problem)
Now doing proof search in 66 init case in 96 loop case in problem.
Now doing proof search in 66 loop case in 96 loop case in problem.
ProofNode ('Split', ((96, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r3')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r2')])])]), (29, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#24#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [], 2, 1), (ProofNode ('Restr', (96, ('Number', (0, 3))), (ProofNode ('Restr', (29, ('Number', (0, 3))), (ProofNode ('Split', ((66, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (5, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (66, ('Number', (0, 3))), (ProofNode ('Restr', (5, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (66, ('Offset', (0, 3))), (ProofNode ('Restr', (5, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (96, ('Offset', (0, 3))), (ProofNode ('Restr', (29, ('Offset', (0, 3))), (ProofNode ('Split', ((66, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (5, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (66, ('Number', (0, 3))), (ProofNode ('Restr', (5, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (66, ('Offset', (0, 3))), (ProofNode ('Restr', (5, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 96 related to visits to 29
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 96)
      ((Word32) ('r4')) (@ addr 96)
      ((Word32) ('r8')) (@ addr 96)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 96)
      ((Word32) ('r13')) (@ addr 96)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 1)))) (@ addr 96)
      ((Word32) ('r9')) (@ addr 96)
      ((Word32) ('ret')) (@ addr 96)
      ((Word32) ('r2')) (@ addr 96)
      ((Word32) ('r11')) (@ addr 96)
      ((Word32) ('r1')) (@ addr 96)
      ((Word32) ('r10')) (@ addr 96)
      ((Mem) ('mem')) (@ addr 96)
      ((Word32) ('r5')) (@ addr 96)
      ((Word32) ('r6')) (@ addr 96)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 96)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r2')), ((Word32) ('r3')))))) (@ addr 96)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r3')), ((Word32) ('r2')))))) (@ addr 96)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 29)
      ((Word32) ('size___unsigned_long#v')) (@ addr 29)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 29)
      ((Word32) ('src___ptr_to_char#v')) (@ addr 29)
      ((Word32) (('loop#24#count' + ((0 - '#seq-visits') * 1)))) (@ addr 29)
      ((Mem) ('Mem')) (@ addr 29)
      ((Word32[50]) ('GhostAssertions')) (@ addr 29)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 96 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 29 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove visits to 66 related to visits to 5
    with equalities
      ((Mem) ('mem')) (@ addr 66)
      = ((Mem) ('Mem')) (@ addr 5)
    and with invariants
      ((Word32) ('r7')) (@ addr 66)
      ((Word32) ('r4')) (@ addr 66)
      ((Word32) ('r8')) (@ addr 66)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 66)
      ((Word32) ('r13')) (@ addr 66)
      ((Word32) ('r5')) (@ addr 66)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 66)
      ((Word32) ('r9')) (@ addr 66)
      ((Word32) ('ret')) (@ addr 66)
      ((Word32) ('r2')) (@ addr 66)
      ((Word32) ('r11')) (@ addr 66)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 66)
      ((Word32) ('r10')) (@ addr 66)
      ((Bool) (ROData('mem'))) (@ addr 66)
      ((Word32) ('r6')) (@ addr 66)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 66)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 5)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 5)
      ((Word32) ('size___unsigned_long#v')) (@ addr 5)
      ((Word32) (('src___ptr_to_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 5)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 5)
      ((Word32[50]) ('GhostAssertions')) (@ addr 5)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 66 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 5 is in {0 ..< 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 66 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 5 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 96 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 29 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 66 related to visits to 5
    with equalities
      ((Mem) ('mem')) (@ addr 66)
      = ((Mem) ('Mem')) (@ addr 5)
    and with invariants
      ((Word32) ('r7')) (@ addr 66)
      ((Word32) ('r4')) (@ addr 66)
      ((Word32) ('r8')) (@ addr 66)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 66)
      ((Word32) ('r13')) (@ addr 66)
      ((Word32) ('r5')) (@ addr 66)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 66)
      ((Word32) ('r9')) (@ addr 66)
      ((Word32) ('ret')) (@ addr 66)
      ((Word32) ('r2')) (@ addr 66)
      ((Word32) ('r11')) (@ addr 66)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 66)
      ((Word32) ('r10')) (@ addr 66)
      ((Bool) (ROData('mem'))) (@ addr 66)
      ((Word32) ('r6')) (@ addr 66)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 66)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 5)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 5)
      ((Word32) ('size___unsigned_long#v')) (@ addr 5)
      ((Word32) (('src___ptr_to_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 5)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 5)
      ((Word32[50]) ('GhostAssertions')) (@ addr 5)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 66 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 5 is in {0 ..< 3}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 66 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 5 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (strlcat (ASM) <= Kernel_C.strlcat (C)), time taken: 574.63s
Testing Function pair Pairing (get_avail_p_regs (ASM) <= Kernel_C.get_avail_p_regs (C))
  (function pairing 106 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (get_avail_p_regs (ASM) <= Kernel_C.get_avail_p_regs (C)), time taken: 0.23s
Testing Function pair Pairing (invokeCNodeRotate (ASM) <= Kernel_C.invokeCNodeRotate (C))
  (function pairing 107 of 176)
 .. built problem, finding proof
Decided to case split at (15, 'ASM')
  (in problem)
Now doing proof search in true case (15 visited) in problem.
Now doing proof search in false case (15 not visited) in problem.
ProofNode ('CaseSplit', (15, 'ASM'), (ProofNode ('Restr', (15, ('Number', (1, 2))), (ProofNode ('Restr', (5, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (15, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 15 is visited
Step 2: case in (1) where 15 is visited
  Prove the number of visits to 15 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 5 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 15 is not visited
  Prove the number of visits to 15 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeRotate (ASM) <= Kernel_C.invokeCNodeRotate (C)), time taken: 12.90s
Testing Function pair Pairing (configureIdleThread (ASM) <= Kernel_C.configureIdleThread (C))
  (function pairing 108 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (configureIdleThread (ASM) <= Kernel_C.configureIdleThread (C)), time taken: 4.75s
Testing Function pair Pairing (Arch_sameObjectAs (ASM) <= Kernel_C.Arch_sameObjectAs (C))
  (function pairing 109 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_sameObjectAs (ASM) <= Kernel_C.Arch_sameObjectAs (C)), time taken: 4.16s
Testing Function pair Pairing (map_kernel_frame (ASM) <= Kernel_C.map_kernel_frame (C))
  (function pairing 110 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (map_kernel_frame (ASM) <= Kernel_C.map_kernel_frame (C)), time taken: 1.57s
Testing Function pair Pairing (isMDBParentOf (ASM) <= Kernel_C.isMDBParentOf (C))
  (function pairing 111 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isMDBParentOf (ASM) <= Kernel_C.isMDBParentOf (C)), time taken: 2.07s
Testing Function pair Pairing (switchToIdleThread (ASM) <= Kernel_C.switchToIdleThread (C))
  (function pairing 112 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (switchToIdleThread (ASM) <= Kernel_C.switchToIdleThread (C)), time taken: 0.60s
Testing Function pair Pairing (activate_global_pd (ASM) <= Kernel_C.activate_global_pd (C))
  (function pairing 113 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (activate_global_pd (ASM) <= Kernel_C.activate_global_pd (C)), time taken: 2.79s
Testing Function pair Pairing (scheduleChooseNewThread (ASM) <= Kernel_C.scheduleChooseNewThread (C))
  (function pairing 114 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (scheduleChooseNewThread (ASM) <= Kernel_C.scheduleChooseNewThread (C)), time taken: 13.65s
Testing Function pair Pairing (invalidateCacheRange_I (ASM) <= Kernel_C.invalidateCacheRange_I (C))
  (function pairing 115 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [17, 2]
  (in problem)
Now doing proof search in 17 init case in problem.
Now doing proof search in 17 loop case in problem.
ProofNode ('Split', ((17, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (2, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (17, ('Number', (0, 3))), (ProofNode ('Restr', (2, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (17, ('Offset', (0, 3))), (ProofNode ('Restr', (2, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 17 related to visits to 2
    with equalities
      ((Mem) ('mem')) (@ addr 17)
      = ((Mem) ('Mem')) (@ addr 2)
    and with invariants
      ((Word32) ('r21')) (@ addr 17)
      ((Word32) ('r4')) (@ addr 17)
      ((Word32) ('r27')) (@ addr 17)
      ((Word32) ('r17')) (@ addr 17)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 17)
      ((Word32) ('r23')) (@ addr 17)
      ((Word32) ('r13')) (@ addr 17)
      ((Word32) ('r10')) (@ addr 17)
      ((Word32) ('r28')) (@ addr 17)
      ((Word32) ('r19')) (@ addr 17)
      ((Word32) ('r16')) (@ addr 17)
      ((Word64) ('clock')) (@ addr 17)
      ((Word32) ('r12')) (@ addr 17)
      ((Word32) ('r9')) (@ addr 17)
      ((Word32) ('r6')) (@ addr 17)
      ((Word32) ('r7')) (@ addr 17)
      ((Word32) ('r31')) (@ addr 17)
      ((Word32) ('r25')) (@ addr 17)
      ((Word32) ('r24')) (@ addr 17)
      ((Word32) ('r8')) (@ addr 17)
      ((Word32) ('r29')) (@ addr 17)
      ((Word32) ('r18')) (@ addr 17)
      ((Word32) ('r20')) (@ addr 17)
      ((Word32) ('r30')) (@ addr 17)
      ((Word32) ('r14')) (@ addr 17)
      ((Word32) ('r15')) (@ addr 17)
      ((Word32) ('mode')) (@ addr 17)
      ((Word32) ('r11')) (@ addr 17)
      ((Word32) ('r5')) (@ addr 17)
      ((Word32) ('ret')) (@ addr 17)
      ((Word32) ('r26')) (@ addr 17)
      ((Word32) ('r1')) (@ addr 17)
      ((Word32) ('r2')) (@ addr 17)
      ((Bool) (ROData('mem'))) (@ addr 17)
      ((Word32) ('r22')) (@ addr 17)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 17)
      ((Word32) ('end___unsigned_long#v')) (@ addr 2)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 2)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 2)
      ((Word32) ('start___unsigned_long#v')) (@ addr 2)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 2)
      ((Word32[50]) ('GhostAssertions')) (@ addr 2)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 17 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 2 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 17 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 2 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invalidateCacheRange_I (ASM) <= Kernel_C.invalidateCacheRange_I (C)), time taken: 55.32s
Testing Function pair Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))
  (function pairing 116 of 176)
Aborting Problem (Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (slowpath (ASM) <= Kernel_C.slowpath (C)), time taken: 0.00s
Testing Function pair Pairing (getObjectSize (ASM) <= Kernel_C.getObjectSize (C))
  (function pairing 117 of 176)
 .. built problem, finding proof
Decided to case split at (25, 'ASM')
  (in problem)
Now doing proof search in true case (25 visited) in problem.
Now doing proof search in false case (25 not visited) in problem.
ProofNode ('CaseSplit', (25, 'ASM'), (ProofNode ('Restr', (25, ('Number', (1, 2))), (ProofNode ('Restr', (20, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (25, ('Number', (0, 1))), (ProofNode ('Restr', (20, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 25 is visited
Step 2: case in (1) where 25 is visited
  Prove the number of visits to 25 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 20 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 25 is not visited
  Prove the number of visits to 25 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 20 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (getObjectSize (ASM) <= Kernel_C.getObjectSize (C)), time taken: 8.71s
Testing Function pair Pairing (Arch_postModifyRegisters (ASM) <= Kernel_C.Arch_postModifyRegisters (C))
  (function pairing 118 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_postModifyRegisters (ASM) <= Kernel_C.Arch_postModifyRegisters (C)), time taken: 0.26s
Testing Function pair Pairing (invokeCNodeSaveCaller (ASM) <= Kernel_C.invokeCNodeSaveCaller (C))
  (function pairing 119 of 176)
 .. built problem, finding proof
Decided to case split at (39, 'ASM')
  (in problem)
Now doing proof search in true case (39 visited) in problem.
Now doing proof search in false case (39 not visited) in problem.
ProofNode ('CaseSplit', (39, 'ASM'), (ProofNode ('Restr', (39, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (39, ('Number', (0, 1))), (ProofNode ('Restr', (21, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 39 is visited
Step 2: case in (1) where 39 is visited
  Prove the number of visits to 39 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 39 is not visited
  Prove the number of visits to 39 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 21 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeSaveCaller (ASM) <= Kernel_C.invokeCNodeSaveCaller (C)), time taken: 10.72s
Testing Function pair Pairing (doFaultTransfer (ASM) <= Kernel_C.doFaultTransfer (C))
  (function pairing 120 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doFaultTransfer (ASM) <= Kernel_C.doFaultTransfer (C)), time taken: 3.59s
Testing Function pair Pairing (deleteCallerCap (ASM) <= Kernel_C.deleteCallerCap (C))
  (function pairing 121 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deleteCallerCap (ASM) <= Kernel_C.deleteCallerCap (C)), time taken: 0.65s
Testing Function pair Pairing (doNormalTransfer (ASM) <= Kernel_C.doNormalTransfer (C))
  (function pairing 122 of 176)
 .. built problem, finding proof
Discovered that points [276 (loop head)] can be bounded
  (in problem)
Discovered that points [201 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (276, ('Number', (0, 5))), (ProofNode ('Restr', (201, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 276 is in {0 ..< 5}
    .. proven.
Step 2: 
  Prove the number of visits to 201 is in {0 ..< 4}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doNormalTransfer (ASM) <= Kernel_C.doNormalTransfer (C)), time taken: 792.59s
Testing Function pair Pairing (Arch_deriveCap (ASM) <= Kernel_C.Arch_deriveCap (C))
  (function pairing 123 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_deriveCap (ASM) <= Kernel_C.Arch_deriveCap (C)), time taken: 16.89s
Testing Function pair Pairing (ensureNoChildren (ASM) <= Kernel_C.ensureNoChildren (C))
  (function pairing 124 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (ensureNoChildren (ASM) <= Kernel_C.ensureNoChildren (C)), time taken: 1.77s
Testing Function pair Pairing (decodeCopyRegisters (ASM) <= Kernel_C.decodeCopyRegisters (C))
  (function pairing 125 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeCopyRegisters (ASM) <= Kernel_C.decodeCopyRegisters (C)), time taken: 18.58s
Testing Function pair Pairing (decodeSetPriority (ASM) <= Kernel_C.decodeSetPriority (C))
  (function pairing 126 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeSetPriority (ASM) <= Kernel_C.decodeSetPriority (C)), time taken: 17.06s
Testing Function pair Pairing (Arch_maskCapRights (ASM) <= Kernel_C.Arch_maskCapRights (C))
  (function pairing 127 of 176)
 .. built problem, finding proof
Decided to case split at (43, 'ASM')
  (in problem)
Now doing proof search in true case (43 visited) in problem.
Now doing proof search in false case (43 not visited) in problem.
ProofNode ('CaseSplit', (43, 'ASM'), (ProofNode ('Restr', (43, ('Number', (1, 2))), (ProofNode ('Restr', (12, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (43, ('Number', (0, 1))), (ProofNode ('Restr', (12, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 43 is visited
Step 2: case in (1) where 43 is visited
  Prove the number of visits to 43 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 12 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 43 is not visited
  Prove the number of visits to 43 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 12 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_maskCapRights (ASM) <= Kernel_C.Arch_maskCapRights (C)), time taken: 14.24s
Testing Function pair Pairing (capSwapForDelete (ASM) <= Kernel_C.capSwapForDelete (C))
  (function pairing 128 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (capSwapForDelete (ASM) <= Kernel_C.capSwapForDelete (C)), time taken: 1.83s
Testing Function pair Pairing (memset (ASM) <= Kernel_C.memset (C))
  (function pairing 129 of 176)
 .. built problem, finding proof
Decided to case split at (46, 'ASM')
  (in problem)
Now doing proof search in true case (46 visited) in problem.
Now doing proof search in false case (46 not visited) in problem.
Discovered a loop relation for split points [42, 12]
  (in false case (46 not visited) in problem)
Now doing proof search in 42 init case in false case (46 not visited) in problem.
Now doing proof search in 42 loop case in false case (46 not visited) in problem.
ProofNode ('CaseSplit', (46, 'ASM'), (ProofNode ('Restr', (46, ('Number', (1, 2))), (ProofNode ('Restr', (3, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (46, ('Number', (0, 1))), (ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Split', ((42, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (12, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#5#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 's___ptr_to_void#v'), Expr ('Var', Type ('Word', 32), name = 'c___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'p___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (42, ('Number', (0, 3))), (ProofNode ('Restr', (12, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (42, ('Offset', (0, 3))), (ProofNode ('Restr', (12, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 46 is visited
Step 2: case in (1) where 46 is visited
  Prove the number of visits to 46 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 3 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 46 is not visited
  Prove the number of visits to 46 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove visits to 42 related to visits to 12
    with equalities
      ((Mem) ('mem')) (@ addr 42)
      = ((Mem) ('Mem')) (@ addr 12)
    and with invariants
      ((Word32) ('r4')) (@ addr 42)
      ((Word32) ('r8')) (@ addr 42)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 42)
      ((Word32) ('r13')) (@ addr 42)
      ((Word32) ('r5')) (@ addr 42)
      ((Word32) ('r9')) (@ addr 42)
      ((Word32) ('ret')) (@ addr 42)
      ((Word32) ('r2')) (@ addr 42)
      ((Word32) ('r11')) (@ addr 42)
      ((Word32) ('r1')) (@ addr 42)
      ((Word32) ('r10')) (@ addr 42)
      ((Bool) (ROData('mem'))) (@ addr 42)
      ((Word32) ('r6')) (@ addr 42)
      ((Word32) ('r7')) (@ addr 42)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 42)
      ((Word32) (('loop#5#count' + ((0 - '#seq-visits') * 1)))) (@ addr 12)
      ((Word32) (('n___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 12)
      ((Word32) ('s___ptr_to_void#v')) (@ addr 12)
      ((Word32) ('c___unsigned_long#v')) (@ addr 12)
      ((Word32[50]) ('GhostAssertions')) (@ addr 12)
      ((Word32) (('p___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 12)
    .. proven.
Step 8: case in (7) where the length of the sequence < 2
  Prove the number of visits to 42 is in {0 ..< 3}
    .. proven.
Step 9: 
  Prove the number of visits to 12 is in {0 ..< 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where the length of the sequence is i + 2
  Prove the number of visits to 42 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 12 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (memset (ASM) <= Kernel_C.memset (C)), time taken: 63.29s
Testing Function pair Pairing (reserve_region (ASM) <= Kernel_C.reserve_region (C))
  (function pairing 130 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [93, 52]
  (in problem)
Now doing proof search in 93 init case in problem.
Discovered a loop relation for split points [120, 27]
  (in 93 init case in problem)
Now doing proof search in 120 init case in 93 init case in problem.
Now doing proof search in 120 loop case in 93 init case in problem.
Now doing proof search in 93 loop case in problem.
Discovered a loop relation for split points [120, 27]
  (in 93 loop case in problem)
Now doing proof search in 120 init case in 93 loop case in problem.
Now doing proof search in 120 loop case in 93 loop case in problem.
ProofNode ('Split', ((93, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 8)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (52, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.end_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.start_C'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#12#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (93, ('Number', (0, 3))), (ProofNode ('Restr', (52, ('Number', (0, 4))), (ProofNode ('Split', ((120, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967288)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967295)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (27, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.start_C'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'j___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (120, ('Number', (0, 3))), (ProofNode ('Restr', (27, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (120, ('Offset', (0, 3))), (ProofNode ('Restr', (27, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (93, ('Offset', (0, 3))), (ProofNode ('Restr', (52, ('Offset', (0, 3))), (ProofNode ('Split', ((120, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967288)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967295)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (27, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.start_C'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'j___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (120, ('Number', (0, 3))), (ProofNode ('Restr', (27, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (120, ('Offset', (0, 3))), (ProofNode ('Restr', (27, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 93 related to visits [2, 3, 4 ...] to 52
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 93)
      ((Word32) ('r4')) (@ addr 93)
      ((Word32) ('r8')) (@ addr 93)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 8)))) (@ addr 93)
      ((Word32) ('r12')) (@ addr 93)
      ((Word32) ('r9')) (@ addr 93)
      ((Word32) ('ret')) (@ addr 93)
      ((Word32) ('r11')) (@ addr 93)
      ((Word32) ('r13')) (@ addr 93)
      ((Word32) ('r10')) (@ addr 93)
      ((Mem) ('mem')) (@ addr 93)
      ((Word32) ('r14')) (@ addr 93)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 1)))) (@ addr 93)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 93)
      ((Word32) ('reg___struct_p_region_C#v.end_C')) (@ addr 52)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 52)
      ((Word32) ('reg___struct_p_region_C#v.start_C')) (@ addr 52)
      ((Mem) ('Mem')) (@ addr 52)
      ((Word32[50]) ('GhostAssertions')) (@ addr 52)
      ((Word32) (('loop#12#count' + ((0 - '#seq-visits') * 1)))) (@ addr 52)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 93 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 52 is in {0 ..< 4}
    .. proven.
Step 4: 
  prove visits to 120 related to visits to 27
    with equalities
      ((Mem) ('mem')) (@ addr 120)
      = ((Mem) ('Mem')) (@ addr 27)
    and with invariants
      ((Word32) ('r4')) (@ addr 120)
      ((Word32) ('r13')) (@ addr 120)
      ((Word32) ('r10')) (@ addr 120)
      ((Word32) ('r12')) (@ addr 120)
      ((Word32) ('r9')) (@ addr 120)
      ((Word32) ('r6')) (@ addr 120)
      ((Word32) ('r7')) (@ addr 120)
      ((Word32) ('r8')) (@ addr 120)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4294967288)))) (@ addr 120)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 4294967295)))) (@ addr 120)
      ((Word32) ('r11')) (@ addr 120)
      ((Word32) ('ret')) (@ addr 120)
      ((Word32) ('r2')) (@ addr 120)
      ((Bool) (ROData('mem'))) (@ addr 120)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 120)
      ((Word32) ('reg___struct_p_region_C#v.end_C')) (@ addr 27)
      ((Word32) ('i___unsigned_long#v')) (@ addr 27)
      ((Word32) ('reg___struct_p_region_C#v.start_C')) (@ addr 27)
      ((Word32[50]) ('GhostAssertions')) (@ addr 27)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 27)
      ((Word32) (('j___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 27)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 120 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 27 is in {0 ..< 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 120 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 27 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 93 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 52 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 120 related to visits to 27
    with equalities
      ((Mem) ('mem')) (@ addr 120)
      = ((Mem) ('Mem')) (@ addr 27)
    and with invariants
      ((Word32) ('r4')) (@ addr 120)
      ((Word32) ('r13')) (@ addr 120)
      ((Word32) ('r10')) (@ addr 120)
      ((Word32) ('r12')) (@ addr 120)
      ((Word32) ('r9')) (@ addr 120)
      ((Word32) ('r6')) (@ addr 120)
      ((Word32) ('r7')) (@ addr 120)
      ((Word32) ('r8')) (@ addr 120)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4294967288)))) (@ addr 120)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 4294967295)))) (@ addr 120)
      ((Word32) ('r11')) (@ addr 120)
      ((Word32) ('ret')) (@ addr 120)
      ((Word32) ('r2')) (@ addr 120)
      ((Bool) (ROData('mem'))) (@ addr 120)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 120)
      ((Word32) ('reg___struct_p_region_C#v.end_C')) (@ addr 27)
      ((Word32) ('i___unsigned_long#v')) (@ addr 27)
      ((Word32) ('reg___struct_p_region_C#v.start_C')) (@ addr 27)
      ((Word32[50]) ('GhostAssertions')) (@ addr 27)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 27)
      ((Word32) (('j___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 27)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 120 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 27 is in {0 ..< 3}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 120 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 27 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (reserve_region (ASM) <= Kernel_C.reserve_region (C)), time taken: 279.86s
Testing Function pair Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))
  (function pairing 131 of 176)
Aborting Problem (Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C)), time taken: 0.00s
Testing Function pair Pairing (invokeTCB_NotificationControl (ASM) <= Kernel_C.invokeTCB_NotificationControl (C))
  (function pairing 132 of 176)
 .. built problem, finding proof
Decided to case split at (11, 'ASM')
  (in problem)
Now doing proof search in true case (11 visited) in problem.
Now doing proof search in false case (11 not visited) in problem.
ProofNode ('CaseSplit', (11, 'ASM'), (ProofNode ('Restr', (11, ('Number', (1, 2))), (ProofNode ('Restr', (3, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (11, ('Number', (0, 1))), (ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 11 is visited
Step 2: case in (1) where 11 is visited
  Prove the number of visits to 11 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 3 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 11 is not visited
  Prove the number of visits to 11 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_NotificationControl (ASM) <= Kernel_C.invokeTCB_NotificationControl (C)), time taken: 4.67s
Testing Function pair Pairing (invokeIRQHandler_SetIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_SetIRQHandler (C))
  (function pairing 133 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeIRQHandler_SetIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_SetIRQHandler (C)), time taken: 1.55s
Testing Function pair Pairing (emptySlot (ASM) <= Kernel_C.emptySlot (C))
  (function pairing 134 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (emptySlot (ASM) <= Kernel_C.emptySlot (C)), time taken: 14.91s
Testing Function pair Pairing (decodeSetSpace (ASM) <= Kernel_C.decodeSetSpace (C))
  (function pairing 135 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeSetSpace (ASM) <= Kernel_C.decodeSetSpace (C)), time taken: 944.78s
Testing Function pair Pairing (doNBRecvFailedTransfer (ASM) <= Kernel_C.doNBRecvFailedTransfer (C))
  (function pairing 136 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doNBRecvFailedTransfer (ASM) <= Kernel_C.doNBRecvFailedTransfer (C)), time taken: 0.47s
Testing Function pair Pairing (write_slot (ASM) <= Kernel_C.write_slot (C))
  (function pairing 137 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (write_slot (ASM) <= Kernel_C.write_slot (C)), time taken: 4.04s
Testing Function pair Pairing (receiveSignal (ASM) <= Kernel_C.receiveSignal (C))
  (function pairing 138 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (receiveSignal (ASM) <= Kernel_C.receiveSignal (C)), time taken: 14.16s
Testing Function pair Pairing (Arch_sameRegionAs (ASM) <= Kernel_C.Arch_sameRegionAs (C))
  (function pairing 139 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_sameRegionAs (ASM) <= Kernel_C.Arch_sameRegionAs (C)), time taken: 11.96s
Testing Function pair Pairing (decodeInvocation (ASM) <= Kernel_C.decodeInvocation (C))
  (function pairing 140 of 176)
 .. built problem, finding proof
Decided to case split at (150, 'ASM')
  (in problem)
Now doing proof search in true case (150 visited) in problem.
Now doing proof search in false case (150 not visited) in problem.
Decided to case split at (156, 'ASM')
  (in false case (150 not visited) in problem)
Now doing proof search in true case (156 visited) in false case (150 not visited) in problem.
Now doing proof search in false case (156 not visited) in false case (150 not visited) in problem.
Decided to case split at (144, 'ASM')
  (in false case (156 not visited) in false case (150 not visited) in problem)
Now doing proof search in true case (144 visited) in false case (156 not visited) in false case (150 not visited) in problem.
Now doing proof search in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem.
Decided to case split at (322, 'ASM')
  (in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem)
Now doing proof search in true case (322 visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem.
Now doing proof search in false case (322 not visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem.
Decided to case split at (180, 'ASM')
  (in false case (322 not visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem)
Now doing proof search in true case (180 visited) in false case (322 not visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem.
Now doing proof search in false case (180 not visited) in false case (322 not visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem.
Decided to case split at (168, 'ASM')
  (in false case (180 not visited) in false case (322 not visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem)
Now doing proof search in true case (168 visited) in false case (180 not visited) in false case (322 not visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem.
Now doing proof search in false case (168 not visited) in false case (180 not visited) in false case (322 not visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem.
Decided to case split at (228, 'ASM')
  (in false case (168 not visited) in false case (180 not visited) in false case (322 not visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem)
Now doing proof search in true case (228 visited) in false case (168 not visited) in false case (180 not visited) in false case (322 not visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem.
Now doing proof search in false case (228 not visited) in false case (168 not visited) in false case (180 not visited) in false case (322 not visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem.
Decided to case split at (174, 'ASM')
  (in false case (228 not visited) in false case (168 not visited) in false case (180 not visited) in false case (322 not visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem)
Now doing proof search in true case (174 visited) in false case (228 not visited) in false case (168 not visited) in false case (180 not visited) in false case (322 not visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem.
Now doing proof search in false case (174 not visited) in false case (228 not visited) in false case (168 not visited) in false case (180 not visited) in false case (322 not visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem.
Decided to case split at (162, 'ASM')
  (in false case (174 not visited) in false case (228 not visited) in false case (168 not visited) in false case (180 not visited) in false case (322 not visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem)
Now doing proof search in true case (162 visited) in false case (174 not visited) in false case (228 not visited) in false case (168 not visited) in false case (180 not visited) in false case (322 not visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem.
Now doing proof search in false case (162 not visited) in false case (174 not visited) in false case (228 not visited) in false case (168 not visited) in false case (180 not visited) in false case (322 not visited) in false case (144 not visited) in false case (156 not visited) in false case (150 not visited) in problem.
ProofNode ('CaseSplit', (150, 'ASM'), (ProofNode ('Restr', (150, ('Number', (1, 2))), (ProofNode ('Restr', (33, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (150, ('Number', (0, 1))), (ProofNode ('Restr', (33, ('Number', (0, 1))), (ProofNode ('CaseSplit', (156, 'ASM'), (ProofNode ('Restr', (156, ('Number', (1, 2))), (ProofNode ('Restr', (50, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (156, ('Number', (0, 1))), (ProofNode ('Restr', (50, ('Number', (0, 1))), (ProofNode ('CaseSplit', (144, 'ASM'), (ProofNode ('Restr', (144, ('Number', (1, 2))), (ProofNode ('Restr', (79, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (144, ('Number', (0, 1))), (ProofNode ('Restr', (79, ('Number', (0, 1))), (ProofNode ('CaseSplit', (322, 'ASM'), (ProofNode ('Restr', (322, ('Number', (1, 2))), (ProofNode ('Restr', (73, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (322, ('Number', (0, 1))), (ProofNode ('Restr', (73, ('Number', (0, 1))), (ProofNode ('CaseSplit', (180, 'ASM'), (ProofNode ('Restr', (180, ('Number', (1, 2))), (ProofNode ('Restr', (82, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (180, ('Number', (0, 1))), (ProofNode ('Restr', (82, ('Number', (0, 1))), (ProofNode ('CaseSplit', (168, 'ASM'), (ProofNode ('Restr', (168, ('Number', (1, 2))), (ProofNode ('Restr', (76, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (168, ('Number', (0, 1))), (ProofNode ('Restr', (76, ('Number', (0, 1))), (ProofNode ('CaseSplit', (228, 'ASM'), (ProofNode ('Restr', (228, ('Number', (1, 2))), (ProofNode ('Restr', (92, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (228, ('Number', (0, 1))), (ProofNode ('CaseSplit', (174, 'ASM'), (ProofNode ('Restr', (174, ('Number', (1, 2))), (ProofNode ('Restr', (70, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (174, ('Number', (0, 1))), (ProofNode ('Restr', (70, ('Number', (0, 1))), (ProofNode ('CaseSplit', (162, 'ASM'), (ProofNode ('Restr', (162, ('Number', (1, 2))), (ProofNode ('Restr', (67, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (162, ('Number', (0, 1))), (ProofNode ('Restr', (67, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)))),)),)))),)),)))),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 150 is visited
Step 2: case in (1) where 150 is visited
  Prove the number of visits to 150 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 33 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 150 is not visited
  Prove the number of visits to 150 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 33 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 156 is visited
Step 8: case in (7) where 156 is visited
  Prove the number of visits to 156 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 50 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 156 is not visited
  Prove the number of visits to 156 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 50 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 144 is visited
Step 14: case in (13) where 144 is visited
  Prove the number of visits to 144 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 79 is in {1 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where 144 is not visited
  Prove the number of visits to 144 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 79 is in {0 ..< 1}
    .. proven.
Step 19: 
  case split on whether 322 is visited
Step 20: case in (19) where 322 is visited
  Prove the number of visits to 322 is in {1 ..< 2}
    .. proven.
Step 21: 
  Prove the number of visits to 73 is in {1 ..< 2}
    .. proven.
Step 22: 
  prove all verification conditions
    .. proven.
Step 23: case in (19) where 322 is not visited
  Prove the number of visits to 322 is in {0 ..< 1}
    .. proven.
Step 24: 
  Prove the number of visits to 73 is in {0 ..< 1}
    .. proven.
Step 25: 
  case split on whether 180 is visited
Step 26: case in (25) where 180 is visited
  Prove the number of visits to 180 is in {1 ..< 2}
    .. proven.
Step 27: 
  Prove the number of visits to 82 is in {1 ..< 2}
    .. proven.
Step 28: 
  prove all verification conditions
    .. proven.
Step 29: case in (25) where 180 is not visited
  Prove the number of visits to 180 is in {0 ..< 1}
    .. proven.
Step 30: 
  Prove the number of visits to 82 is in {0 ..< 1}
    .. proven.
Step 31: 
  case split on whether 168 is visited
Step 32: case in (31) where 168 is visited
  Prove the number of visits to 168 is in {1 ..< 2}
    .. proven.
Step 33: 
  Prove the number of visits to 76 is in {1 ..< 2}
    .. proven.
Step 34: 
  prove all verification conditions
    .. proven.
Step 35: case in (31) where 168 is not visited
  Prove the number of visits to 168 is in {0 ..< 1}
    .. proven.
Step 36: 
  Prove the number of visits to 76 is in {0 ..< 1}
    .. proven.
Step 37: 
  case split on whether 228 is visited
Step 38: case in (37) where 228 is visited
  Prove the number of visits to 228 is in {1 ..< 2}
    .. proven.
Step 39: 
  Prove the number of visits to 92 is in {1 ..< 2}
    .. proven.
Step 40: 
  prove all verification conditions
    .. proven.
Step 41: case in (37) where 228 is not visited
  Prove the number of visits to 228 is in {0 ..< 1}
    .. proven.
Step 42: 
  case split on whether 174 is visited
Step 43: case in (42) where 174 is visited
  Prove the number of visits to 174 is in {1 ..< 2}
    .. proven.
Step 44: 
  Prove the number of visits to 70 is in {1 ..< 2}
    .. proven.
Step 45: 
  prove all verification conditions
    .. proven.
Step 46: case in (42) where 174 is not visited
  Prove the number of visits to 174 is in {0 ..< 1}
    .. proven.
Step 47: 
  Prove the number of visits to 70 is in {0 ..< 1}
    .. proven.
Step 48: 
  case split on whether 162 is visited
Step 49: case in (48) where 162 is visited
  Prove the number of visits to 162 is in {1 ..< 2}
    .. proven.
Step 50: 
  Prove the number of visits to 67 is in {1 ..< 2}
    .. proven.
Step 51: 
  prove all verification conditions
    .. proven.
Step 52: case in (48) where 162 is not visited
  Prove the number of visits to 162 is in {0 ..< 1}
    .. proven.
Step 53: 
  Prove the number of visits to 67 is in {0 ..< 1}
    .. proven.
Step 54: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeInvocation (ASM) <= Kernel_C.decodeInvocation (C)), time taken: 416.85s
Testing Function pair Pairing (unbindMaybeNotification (ASM) <= Kernel_C.unbindMaybeNotification (C))
  (function pairing 141 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (unbindMaybeNotification (ASM) <= Kernel_C.unbindMaybeNotification (C)), time taken: 1.14s
Testing Function pair Pairing (getHWASID (ASM) <= Kernel_C.getHWASID (C))
  (function pairing 142 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (getHWASID (ASM) <= Kernel_C.getHWASID (C)), time taken: 3.24s
Testing Function pair Pairing (deleteASID (ASM) <= Kernel_C.deleteASID (C))
  (function pairing 143 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deleteASID (ASM) <= Kernel_C.deleteASID (C)), time taken: 14.08s
Testing Function pair Pairing (restart (ASM) <= Kernel_C.restart (C))
  (function pairing 144 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (restart (ASM) <= Kernel_C.restart (C)), time taken: 2.96s
Testing Function pair Pairing (isValidVTableRoot (ASM) <= Kernel_C.isValidVTableRoot (C))
  (function pairing 145 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isValidVTableRoot (ASM) <= Kernel_C.isValidVTableRoot (C)), time taken: 0.38s
Testing Function pair Pairing (decodeSetSchedParams (ASM) <= Kernel_C.decodeSetSchedParams (C))
  (function pairing 146 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeSetSchedParams (ASM) <= Kernel_C.decodeSetSchedParams (C)), time taken: 20.25s
Testing Function pair Pairing (c_handle_fastpath_reply_recv (ASM) <= Kernel_C.c_handle_fastpath_reply_recv (C))
  (function pairing 147 of 176)
Skipping Pairing (c_handle_fastpath_reply_recv (ASM) <= Kernel_C.c_handle_fastpath_reply_recv (C)), underspecified ASM
Testing Function pair Pairing (Arch_performTransfer (ASM) <= Kernel_C.Arch_performTransfer (C))
  (function pairing 148 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_performTransfer (ASM) <= Kernel_C.Arch_performTransfer (C)), time taken: 0.23s
Testing Function pair Pairing (arch_clean_invalidate_caches (ASM) <= Kernel_C.arch_clean_invalidate_caches (C))
  (function pairing 149 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [12, 90]
  (in problem)
Now doing proof search in 12 init case in problem.
Discovered that points [123 (loop head)] can be bounded
  (in 12 init case in problem)
Discovered that points [82 (loop head)] can be bounded
  (in 12 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 12 init case in problem)
Discovered that points [61 (loop head)] can be bounded
  (in 12 init case in problem)
Discovered that points [13 (loop head)] can be bounded
  (in 12 init case in problem)
Discovered that points [72 (loop head)] can be bounded
  (in 12 init case in problem)
Now doing proof search in 12 loop case in problem.
Discovered that points [123 (loop head)] can be bounded
  (in 12 loop case in problem)
Discovered that points [82 (loop head)] can be bounded
  (in 12 loop case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 12 loop case in problem)
Discovered that points [61 (loop head)] can be bounded
  (in 12 loop case in problem)
Discovered that points [13 (loop head)] can be bounded
  (in 12 loop case in problem)
Discovered that points [72 (loop head)] can be bounded
  (in 12 loop case in problem)
ProofNode ('Split', ((12, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (90, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#12#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (12, ('Number', (0, 1))), (ProofNode ('Restr', (90, ('Number', (0, 1))), (ProofNode ('Restr', (123, ('Number', (0, 1))), (ProofNode ('Restr', (82, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (61, ('Number', (0, 1))), (ProofNode ('Restr', (13, ('Number', (0, 1))), (ProofNode ('Restr', (72, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)), ProofNode ('Restr', (12, ('Offset', (0, 1))), (ProofNode ('Restr', (90, ('Offset', (0, 1))), (ProofNode ('Restr', (123, ('Number', (0, 1))), (ProofNode ('Restr', (82, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (61, ('Number', (0, 1))), (ProofNode ('Restr', (13, ('Number', (0, 1))), (ProofNode ('Restr', (72, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),))))
 .. proof found.
Step 1: 
  prove visits to 12 related to visits to 90
    with equalities
    and with invariants
      ((Word32) ('r21')) (@ addr 12)
      ((Word32) ('r4')) (@ addr 12)
      ((Word32) ('r27')) (@ addr 12)
      ((Word32) ('r17')) (@ addr 12)
      ((Word32) ('r0')) (@ addr 12)
      ((Word32) ('r11')) (@ addr 12)
      ((Word32) ('r23')) (@ addr 12)
      ((Word32) ('r13')) (@ addr 12)
      ((Word32) ('r10')) (@ addr 12)
      ((Word32) ('r28')) (@ addr 12)
      ((Word32) ('r19')) (@ addr 12)
      ((Word32) ('r16')) (@ addr 12)
      ((Word64) ('clock')) (@ addr 12)
      ((Word32) ('r12')) (@ addr 12)
      ((Word32) ('r9')) (@ addr 12)
      ((Word32) ('r6')) (@ addr 12)
      ((Word32) ('r7')) (@ addr 12)
      ((Word32) ('r31')) (@ addr 12)
      ((Word32) ('r25')) (@ addr 12)
      ((Word32) ('r24')) (@ addr 12)
      ((Word32) ('r8')) (@ addr 12)
      ((Word32) ('r29')) (@ addr 12)
      ((Word32) ('r18')) (@ addr 12)
      ((Word32) ('r20')) (@ addr 12)
      ((Word32) ('r30')) (@ addr 12)
      ((Word32) ('r14')) (@ addr 12)
      ((Word32) ('r15')) (@ addr 12)
      ((Word32) ('mode')) (@ addr 12)
      ((Word32) ('r5')) (@ addr 12)
      ((Word32) ('ret')) (@ addr 12)
      ((Word32) ('r26')) (@ addr 12)
      ((Word32) ('r1')) (@ addr 12)
      ((Word32) ('r2')) (@ addr 12)
      ((Mem) ('mem')) (@ addr 12)
      ((Word32) ('r22')) (@ addr 12)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 12)
      ((Word32) (('loop#12#count' + ((0 - '#seq-visits') * 1)))) (@ addr 90)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 12 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 90 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 123 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 82 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 7: 
  Prove the number of visits to 61 is in {0 ..< 1}
    .. proven.
Step 8: 
  Prove the number of visits to 13 is in {0 ..< 1}
    .. proven.
Step 9: 
  Prove the number of visits to 72 is in {0 ..< 1}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 12 is in {i + 0 ..< i + 1}
    .. proven.
Step 12: 
  Prove the number of visits to 90 is in {i + 0 ..< i + 1}
    .. proven.
Step 13: 
  Prove the number of visits to 123 is in {0 ..< 1}
    .. proven.
Step 14: 
  Prove the number of visits to 82 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 16: 
  Prove the number of visits to 61 is in {0 ..< 1}
    .. proven.
Step 17: 
  Prove the number of visits to 13 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 72 is in {0 ..< 1}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (arch_clean_invalidate_caches (ASM) <= Kernel_C.arch_clean_invalidate_caches (C)), time taken: 17.77s
Testing Function pair Pairing (init_core_state (ASM) <= Kernel_C.init_core_state (C))
  (function pairing 150 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (init_core_state (ASM) <= Kernel_C.init_core_state (C)), time taken: 0.35s
Testing Function pair Pairing (cleanCaches_PoU (ASM) <= Kernel_C.cleanCaches_PoU (C))
  (function pairing 151 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cleanCaches_PoU (ASM) <= Kernel_C.cleanCaches_PoU (C)), time taken: 1.33s
Testing Function pair Pairing (provide_cap (ASM) <= Kernel_C.provide_cap (C))
  (function pairing 152 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (provide_cap (ASM) <= Kernel_C.provide_cap (C)), time taken: 12.67s
Testing Function pair Pairing (performInvocation_Notification (ASM) <= Kernel_C.performInvocation_Notification (C))
  (function pairing 153 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (performInvocation_Notification (ASM) <= Kernel_C.performInvocation_Notification (C)), time taken: 0.54s
Testing Function pair Pairing (handleReply (ASM) <= Kernel_C.handleReply (C))
  (function pairing 154 of 176)
 .. built problem, finding proof
Decided to case split at (38, 'ASM')
  (in problem)
Now doing proof search in true case (38 visited) in problem.
Now doing proof search in false case (38 not visited) in problem.
ProofNode ('CaseSplit', (38, 'ASM'), (ProofNode ('Restr', (38, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (38, ('Number', (0, 1))), (ProofNode ('Restr', (11, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 38 is visited
Step 2: case in (1) where 38 is visited
  Prove the number of visits to 38 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 38 is not visited
  Prove the number of visits to 38 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 11 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleReply (ASM) <= Kernel_C.handleReply (C)), time taken: 8.33s
Testing Function pair Pairing (insertNewCap (ASM) <= Kernel_C.insertNewCap (C))
  (function pairing 155 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (insertNewCap (ASM) <= Kernel_C.insertNewCap (C)), time taken: 7.82s
Testing Function pair Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C))
  (function pairing 156 of 176)
Skipping Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C)), underspecified C
Testing Function pair Pairing (strnlen (ASM) <= Kernel_C.strnlen (C))
  (function pairing 157 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [40, 9]
  (in problem)
Now doing proof search in 40 init case in problem.
Now doing proof search in 40 loop case in problem.
ProofNode ('Split', ((40, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r3')])])]), (9, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 's___ptr_to_char#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'maxlen___unsigned_long#v')]), [], 2, 1), (ProofNode ('Restr', (40, ('Number', (0, 3))), (ProofNode ('Restr', (9, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (40, ('Offset', (0, 3))), (ProofNode ('Restr', (9, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 40 related to visits to 9
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 40)
      ((Word32) ('r4')) (@ addr 40)
      ((Word32) ('r8')) (@ addr 40)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 40)
      ((Word32) ('r5')) (@ addr 40)
      ((Word32) ('r6')) (@ addr 40)
      ((Word32) ('r0')) (@ addr 40)
      ((Word32) ('r9')) (@ addr 40)
      ((Word32) ('ret')) (@ addr 40)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 1)))) (@ addr 40)
      ((Word32) ('r11')) (@ addr 40)
      ((Word32) ('r13')) (@ addr 40)
      ((Word32) ('r10')) (@ addr 40)
      ((Mem) ('mem')) (@ addr 40)
      ((Word32) ('r14')) (@ addr 40)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 40)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r3')), ((Word32) ('r0')))))) (@ addr 40)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r0')), ((Word32) ('r3')))))) (@ addr 40)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 9)
      ((Word32) ('s___ptr_to_char#v')) (@ addr 9)
      ((Mem) ('Mem')) (@ addr 9)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 9)
      ((Word32) ('maxlen___unsigned_long#v')) (@ addr 9)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 40 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 9 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 40 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 9 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (strnlen (ASM) <= Kernel_C.strnlen (C)), time taken: 33.39s
Testing Function pair Pairing (l_impl'isb (ASM) <= r_impl'isb (C))
  (function pairing 158 of 176)
Skipping Pairing (l_impl'isb (ASM) <= r_impl'isb (C)), underspecified C
Testing Function pair Pairing (cleanCacheRange_PoU (ASM) <= Kernel_C.cleanCacheRange_PoU (C))
  (function pairing 159 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [24, 9]
  (in problem)
Now doing proof search in 24 init case in problem.
Now doing proof search in 24 loop case in problem.
ProofNode ('Split', ((24, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r1')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (9, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (24, ('Number', (0, 3))), (ProofNode ('Restr', (9, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (24, ('Offset', (0, 3))), (ProofNode ('Restr', (9, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 24 related to visits to 9
    with equalities
      ((Mem) ('mem')) (@ addr 24)
      = ((Mem) ('Mem')) (@ addr 9)
    and with invariants
      ((Word32) ('r21')) (@ addr 24)
      ((Word32) ('r4')) (@ addr 24)
      ((Word32) ('r27')) (@ addr 24)
      ((Word32) ('r17')) (@ addr 24)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 24)
      ((Word32) ('r23')) (@ addr 24)
      ((Word32) ('r13')) (@ addr 24)
      ((Word32) ('r10')) (@ addr 24)
      ((Word32) ('r28')) (@ addr 24)
      ((Word32) ('r19')) (@ addr 24)
      ((Word32) ('r16')) (@ addr 24)
      ((Word64) ('clock')) (@ addr 24)
      ((Word32) ('r12')) (@ addr 24)
      ((Word32) ('r9')) (@ addr 24)
      ((Word32) ('r6')) (@ addr 24)
      ((Word32) ('r7')) (@ addr 24)
      ((Word32) ('r31')) (@ addr 24)
      ((Word32) ('r25')) (@ addr 24)
      ((Word32) ('r24')) (@ addr 24)
      ((Word32) ('r8')) (@ addr 24)
      ((Word32) ('r29')) (@ addr 24)
      ((Word32) ('r18')) (@ addr 24)
      ((Word32) ('r20')) (@ addr 24)
      ((Word32) ('r30')) (@ addr 24)
      ((Word32) ('r14')) (@ addr 24)
      ((Word32) ('r15')) (@ addr 24)
      ((Word32) ('mode')) (@ addr 24)
      ((Word32) ('r11')) (@ addr 24)
      ((Word32) ('r5')) (@ addr 24)
      ((Word32) ('ret')) (@ addr 24)
      ((Word32) ('r26')) (@ addr 24)
      ((Word32) ('r1')) (@ addr 24)
      ((Word32) ('r2')) (@ addr 24)
      ((Bool) (ROData('mem'))) (@ addr 24)
      ((Word32) ('r22')) (@ addr 24)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 24)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r1')), ((Word32) ('r0')))))) (@ addr 24)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r1')))))) (@ addr 24)
      ((Bool) ('c')) (@ addr 24)
      ((Bool) ('n')) (@ addr 24)
      ((Bool) ('v')) (@ addr 24)
      ((Bool) ('z')) (@ addr 24)
      ((Word32) ('end___unsigned_long#v')) (@ addr 9)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 9)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 9)
      ((Word32) ('start___unsigned_long#v')) (@ addr 9)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 9)
      ((Word32[50]) ('GhostAssertions')) (@ addr 9)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 24 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 9 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 24 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 9 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cleanCacheRange_PoU (ASM) <= Kernel_C.cleanCacheRange_PoU (C)), time taken: 115.59s
Testing Function pair Pairing (getRestartPC (ASM) <= Kernel_C.getRestartPC (C))
  (function pairing 160 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (getRestartPC (ASM) <= Kernel_C.getRestartPC (C)), time taken: 0.25s
Testing Function pair Pairing (Arch_handleFaultReply (ASM) <= Kernel_C.Arch_handleFaultReply (C))
  (function pairing 161 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_handleFaultReply (ASM) <= Kernel_C.Arch_handleFaultReply (C)), time taken: 0.29s
Testing Function pair Pairing (armv_init_user_access (ASM) <= Kernel_C.armv_init_user_access (C))
  (function pairing 162 of 176)
 .. built problem, finding proof
Discovered that points [29 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (29, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 29 is in {0 ..< 2}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (armv_init_user_access (ASM) <= Kernel_C.armv_init_user_access (C)), time taken: 1.64s
Testing Function pair Pairing (cteSwap (ASM) <= Kernel_C.cteSwap (C))
  (function pairing 163 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteSwap (ASM) <= Kernel_C.cteSwap (C)), time taken: 16.05s
Testing Function pair Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C))
  (function pairing 164 of 176)
Aborting Problem (Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C)), time taken: 0.00s
Testing Function pair Pairing (schedule (ASM) <= Kernel_C.schedule (C))
  (function pairing 165 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (schedule (ASM) <= Kernel_C.schedule (C)), time taken: 20.77s
Testing Function pair Pairing (lookupSourceSlot (ASM) <= Kernel_C.lookupSourceSlot (C))
  (function pairing 166 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupSourceSlot (ASM) <= Kernel_C.lookupSourceSlot (C)), time taken: 8.07s
Testing Function pair Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C))
  (function pairing 167 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [265, 57]
  (in problem)
Now doing proof search in 265 init case in problem.
Now doing proof search in 265 loop case in problem.
ProofNode ('Split', ((265, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 16)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (57, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nodeWindow___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'cap___struct_cap_C#v.words_C.1'), Expr ('Var', Type ('Word', 32), name = 'slots___struct_slot_range_C#v.offset_C'), Expr ('Var', Type ('Word', 32), name = 'objectSize___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v'), Expr ('Var', Type ('Word', 32), name = 'cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'slots___struct_slot_range_C#v.cnode_C'), Expr ('Var', Type ('Word', 32), name = 'userObjSize___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'nodeOffset___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'newType___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#48#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'slots___struct_slot_range_C#v.length_C')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (265, ('Number', (0, 3))), (ProofNode ('Restr', (57, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (265, ('Offset', (0, 3))), (ProofNode ('Restr', (57, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 265 related to visits to 57
    with equalities
      ((Mem) ('mem')) (@ addr 265)
      = ((Mem) ('Mem')) (@ addr 57)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 265)
      ((Word32) ('r13')) (@ addr 265)
      ((Word32) ('r10')) (@ addr 265)
      ((Word32) ('r9')) (@ addr 265)
      ((Word32) ('r6')) (@ addr 265)
      ((Word32) ('r7')) (@ addr 265)
      ((Word32) (('r8' + ((0 - '#seq-visits') * 16)))) (@ addr 265)
      ((Word32) ('r5')) (@ addr 265)
      ((Word32) ('ret')) (@ addr 265)
      ((Word32) ('r11')) (@ addr 265)
      ((Bool) (ROData('mem'))) (@ addr 265)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 265)
      ((Word32) ('nodeWindow___unsigned_long#v')) (@ addr 57)
      ((Word32) ('cap___struct_cap_C#v.words_C.1')) (@ addr 57)
      ((Word32) ('slots___struct_slot_range_C#v.offset_C')) (@ addr 57)
      ((Word32) ('objectSize___unsigned_long#v')) (@ addr 57)
      ((Word32) ('slot___ptr_to_struct_cte_C#v')) (@ addr 57)
      ((Word32) ('cap___struct_cap_C#v.words_C.0')) (@ addr 57)
      ((Word32) ('slots___struct_slot_range_C#v.cnode_C')) (@ addr 57)
      ((Word32) ('userObjSize___unsigned_long#v')) (@ addr 57)
      ((Word32) ('nodeOffset___unsigned_long#v')) (@ addr 57)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 57)
      ((Word32) ('newType___unsigned_long#v')) (@ addr 57)
      ((Word32) (('loop#48#count' + ((0 - '#seq-visits') * 1)))) (@ addr 57)
      ((Word32) ('slots___struct_slot_range_C#v.length_C')) (@ addr 57)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 265 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 57 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 265 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 57 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C)), time taken: 1289.73s
Testing Function pair Pairing (maskVMRights (ASM) <= Kernel_C.maskVMRights (C))
  (function pairing 168 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (maskVMRights (ASM) <= Kernel_C.maskVMRights (C)), time taken: 0.49s
Testing Function pair Pairing (invokeCNodeInsert (ASM) <= Kernel_C.invokeCNodeInsert (C))
  (function pairing 169 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeInsert (ASM) <= Kernel_C.invokeCNodeInsert (C)), time taken: 0.60s
Testing Function pair Pairing (Arch_decodeInvocation (ASM) <= Kernel_C.Arch_decodeInvocation (C))
  (function pairing 170 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_decodeInvocation (ASM) <= Kernel_C.Arch_decodeInvocation (C)), time taken: 10.19s
Testing Function pair Pairing (cteRevoke (ASM) <= Kernel_C.cteRevoke (C))
  (function pairing 171 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [48, 23]
  (in problem)
Now doing proof search in 48 init case in problem.
Now doing proof search in 48 loop case in problem.
ProofNode ('Split', ((48, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'nextPtr___ptr_to_struct_cte_C#v'))], 2, 1), (ProofNode ('Restr', (48, ('Number', (0, 3))), (ProofNode ('Restr', (23, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (48, ('Offset', (0, 3))), (ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 48 related to visits to 23
    with equalities
      ((Mem) ('mem')) (@ addr 48)
      = ((Mem) ('Mem')) (@ addr 23)
      ((Word32) ('r0')) (@ addr 48)
      = ((Word32) ('nextPtr___ptr_to_struct_cte_C#v')) (@ addr 23)
    and with invariants
      ((Word32) ('r7')) (@ addr 48)
      ((Word32) ('r8')) (@ addr 48)
      ((Word32) ('r11')) (@ addr 48)
      ((Word32) ('r13')) (@ addr 48)
      ((Word32) ('r9')) (@ addr 48)
      ((Word32) ('ret')) (@ addr 48)
      ((Word32) ('r1')) (@ addr 48)
      ((Word32) ('r10')) (@ addr 48)
      ((Bool) (ROData('mem'))) (@ addr 48)
      ((Word32) ('r5')) (@ addr 48)
      ((Word32) ('r6')) (@ addr 48)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 48)
      ((Word32) ('slot___ptr_to_struct_cte_C#v')) (@ addr 23)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 23)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 48 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 23 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 48 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 23 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteRevoke (ASM) <= Kernel_C.cteRevoke (C)), time taken: 78.78s
Testing Function pair Pairing (handleInvocation (ASM) <= Kernel_C.handleInvocation (C))
  (function pairing 172 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleInvocation (ASM) <= Kernel_C.handleInvocation (C)), time taken: 63.74s
Testing Function pair Pairing (cteInsert (ASM) <= Kernel_C.cteInsert (C))
  (function pairing 173 of 176)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteInsert (ASM) <= Kernel_C.cteInsert (C)), time taken: 12.99s
Testing Function pair Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C))
  (function pairing 174 of 176)
Aborting Problem (Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C))), complex loop
Result ProblemAbort for pair Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C)), time taken: 1.78s
Testing Function pair Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))
  (function pairing 175 of 176)
Aborting Problem (Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))), complex loop
Result ProblemAbort for pair Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C)), time taken: 3.03s
Testing Function pair Pairing (plat_cleanCache (ASM) <= Kernel_C.plat_cleanCache (C))
  (function pairing 176 of 176)
 .. built problem, finding proof
Discovered a loop relation for split points [14, 3]
  (in problem)
Now doing proof search in 14 init case in problem.
Discovered that points [48 (loop head)] can be bounded
  (in 14 init case in problem)
Discovered that points [21 (loop head)] can be bounded
  (in 14 init case in problem)
Now doing proof search in 14 loop case in problem.
Discovered that points [48 (loop head)] can be bounded
  (in 14 loop case in problem)
Discovered that points [21 (loop head)] can be bounded
  (in 14 loop case in problem)
ProofNode ('Split', ((14, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (3, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (14, ('Number', (0, 1))), (ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Restr', (48, ('Number', (0, 1))), (ProofNode ('Restr', (21, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (14, ('Offset', (0, 1))), (ProofNode ('Restr', (3, ('Offset', (0, 1))), (ProofNode ('Restr', (48, ('Number', (0, 1))), (ProofNode ('Restr', (21, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),))))
 .. proof found.
Step 1: 
  prove visits to 14 related to visits to 3
    with equalities
    and with invariants
      ((Word32) ('r21')) (@ addr 14)
      ((Word32) ('r4')) (@ addr 14)
      ((Word32) ('r27')) (@ addr 14)
      ((Word32) ('r17')) (@ addr 14)
      ((Word32) ('r0')) (@ addr 14)
      ((Word32) ('r23')) (@ addr 14)
      ((Word32) ('r13')) (@ addr 14)
      ((Word32) ('r10')) (@ addr 14)
      ((Word32) ('r28')) (@ addr 14)
      ((Word32) ('r19')) (@ addr 14)
      ((Word32) ('r16')) (@ addr 14)
      ((Word64) ('clock')) (@ addr 14)
      ((Word32) ('r12')) (@ addr 14)
      ((Word32) ('r9')) (@ addr 14)
      ((Word32) ('r6')) (@ addr 14)
      ((Word32) ('r7')) (@ addr 14)
      ((Word32) ('r31')) (@ addr 14)
      ((Word32) ('r25')) (@ addr 14)
      ((Word32) ('r24')) (@ addr 14)
      ((Word32) ('r8')) (@ addr 14)
      ((Word32) ('r29')) (@ addr 14)
      ((Word32) ('r18')) (@ addr 14)
      ((Word32) ('r20')) (@ addr 14)
      ((Word32) ('r30')) (@ addr 14)
      ((Word32) ('r14')) (@ addr 14)
      ((Word32) ('r15')) (@ addr 14)
      ((Word32) ('mode')) (@ addr 14)
      ((Word32) ('r11')) (@ addr 14)
      ((Word32) ('r5')) (@ addr 14)
      ((Word32) ('ret')) (@ addr 14)
      ((Word32) ('r26')) (@ addr 14)
      ((Word32) ('r1')) (@ addr 14)
      ((Word32) ('r2')) (@ addr 14)
      ((Mem) ('mem')) (@ addr 14)
      ((Word32) ('r22')) (@ addr 14)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 14)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 3)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 14 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 48 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 21 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Step 7: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 14 is in {i + 0 ..< i + 1}
    .. proven.
Step 8: 
  Prove the number of visits to 3 is in {i + 0 ..< i + 1}
    .. proven.
Step 9: 
  Prove the number of visits to 48 is in {0 ..< 1}
    .. proven.
Step 10: 
  Prove the number of visits to 21 is in {0 ..< 1}
    .. proven.
Step 11: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (plat_cleanCache (ASM) <= Kernel_C.plat_cleanCache (C)), time taken: 10.31s
Results: [('Pairing (Arch_createObject (ASM) <= Kernel_C.Arch_createObject (C))', 'True'), ('Pairing (preemptionPoint (ASM) <= Kernel_C.preemptionPoint (C))', 'True'), ('Pairing (halt (ASM) <= Kernel_C.halt (C))', 'None'), ('Pairing (cleanCacheRange_RAM (ASM) <= Kernel_C.cleanCacheRange_RAM (C))', 'True'), ('Pairing (map_kernel_devices (ASM) <= Kernel_C.map_kernel_devices (C))', 'True'), ('Pairing (str_to_long (ASM) <= Kernel_C.str_to_long (C))', 'True'), ('Pairing (cancelAllIPC (ASM) <= Kernel_C.cancelAllIPC (C))', 'True'), ('Pairing (tcbEPDequeue (ASM) <= Kernel_C.tcbEPDequeue (C))', 'True'), ('Pairing (handleRecv (ASM) <= Kernel_C.handleRecv (C))', 'True'), ('Pairing (makeUserPDE (ASM) <= Kernel_C.makeUserPDE (C))', 'True'), ('Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C))', 'ProblemAbort'), ('Pairing (sameObjectAs (ASM) <= Kernel_C.sameObjectAs (C))', 'True'), ('Pairing (invokeCNodeMove (ASM) <= Kernel_C.invokeCNodeMove (C))', 'True'), ('Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C))', 'True'), ('Pairing (setupReplyMaster (ASM) <= Kernel_C.setupReplyMaster (C))', 'True'), ('Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C))', 'True'), ('Pairing (lookupSlot (ASM) <= Kernel_C.lookupSlot (C))', 'True'), ('Pairing (Arch_switchToIdleThread (ASM) <= Kernel_C.Arch_switchToIdleThread (C))', 'True'), ('Pairing (invokeTCB_Resume (ASM) <= Kernel_C.invokeTCB_Resume (C))', 'True'), ('Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))', 'ProblemAbort'), ('Pairing (invokeCNodeRevoke (ASM) <= Kernel_C.invokeCNodeRevoke (C))', 'True'), ('Pairing (restore_user_context (ASM) <= Kernel_C.restore_user_context (C))', 'None'), ('Pairing (setIRQState (ASM) <= Kernel_C.setIRQState (C))', 'True'), ('Pairing (decodeDomainInvocation (ASM) <= Kernel_C.decodeDomainInvocation (C))', 'True'), ('Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))', 'ProblemAbort'), ('Pairing (idle_thread (ASM) <= Kernel_C.idle_thread (C))', 'True'), ('Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C))', 'True'), ('Pairing (invalidateTLBByASID (ASM) <= Kernel_C.invalidateTLBByASID (C))', 'True'), ('Pairing (char_to_long (ASM) <= Kernel_C.char_to_long (C))', 'True'), ('Pairing (create_unmapped_it_frame_cap (ASM) <= Kernel_C.create_unmapped_it_frame_cap (C))', 'True'), ('Pairing (lookupCap (ASM) <= Kernel_C.lookupCap (C))', 'True'), ('Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C))', 'True'), ('Pairing (deletedIRQHandler (ASM) <= Kernel_C.deletedIRQHandler (C))', 'True'), ('Pairing (loadHWASID (ASM) <= Kernel_C.loadHWASID (C))', 'True'), ('Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C))', 'True'), ('Pairing (cancelAllSignals (ASM) <= Kernel_C.cancelAllSignals (C))', 'True'), ('Pairing (finaliseCap (ASM) <= Kernel_C.finaliseCap (C))', 'True'), ('Pairing (lookupPTSlot (ASM) <= Kernel_C.lookupPTSlot (C))', 'True'), ('Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C))', 'ProblemAbort'), ('Pairing (setNextPC (ASM) <= Kernel_C.setNextPC (C))', 'True'), ('Pairing (isIRQActive (ASM) <= Kernel_C.isIRQActive (C))', 'True'), ('Pairing (insert_region (ASM) <= Kernel_C.insert_region (C))', 'True'), ('Pairing (create_root_cnode (ASM) <= Kernel_C.create_root_cnode (C))', 'True'), ('Pairing (performInvocation_Reply (ASM) <= Kernel_C.performInvocation_Reply (C))', 'True'), ('Pairing (Arch_configureIdleThread (ASM) <= Kernel_C.Arch_configureIdleThread (C))', 'True'), ('Pairing (bindNotification (ASM) <= Kernel_C.bindNotification (C))', 'True'), ("Pairing (l_impl'dsb (ASM) <= r_impl'dsb (C))", 'None'), ('Pairing (invokeTCB_Suspend (ASM) <= Kernel_C.invokeTCB_Suspend (C))', 'True'), ('Pairing (getReceiveSlots (ASM) <= Kernel_C.getReceiveSlots (C))', 'True'), ('Pairing (setMCPriority (ASM) <= Kernel_C.setMCPriority (C))', 'True'), ('Pairing (maskCapRights (ASM) <= Kernel_C.maskCapRights (C))', 'True'), ('Pairing (cpu_initLocalIRQController (ASM) <= Kernel_C.cpu_initLocalIRQController (C))', 'True'), ('Pairing (tcbSchedDequeue (ASM) <= Kernel_C.tcbSchedDequeue (C))', 'True'), ('Pairing (performInvocation_Endpoint (ASM) <= Kernel_C.performInvocation_Endpoint (C))', 'True'), ('Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C))', 'True'), ('Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))', 'ProblemAbort'), ('Pairing (flushPage (ASM) <= Kernel_C.flushPage (C))', 'True'), ('Pairing (cteMove (ASM) <= Kernel_C.cteMove (C))', 'True'), ('Pairing (lookupCapAndSlot (ASM) <= Kernel_C.lookupCapAndSlot (C))', 'True'), ('Pairing (rescheduleRequired (ASM) <= Kernel_C.rescheduleRequired (C))', 'True'), ('Pairing (createObject (ASM) <= Kernel_C.createObject (C))', 'True'), ('Pairing (create_rootserver_objects (ASM) <= Kernel_C.create_rootserver_objects (C))', 'True'), ('Pairing (replyFromKernel_success_empty (ASM) <= Kernel_C.replyFromKernel_success_empty (C))', 'True'), ('Pairing (handleUnknownSyscall (ASM) <= Kernel_C.handleUnknownSyscall (C))', 'True'), ("Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C))", 'None'), ('Pairing (pageTableMapped (ASM) <= Kernel_C.pageTableMapped (C))', 'True'), ('Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C))', 'True'), ('Pairing (sameRegionAs (ASM) <= Kernel_C.sameRegionAs (C))', 'True'), ('Pairing (slotCapLongRunningDelete (ASM) <= Kernel_C.slotCapLongRunningDelete (C))', 'True'), ('Pairing (Arch_isFrameType (ASM) <= Kernel_C.Arch_isFrameType (C))', 'True'), ('Pairing (setThreadState (ASM) <= Kernel_C.setThreadState (C))', 'True'), ('Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C))', 'True'), ('Pairing (lookupSlotForCNodeOp (ASM) <= Kernel_C.lookupSlotForCNodeOp (C))', 'True'), ('Pairing (copyGlobalMappings (ASM) <= Kernel_C.copyGlobalMappings (C))', 'True'), ('Pairing (maybe_alloc_extra_bi (ASM) <= Kernel_C.maybe_alloc_extra_bi (C))', 'True'), ('Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))', 'ProblemAbort'), ('Pairing (possibleSwitchTo (ASM) <= Kernel_C.possibleSwitchTo (C))', 'True'), ('Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))', 'ProblemAbort'), ('Pairing (lookupTargetSlot (ASM) <= Kernel_C.lookupTargetSlot (C))', 'True'), ("Pairing (l_impl'wfi (ASM) <= r_impl'wfi (C))", 'None'), ('Pairing (cancelSignal (ASM) <= Kernel_C.cancelSignal (C))', 'True'), ('Pairing (invalidateASIDEntry (ASM) <= Kernel_C.invalidateASIDEntry (C))', 'True'), ('Pairing (strncmp (ASM) <= Kernel_C.strncmp (C))', 'True'), ('Pairing (invalidateCacheRange_RAM (ASM) <= Kernel_C.invalidateCacheRange_RAM (C))', 'True'), ('Pairing (activateThread (ASM) <= Kernel_C.activateThread (C))', 'True'), ('Pairing (lookupPDSlot (ASM) <= Kernel_C.lookupPDSlot (C))', 'True'), ('Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C))', 'ProofEXCEPT'), ('Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C))', 'None'), ('Pairing (getExtraCPtr (ASM) <= Kernel_C.getExtraCPtr (C))', 'True'), ('Pairing (lockTLBEntryCritical (ASM) <= Kernel_C.lockTLBEntryCritical (C))', 'None'), ('Pairing (completeSignal (ASM) <= Kernel_C.completeSignal (C))', 'True'), ('Pairing (decodeUnbindNotification (ASM) <= Kernel_C.decodeUnbindNotification (C))', 'True'), ('Pairing (invokeTCB_CopyRegisters (ASM) <= Kernel_C.invokeTCB_CopyRegisters (C))', 'True'), ('Pairing (handleInterruptEntry (ASM) <= Kernel_C.handleInterruptEntry (C))', 'False'), ('Pairing (invokeCNodeDelete (ASM) <= Kernel_C.invokeCNodeDelete (C))', 'True'), ('Pairing (scheduleTCB (ASM) <= Kernel_C.scheduleTCB (C))', 'True'), ('Pairing (arch_get_n_paging (ASM) <= Kernel_C.arch_get_n_paging (C))', 'True'), ('Pairing (create_idle_thread (ASM) <= Kernel_C.create_idle_thread (C))', 'True'), ('Pairing (loadCapTransfer (ASM) <= Kernel_C.loadCapTransfer (C))', 'True'), ('Pairing (get_num_avail_p_regs (ASM) <= Kernel_C.get_num_avail_p_regs (C))', 'True'), ('Pairing (hasCancelSendRights (ASM) <= Kernel_C.hasCancelSendRights (C))', 'True'), ('Pairing (setPriority (ASM) <= Kernel_C.setPriority (C))', 'True'), ("Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C))", 'None'), ('Pairing (handleInterrupt (ASM) <= Kernel_C.handleInterrupt (C))', 'True'), ('Pairing (strlcat (ASM) <= Kernel_C.strlcat (C))', 'True'), ('Pairing (get_avail_p_regs (ASM) <= Kernel_C.get_avail_p_regs (C))', 'True'), ('Pairing (invokeCNodeRotate (ASM) <= Kernel_C.invokeCNodeRotate (C))', 'True'), ('Pairing (configureIdleThread (ASM) <= Kernel_C.configureIdleThread (C))', 'True'), ('Pairing (Arch_sameObjectAs (ASM) <= Kernel_C.Arch_sameObjectAs (C))', 'True'), ('Pairing (map_kernel_frame (ASM) <= Kernel_C.map_kernel_frame (C))', 'True'), ('Pairing (isMDBParentOf (ASM) <= Kernel_C.isMDBParentOf (C))', 'True'), ('Pairing (switchToIdleThread (ASM) <= Kernel_C.switchToIdleThread (C))', 'True'), ('Pairing (activate_global_pd (ASM) <= Kernel_C.activate_global_pd (C))', 'True'), ('Pairing (scheduleChooseNewThread (ASM) <= Kernel_C.scheduleChooseNewThread (C))', 'True'), ('Pairing (invalidateCacheRange_I (ASM) <= Kernel_C.invalidateCacheRange_I (C))', 'True'), ('Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))', 'ProblemAbort'), ('Pairing (getObjectSize (ASM) <= Kernel_C.getObjectSize (C))', 'True'), ('Pairing (Arch_postModifyRegisters (ASM) <= Kernel_C.Arch_postModifyRegisters (C))', 'True'), ('Pairing (invokeCNodeSaveCaller (ASM) <= Kernel_C.invokeCNodeSaveCaller (C))', 'True'), ('Pairing (doFaultTransfer (ASM) <= Kernel_C.doFaultTransfer (C))', 'True'), ('Pairing (deleteCallerCap (ASM) <= Kernel_C.deleteCallerCap (C))', 'True'), ('Pairing (doNormalTransfer (ASM) <= Kernel_C.doNormalTransfer (C))', 'True'), ('Pairing (Arch_deriveCap (ASM) <= Kernel_C.Arch_deriveCap (C))', 'True'), ('Pairing (ensureNoChildren (ASM) <= Kernel_C.ensureNoChildren (C))', 'True'), ('Pairing (decodeCopyRegisters (ASM) <= Kernel_C.decodeCopyRegisters (C))', 'True'), ('Pairing (decodeSetPriority (ASM) <= Kernel_C.decodeSetPriority (C))', 'True'), ('Pairing (Arch_maskCapRights (ASM) <= Kernel_C.Arch_maskCapRights (C))', 'True'), ('Pairing (capSwapForDelete (ASM) <= Kernel_C.capSwapForDelete (C))', 'True'), ('Pairing (memset (ASM) <= Kernel_C.memset (C))', 'True'), ('Pairing (reserve_region (ASM) <= Kernel_C.reserve_region (C))', 'True'), ('Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))', 'ProblemAbort'), ('Pairing (invokeTCB_NotificationControl (ASM) <= Kernel_C.invokeTCB_NotificationControl (C))', 'True'), ('Pairing (invokeIRQHandler_SetIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_SetIRQHandler (C))', 'True'), ('Pairing (emptySlot (ASM) <= Kernel_C.emptySlot (C))', 'True'), ('Pairing (decodeSetSpace (ASM) <= Kernel_C.decodeSetSpace (C))', 'True'), ('Pairing (doNBRecvFailedTransfer (ASM) <= Kernel_C.doNBRecvFailedTransfer (C))', 'True'), ('Pairing (write_slot (ASM) <= Kernel_C.write_slot (C))', 'True'), ('Pairing (receiveSignal (ASM) <= Kernel_C.receiveSignal (C))', 'True'), ('Pairing (Arch_sameRegionAs (ASM) <= Kernel_C.Arch_sameRegionAs (C))', 'True'), ('Pairing (decodeInvocation (ASM) <= Kernel_C.decodeInvocation (C))', 'True'), ('Pairing (unbindMaybeNotification (ASM) <= Kernel_C.unbindMaybeNotification (C))', 'True'), ('Pairing (getHWASID (ASM) <= Kernel_C.getHWASID (C))', 'True'), ('Pairing (deleteASID (ASM) <= Kernel_C.deleteASID (C))', 'True'), ('Pairing (restart (ASM) <= Kernel_C.restart (C))', 'True'), ('Pairing (isValidVTableRoot (ASM) <= Kernel_C.isValidVTableRoot (C))', 'True'), ('Pairing (decodeSetSchedParams (ASM) <= Kernel_C.decodeSetSchedParams (C))', 'True'), ('Pairing (c_handle_fastpath_reply_recv (ASM) <= Kernel_C.c_handle_fastpath_reply_recv (C))', 'None'), ('Pairing (Arch_performTransfer (ASM) <= Kernel_C.Arch_performTransfer (C))', 'True'), ('Pairing (arch_clean_invalidate_caches (ASM) <= Kernel_C.arch_clean_invalidate_caches (C))', 'True'), ('Pairing (init_core_state (ASM) <= Kernel_C.init_core_state (C))', 'True'), ('Pairing (cleanCaches_PoU (ASM) <= Kernel_C.cleanCaches_PoU (C))', 'True'), ('Pairing (provide_cap (ASM) <= Kernel_C.provide_cap (C))', 'True'), ('Pairing (performInvocation_Notification (ASM) <= Kernel_C.performInvocation_Notification (C))', 'True'), ('Pairing (handleReply (ASM) <= Kernel_C.handleReply (C))', 'True'), ('Pairing (insertNewCap (ASM) <= Kernel_C.insertNewCap (C))', 'True'), ("Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C))", 'None'), ('Pairing (strnlen (ASM) <= Kernel_C.strnlen (C))', 'True'), ("Pairing (l_impl'isb (ASM) <= r_impl'isb (C))", 'None'), ('Pairing (cleanCacheRange_PoU (ASM) <= Kernel_C.cleanCacheRange_PoU (C))', 'True'), ('Pairing (getRestartPC (ASM) <= Kernel_C.getRestartPC (C))', 'True'), ('Pairing (Arch_handleFaultReply (ASM) <= Kernel_C.Arch_handleFaultReply (C))', 'True'), ('Pairing (armv_init_user_access (ASM) <= Kernel_C.armv_init_user_access (C))', 'True'), ('Pairing (cteSwap (ASM) <= Kernel_C.cteSwap (C))', 'True'), ('Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C))', 'ProblemAbort'), ('Pairing (schedule (ASM) <= Kernel_C.schedule (C))', 'True'), ('Pairing (lookupSourceSlot (ASM) <= Kernel_C.lookupSourceSlot (C))', 'True'), ('Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C))', 'True'), ('Pairing (maskVMRights (ASM) <= Kernel_C.maskVMRights (C))', 'True'), ('Pairing (invokeCNodeInsert (ASM) <= Kernel_C.invokeCNodeInsert (C))', 'True'), ('Pairing (Arch_decodeInvocation (ASM) <= Kernel_C.Arch_decodeInvocation (C))', 'True'), ('Pairing (cteRevoke (ASM) <= Kernel_C.cteRevoke (C))', 'True'), ('Pairing (handleInvocation (ASM) <= Kernel_C.handleInvocation (C))', 'True'), ('Pairing (cteInsert (ASM) <= Kernel_C.cteInsert (C))', 'True'), ('Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C))', 'ProblemAbort'), ('Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))', 'ProblemAbort'), ('Pairing (plat_cleanCache (ASM) <= Kernel_C.plat_cleanCache (C))', 'True')]
Result summary:
  - 151 proofs checked
  - 23 proofs skipped
  - failures: ['Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C))', 'Pairing (handleInterruptEntry (ASM) <= Kernel_C.handleInterruptEntry (C))']
  - 108 pairings omitted: ['Pairing (setupCallerCap (ASM) <= Kernel_C.setupCallerCap (C))', 'Pairing (suspend (ASM) <= Kernel_C.suspend (C))', 'Pairing (memzero (ASM) <= Kernel_C.memzero (C))', 'Pairing (create_domain_cap (ASM) <= Kernel_C.create_domain_cap (C))', 'Pairing (APFromVMRights (ASM) <= Kernel_C.APFromVMRights (C))', 'Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C))', 'Pairing (cpu_iface_init (ASM) <= Kernel_C.cpu_iface_init (C))', 'Pairing (cteDeleteOne (ASM) <= Kernel_C.cteDeleteOne (C))', 'Pairing (Arch_getObjectSize (ASM) <= Kernel_C.Arch_getObjectSize (C))', 'Pairing (timerTick (ASM) <= Kernel_C.timerTick (C))', 'Pairing (alloc_rootserver_obj (ASM) <= Kernel_C.alloc_rootserver_obj (C))', 'Pairing (deleteASIDPool (ASM) <= Kernel_C.deleteASIDPool (C))', 'Pairing (setDomain (ASM) <= Kernel_C.setDomain (C))', 'Pairing (sendFaultIPC (ASM) <= Kernel_C.sendFaultIPC (C))', 'Pairing (bi_finalise (ASM) <= Kernel_C.bi_finalise (C))', 'Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C))', 'Pairing (cleanInvalidateCacheRange_RAM (ASM) <= Kernel_C.cleanInvalidateCacheRange_RAM (C))', 'Pairing (deriveCap (ASM) <= Kernel_C.deriveCap (C))', 'Pairing (decodeCNodeInvocation (ASM) <= Kernel_C.decodeCNodeInvocation (C))', 'Pairing (sendIPC (ASM) <= Kernel_C.sendIPC (C))', 'Pairing (arch_clean_invalidate_L1_caches (ASM) <= Kernel_C.arch_clean_invalidate_L1_caches (C))', 'Pairing (invokeUntyped_Retype (ASM) <= Kernel_C.invokeUntyped_Retype (C))', 'Pairing (cleanInvalidateL1Caches (ASM) <= Kernel_C.cleanInvalidateL1Caches (C))', 'Pairing (lookupIPCBuffer (ASM) <= Kernel_C.lookupIPCBuffer (C))', 'Pairing (populate_bi_frame (ASM) <= Kernel_C.populate_bi_frame (C))', 'Pairing (resolveAddressBits (ASM) <= Kernel_C.resolveAddressBits (C))', 'Pairing (isFinalCapability (ASM) <= Kernel_C.isFinalCapability (C))', 'Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C))', 'Pairing (create_kernel_untypeds (ASM) <= Kernel_C.create_kernel_untypeds (C))', 'Pairing (decodeSetMCPriority (ASM) <= Kernel_C.decodeSetMCPriority (C))', 'Pairing (decodeSetIPCBuffer (ASM) <= Kernel_C.decodeSetIPCBuffer (C))', 'Pairing (ensureEmptySlot (ASM) <= Kernel_C.ensureEmptySlot (C))', 'Pairing (Arch_updateCapData (ASM) <= Kernel_C.Arch_updateCapData (C))', 'Pairing (calculate_extra_bi_size_bits (ASM) <= Kernel_C.calculate_extra_bi_size_bits (C))', 'Pairing (decodeWriteRegisters (ASM) <= Kernel_C.decodeWriteRegisters (C))', 'Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C))', 'Pairing (setVMRootForFlush (ASM) <= Kernel_C.setVMRootForFlush (C))', 'Pairing (Arch_finaliseCap (ASM) <= Kernel_C.Arch_finaliseCap (C))', 'Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C))', 'Pairing (unbindNotification (ASM) <= Kernel_C.unbindNotification (C))', 'Pairing (create_ipcbuf_frame_cap (ASM) <= Kernel_C.create_ipcbuf_frame_cap (C))', 'Pairing (tcbSchedEnqueue (ASM) <= Kernel_C.tcbSchedEnqueue (C))', 'Pairing (create_it_asid_pool (ASM) <= Kernel_C.create_it_asid_pool (C))', 'Pairing (invokeIRQControl (ASM) <= Kernel_C.invokeIRQControl (C))', 'Pairing (updateCapData (ASM) <= Kernel_C.updateCapData (C))', 'Pairing (invokeCNodeCancelBadgedSends (ASM) <= Kernel_C.invokeCNodeCancelBadgedSends (C))', 'Pairing (handleUserLevelFault (ASM) <= Kernel_C.handleUserLevelFault (C))', 'Pairing (findFreeHWASID (ASM) <= Kernel_C.findFreeHWASID (C))', 'Pairing (initL2Cache (ASM) <= Kernel_C.initL2Cache (C))', 'Pairing (setIRQTrigger (ASM) <= Kernel_C.setIRQTrigger (C))', 'Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C))', 'Pairing (create_initial_thread (ASM) <= Kernel_C.create_initial_thread (C))', 'Pairing (invokeIRQHandler_ClearIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_ClearIRQHandler (C))', 'Pairing (handleVMFault (ASM) <= Kernel_C.handleVMFault (C))', 'Pairing (invokeTCB_ThreadControl (ASM) <= Kernel_C.invokeTCB_ThreadControl (C))', 'Pairing (write_it_asid_pool (ASM) <= Kernel_C.write_it_asid_pool (C))', 'Pairing (replyFromKernel_error (ASM) <= Kernel_C.replyFromKernel_error (C))', 'Pairing (doReplyTransfer (ASM) <= Kernel_C.doReplyTransfer (C))', 'Pairing (Arch_activateIdleThread (ASM) <= Kernel_C.Arch_activateIdleThread (C))', 'Pairing (deletingIRQHandler (ASM) <= Kernel_C.deletingIRQHandler (C))', 'Pairing (handleVMFaultEvent (ASM) <= Kernel_C.handleVMFaultEvent (C))', 'Pairing (flushSpace (ASM) <= Kernel_C.flushSpace (C))', 'Pairing (Arch_decodeIRQControlInvocation (ASM) <= Kernel_C.Arch_decodeIRQControlInvocation (C))', 'Pairing (decodeBindNotification (ASM) <= Kernel_C.decodeBindNotification (C))', 'Pairing (handleDoubleFault (ASM) <= Kernel_C.handleDoubleFault (C))', 'Pairing (decodeTCBInvocation (ASM) <= Kernel_C.decodeTCBInvocation (C))', 'Pairing (isHighestPrio (ASM) <= Kernel_C.isHighestPrio (C))', 'Pairing (create_device_untypeds (ASM) <= Kernel_C.create_device_untypeds (C))', 'Pairing (unmapPage (ASM) <= Kernel_C.unmapPage (C))', 'Pairing (handleFaultReply (ASM) <= Kernel_C.handleFaultReply (C))', 'Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C))', 'Pairing (Arch_decodeTransfer (ASM) <= Kernel_C.Arch_decodeTransfer (C))', 'Pairing (doIPCTransfer (ASM) <= Kernel_C.doIPCTransfer (C))', 'Pairing (lookupPivotSlot (ASM) <= Kernel_C.lookupPivotSlot (C))', 'Pairing (c_handle_interrupt (ASM) <= Kernel_C.c_handle_interrupt (C))', 'Pairing (unmapPageTable (ASM) <= Kernel_C.unmapPageTable (C))', 'Pairing (tcbEPAppend (ASM) <= Kernel_C.tcbEPAppend (C))', 'Pairing (armv_contextSwitch_HWASID (ASM) <= Kernel_C.armv_contextSwitch_HWASID (C))', 'Pairing (initIRQController (ASM) <= Kernel_C.initIRQController (C))', 'Pairing (memcpy (ASM) <= Kernel_C.memcpy (C))', 'Pairing (checkValidIPCBuffer (ASM) <= Kernel_C.checkValidIPCBuffer (C))', 'Pairing (create_bi_frame_cap (ASM) <= Kernel_C.create_bi_frame_cap (C))', 'Pairing (findPDForASID (ASM) <= Kernel_C.findPDForASID (C))', 'Pairing (create_it_address_space (ASM) <= Kernel_C.create_it_address_space (C))', 'Pairing (invokeIRQHandler_AckIRQ (ASM) <= Kernel_C.invokeIRQHandler_AckIRQ (C))', 'Pairing (flushTable (ASM) <= Kernel_C.flushTable (C))', 'Pairing (isIOSpaceFrameCap (ASM) <= Kernel_C.isIOSpaceFrameCap (C))', 'Pairing (create_mapped_it_frame_cap (ASM) <= Kernel_C.create_mapped_it_frame_cap (C))', 'Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C))', 'Pairing (dist_init (ASM) <= Kernel_C.dist_init (C))', 'Pairing (chooseThread (ASM) <= Kernel_C.chooseThread (C))', 'Pairing (Arch_prepareThreadDelete (ASM) <= Kernel_C.Arch_prepareThreadDelete (C))', 'Pairing (initTimer (ASM) <= Kernel_C.initTimer (C))', 'Pairing (branchFlushRange (ASM) <= Kernel_C.branchFlushRange (C))', 'Pairing (lockTLBEntry (ASM) <= Kernel_C.lockTLBEntry (C))', 'Pairing (handleFault (ASM) <= Kernel_C.handleFault (C))', 'Pairing (arm_errata (ASM) <= Kernel_C.arm_errata (C))', 'Pairing (setExtraBadge (ASM) <= Kernel_C.setExtraBadge (C))', 'Pairing (switchToThread (ASM) <= Kernel_C.switchToThread (C))', 'Pairing (lookupExtraCaps (ASM) <= Kernel_C.lookupExtraCaps (C))', 'Pairing (doFlush (ASM) <= Kernel_C.doFlush (C))', 'Pairing (decodeIRQHandlerInvocation (ASM) <= Kernel_C.decodeIRQHandlerInvocation (C))', 'Pairing (decodeReadRegisters (ASM) <= Kernel_C.decodeReadRegisters (C))', 'Pairing (tcbSchedAppend (ASM) <= Kernel_C.tcbSchedAppend (C))', 'Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C))', 'Pairing (decodeTCBConfigure (ASM) <= Kernel_C.decodeTCBConfigure (C))', 'Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C))', 'Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C))']

real    216m26.186s
user    1574m45.005s
sys     38m44.567s
warning: you did not specify '--add-root'; the result might be removed by the garbage collector
/nix/store/6aq479hhrn95nnkwna8d9ajgsxys4bgz-graph-refine

real	216m26.682s
user	0m0.036s
sys	0m0.065s
