(set-option :print-success true)
(set-logic QF_AUFBV)
(define-fun load-word32 ((m (Array (_ BitVec 30) (_ BitVec 32))) (p (_ BitVec 32))) (_ BitVec 32) (select m ((_ extract 31 2) p)))
(define-fun store-word32 ((m (Array (_ BitVec 30) (_ BitVec 32))) (p (_ BitVec 32)) (v (_ BitVec 32))) (Array (_ BitVec 30) (_ BitVec 32)) (store m ((_ extract 31 2) p) v))
(define-fun load-word64 ((m (Array (_ BitVec 30) (_ BitVec 32))) (p (_ BitVec 32))) (_ BitVec 64) (bvor ((_ zero_extend 32) (load-word32 m p)) (bvshl ((_ zero_extend 32) (load-word32 m (bvadd p #x00000004))) #x0000000000000020)))
(define-fun store-word64 ((m (Array (_ BitVec 30) (_ BitVec 32))) (p (_ BitVec 32)) (v (_ BitVec 64))) (Array (_ BitVec 30) (_ BitVec 32)) (store-word32 (store-word32 m p ((_ extract 31 0) v)) (bvadd p #x00000004) ((_ extract 63 32) v)))
(define-fun word8-shift ((p (_ BitVec 32))) (_ BitVec 32) (bvshl ((_ zero_extend 30) ((_ extract 1 0) p)) #x00000003))
(define-fun word8-get ((p (_ BitVec 32)) (x (_ BitVec 32))) (_ BitVec 8) ((_ extract 7 0) (bvlshr x (word8-shift p))))
(define-fun load-word8 ((m (Array (_ BitVec 30) (_ BitVec 32))) (p (_ BitVec 32))) (_ BitVec 8) (word8-get p (load-word32 m p)))
(define-fun word8-put ((p (_ BitVec 32)) (x (_ BitVec 32)) (y (_ BitVec 8))) (_ BitVec 32) (bvor (bvshl ((_ zero_extend 24) y) (word8-shift p)) (bvand x (bvnot (bvshl #x000000FF (word8-shift p))))))
(define-fun store-word8 ((m (Array (_ BitVec 30) (_ BitVec 32))) (p (_ BitVec 32)) (v (_ BitVec 8))) (Array (_ BitVec 30) (_ BitVec 32)) (store-word32 m p (word8-put p (load-word32 m p) v)))
(define-fun mem-dom ((p (_ BitVec 32)) (d (Array (_ BitVec 32) (_ BitVec 1)))) Bool (not (= (select d p) #b0)))
(define-fun mem-eq ((x (Array (_ BitVec 30) (_ BitVec 32))) (y (Array (_ BitVec 30) (_ BitVec 32)))) Bool (= x y))
(define-fun word32-eq ((x (_ BitVec 32)) (y (_ BitVec 32))) Bool (= x y))
(define-fun word2-xor-scramble ((a (_ BitVec 2)) (x (_ BitVec 2)) (b (_ BitVec 2)) (c (_ BitVec 2)) (y (_ BitVec 2)) (d (_ BitVec 2))) Bool (bvult (bvadd (bvxor a x) b) (bvadd (bvxor c y) d)))
(declare-fun unspecified-precond () Bool)
(declare-fun rodata-witness () (_ BitVec 32))
(declare-fun rodata-witness-val () (_ BitVec 32))
(assert (or (and (bvule #xe00022a4 rodata-witness) (bvule rodata-witness #xe00022d3)) (and (bvule #xe00022dc rodata-witness) (bvule rodata-witness #xe00022e3)) (and (bvule #xe001b420 rodata-witness) (bvule rodata-witness #xe001b507))))
(assert (= (bvand rodata-witness #x00000003) #x00000000))
(define-fun rodata ((m (Array (_ BitVec 30) (_ BitVec 32)))) Bool (and (= (load-word32 m #xe001b480) #x00000002) (= (load-word32 m #xe001b440) #x00000011) (= (load-word32 m #xe001b484) #x00000003) (= (load-word32 m #xe001b488) #x00000004) (= (load-word32 m #xe001b42c) #x00000003) (= (load-word32 m #xe001b48c) #x00000005) (= (load-word32 m #xe001b490) #x00000000) (= (load-word32 m #xe001b4d8) #x00000004) (= (load-word32 m #xe001b494) #x0000000f) (= (load-word32 m #xe001b498) #x00000002) (= (load-word32 m #xe001b444) #x0000000d) (= (load-word32 m #xe001b49c) #x0000002a) (= (load-word32 m #xe001b420) #x00000000) (= (load-word32 m #xe001b430) #x00000004) (= (load-word32 m #xe001b4c4) #x0000000a) (= (load-word32 m #xe00022a4) #x00a01000) (= (load-word32 m #xe001b504) #xfff01000) (= (load-word32 m #xe00022a8) #xfff01000) (= (load-word32 m #xe001b45c) #x00000000) (= (load-word32 m #xe001b4d0) #x00000002) (= (load-word32 m #xe00022ac) #x00000001) (= (load-word32 m #xe001b500) #xfff02100) (= (load-word32 m #xe00022b0) #x00000000) (= (load-word32 m #xe001b448) #x0000000e) (= (load-word32 m #xe001b4dc) #x00000005) (= (load-word32 m #xe001b4bc) #x00000008) (= (load-word32 m #xe00022b4) #x00a00000) (= (load-word32 m #xe001b4fc) #xfff03000) (= (load-word32 m #xe001b438) #x00000006) (= (load-word32 m #xe001b434) #x00000005) (= (load-word32 m #xe001b4b8) #x00000001) (= (load-word32 m #xe001b43c) #x00000007) (= (load-word32 m #xe001b4f8) #xfff02600) (= (load-word32 m #xe00022c0) #x00000000) (= (load-word32 m #xe001b460) #x00000000) (= (load-word32 m #xe001b4b4) #x00000000) (= (load-word32 m #xe00022c4) #x00a02000) (= (load-word32 m #xe001b4f4) #x00000003) (= (load-word32 m #xe00022c8) #xfff03000) (= (load-word32 m #xe001b44c) #x00000010) (= (load-word32 m #xe001b4c0) #x00000009) (= (load-word32 m #xe001b4b0) #x00000010) (= (load-word32 m #xe00022cc) #x00000001) (= (load-word32 m #xe001b4f0) #x00000013) (= (load-word32 m #xe00022d0) #x00000000) (= (load-word32 m #xe00022b8) #xfff02000) (= (load-word32 m #xe001b4cc) #x0000000c) (= (load-word32 m #xe001b4ac) #x0000000d) (= (load-word32 m #xe001b454) #x0000000d) (= (load-word32 m #xe001b4ec) #x00000012) (= (load-word32 m #xe001b458) #x00000010) (= (load-word32 m #xe001b424) #x00000001) (= (load-word32 m #xe001b4a8) #x00000011) (= (load-word32 m #xe00022dc) #x10000000) (= (load-word32 m #xe001b4e8) #x0000000e) (= (load-word32 m #xe00022e0) #x2ff00000) (= (load-word32 m #xe001b450) #x00000011) (= (load-word32 m #xe001b4a4) #x00000049) (= (load-word32 m #xe001b464) #x00000000) (= (load-word32 m #xe001b4e4) #x00000007) (= (load-word32 m #xe001b468) #x00000000) (= (load-word32 m #xe00022bc) #x00000001) (= (load-word32 m #xe001b4a0) #x00000001) (= (load-word32 m #xe001b46c) #x00000000) (= (load-word32 m #xe001b4e0) #x00000006) (= (load-word32 m #xe001b470) #x00000000) (= (load-word32 m #xe001b428) #x00000002) (= (load-word32 m #xe001b474) #x00000000) (= (load-word32 m #xe001b478) #x00000000) (= (load-word32 m #xe001b4d4) #x00000003) (= (load-word32 m #xe001b4c8) #x0000000b) (= (load-word32 m #xe001b47c) #x00000000) (= (load-word32 m rodata-witness) rodata-witness-val)))
(define-fun implies-rodata ((m (Array (_ BitVec 30) (_ BitVec 32)))) Bool (= (load-word32 m rodata-witness) rodata-witness-val))
(declare-fun ret_init () (_ BitVec 32))
(declare-fun r0_init () (_ BitVec 32))
(declare-fun r1_init () (_ BitVec 32))
(declare-fun r2_init () (_ BitVec 32))
(declare-fun r3_init () (_ BitVec 32))
(declare-fun r4_init () (_ BitVec 32))
(declare-fun r5_init () (_ BitVec 32))
(declare-fun r6_init () (_ BitVec 32))
(declare-fun r7_init () (_ BitVec 32))
(declare-fun r8_init () (_ BitVec 32))
(declare-fun r9_init () (_ BitVec 32))
(declare-fun r10_init () (_ BitVec 32))
(declare-fun r11_init () (_ BitVec 32))
(declare-fun r12_init () (_ BitVec 32))
(declare-fun r13_init () (_ BitVec 32))
(declare-fun r14_init () (_ BitVec 32))
(declare-fun r15_init () (_ BitVec 32))
(declare-fun r16_init () (_ BitVec 32))
(declare-fun r17_init () (_ BitVec 32))
(declare-fun r18_init () (_ BitVec 32))
(declare-fun r19_init () (_ BitVec 32))
(declare-fun r20_init () (_ BitVec 32))
(declare-fun r21_init () (_ BitVec 32))
(declare-fun r22_init () (_ BitVec 32))
(declare-fun r23_init () (_ BitVec 32))
(declare-fun r24_init () (_ BitVec 32))
(declare-fun r25_init () (_ BitVec 32))
(declare-fun r26_init () (_ BitVec 32))
(declare-fun r27_init () (_ BitVec 32))
(declare-fun r28_init () (_ BitVec 32))
(declare-fun r29_init () (_ BitVec 32))
(declare-fun r30_init () (_ BitVec 32))
(declare-fun r31_init () (_ BitVec 32))
(declare-fun mode_init () (_ BitVec 32))
(declare-fun n_init () Bool)
(declare-fun z_init () Bool)
(declare-fun c_init () Bool)
(declare-fun v_init () Bool)
(declare-fun mem_init () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_init () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun stack_init () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_stack_init () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun clock_init () (_ BitVec 64))
(declare-fun ret_addr_input_init () (_ BitVec 32))
(declare-fun cap___struct_cap_C_v.words_C.0_init () (_ BitVec 32))
(declare-fun cap___struct_cap_C_v.words_C.1_init () (_ BitVec 32))
(declare-fun length___unsigned_long_v_init () (_ BitVec 32))
(declare-fun slot___ptr_to_struct_cte_C_v_init () (_ BitVec 32))
(declare-fun buffer___ptr_to_unsigned_long_v_init () (_ BitVec 32))
(declare-fun Mem_init () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun GhostAssertions_init () (Array (_ BitVec 50) (_ BitVec 32)))
(define-fun path_cond_to_89_ASM () Bool true)
(define-fun cond_at_89 () Bool (and (and (word32-eq (bvand r13_init #x00000001) #x00000000) (word32-eq (bvand r13_init #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true true)))))))))))))))))))))))))))))))))))))
(define-fun path_cond_to_1_ASM () Bool (and cond_at_89 path_cond_to_89_ASM))
(define-fun query_load-word32stack_ini () (_ BitVec 32) (load-word32 stack_init (bvadd r13_init #xfffffffc)))
(define-fun query_bvaddr13_init_xfffff () (_ BitVec 32) (bvadd r13_init #xfffffffc))
(define-fun query_load-word32store-wor () (_ BitVec 32) (load-word32 (store-word32 stack_init (bvadd r13_init #xfffffffc) r14_init) (bvadd r13_init #xfffffff8)))
(define-fun query_bvaddr13_init_xfffff.1 () (_ BitVec 32) (bvadd r13_init #xfffffff8))
(define-fun query_load-word32store-wor.1 () (_ BitVec 32) (load-word32 (store-word32 (store-word32 stack_init (bvadd r13_init #xfffffffc) r14_init) (bvadd r13_init #xfffffff8) r11_init) (bvadd r13_init #xfffffff4)))
(define-fun query_bvaddr13_init_xfffff.2 () (_ BitVec 32) (bvadd r13_init #xfffffff4))
(define-fun query_load-word32store-wor.2 () (_ BitVec 32) (load-word32 (store-word32 (store-word32 (store-word32 stack_init (bvadd r13_init #xfffffffc) r14_init) (bvadd r13_init #xfffffff8) r11_init) (bvadd r13_init #xfffffff4) r10_init) (bvadd r13_init #xfffffff0)))
(define-fun query_bvaddr13_init_xfffff.3 () (_ BitVec 32) (bvadd r13_init #xfffffff0))
(define-fun query_load-word32store-wor.3 () (_ BitVec 32) (load-word32 (store-word32 (store-word32 (store-word32 (store-word32 stack_init (bvadd r13_init #xfffffffc) r14_init) (bvadd r13_init #xfffffff8) r11_init) (bvadd r13_init #xfffffff4) r10_init) (bvadd r13_init #xfffffff0) r9_init) (bvadd r13_init #xffffffec)))
(define-fun query_bvaddr13_init_xfffff.4 () (_ BitVec 32) (bvadd r13_init #xffffffec))
(define-fun query_load-word32store-wor.4 () (_ BitVec 32) (load-word32 (store-word32 (store-word32 (store-word32 (store-word32 (store-word32 stack_init (bvadd r13_init #xfffffffc) r14_init) (bvadd r13_init #xfffffff8) r11_init) (bvadd r13_init #xfffffff4) r10_init) (bvadd r13_init #xfffffff0) r9_init) (bvadd r13_init #xffffffec) r8_init) (bvadd r13_init #xffffffe8)))
(define-fun query_bvaddr13_init_xfffff.5 () (_ BitVec 32) (bvadd r13_init #xffffffe8))
(define-fun query_load-word32store-wor.5 () (_ BitVec 32) (load-word32 (store-word32 (store-word32 (store-word32 (store-word32 (store-word32 (store-word32 stack_init (bvadd r13_init #xfffffffc) r14_init) (bvadd r13_init #xfffffff8) r11_init) (bvadd r13_init #xfffffff4) r10_init) (bvadd r13_init #xfffffff0) r9_init) (bvadd r13_init #xffffffec) r8_init) (bvadd r13_init #xffffffe8) r7_init) (bvadd r13_init #xffffffe4)))
(define-fun query_bvaddr13_init_xfffff.6 () (_ BitVec 32) (bvadd r13_init #xffffffe4))
(define-fun query_load-word32store-wor.6 () (_ BitVec 32) (load-word32 (store-word32 (store-word32 (store-word32 (store-word32 (store-word32 (store-word32 (store-word32 stack_init (bvadd r13_init #xfffffffc) r14_init) (bvadd r13_init #xfffffff8) r11_init) (bvadd r13_init #xfffffff4) r10_init) (bvadd r13_init #xfffffff0) r9_init) (bvadd r13_init #xffffffec) r8_init) (bvadd r13_init #xffffffe8) r7_init) (bvadd r13_init #xffffffe4) r6_init) (bvadd r13_init #xffffffe0)))
(define-fun query_bvaddr13_init_xfffff.7 () (_ BitVec 32) (bvadd r13_init #xffffffe0))
(define-fun query_load-word32store-wor.7 () (_ BitVec 32) (load-word32 (store-word32 (store-word32 (store-word32 (store-word32 (store-word32 (store-word32 (store-word32 (store-word32 stack_init (bvadd r13_init #xfffffffc) r14_init) (bvadd r13_init #xfffffff8) r11_init) (bvadd r13_init #xfffffff4) r10_init) (bvadd r13_init #xfffffff0) r9_init) (bvadd r13_init #xffffffec) r8_init) (bvadd r13_init #xffffffe8) r7_init) (bvadd r13_init #xffffffe4) r6_init) (bvadd r13_init #xffffffe0) r5_init) (bvadd r13_init #xffffffdc)))
(define-fun query_bvaddr13_init_xfffff.8 () (_ BitVec 32) (bvadd r13_init #xffffffdc))
(define-fun stack_after_1 () (Array (_ BitVec 30) (_ BitVec 32)) (store-word32 (store-word32 (store-word32 (store-word32 (store-word32 (store-word32 (store-word32 (store-word32 (store-word32 stack_init (bvadd r13_init #xfffffffc) r14_init) (bvadd r13_init #xfffffff8) r11_init) (bvadd r13_init #xfffffff4) r10_init) (bvadd r13_init #xfffffff0) r9_init) (bvadd r13_init #xffffffec) r8_init) (bvadd r13_init #xffffffe8) r7_init) (bvadd r13_init #xffffffe4) r6_init) (bvadd r13_init #xffffffe0) r5_init) (bvadd r13_init #xffffffdc) r4_init))
(define-fun r13_after_1 () (_ BitVec 32) (bvadd r13_init #xffffffdc))
(define-fun r13_after_90 () (_ BitVec 32) (bvadd r13_after_1 #xffffff94))
(define-fun r12_after_91 () (_ BitVec 32) (bvadd r13_after_90 #x00000038))
(define-fun cond_at_92 () Bool (and true (and (and (word32-eq (bvand r12_after_91 #x00000001) #x00000000) (word32-eq (bvand r12_after_91 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_2_ASM () Bool (and cond_at_92 path_cond_to_1_ASM))
(define-fun query_load-word32stack_aft () (_ BitVec 32) (load-word32 stack_after_1 (bvadd r12_after_91 #x00000004)))
(define-fun query_bvaddr12_after_91_x0 () (_ BitVec 32) (bvadd r12_after_91 #x00000004))
(define-fun query_load-word32store-wor.8 () (_ BitVec 32) (load-word32 (store-word32 stack_after_1 (bvadd r12_after_91 #x00000004) r1_init) r12_after_91))
(define-fun query_r12_after_91 () (_ BitVec 32) r12_after_91)
(define-fun stack_after_2 () (Array (_ BitVec 30) (_ BitVec 32)) (store-word32 (store-word32 stack_after_1 (bvadd r12_after_91 #x00000004) r1_init) r12_after_91 r0_init))
(define-fun v_after_93 () Bool (and (not (word32-eq (bvand r2_init #x80000000) #x00000000)) (not (= (not (word32-eq (bvand r2_init #x80000000) #x00000000)) (not (word32-eq (bvand (bvadd r2_init #xfffffffe) #x80000000) #x00000000))))))
(define-fun c_after_93 () Bool (not (= (bvand (bvadd (bvadd ((_ zero_extend 32) r2_init) ((_ zero_extend 32) #xfffffffd)) #x0000000000000001) #x0000000100000000) #x0000000000000000)))
(define-fun z_after_93 () Bool (word32-eq r2_init #x00000002))
(define-fun n_after_93 () Bool (not (word32-eq (bvand (bvadd r2_init #xfffffffe) #x80000000) #x00000000)))
(define-fun cond_at_94 () Bool (and c_after_93 (not z_after_93)))
(define-fun path_cond_to_4_ASM () Bool (and (not cond_at_94) path_cond_to_2_ASM))
(define-fun path_cond_to_3_ASM () Bool (and cond_at_94 path_cond_to_2_ASM))
(define-fun r2_after_102 () (_ BitVec 32) #x00003fe0)
(define-fun r2_after_103 () (_ BitVec 32) (bvor #xe0020000 (bvlshr (bvshl r2_after_102 #x00000010) #x00000010)))
(define-fun cond_at_104 () Bool (and (and (word32-eq (bvand r2_after_103 #x00000001) #x00000000) (word32-eq (bvand r2_after_103 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_7_ASM () Bool (and cond_at_104 path_cond_to_3_ASM))
(define-fun query_bvaddr2_after_103_x0 () (_ BitVec 32) (bvadd r2_after_103 #x00000b24))
(define-fun query_load-word32mem_initb () (_ BitVec 32) (load-word32 mem_init (bvadd r2_after_103 #x00000b24)))
(define-fun r4_after_7 () (_ BitVec 32) (load-word32 mem_init (bvadd r2_after_103 #x00000b24)))
(define-fun v_after_105 () Bool false)
(define-fun c_after_105 () Bool (not (= (bvand (bvadd (bvadd ((_ zero_extend 32) r4_after_7) ((_ zero_extend 32) #xffffffff)) #x0000000000000001) #x0000000100000000) #x0000000000000000)))
(define-fun z_after_105 () Bool (word32-eq r4_after_7 #x00000000))
(define-fun n_after_105 () Bool (not (word32-eq (bvand r4_after_7 #x80000000) #x00000000)))
(define-fun cond_at_106 () Bool z_after_105)
(define-fun path_cond_to_8_ASM () Bool (and cond_at_106 path_cond_to_7_ASM))
(define-fun path_cond_to_9_ASM () Bool (and (not cond_at_106) path_cond_to_7_ASM))
(define-fun r2_after_107 () (_ BitVec 32) #x00003fe0)
(define-fun r2_after_108 () (_ BitVec 32) (bvor #xe0020000 (bvlshr (bvshl r2_after_107 #x00000010) #x00000010)))
(define-fun cond_at_109 () Bool (and (and (word32-eq (bvand r2_after_108 #x00000001) #x00000000) (word32-eq (bvand r2_after_108 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_10_ASM () Bool (and cond_at_109 path_cond_to_9_ASM))
(define-fun query_bvaddr2_after_108_x0 () (_ BitVec 32) (bvadd r2_after_108 #x00000b28))
(define-fun query_load-word32mem_initb.1 () (_ BitVec 32) (load-word32 mem_init (bvadd r2_after_108 #x00000b28)))
(define-fun r5_after_10 () (_ BitVec 32) (load-word32 mem_init (bvadd r2_after_108 #x00000b28)))
(define-fun v_after_110 () Bool false)
(define-fun c_after_110 () Bool (not (= (bvand (bvadd (bvadd ((_ zero_extend 32) r5_after_10) ((_ zero_extend 32) #xffffffff)) #x0000000000000001) #x0000000100000000) #x0000000000000000)))
(define-fun z_after_110 () Bool (word32-eq r5_after_10 #x00000000))
(define-fun n_after_110 () Bool (not (word32-eq (bvand r5_after_10 #x80000000) #x00000000)))
(define-fun cond_at_111 () Bool z_after_110)
(define-fun path_cond_to_11_ASM () Bool (and cond_at_111 path_cond_to_10_ASM))
(define-fun path_cond_to_95_ASM () Bool (or path_cond_to_8_ASM (or path_cond_to_11_ASM path_cond_to_4_ASM)))
(define-fun v_v_at_95 () Bool (ite path_cond_to_11_ASM v_after_110 (ite path_cond_to_4_ASM v_after_93 v_after_105)))
(define-fun z_v_at_95 () Bool (ite path_cond_to_8_ASM z_after_105 (ite path_cond_to_11_ASM z_after_110 z_after_93)))
(define-fun n_v_at_95 () Bool (ite path_cond_to_11_ASM n_after_110 (ite path_cond_to_4_ASM n_after_93 n_after_105)))
(define-fun c_v_at_95 () Bool (ite path_cond_to_11_ASM c_after_110 (ite path_cond_to_8_ASM c_after_105 c_after_93)))
(define-fun r2_v_at_95 () (_ BitVec 32) (ite path_cond_to_4_ASM r2_init (ite path_cond_to_8_ASM r2_after_103 r2_after_108)))
(define-fun r3_after_95 () (_ BitVec 32) #x0000c000)
(define-fun r3_after_96 () (_ BitVec 32) (bvor #xe0010000 (bvlshr (bvshl r3_after_95 #x00000010) #x00000010)))
(define-fun r2_after_97 () (_ BitVec 32) #x00000007)
(define-fun cond_at_98 () Bool (and (and (word32-eq (bvand r3_after_96 #x00000001) #x00000000) (word32-eq (bvand r3_after_96 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_12_ASM () Bool (and (not cond_at_111) path_cond_to_10_ASM))
(define-fun cond_at_112 () Bool (and (and (word32-eq (bvand r13_after_90 #x00000001) #x00000000) (word32-eq (bvand r13_after_90 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_13_ASM () Bool (and cond_at_112 path_cond_to_12_ASM))
(define-fun query_load-word32stack_aft.1 () (_ BitVec 32) (load-word32 stack_after_2 (bvadd r13_after_90 #x00000034)))
(define-fun query_bvaddr13_after_90_x0 () (_ BitVec 32) (bvadd r13_after_90 #x00000034))
(define-fun stack_after_13 () (Array (_ BitVec 30) (_ BitVec 32)) (store-word32 stack_after_2 (bvadd r13_after_90 #x00000034) r3_init))
(define-fun r3_after_113 () (_ BitVec 32) #x0000c000)
(define-fun r3_after_114 () (_ BitVec 32) (bvor #xe0010000 (bvlshr (bvshl r3_after_113 #x00000010) #x00000010)))
(define-fun cond_at_115 () Bool (and (and (word32-eq (bvand r3_after_114 #x00000001) #x00000000) (word32-eq (bvand r3_after_114 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_14_ASM () Bool (and cond_at_115 path_cond_to_13_ASM))
(define-fun query_bvaddr3_after_114_x0 () (_ BitVec 32) (bvadd r3_after_114 #x00000600))
(define-fun query_load-word32mem_initb.2 () (_ BitVec 32) (load-word32 mem_init (bvadd r3_after_114 #x00000600)))
(define-fun r3_after_14 () (_ BitVec 32) (load-word32 mem_init (bvadd r3_after_114 #x00000600)))
(define-fun cond_at_116 () Bool (and (and (word32-eq (bvand r3_after_14 #x00000001) #x00000000) (word32-eq (bvand r3_after_14 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_15_ASM () Bool (and cond_at_116 path_cond_to_14_ASM))
(define-fun query_bvaddr3_after_14_x00 () (_ BitVec 32) (bvadd r3_after_14 #x00000008))
(define-fun query_load-word32mem_initb.3 () (_ BitVec 32) (load-word32 mem_init (bvadd r3_after_14 #x00000008)))
(define-fun r11_after_15 () (_ BitVec 32) (load-word32 mem_init (bvadd r3_after_14 #x00000008)))
(define-fun cond_at_117 () Bool (and (and (word32-eq (bvand r3_after_14 #x00000001) #x00000000) (word32-eq (bvand r3_after_14 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_16_ASM () Bool (and cond_at_117 path_cond_to_15_ASM))
(define-fun query_bvaddr3_after_14_x00.1 () (_ BitVec 32) (bvadd r3_after_14 #x0000000c))
(define-fun query_load-word32mem_initb.4 () (_ BitVec 32) (load-word32 mem_init (bvadd r3_after_14 #x0000000c)))
(define-fun r9_after_16 () (_ BitVec 32) (load-word32 mem_init (bvadd r3_after_14 #x0000000c)))
(define-fun cond_at_118 () Bool (and (and (word32-eq (bvand r3_after_14 #x00000001) #x00000000) (word32-eq (bvand r3_after_14 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_17_ASM () Bool (and cond_at_118 path_cond_to_16_ASM))
(define-fun query_bvaddr3_after_14_x00.2 () (_ BitVec 32) (bvadd r3_after_14 #x00000010))
(define-fun query_load-word32mem_initb.5 () (_ BitVec 32) (load-word32 mem_init (bvadd r3_after_14 #x00000010)))
(define-fun r10_after_17 () (_ BitVec 32) (load-word32 mem_init (bvadd r3_after_14 #x00000010)))
(define-fun r3_after_119 () (_ BitVec 32) (bvadd r13_after_90 #x00000058))
(define-fun cond_at_120 () Bool (and true (and (and (word32-eq (bvand r4_after_7 #x00000001) #x00000000) (word32-eq (bvand r4_after_7 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_18_ASM () Bool (and cond_at_120 path_cond_to_17_ASM))
(define-fun query_bvaddr4_after_7_x000 () (_ BitVec 32) (bvadd r4_after_7 #x00000004))
(define-fun query_load-word32mem_initb.6 () (_ BitVec 32) (load-word32 mem_init (bvadd r4_after_7 #x00000004)))
(define-fun r1_after_18 () (_ BitVec 32) (load-word32 mem_init (bvadd r4_after_7 #x00000004)))
(define-fun query_r4_after_7 () (_ BitVec 32) r4_after_7)
(define-fun query_load-word32mem_initr () (_ BitVec 32) (load-word32 mem_init r4_after_7))
(define-fun r0_after_18 () (_ BitVec 32) (load-word32 mem_init r4_after_7))
(define-fun cond_at_121 () Bool (and true (and (and (word32-eq (bvand r3_after_119 #x00000001) #x00000000) (word32-eq (bvand r3_after_119 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_19_ASM () Bool (and cond_at_121 path_cond_to_18_ASM))
(define-fun query_load-word32stack_aft.2 () (_ BitVec 32) (load-word32 stack_after_13 (bvadd r3_after_119 #x00000004)))
(define-fun query_bvaddr3_after_119_x0 () (_ BitVec 32) (bvadd r3_after_119 #x00000004))
(define-fun query_load-word32store-wor.9 () (_ BitVec 32) (load-word32 (store-word32 stack_after_13 (bvadd r3_after_119 #x00000004) r1_after_18) r3_after_119))
(define-fun query_r3_after_119 () (_ BitVec 32) r3_after_119)
(define-fun stack_after_19 () (Array (_ BitVec 30) (_ BitVec 32)) (store-word32 (store-word32 stack_after_13 (bvadd r3_after_119 #x00000004) r1_after_18) r3_after_119 r0_after_18))
(define-fun r3_after_123 () (_ BitVec 32) (bvadd r13_after_90 #x00000050))
(define-fun cond_at_124 () Bool (and true (and (and (word32-eq (bvand r5_after_10 #x00000001) #x00000000) (word32-eq (bvand r5_after_10 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_20_ASM () Bool (and cond_at_124 path_cond_to_19_ASM))
(define-fun query_bvaddr5_after_10_x00 () (_ BitVec 32) (bvadd r5_after_10 #x00000004))
(define-fun query_load-word32mem_initb.7 () (_ BitVec 32) (load-word32 mem_init (bvadd r5_after_10 #x00000004)))
(define-fun r1_after_20 () (_ BitVec 32) (load-word32 mem_init (bvadd r5_after_10 #x00000004)))
(define-fun query_r5_after_10 () (_ BitVec 32) r5_after_10)
(define-fun query_load-word32mem_initr.1 () (_ BitVec 32) (load-word32 mem_init r5_after_10))
(define-fun r0_after_20 () (_ BitVec 32) (load-word32 mem_init r5_after_10))
(define-fun cond_at_125 () Bool (and true (and (and (word32-eq (bvand r3_after_123 #x00000001) #x00000000) (word32-eq (bvand r3_after_123 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_21_ASM () Bool (and cond_at_125 path_cond_to_20_ASM))
(define-fun query_load-word32stack_aft.3 () (_ BitVec 32) (load-word32 stack_after_19 (bvadd r3_after_123 #x00000004)))
(define-fun query_bvaddr3_after_123_x0 () (_ BitVec 32) (bvadd r3_after_123 #x00000004))
(define-fun query_load-word32store-wor.10 () (_ BitVec 32) (load-word32 (store-word32 stack_after_19 (bvadd r3_after_123 #x00000004) r1_after_20) r3_after_123))
(define-fun query_r3_after_123 () (_ BitVec 32) r3_after_123)
(define-fun stack_after_21 () (Array (_ BitVec 30) (_ BitVec 32)) (store-word32 (store-word32 stack_after_19 (bvadd r3_after_123 #x00000004) r1_after_20) r3_after_123 r0_after_20))
(define-fun cond_at_126 () Bool (and (and (word32-eq (bvand r13_after_90 #x00000001) #x00000000) (word32-eq (bvand r13_after_90 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_22_ASM () Bool (and cond_at_126 path_cond_to_21_ASM))
(define-fun query_bvaddr13_after_90_x0.1 () (_ BitVec 32) (bvadd r13_after_90 #x00000038))
(define-fun query_load-word32stack_aft.4 () (_ BitVec 32) (load-word32 stack_after_21 (bvadd r13_after_90 #x00000038)))
(define-fun r7_after_22 () (_ BitVec 32) (load-word32 stack_after_21 (bvadd r13_after_90 #x00000038)))
(define-fun r6_after_127 () (_ BitVec 32) (bvand r7_after_22 #xfffffe03))
(define-fun r6_after_128 () (_ BitVec 32) (bvand r6_after_127 #xfffffffc))
(declare-fun slotCapLongRunningDelete_success_at_23 () Bool)
(declare-fun r0_after_23 () (_ BitVec 32))
(declare-fun r1_after_23 () (_ BitVec 32))
(declare-fun r2_after_23 () (_ BitVec 32))
(declare-fun r3_after_23 () (_ BitVec 32))
(declare-fun r4_after_23 () (_ BitVec 32))
(declare-fun r5_after_23 () (_ BitVec 32))
(declare-fun r6_after_23 () (_ BitVec 32))
(declare-fun r7_after_23 () (_ BitVec 32))
(declare-fun r8_after_23 () (_ BitVec 32))
(declare-fun r9_after_23 () (_ BitVec 32))
(declare-fun r10_after_23 () (_ BitVec 32))
(declare-fun r11_after_23 () (_ BitVec 32))
(declare-fun r12_after_23 () (_ BitVec 32))
(declare-fun r13_after_23 () (_ BitVec 32))
(declare-fun r14_after_23 () (_ BitVec 32))
(declare-fun r15_after_23 () (_ BitVec 32))
(declare-fun r16_after_23 () (_ BitVec 32))
(declare-fun r17_after_23 () (_ BitVec 32))
(declare-fun r18_after_23 () (_ BitVec 32))
(declare-fun r19_after_23 () (_ BitVec 32))
(declare-fun r20_after_23 () (_ BitVec 32))
(declare-fun r21_after_23 () (_ BitVec 32))
(declare-fun r22_after_23 () (_ BitVec 32))
(declare-fun r23_after_23 () (_ BitVec 32))
(declare-fun r24_after_23 () (_ BitVec 32))
(declare-fun r25_after_23 () (_ BitVec 32))
(declare-fun r26_after_23 () (_ BitVec 32))
(declare-fun r27_after_23 () (_ BitVec 32))
(declare-fun r28_after_23 () (_ BitVec 32))
(declare-fun r29_after_23 () (_ BitVec 32))
(declare-fun r30_after_23 () (_ BitVec 32))
(declare-fun r31_after_23 () (_ BitVec 32))
(declare-fun mode_after_23 () (_ BitVec 32))
(declare-fun n_after_23 () Bool)
(declare-fun z_after_23 () Bool)
(declare-fun c_after_23 () Bool)
(declare-fun v_after_23 () Bool)
(declare-fun mem_after_23 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_after_23 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun stack_after_23 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_stack_after_23 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun clock_after_23 () (_ BitVec 64))
(declare-fun ret_addr_input_ignore_after_23 () (_ BitVec 32))
(declare-fun stack_for_23_bot () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun stack_for_23_top () (Array (_ BitVec 30) (_ BitVec 32)))
(define-fun v_after_131 () Bool false)
(define-fun c_after_131 () Bool (not (= (bvand (bvadd (bvadd ((_ zero_extend 32) r0_after_23) ((_ zero_extend 32) #xffffffff)) #x0000000000000001) #x0000000100000000) #x0000000000000000)))
(define-fun z_after_131 () Bool (word32-eq r0_after_23 #x00000000))
(define-fun n_after_131 () Bool (not (word32-eq (bvand r0_after_23 #x80000000) #x00000000)))
(define-fun cond_at_132 () Bool z_after_131)
(define-fun path_cond_to_24_ASM () Bool (and cond_at_132 path_cond_to_22_ASM))
(define-fun r0_after_138 () (_ BitVec 32) (bvadd r6_after_23 #x00000010))
(declare-fun slotCapLongRunningDelete_success_at_27 () Bool)
(declare-fun r0_after_27 () (_ BitVec 32))
(declare-fun r1_after_27 () (_ BitVec 32))
(declare-fun r2_after_27 () (_ BitVec 32))
(declare-fun r3_after_27 () (_ BitVec 32))
(declare-fun r4_after_27 () (_ BitVec 32))
(declare-fun r5_after_27 () (_ BitVec 32))
(declare-fun r6_after_27 () (_ BitVec 32))
(declare-fun r7_after_27 () (_ BitVec 32))
(declare-fun r8_after_27 () (_ BitVec 32))
(declare-fun r9_after_27 () (_ BitVec 32))
(declare-fun r10_after_27 () (_ BitVec 32))
(declare-fun r11_after_27 () (_ BitVec 32))
(declare-fun r12_after_27 () (_ BitVec 32))
(declare-fun r13_after_27 () (_ BitVec 32))
(declare-fun r14_after_27 () (_ BitVec 32))
(declare-fun r15_after_27 () (_ BitVec 32))
(declare-fun r16_after_27 () (_ BitVec 32))
(declare-fun r17_after_27 () (_ BitVec 32))
(declare-fun r18_after_27 () (_ BitVec 32))
(declare-fun r19_after_27 () (_ BitVec 32))
(declare-fun r20_after_27 () (_ BitVec 32))
(declare-fun r21_after_27 () (_ BitVec 32))
(declare-fun r22_after_27 () (_ BitVec 32))
(declare-fun r23_after_27 () (_ BitVec 32))
(declare-fun r24_after_27 () (_ BitVec 32))
(declare-fun r25_after_27 () (_ BitVec 32))
(declare-fun r26_after_27 () (_ BitVec 32))
(declare-fun r27_after_27 () (_ BitVec 32))
(declare-fun r28_after_27 () (_ BitVec 32))
(declare-fun r29_after_27 () (_ BitVec 32))
(declare-fun r30_after_27 () (_ BitVec 32))
(declare-fun r31_after_27 () (_ BitVec 32))
(declare-fun mode_after_27 () (_ BitVec 32))
(declare-fun n_after_27 () Bool)
(declare-fun z_after_27 () Bool)
(declare-fun c_after_27 () Bool)
(declare-fun v_after_27 () Bool)
(declare-fun mem_after_27 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_after_27 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun stack_after_27 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_stack_after_27 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun clock_after_27 () (_ BitVec 64))
(declare-fun ret_addr_input_ignore_after_27 () (_ BitVec 32))
(declare-fun stack_for_27_bot () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun stack_for_27_top () (Array (_ BitVec 30) (_ BitVec 32)))
(define-fun v_after_140 () Bool false)
(define-fun c_after_140 () Bool (not (= (bvand (bvadd (bvadd ((_ zero_extend 32) r0_after_27) ((_ zero_extend 32) #xffffffff)) #x0000000000000001) #x0000000100000000) #x0000000000000000)))
(define-fun z_after_140 () Bool (word32-eq r0_after_27 #x00000000))
(define-fun n_after_140 () Bool (not (word32-eq (bvand r0_after_27 #x80000000) #x00000000)))
(define-fun cond_at_141 () Bool (not z_after_140))
(define-fun path_cond_to_29_ASM () Bool (and (not cond_at_141) path_cond_to_24_ASM))
(define-fun v_after_142 () Bool false)
(define-fun c_after_142 () Bool (not (= (bvand (bvadd (bvadd ((_ zero_extend 32) r9_after_27) ((_ zero_extend 32) #xffffffff)) #x0000000000000001) #x0000000100000000) #x0000000000000000)))
(define-fun z_after_142 () Bool (word32-eq r9_after_27 #x00000000))
(define-fun n_after_142 () Bool (not (word32-eq (bvand r9_after_27 #x80000000) #x00000000)))
(define-fun cond_at_143 () Bool z_after_142)
(define-fun path_cond_to_30_ASM () Bool (and cond_at_143 path_cond_to_29_ASM))
(define-fun path_cond_to_31_ASM () Bool (and (not cond_at_143) path_cond_to_29_ASM))
(define-fun r0_after_144 () (_ BitVec 32) (bvadd r13_after_27 #x00000068))
(define-fun cond_at_145 () Bool (and (and (word32-eq (bvand r0_after_144 #x00000001) #x00000000) (word32-eq (bvand r0_after_144 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_32_ASM () Bool (and cond_at_145 path_cond_to_31_ASM))
(define-fun query_load-word32stack_for () (_ BitVec 32) (load-word32 stack_for_27_top (bvadd r0_after_144 #xfffffff0)))
(define-fun query_bvaddr0_after_144_xf () (_ BitVec 32) (bvadd r0_after_144 #xfffffff0))
(define-fun query_load-word32stack_for.1 () (_ BitVec 32) (load-word32 stack_for_27_bot (bvadd r0_after_144 #xfffffff0)))
(define-fun stack_after_32_split () (_ BitVec 32) r13_after_27)
(define-fun stack_after_32_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_27 (bvadd r0_after_144 #xfffffff0)) (store-word32 stack_for_27_top (bvadd r0_after_144 #xfffffff0) r8_after_27) stack_for_27_top))
(define-fun stack_after_32_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_27 (bvadd r0_after_144 #xfffffff0)) stack_for_27_bot (store-word32 stack_for_27_bot (bvadd r0_after_144 #xfffffff0) r8_after_27)))
(define-fun r0_after_32 () (_ BitVec 32) (bvadd r0_after_144 #xfffffff0))
(define-fun cond_at_146 () Bool (and (and (word32-eq (bvand r13_after_27 #x00000001) #x00000000) (word32-eq (bvand r13_after_27 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_33_ASM () Bool (and cond_at_146 path_cond_to_32_ASM))
(define-fun query_bvaddr13_after_27_x0 () (_ BitVec 32) (bvadd r13_after_27 #x0000005c))
(define-fun query_load-word32stack_aft.5 () (_ BitVec 32) (load-word32 stack_after_32_top (bvadd r13_after_27 #x0000005c)))
(define-fun query_load-word32stack_aft.6 () (_ BitVec 32) (load-word32 stack_after_32_bot (bvadd r13_after_27 #x0000005c)))
(define-fun r3_after_33 () (_ BitVec 32) (ite (bvule stack_after_32_split (bvadd r13_after_27 #x0000005c)) (load-word32 stack_after_32_top (bvadd r13_after_27 #x0000005c)) (load-word32 stack_after_32_bot (bvadd r13_after_27 #x0000005c))))
(define-fun cond_at_147 () Bool (and true (and (and (word32-eq (bvand r13_after_27 #x00000001) #x00000000) (word32-eq (bvand r13_after_27 #x00000002) #x00000000)) (and true (and true true)))))
(define-fun path_cond_to_34_ASM () Bool (and cond_at_147 path_cond_to_33_ASM))
(define-fun query_load-word32stack_aft.7 () (_ BitVec 32) (load-word32 stack_after_32_top r13_after_27))
(define-fun query_r13_after_27 () (_ BitVec 32) r13_after_27)
(define-fun query_load-word32stack_aft.8 () (_ BitVec 32) (load-word32 stack_after_32_bot r13_after_27))
(define-fun stack_after_34_split () (_ BitVec 32) stack_after_32_split)
(define-fun stack_after_34_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_32_split r13_after_27) (store-word32 stack_after_32_top r13_after_27 r3_after_33) stack_after_32_top))
(define-fun stack_after_34_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_32_split r13_after_27) stack_after_32_bot (store-word32 stack_after_32_bot r13_after_27 r3_after_33)))
(define-fun r1_after_150 () (_ BitVec 32) #x00000000)
(declare-fun updateCapData_success_at_35 () Bool)
(declare-fun r0_after_35 () (_ BitVec 32))
(declare-fun r1_after_35 () (_ BitVec 32))
(declare-fun r2_after_35 () (_ BitVec 32))
(declare-fun r3_after_35 () (_ BitVec 32))
(declare-fun r4_after_35 () (_ BitVec 32))
(declare-fun r5_after_35 () (_ BitVec 32))
(declare-fun r6_after_35 () (_ BitVec 32))
(declare-fun r7_after_35 () (_ BitVec 32))
(declare-fun r8_after_35 () (_ BitVec 32))
(declare-fun r9_after_35 () (_ BitVec 32))
(declare-fun r10_after_35 () (_ BitVec 32))
(declare-fun r11_after_35 () (_ BitVec 32))
(declare-fun r12_after_35 () (_ BitVec 32))
(declare-fun r13_after_35 () (_ BitVec 32))
(declare-fun r14_after_35 () (_ BitVec 32))
(declare-fun r15_after_35 () (_ BitVec 32))
(declare-fun r16_after_35 () (_ BitVec 32))
(declare-fun r17_after_35 () (_ BitVec 32))
(declare-fun r18_after_35 () (_ BitVec 32))
(declare-fun r19_after_35 () (_ BitVec 32))
(declare-fun r20_after_35 () (_ BitVec 32))
(declare-fun r21_after_35 () (_ BitVec 32))
(declare-fun r22_after_35 () (_ BitVec 32))
(declare-fun r23_after_35 () (_ BitVec 32))
(declare-fun r24_after_35 () (_ BitVec 32))
(declare-fun r25_after_35 () (_ BitVec 32))
(declare-fun r26_after_35 () (_ BitVec 32))
(declare-fun r27_after_35 () (_ BitVec 32))
(declare-fun r28_after_35 () (_ BitVec 32))
(declare-fun r29_after_35 () (_ BitVec 32))
(declare-fun r30_after_35 () (_ BitVec 32))
(declare-fun r31_after_35 () (_ BitVec 32))
(declare-fun mode_after_35 () (_ BitVec 32))
(declare-fun n_after_35 () Bool)
(declare-fun z_after_35 () Bool)
(declare-fun c_after_35 () Bool)
(declare-fun v_after_35 () Bool)
(declare-fun mem_after_35 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_after_35 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun stack_after_35 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_stack_after_35 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun clock_after_35 () (_ BitVec 64))
(declare-fun ret_addr_input_ignore_after_35 () (_ BitVec 32))
(declare-fun stack_for_35_bot () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun stack_for_35_top () (Array (_ BitVec 30) (_ BitVec 32)))
(define-fun cond_at_152 () Bool (and (and (word32-eq (bvand r13_after_35 #x00000001) #x00000000) (word32-eq (bvand r13_after_35 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_36_ASM () Bool (and cond_at_152 path_cond_to_34_ASM))
(define-fun query_bvaddr13_after_35_x0 () (_ BitVec 32) (bvadd r13_after_35 #x00000058))
(define-fun query_load-word32stack_for.2 () (_ BitVec 32) (load-word32 stack_for_35_top (bvadd r13_after_35 #x00000058)))
(define-fun query_load-word32stack_for.3 () (_ BitVec 32) (load-word32 stack_for_35_bot (bvadd r13_after_35 #x00000058)))
(define-fun r8_after_36 () (_ BitVec 32) (ite (bvule r13_after_35 (bvadd r13_after_35 #x00000058)) (load-word32 stack_for_35_top (bvadd r13_after_35 #x00000058)) (load-word32 stack_for_35_bot (bvadd r13_after_35 #x00000058))))
(define-fun path_cond_to_153_ASM () Bool (or path_cond_to_36_ASM path_cond_to_30_ASM))
(define-fun ret_addr_input_ignore_v_at_153 () (_ BitVec 32) (ite path_cond_to_30_ASM ret_addr_input_ignore_after_27 ret_addr_input_ignore_after_35))
(define-fun cond_at_153 () Bool (and (and (word32-eq (bvand (ite path_cond_to_36_ASM r13_after_35 r13_after_27) #x00000001) #x00000000) (word32-eq (bvand (ite path_cond_to_36_ASM r13_after_35 r13_after_27) #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_37_ASM () Bool (and cond_at_153 path_cond_to_153_ASM))
(define-fun query_load-word32itepath_c () (_ BitVec 32) (load-word32 (ite path_cond_to_30_ASM stack_for_27_top stack_for_35_top) (bvadd (ite path_cond_to_36_ASM r13_after_35 r13_after_27) #x00000058)))
(define-fun query_bvadditepath_cond_to () (_ BitVec 32) (bvadd (ite path_cond_to_36_ASM r13_after_35 r13_after_27) #x00000058))
(define-fun query_load-word32itepath_c.1 () (_ BitVec 32) (load-word32 (ite path_cond_to_30_ASM stack_for_27_bot stack_for_35_bot) (bvadd (ite path_cond_to_36_ASM r13_after_35 r13_after_27) #x00000058)))
(define-fun stack_after_37_split () (_ BitVec 32) (ite path_cond_to_30_ASM r13_after_27 r13_after_35))
(define-fun stack_after_37_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule (ite path_cond_to_30_ASM r13_after_27 r13_after_35) (bvadd (ite path_cond_to_36_ASM r13_after_35 r13_after_27) #x00000058)) (store-word32 (ite path_cond_to_30_ASM stack_for_27_top stack_for_35_top) (bvadd (ite path_cond_to_36_ASM r13_after_35 r13_after_27) #x00000058) (ite path_cond_to_30_ASM r8_after_27 r8_after_36)) (ite path_cond_to_30_ASM stack_for_27_top stack_for_35_top)))
(define-fun stack_after_37_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule (ite path_cond_to_30_ASM r13_after_27 r13_after_35) (bvadd (ite path_cond_to_36_ASM r13_after_35 r13_after_27) #x00000058)) (ite path_cond_to_30_ASM stack_for_27_bot stack_for_35_bot) (store-word32 (ite path_cond_to_30_ASM stack_for_27_bot stack_for_35_bot) (bvadd (ite path_cond_to_36_ASM r13_after_35 r13_after_27) #x00000058) (ite path_cond_to_30_ASM r8_after_27 r8_after_36))))
(define-fun r3_after_154 () (_ BitVec 32) (bvadd (ite path_cond_to_36_ASM r13_after_35 r13_after_27) #x00000058))
(define-fun cond_at_155 () Bool (and true (and (and (word32-eq (bvand r3_after_154 #x00000001) #x00000000) (word32-eq (bvand r3_after_154 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_38_ASM () Bool (and cond_at_155 path_cond_to_37_ASM))
(define-fun query_bvaddr3_after_154_x0 () (_ BitVec 32) (bvadd r3_after_154 #x00000004))
(define-fun query_load-word32stack_aft.9 () (_ BitVec 32) (load-word32 stack_after_37_top (bvadd r3_after_154 #x00000004)))
(define-fun query_load-word32stack_aft.10 () (_ BitVec 32) (load-word32 stack_after_37_bot (bvadd r3_after_154 #x00000004)))
(define-fun r3_after_38 () (_ BitVec 32) (ite (bvule stack_after_37_split (bvadd r3_after_154 #x00000004)) (load-word32 stack_after_37_top (bvadd r3_after_154 #x00000004)) (load-word32 stack_after_37_bot (bvadd r3_after_154 #x00000004))))
(define-fun query_r3_after_154 () (_ BitVec 32) r3_after_154)
(define-fun query_load-word32stack_aft.11 () (_ BitVec 32) (load-word32 stack_after_37_top r3_after_154))
(define-fun query_load-word32stack_aft.12 () (_ BitVec 32) (load-word32 stack_after_37_bot r3_after_154))
(define-fun r2_after_38 () (_ BitVec 32) (ite (bvule stack_after_37_split r3_after_154) (load-word32 stack_after_37_top r3_after_154) (load-word32 stack_after_37_bot r3_after_154)))
(define-fun r0_after_157 () (_ BitVec 32) (bvadd (ite path_cond_to_36_ASM r13_after_35 r13_after_27) #x00000044))
(declare-fun deriveCap_success_at_39 () Bool)
(declare-fun r0_after_39 () (_ BitVec 32))
(declare-fun r1_after_39 () (_ BitVec 32))
(declare-fun r2_after_39 () (_ BitVec 32))
(declare-fun r3_after_39 () (_ BitVec 32))
(declare-fun r4_after_39 () (_ BitVec 32))
(declare-fun r5_after_39 () (_ BitVec 32))
(declare-fun r6_after_39 () (_ BitVec 32))
(declare-fun r7_after_39 () (_ BitVec 32))
(declare-fun r8_after_39 () (_ BitVec 32))
(declare-fun r9_after_39 () (_ BitVec 32))
(declare-fun r10_after_39 () (_ BitVec 32))
(declare-fun r11_after_39 () (_ BitVec 32))
(declare-fun r12_after_39 () (_ BitVec 32))
(declare-fun r13_after_39 () (_ BitVec 32))
(declare-fun r14_after_39 () (_ BitVec 32))
(declare-fun r15_after_39 () (_ BitVec 32))
(declare-fun r16_after_39 () (_ BitVec 32))
(declare-fun r17_after_39 () (_ BitVec 32))
(declare-fun r18_after_39 () (_ BitVec 32))
(declare-fun r19_after_39 () (_ BitVec 32))
(declare-fun r20_after_39 () (_ BitVec 32))
(declare-fun r21_after_39 () (_ BitVec 32))
(declare-fun r22_after_39 () (_ BitVec 32))
(declare-fun r23_after_39 () (_ BitVec 32))
(declare-fun r24_after_39 () (_ BitVec 32))
(declare-fun r25_after_39 () (_ BitVec 32))
(declare-fun r26_after_39 () (_ BitVec 32))
(declare-fun r27_after_39 () (_ BitVec 32))
(declare-fun r28_after_39 () (_ BitVec 32))
(declare-fun r29_after_39 () (_ BitVec 32))
(declare-fun r30_after_39 () (_ BitVec 32))
(declare-fun r31_after_39 () (_ BitVec 32))
(declare-fun mode_after_39 () (_ BitVec 32))
(declare-fun n_after_39 () Bool)
(declare-fun z_after_39 () Bool)
(declare-fun c_after_39 () Bool)
(declare-fun v_after_39 () Bool)
(declare-fun mem_after_39 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_after_39 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun stack_after_39 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_stack_after_39 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun clock_after_39 () (_ BitVec 64))
(declare-fun ret_addr_input_ignore_after_39 () (_ BitVec 32))
(declare-fun stack_for_39_bot () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun stack_for_39_top () (Array (_ BitVec 30) (_ BitVec 32)))
(define-fun cond_at_159 () Bool (and (and (word32-eq (bvand r13_after_39 #x00000001) #x00000000) (word32-eq (bvand r13_after_39 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_40_ASM () Bool (and cond_at_159 path_cond_to_38_ASM))
(define-fun query_bvaddr13_after_39_x0 () (_ BitVec 32) (bvadd r13_after_39 #x00000044))
(define-fun query_load-word32stack_for.4 () (_ BitVec 32) (load-word32 stack_for_39_top (bvadd r13_after_39 #x00000044)))
(define-fun query_load-word32stack_for.5 () (_ BitVec 32) (load-word32 stack_for_39_bot (bvadd r13_after_39 #x00000044)))
(define-fun r0_after_40 () (_ BitVec 32) (ite (bvule r13_after_39 (bvadd r13_after_39 #x00000044)) (load-word32 stack_for_39_top (bvadd r13_after_39 #x00000044)) (load-word32 stack_for_39_bot (bvadd r13_after_39 #x00000044))))
(define-fun v_after_160 () Bool false)
(define-fun c_after_160 () Bool (not (= (bvand (bvadd (bvadd ((_ zero_extend 32) r0_after_40) ((_ zero_extend 32) #xffffffff)) #x0000000000000001) #x0000000100000000) #x0000000000000000)))
(define-fun z_after_160 () Bool (word32-eq r0_after_40 #x00000000))
(define-fun n_after_160 () Bool (not (word32-eq (bvand r0_after_40 #x80000000) #x00000000)))
(define-fun cond_at_161 () Bool (not z_after_160))
(define-fun path_cond_to_41_ASM () Bool (and cond_at_161 path_cond_to_40_ASM))
(define-fun path_cond_to_42_ASM () Bool (and (not cond_at_161) path_cond_to_40_ASM))
(define-fun r3_after_162 () (_ BitVec 32) (bvadd r13_after_39 #x00000058))
(define-fun r2_after_163 () (_ BitVec 32) (bvadd r13_after_39 #x00000048))
(define-fun cond_at_164 () Bool (and true (and (and (word32-eq (bvand r2_after_163 #x00000001) #x00000000) (word32-eq (bvand r2_after_163 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_43_ASM () Bool (and cond_at_164 path_cond_to_42_ASM))
(define-fun query_bvaddr2_after_163_x0 () (_ BitVec 32) (bvadd r2_after_163 #x00000004))
(define-fun query_load-word32stack_for.6 () (_ BitVec 32) (load-word32 stack_for_39_top (bvadd r2_after_163 #x00000004)))
(define-fun query_load-word32stack_for.7 () (_ BitVec 32) (load-word32 stack_for_39_bot (bvadd r2_after_163 #x00000004)))
(define-fun r1_after_43 () (_ BitVec 32) (ite (bvule r13_after_39 (bvadd r2_after_163 #x00000004)) (load-word32 stack_for_39_top (bvadd r2_after_163 #x00000004)) (load-word32 stack_for_39_bot (bvadd r2_after_163 #x00000004))))
(define-fun query_r2_after_163 () (_ BitVec 32) r2_after_163)
(define-fun query_load-word32stack_for.8 () (_ BitVec 32) (load-word32 stack_for_39_top r2_after_163))
(define-fun query_load-word32stack_for.9 () (_ BitVec 32) (load-word32 stack_for_39_bot r2_after_163))
(define-fun r0_after_43 () (_ BitVec 32) (ite (bvule r13_after_39 r2_after_163) (load-word32 stack_for_39_top r2_after_163) (load-word32 stack_for_39_bot r2_after_163)))
(define-fun cond_at_165 () Bool (and true (and (and (word32-eq (bvand r3_after_162 #x00000001) #x00000000) (word32-eq (bvand r3_after_162 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_44_ASM () Bool (and cond_at_165 path_cond_to_43_ASM))
(define-fun query_load-word32stack_for.10 () (_ BitVec 32) (load-word32 stack_for_39_top (bvadd r3_after_162 #x00000004)))
(define-fun query_bvaddr3_after_162_x0 () (_ BitVec 32) (bvadd r3_after_162 #x00000004))
(define-fun query_load-word32stack_for.11 () (_ BitVec 32) (load-word32 stack_for_39_bot (bvadd r3_after_162 #x00000004)))
(define-fun split_mem_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_39 (bvadd r3_after_162 #x00000004)) (store-word32 stack_for_39_top (bvadd r3_after_162 #x00000004) r1_after_43) stack_for_39_top))
(define-fun query_load-word32split_mem () (_ BitVec 32) (load-word32 split_mem_top r3_after_162))
(define-fun query_r3_after_162 () (_ BitVec 32) r3_after_162)
(define-fun split_mem_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_39 (bvadd r3_after_162 #x00000004)) stack_for_39_bot (store-word32 stack_for_39_bot (bvadd r3_after_162 #x00000004) r1_after_43)))
(define-fun query_load-word32split_mem.1 () (_ BitVec 32) (load-word32 split_mem_bot r3_after_162))
(define-fun stack_after_44_split () (_ BitVec 32) r13_after_39)
(define-fun stack_after_44_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_39 r3_after_162) (store-word32 split_mem_top r3_after_162 r0_after_43) split_mem_top))
(define-fun stack_after_44_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_39 r3_after_162) split_mem_bot (store-word32 split_mem_bot r3_after_162 r0_after_43)))
(define-fun r3_after_167 () (_ BitVec 32) (bvand r0_after_43 #x0000000e))
(define-fun v_after_168 () Bool (and (not (word32-eq (bvand r3_after_167 #x80000000) #x00000000)) (not (= (not (word32-eq (bvand r3_after_167 #x80000000) #x00000000)) (not (word32-eq (bvand (bvadd r3_after_167 #xfffffff2) #x80000000) #x00000000))))))
(define-fun c_after_168 () Bool (not (= (bvand (bvadd (bvadd ((_ zero_extend 32) r3_after_167) ((_ zero_extend 32) #xfffffff1)) #x0000000000000001) #x0000000100000000) #x0000000000000000)))
(define-fun z_after_168 () Bool (word32-eq r3_after_167 #x0000000e))
(define-fun n_after_168 () Bool (not (word32-eq (bvand (bvadd r3_after_167 #xfffffff2) #x80000000) #x00000000)))
(define-fun cond_at_169 () Bool (not z_after_168))
(define-fun path_cond_to_46_ASM () Bool (and (not cond_at_169) path_cond_to_44_ASM))
(define-fun path_cond_to_45_ASM () Bool (and cond_at_169 path_cond_to_44_ASM))
(define-fun r3_after_45 () (_ BitVec 32) (bvand r0_after_43 #x0000000f))
(define-fun path_cond_to_170_ASM () Bool (or path_cond_to_45_ASM path_cond_to_46_ASM))
(define-fun cond_at_170 () Bool z_after_168)
(define-fun path_cond_to_48_ASM () Bool (and (not cond_at_170) path_cond_to_170_ASM))
(define-fun path_cond_to_47_ASM () Bool (and cond_at_170 path_cond_to_170_ASM))
(define-fun r3_after_47 () (_ BitVec 32) ((_ zero_extend 24) ((_ extract 7 0) r0_after_43)))
(define-fun path_cond_to_171_ASM () Bool (or path_cond_to_47_ASM path_cond_to_48_ASM))
(define-fun r3_v_at_171 () (_ BitVec 32) (ite path_cond_to_48_ASM (ite path_cond_to_45_ASM r3_after_45 r3_after_167) r3_after_47))
(define-fun v_after_171 () Bool (and (not (word32-eq (bvand r3_v_at_171 #x80000000) #x00000000)) (not (= (not (word32-eq (bvand r3_v_at_171 #x80000000) #x00000000)) (not (word32-eq (bvand (bvadd r3_v_at_171 #xfffffff6) #x80000000) #x00000000))))))
(define-fun c_after_171 () Bool (not (= (bvand (bvadd (bvadd ((_ zero_extend 32) r3_v_at_171) ((_ zero_extend 32) #xfffffff5)) #x0000000000000001) #x0000000100000000) #x0000000000000000)))
(define-fun z_after_171 () Bool (word32-eq r3_v_at_171 #x0000000a))
(define-fun n_after_171 () Bool (not (word32-eq (bvand (bvadd r3_v_at_171 #xfffffff6) #x80000000) #x00000000)))
(define-fun cond_at_172 () Bool z_after_171)
(define-fun path_cond_to_49_ASM () Bool (and cond_at_172 path_cond_to_171_ASM))
(define-fun v_after_178 () Bool false)
(define-fun c_after_178 () Bool (not (= (bvand (bvadd (bvadd ((_ zero_extend 32) r10_after_39) ((_ zero_extend 32) #xffffffff)) #x0000000000000001) #x0000000100000000) #x0000000000000000)))
(define-fun z_after_178 () Bool (word32-eq r10_after_39 #x00000000))
(define-fun n_after_178 () Bool (not (word32-eq (bvand r10_after_39 #x80000000) #x00000000)))
(define-fun cond_at_179 () Bool z_after_178)
(define-fun path_cond_to_52_ASM () Bool (and cond_at_179 path_cond_to_49_ASM))
(define-fun path_cond_to_53_ASM () Bool (and (not cond_at_179) path_cond_to_49_ASM))
(define-fun cond_at_180 () Bool (and (and (word32-eq (bvand r13_after_39 #x00000001) #x00000000) (word32-eq (bvand r13_after_39 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_54_ASM () Bool (and cond_at_180 path_cond_to_53_ASM))
(define-fun query_bvaddr13_after_39_x0.1 () (_ BitVec 32) (bvadd r13_after_39 #x00000054))
(define-fun query_load-word32stack_aft.13 () (_ BitVec 32) (load-word32 stack_after_44_top (bvadd r13_after_39 #x00000054)))
(define-fun query_load-word32stack_aft.14 () (_ BitVec 32) (load-word32 stack_after_44_bot (bvadd r13_after_39 #x00000054)))
(define-fun r3_after_54 () (_ BitVec 32) (ite (bvule stack_after_44_split (bvadd r13_after_39 #x00000054)) (load-word32 stack_after_44_top (bvadd r13_after_39 #x00000054)) (load-word32 stack_after_44_bot (bvadd r13_after_39 #x00000054))))
(define-fun cond_at_181 () Bool (and true (and (and (word32-eq (bvand r13_after_39 #x00000001) #x00000000) (word32-eq (bvand r13_after_39 #x00000002) #x00000000)) (and true (and true true)))))
(define-fun path_cond_to_55_ASM () Bool (and cond_at_181 path_cond_to_54_ASM))
(define-fun query_load-word32stack_aft.15 () (_ BitVec 32) (load-word32 stack_after_44_top r13_after_39))
(define-fun query_r13_after_39 () (_ BitVec 32) r13_after_39)
(define-fun query_load-word32stack_aft.16 () (_ BitVec 32) (load-word32 stack_after_44_bot r13_after_39))
(define-fun stack_after_55_split () (_ BitVec 32) stack_after_44_split)
(define-fun stack_after_55_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_44_split r13_after_39) (store-word32 stack_after_44_top r13_after_39 r3_after_54) stack_after_44_top))
(define-fun stack_after_55_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_44_split r13_after_39) stack_after_44_bot (store-word32 stack_after_44_bot r13_after_39 r3_after_54)))
(define-fun cond_at_182 () Bool (and (and (word32-eq (bvand r13_after_39 #x00000001) #x00000000) (word32-eq (bvand r13_after_39 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_56_ASM () Bool (and cond_at_182 path_cond_to_55_ASM))
(define-fun query_bvaddr13_after_39_x0.2 () (_ BitVec 32) (bvadd r13_after_39 #x00000050))
(define-fun query_load-word32stack_aft.17 () (_ BitVec 32) (load-word32 stack_after_55_top (bvadd r13_after_39 #x00000050)))
(define-fun query_load-word32stack_aft.18 () (_ BitVec 32) (load-word32 stack_after_55_bot (bvadd r13_after_39 #x00000050)))
(define-fun r3_after_56 () (_ BitVec 32) (ite (bvule stack_after_55_split (bvadd r13_after_39 #x00000050)) (load-word32 stack_after_55_top (bvadd r13_after_39 #x00000050)) (load-word32 stack_after_55_bot (bvadd r13_after_39 #x00000050))))
(define-fun r1_after_184 () (_ BitVec 32) #x00000000)
(define-fun r0_after_185 () (_ BitVec 32) (bvadd r13_after_39 #x00000050))
(declare-fun updateCapData_success_at_57 () Bool)
(declare-fun r0_after_57 () (_ BitVec 32))
(declare-fun r1_after_57 () (_ BitVec 32))
(declare-fun r2_after_57 () (_ BitVec 32))
(declare-fun r3_after_57 () (_ BitVec 32))
(declare-fun r4_after_57 () (_ BitVec 32))
(declare-fun r5_after_57 () (_ BitVec 32))
(declare-fun r6_after_57 () (_ BitVec 32))
(declare-fun r7_after_57 () (_ BitVec 32))
(declare-fun r8_after_57 () (_ BitVec 32))
(declare-fun r9_after_57 () (_ BitVec 32))
(declare-fun r10_after_57 () (_ BitVec 32))
(declare-fun r11_after_57 () (_ BitVec 32))
(declare-fun r12_after_57 () (_ BitVec 32))
(declare-fun r13_after_57 () (_ BitVec 32))
(declare-fun r14_after_57 () (_ BitVec 32))
(declare-fun r15_after_57 () (_ BitVec 32))
(declare-fun r16_after_57 () (_ BitVec 32))
(declare-fun r17_after_57 () (_ BitVec 32))
(declare-fun r18_after_57 () (_ BitVec 32))
(declare-fun r19_after_57 () (_ BitVec 32))
(declare-fun r20_after_57 () (_ BitVec 32))
(declare-fun r21_after_57 () (_ BitVec 32))
(declare-fun r22_after_57 () (_ BitVec 32))
(declare-fun r23_after_57 () (_ BitVec 32))
(declare-fun r24_after_57 () (_ BitVec 32))
(declare-fun r25_after_57 () (_ BitVec 32))
(declare-fun r26_after_57 () (_ BitVec 32))
(declare-fun r27_after_57 () (_ BitVec 32))
(declare-fun r28_after_57 () (_ BitVec 32))
(declare-fun r29_after_57 () (_ BitVec 32))
(declare-fun r30_after_57 () (_ BitVec 32))
(declare-fun r31_after_57 () (_ BitVec 32))
(declare-fun mode_after_57 () (_ BitVec 32))
(declare-fun n_after_57 () Bool)
(declare-fun z_after_57 () Bool)
(declare-fun c_after_57 () Bool)
(declare-fun v_after_57 () Bool)
(declare-fun mem_after_57 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_after_57 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun stack_after_57 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_stack_after_57 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun clock_after_57 () (_ BitVec 64))
(declare-fun ret_addr_input_ignore_after_57 () (_ BitVec 32))
(declare-fun stack_for_57_bot () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun stack_for_57_top () (Array (_ BitVec 30) (_ BitVec 32)))
(define-fun path_cond_to_187_ASM () Bool (or path_cond_to_56_ASM path_cond_to_52_ASM))
(define-fun ret_addr_input_ignore_v_at_187 () (_ BitVec 32) (ite path_cond_to_56_ASM ret_addr_input_ignore_after_57 ret_addr_input_ignore_after_39))
(define-fun r3_after_187 () (_ BitVec 32) (bvadd (ite path_cond_to_56_ASM r13_after_57 r13_after_39) #x00000050))
(define-fun cond_at_188 () Bool (and true (and (and (word32-eq (bvand r3_after_187 #x00000001) #x00000000) (word32-eq (bvand r3_after_187 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_58_ASM () Bool (and cond_at_188 path_cond_to_187_ASM))
(define-fun query_bvaddr3_after_187_x0 () (_ BitVec 32) (bvadd r3_after_187 #x00000004))
(define-fun query_load-word32itepath_c.2 () (_ BitVec 32) (load-word32 (ite path_cond_to_56_ASM stack_for_57_top stack_after_44_top) (bvadd r3_after_187 #x00000004)))
(define-fun query_load-word32itepath_c.3 () (_ BitVec 32) (load-word32 (ite path_cond_to_56_ASM stack_for_57_bot stack_after_44_bot) (bvadd r3_after_187 #x00000004)))
(define-fun r3_after_58 () (_ BitVec 32) (ite (bvule (ite path_cond_to_56_ASM r13_after_57 stack_after_44_split) (bvadd r3_after_187 #x00000004)) (load-word32 (ite path_cond_to_56_ASM stack_for_57_top stack_after_44_top) (bvadd r3_after_187 #x00000004)) (load-word32 (ite path_cond_to_56_ASM stack_for_57_bot stack_after_44_bot) (bvadd r3_after_187 #x00000004))))
(define-fun query_r3_after_187 () (_ BitVec 32) r3_after_187)
(define-fun query_load-word32itepath_c.4 () (_ BitVec 32) (load-word32 (ite path_cond_to_56_ASM stack_for_57_top stack_after_44_top) r3_after_187))
(define-fun query_load-word32itepath_c.5 () (_ BitVec 32) (load-word32 (ite path_cond_to_56_ASM stack_for_57_bot stack_after_44_bot) r3_after_187))
(define-fun r2_after_58 () (_ BitVec 32) (ite (bvule (ite path_cond_to_56_ASM r13_after_57 stack_after_44_split) r3_after_187) (load-word32 (ite path_cond_to_56_ASM stack_for_57_top stack_after_44_top) r3_after_187) (load-word32 (ite path_cond_to_56_ASM stack_for_57_bot stack_after_44_bot) r3_after_187)))
(define-fun r0_after_190 () (_ BitVec 32) (bvadd (ite path_cond_to_56_ASM r13_after_57 r13_after_39) #x00000044))
(declare-fun deriveCap_success_at_59 () Bool)
(declare-fun r0_after_59 () (_ BitVec 32))
(declare-fun r1_after_59 () (_ BitVec 32))
(declare-fun r2_after_59 () (_ BitVec 32))
(declare-fun r3_after_59 () (_ BitVec 32))
(declare-fun r4_after_59 () (_ BitVec 32))
(declare-fun r5_after_59 () (_ BitVec 32))
(declare-fun r6_after_59 () (_ BitVec 32))
(declare-fun r7_after_59 () (_ BitVec 32))
(declare-fun r8_after_59 () (_ BitVec 32))
(declare-fun r9_after_59 () (_ BitVec 32))
(declare-fun r10_after_59 () (_ BitVec 32))
(declare-fun r11_after_59 () (_ BitVec 32))
(declare-fun r12_after_59 () (_ BitVec 32))
(declare-fun r13_after_59 () (_ BitVec 32))
(declare-fun r14_after_59 () (_ BitVec 32))
(declare-fun r15_after_59 () (_ BitVec 32))
(declare-fun r16_after_59 () (_ BitVec 32))
(declare-fun r17_after_59 () (_ BitVec 32))
(declare-fun r18_after_59 () (_ BitVec 32))
(declare-fun r19_after_59 () (_ BitVec 32))
(declare-fun r20_after_59 () (_ BitVec 32))
(declare-fun r21_after_59 () (_ BitVec 32))
(declare-fun r22_after_59 () (_ BitVec 32))
(declare-fun r23_after_59 () (_ BitVec 32))
(declare-fun r24_after_59 () (_ BitVec 32))
(declare-fun r25_after_59 () (_ BitVec 32))
(declare-fun r26_after_59 () (_ BitVec 32))
(declare-fun r27_after_59 () (_ BitVec 32))
(declare-fun r28_after_59 () (_ BitVec 32))
(declare-fun r29_after_59 () (_ BitVec 32))
(declare-fun r30_after_59 () (_ BitVec 32))
(declare-fun r31_after_59 () (_ BitVec 32))
(declare-fun mode_after_59 () (_ BitVec 32))
(declare-fun n_after_59 () Bool)
(declare-fun z_after_59 () Bool)
(declare-fun c_after_59 () Bool)
(declare-fun v_after_59 () Bool)
(declare-fun mem_after_59 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_after_59 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun stack_after_59 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_stack_after_59 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun clock_after_59 () (_ BitVec 64))
(declare-fun ret_addr_input_ignore_after_59 () (_ BitVec 32))
(declare-fun stack_for_59_bot () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun stack_for_59_top () (Array (_ BitVec 30) (_ BitVec 32)))
(define-fun cond_at_192 () Bool (and (and (word32-eq (bvand r13_after_59 #x00000001) #x00000000) (word32-eq (bvand r13_after_59 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_60_ASM () Bool (and cond_at_192 path_cond_to_58_ASM))
(define-fun query_bvaddr13_after_59_x0 () (_ BitVec 32) (bvadd r13_after_59 #x00000044))
(define-fun query_load-word32stack_for.12 () (_ BitVec 32) (load-word32 stack_for_59_top (bvadd r13_after_59 #x00000044)))
(define-fun query_load-word32stack_for.13 () (_ BitVec 32) (load-word32 stack_for_59_bot (bvadd r13_after_59 #x00000044)))
(define-fun r0_after_60 () (_ BitVec 32) (ite (bvule r13_after_59 (bvadd r13_after_59 #x00000044)) (load-word32 stack_for_59_top (bvadd r13_after_59 #x00000044)) (load-word32 stack_for_59_bot (bvadd r13_after_59 #x00000044))))
(define-fun v_after_193 () Bool false)
(define-fun c_after_193 () Bool (not (= (bvand (bvadd (bvadd ((_ zero_extend 32) r0_after_60) ((_ zero_extend 32) #xffffffff)) #x0000000000000001) #x0000000100000000) #x0000000000000000)))
(define-fun z_after_193 () Bool (word32-eq r0_after_60 #x00000000))
(define-fun n_after_193 () Bool (not (word32-eq (bvand r0_after_60 #x80000000) #x00000000)))
(define-fun cond_at_194 () Bool (not z_after_193))
(define-fun path_cond_to_61_ASM () Bool (and cond_at_194 path_cond_to_60_ASM))
(define-fun path_cond_to_25_ASM () Bool (and (not cond_at_132) path_cond_to_22_ASM))
(define-fun path_cond_to_28_ASM () Bool (and cond_at_141 path_cond_to_24_ASM))
(define-fun path_cond_to_133_ASM () Bool (or path_cond_to_28_ASM path_cond_to_25_ASM))
(define-fun ret_addr_input_ignore_v_at_133 () (_ BitVec 32) (ite path_cond_to_28_ASM ret_addr_input_ignore_after_27 ret_addr_input_ignore_after_23))
(define-fun r3_after_133 () (_ BitVec 32) #x0000c000)
(define-fun r3_after_134 () (_ BitVec 32) (bvor #xe0010000 (bvlshr (bvshl r3_after_133 #x00000010) #x00000010)))
(define-fun r0_after_135 () (_ BitVec 32) #x00000003)
(define-fun cond_at_136 () Bool (and (and (word32-eq (bvand r3_after_134 #x00000001) #x00000000) (word32-eq (bvand r3_after_134 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_26_ASM () Bool (and cond_at_136 path_cond_to_133_ASM))
(define-fun query_load-word32itepath_c.6 () (_ BitVec 32) (load-word32 (ite path_cond_to_25_ASM mem_after_23 mem_after_27) (bvadd r3_after_134 #x00000624)))
(define-fun query_bvaddr3_after_134_x0 () (_ BitVec 32) (bvadd r3_after_134 #x00000624))
(define-fun mem_after_26 () (Array (_ BitVec 30) (_ BitVec 32)) (store-word32 (ite path_cond_to_25_ASM mem_after_23 mem_after_27) (bvadd r3_after_134 #x00000624) r0_after_135))
(define-fun path_cond_to_50_ASM () Bool (and (not cond_at_172) path_cond_to_171_ASM))
(define-fun r3_after_173 () (_ BitVec 32) #x0000c000)
(define-fun r3_after_174 () (_ BitVec 32) (bvor #xe0010000 (bvlshr (bvshl r3_after_173 #x00000010) #x00000010)))
(define-fun r0_after_175 () (_ BitVec 32) #x00000003)
(define-fun cond_at_176 () Bool (and (and (word32-eq (bvand r3_after_174 #x00000001) #x00000000) (word32-eq (bvand r3_after_174 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_51_ASM () Bool (and cond_at_176 path_cond_to_50_ASM))
(define-fun query_load-word32mem_after () (_ BitVec 32) (load-word32 mem_after_39 (bvadd r3_after_174 #x00000624)))
(define-fun query_bvaddr3_after_174_x0 () (_ BitVec 32) (bvadd r3_after_174 #x00000624))
(define-fun mem_after_51 () (Array (_ BitVec 30) (_ BitVec 32)) (store-word32 mem_after_39 (bvadd r3_after_174 #x00000624) r0_after_175))
(define-fun path_cond_to_62_ASM () Bool (and (not cond_at_194) path_cond_to_60_ASM))
(define-fun r3_after_195 () (_ BitVec 32) (bvadd r13_after_59 #x00000050))
(define-fun r2_after_196 () (_ BitVec 32) (bvadd r13_after_59 #x00000048))
(define-fun cond_at_197 () Bool (and true (and (and (word32-eq (bvand r2_after_196 #x00000001) #x00000000) (word32-eq (bvand r2_after_196 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_63_ASM () Bool (and cond_at_197 path_cond_to_62_ASM))
(define-fun query_bvaddr2_after_196_x0 () (_ BitVec 32) (bvadd r2_after_196 #x00000004))
(define-fun query_load-word32stack_for.14 () (_ BitVec 32) (load-word32 stack_for_59_top (bvadd r2_after_196 #x00000004)))
(define-fun query_load-word32stack_for.15 () (_ BitVec 32) (load-word32 stack_for_59_bot (bvadd r2_after_196 #x00000004)))
(define-fun r1_after_63 () (_ BitVec 32) (ite (bvule r13_after_59 (bvadd r2_after_196 #x00000004)) (load-word32 stack_for_59_top (bvadd r2_after_196 #x00000004)) (load-word32 stack_for_59_bot (bvadd r2_after_196 #x00000004))))
(define-fun query_r2_after_196 () (_ BitVec 32) r2_after_196)
(define-fun query_load-word32stack_for.16 () (_ BitVec 32) (load-word32 stack_for_59_top r2_after_196))
(define-fun query_load-word32stack_for.17 () (_ BitVec 32) (load-word32 stack_for_59_bot r2_after_196))
(define-fun r0_after_63 () (_ BitVec 32) (ite (bvule r13_after_59 r2_after_196) (load-word32 stack_for_59_top r2_after_196) (load-word32 stack_for_59_bot r2_after_196)))
(define-fun cond_at_198 () Bool (and true (and (and (word32-eq (bvand r3_after_195 #x00000001) #x00000000) (word32-eq (bvand r3_after_195 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_64_ASM () Bool (and cond_at_198 path_cond_to_63_ASM))
(define-fun query_load-word32stack_for.18 () (_ BitVec 32) (load-word32 stack_for_59_top (bvadd r3_after_195 #x00000004)))
(define-fun query_bvaddr3_after_195_x0 () (_ BitVec 32) (bvadd r3_after_195 #x00000004))
(define-fun query_load-word32stack_for.19 () (_ BitVec 32) (load-word32 stack_for_59_bot (bvadd r3_after_195 #x00000004)))
(define-fun split_mem_top.1 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_59 (bvadd r3_after_195 #x00000004)) (store-word32 stack_for_59_top (bvadd r3_after_195 #x00000004) r1_after_63) stack_for_59_top))
(define-fun query_load-word32split_mem.2 () (_ BitVec 32) (load-word32 split_mem_top.1 r3_after_195))
(define-fun query_r3_after_195 () (_ BitVec 32) r3_after_195)
(define-fun split_mem_bot.1 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_59 (bvadd r3_after_195 #x00000004)) stack_for_59_bot (store-word32 stack_for_59_bot (bvadd r3_after_195 #x00000004) r1_after_63)))
(define-fun query_load-word32split_mem.3 () (_ BitVec 32) (load-word32 split_mem_bot.1 r3_after_195))
(define-fun stack_after_64_split () (_ BitVec 32) r13_after_59)
(define-fun stack_after_64_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_59 r3_after_195) (store-word32 split_mem_top.1 r3_after_195 r0_after_63) split_mem_top.1))
(define-fun stack_after_64_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_59 r3_after_195) split_mem_bot.1 (store-word32 split_mem_bot.1 r3_after_195 r0_after_63)))
(declare-fun isValidVTableRoot_success_at_65 () Bool)
(declare-fun r0_after_65 () (_ BitVec 32))
(declare-fun r1_after_65 () (_ BitVec 32))
(declare-fun r2_after_65 () (_ BitVec 32))
(declare-fun r3_after_65 () (_ BitVec 32))
(declare-fun r4_after_65 () (_ BitVec 32))
(declare-fun r5_after_65 () (_ BitVec 32))
(declare-fun r6_after_65 () (_ BitVec 32))
(declare-fun r7_after_65 () (_ BitVec 32))
(declare-fun r8_after_65 () (_ BitVec 32))
(declare-fun r9_after_65 () (_ BitVec 32))
(declare-fun r10_after_65 () (_ BitVec 32))
(declare-fun r11_after_65 () (_ BitVec 32))
(declare-fun r12_after_65 () (_ BitVec 32))
(declare-fun r13_after_65 () (_ BitVec 32))
(declare-fun r14_after_65 () (_ BitVec 32))
(declare-fun r15_after_65 () (_ BitVec 32))
(declare-fun r16_after_65 () (_ BitVec 32))
(declare-fun r17_after_65 () (_ BitVec 32))
(declare-fun r18_after_65 () (_ BitVec 32))
(declare-fun r19_after_65 () (_ BitVec 32))
(declare-fun r20_after_65 () (_ BitVec 32))
(declare-fun r21_after_65 () (_ BitVec 32))
(declare-fun r22_after_65 () (_ BitVec 32))
(declare-fun r23_after_65 () (_ BitVec 32))
(declare-fun r24_after_65 () (_ BitVec 32))
(declare-fun r25_after_65 () (_ BitVec 32))
(declare-fun r26_after_65 () (_ BitVec 32))
(declare-fun r27_after_65 () (_ BitVec 32))
(declare-fun r28_after_65 () (_ BitVec 32))
(declare-fun r29_after_65 () (_ BitVec 32))
(declare-fun r30_after_65 () (_ BitVec 32))
(declare-fun r31_after_65 () (_ BitVec 32))
(declare-fun mode_after_65 () (_ BitVec 32))
(declare-fun n_after_65 () Bool)
(declare-fun z_after_65 () Bool)
(declare-fun c_after_65 () Bool)
(declare-fun v_after_65 () Bool)
(declare-fun mem_after_65 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_after_65 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun stack_after_65 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_stack_after_65 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun clock_after_65 () (_ BitVec 64))
(declare-fun ret_addr_input_ignore_after_65 () (_ BitVec 32))
(declare-fun stack_for_65_bot () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun stack_for_65_top () (Array (_ BitVec 30) (_ BitVec 32)))
(define-fun v_after_200 () Bool false)
(define-fun c_after_200 () Bool (not (= (bvand (bvadd (bvadd ((_ zero_extend 32) r0_after_65) ((_ zero_extend 32) #xffffffff)) #x0000000000000001) #x0000000100000000) #x0000000000000000)))
(define-fun z_after_200 () Bool (word32-eq r0_after_65 #x00000000))
(define-fun n_after_200 () Bool (not (word32-eq (bvand r0_after_65 #x80000000) #x00000000)))
(define-fun cond_at_201 () Bool (not z_after_200))
(define-fun path_cond_to_67_ASM () Bool (and (not cond_at_201) path_cond_to_64_ASM))
(define-fun r3_after_202 () (_ BitVec 32) #x0000c000)
(define-fun r3_after_203 () (_ BitVec 32) (bvor #xe0010000 (bvlshr (bvshl r3_after_202 #x00000010) #x00000010)))
(define-fun r0_after_204 () (_ BitVec 32) #x00000003)
(define-fun cond_at_205 () Bool (and (and (word32-eq (bvand r3_after_203 #x00000001) #x00000000) (word32-eq (bvand r3_after_203 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_68_ASM () Bool (and cond_at_205 path_cond_to_67_ASM))
(define-fun query_load-word32mem_after.1 () (_ BitVec 32) (load-word32 mem_after_65 (bvadd r3_after_203 #x00000624)))
(define-fun query_bvaddr3_after_203_x0 () (_ BitVec 32) (bvadd r3_after_203 #x00000624))
(define-fun mem_after_68 () (Array (_ BitVec 30) (_ BitVec 32)) (store-word32 mem_after_65 (bvadd r3_after_203 #x00000624) r0_after_204))
(define-fun path_cond_to_66_ASM () Bool (and cond_at_201 path_cond_to_64_ASM))
(define-fun r3_after_207 () (_ BitVec 32) #x0000c000)
(define-fun r3_after_208 () (_ BitVec 32) (bvor #xe0010000 (bvlshr (bvshl r3_after_207 #x00000010) #x00000010)))
(define-fun r1_after_209 () (_ BitVec 32) #x00000002)
(define-fun cond_at_210 () Bool (and (and (word32-eq (bvand r3_after_208 #x00000001) #x00000000) (word32-eq (bvand r3_after_208 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_69_ASM () Bool (and cond_at_210 path_cond_to_66_ASM))
(define-fun query_bvaddr3_after_208_x0 () (_ BitVec 32) (bvadd r3_after_208 #x00000600))
(define-fun query_load-word32mem_after.2 () (_ BitVec 32) (load-word32 mem_after_65 (bvadd r3_after_208 #x00000600)))
(define-fun r0_after_69 () (_ BitVec 32) (load-word32 mem_after_65 (bvadd r3_after_208 #x00000600)))
(declare-fun setThreadState_success_at_70 () Bool)
(declare-fun r0_after_70 () (_ BitVec 32))
(declare-fun r1_after_70 () (_ BitVec 32))
(declare-fun r2_after_70 () (_ BitVec 32))
(declare-fun r3_after_70 () (_ BitVec 32))
(declare-fun r4_after_70 () (_ BitVec 32))
(declare-fun r5_after_70 () (_ BitVec 32))
(declare-fun r6_after_70 () (_ BitVec 32))
(declare-fun r7_after_70 () (_ BitVec 32))
(declare-fun r8_after_70 () (_ BitVec 32))
(declare-fun r9_after_70 () (_ BitVec 32))
(declare-fun r10_after_70 () (_ BitVec 32))
(declare-fun r11_after_70 () (_ BitVec 32))
(declare-fun r12_after_70 () (_ BitVec 32))
(declare-fun r13_after_70 () (_ BitVec 32))
(declare-fun r14_after_70 () (_ BitVec 32))
(declare-fun r15_after_70 () (_ BitVec 32))
(declare-fun r16_after_70 () (_ BitVec 32))
(declare-fun r17_after_70 () (_ BitVec 32))
(declare-fun r18_after_70 () (_ BitVec 32))
(declare-fun r19_after_70 () (_ BitVec 32))
(declare-fun r20_after_70 () (_ BitVec 32))
(declare-fun r21_after_70 () (_ BitVec 32))
(declare-fun r22_after_70 () (_ BitVec 32))
(declare-fun r23_after_70 () (_ BitVec 32))
(declare-fun r24_after_70 () (_ BitVec 32))
(declare-fun r25_after_70 () (_ BitVec 32))
(declare-fun r26_after_70 () (_ BitVec 32))
(declare-fun r27_after_70 () (_ BitVec 32))
(declare-fun r28_after_70 () (_ BitVec 32))
(declare-fun r29_after_70 () (_ BitVec 32))
(declare-fun r30_after_70 () (_ BitVec 32))
(declare-fun r31_after_70 () (_ BitVec 32))
(declare-fun mode_after_70 () (_ BitVec 32))
(declare-fun n_after_70 () Bool)
(declare-fun z_after_70 () Bool)
(declare-fun c_after_70 () Bool)
(declare-fun v_after_70 () Bool)
(declare-fun mem_after_70 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_after_70 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun stack_after_70 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_stack_after_70 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun clock_after_70 () (_ BitVec 64))
(declare-fun ret_addr_input_ignore_after_70 () (_ BitVec 32))
(declare-fun stack_for_70_bot () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun stack_for_70_top () (Array (_ BitVec 30) (_ BitVec 32)))
(define-fun r3_after_212 () (_ BitVec 32) #x00000000)
(define-fun cond_at_213 () Bool (and (and (word32-eq (bvand r13_after_70 #x00000001) #x00000000) (word32-eq (bvand r13_after_70 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_71_ASM () Bool (and cond_at_213 path_cond_to_69_ASM))
(define-fun query_load-word32stack_for.20 () (_ BitVec 32) (load-word32 stack_for_70_top (bvadd r13_after_70 #x00000060)))
(define-fun query_bvaddr13_after_70_x0 () (_ BitVec 32) (bvadd r13_after_70 #x00000060))
(define-fun query_load-word32stack_for.21 () (_ BitVec 32) (load-word32 stack_for_70_bot (bvadd r13_after_70 #x00000060)))
(define-fun stack_after_71_split () (_ BitVec 32) r13_after_70)
(define-fun stack_after_71_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_70 (bvadd r13_after_70 #x00000060)) (store-word32 stack_for_70_top (bvadd r13_after_70 #x00000060) r3_after_212) stack_for_70_top))
(define-fun stack_after_71_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_70 (bvadd r13_after_70 #x00000060)) stack_for_70_bot (store-word32 stack_for_70_bot (bvadd r13_after_70 #x00000060) r3_after_212)))
(define-fun cond_at_214 () Bool (and (and (word32-eq (bvand r13_after_70 #x00000001) #x00000000) (word32-eq (bvand r13_after_70 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_72_ASM () Bool (and cond_at_214 path_cond_to_71_ASM))
(define-fun query_load-word32stack_aft.19 () (_ BitVec 32) (load-word32 stack_after_71_top (bvadd r13_after_70 #x00000064)))
(define-fun query_bvaddr13_after_70_x0.1 () (_ BitVec 32) (bvadd r13_after_70 #x00000064))
(define-fun query_load-word32stack_aft.20 () (_ BitVec 32) (load-word32 stack_after_71_bot (bvadd r13_after_70 #x00000064)))
(define-fun stack_after_72_split () (_ BitVec 32) stack_after_71_split)
(define-fun stack_after_72_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_71_split (bvadd r13_after_70 #x00000064)) (store-word32 stack_after_71_top (bvadd r13_after_70 #x00000064) r3_after_212) stack_after_71_top))
(define-fun stack_after_72_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_71_split (bvadd r13_after_70 #x00000064)) stack_after_71_bot (store-word32 stack_after_71_bot (bvadd r13_after_70 #x00000064) r3_after_212)))
(define-fun cond_at_215 () Bool (and (and (word32-eq (bvand r13_after_70 #x00000001) #x00000000) (word32-eq (bvand r13_after_70 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_73_ASM () Bool (and cond_at_215 path_cond_to_72_ASM))
(define-fun query_load-word32stack_aft.21 () (_ BitVec 32) (load-word32 stack_after_72_top (bvadd r13_after_70 #x00000058)))
(define-fun query_bvaddr13_after_70_x0.2 () (_ BitVec 32) (bvadd r13_after_70 #x00000058))
(define-fun query_load-word32stack_aft.22 () (_ BitVec 32) (load-word32 stack_after_72_bot (bvadd r13_after_70 #x00000058)))
(define-fun stack_after_73_split () (_ BitVec 32) stack_after_72_split)
(define-fun stack_after_73_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_72_split (bvadd r13_after_70 #x00000058)) (store-word32 stack_after_72_top (bvadd r13_after_70 #x00000058) r6_after_70) stack_after_72_top))
(define-fun stack_after_73_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_72_split (bvadd r13_after_70 #x00000058)) stack_after_72_bot (store-word32 stack_after_72_bot (bvadd r13_after_70 #x00000058) r6_after_70)))
(define-fun r2_after_216 () (_ BitVec 32) #x00000004)
(define-fun cond_at_217 () Bool (and (and (word32-eq (bvand r13_after_70 #x00000001) #x00000000) (word32-eq (bvand r13_after_70 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_74_ASM () Bool (and cond_at_217 path_cond_to_73_ASM))
(define-fun query_load-word32stack_aft.23 () (_ BitVec 32) (load-word32 stack_after_73_top (bvadd r13_after_70 #x0000002c)))
(define-fun query_bvaddr13_after_70_x0.3 () (_ BitVec 32) (bvadd r13_after_70 #x0000002c))
(define-fun query_load-word32stack_aft.24 () (_ BitVec 32) (load-word32 stack_after_73_bot (bvadd r13_after_70 #x0000002c)))
(define-fun stack_after_74_split () (_ BitVec 32) stack_after_73_split)
(define-fun stack_after_74_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_73_split (bvadd r13_after_70 #x0000002c)) (store-word32 stack_after_73_top (bvadd r13_after_70 #x0000002c) r2_after_216) stack_after_73_top))
(define-fun stack_after_74_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_73_split (bvadd r13_after_70 #x0000002c)) stack_after_73_bot (store-word32 stack_after_73_bot (bvadd r13_after_70 #x0000002c) r2_after_216)))
(define-fun cond_at_218 () Bool (and (and (word32-eq (bvand r13_after_70 #x00000001) #x00000000) (word32-eq (bvand r13_after_70 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_75_ASM () Bool (and cond_at_218 path_cond_to_74_ASM))
(define-fun query_load-word32stack_aft.25 () (_ BitVec 32) (load-word32 stack_after_74_top (bvadd r13_after_70 #x00000028)))
(define-fun query_bvaddr13_after_70_x0.4 () (_ BitVec 32) (bvadd r13_after_70 #x00000028))
(define-fun query_load-word32stack_aft.26 () (_ BitVec 32) (load-word32 stack_after_74_bot (bvadd r13_after_70 #x00000028)))
(define-fun stack_after_75_split () (_ BitVec 32) stack_after_74_split)
(define-fun stack_after_75_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_74_split (bvadd r13_after_70 #x00000028)) (store-word32 stack_after_74_top (bvadd r13_after_70 #x00000028) r3_after_212) stack_after_74_top))
(define-fun stack_after_75_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_74_split (bvadd r13_after_70 #x00000028)) stack_after_74_bot (store-word32 stack_after_74_bot (bvadd r13_after_70 #x00000028) r3_after_212)))
(define-fun r2_after_219 () (_ BitVec 32) (bvadd r13_after_70 #x00000020))
(define-fun r1_after_220 () (_ BitVec 32) (bvadd r13_after_70 #x00000068))
(define-fun cond_at_221 () Bool (and (and (word32-eq (bvand r1_after_220 #x00000001) #x00000000) (word32-eq (bvand r1_after_220 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_76_ASM () Bool (and cond_at_221 path_cond_to_75_ASM))
(define-fun query_bvaddr1_after_220_xf () (_ BitVec 32) (bvadd r1_after_220 #xfffffffc))
(define-fun query_load-word32stack_aft.27 () (_ BitVec 32) (load-word32 stack_after_75_top (bvadd r1_after_220 #xfffffffc)))
(define-fun query_load-word32stack_aft.28 () (_ BitVec 32) (load-word32 stack_after_75_bot (bvadd r1_after_220 #xfffffffc)))
(define-fun r1_after_76 () (_ BitVec 32) (ite (bvule stack_after_75_split (bvadd r1_after_220 #xfffffffc)) (load-word32 stack_after_75_top (bvadd r1_after_220 #xfffffffc)) (load-word32 stack_after_75_bot (bvadd r1_after_220 #xfffffffc))))
(define-fun query_bvaddr1_after_220_xf.1 () (_ BitVec 32) (bvadd r1_after_220 #xfffffff8))
(define-fun query_load-word32stack_aft.29 () (_ BitVec 32) (load-word32 stack_after_75_top (bvadd r1_after_220 #xfffffff8)))
(define-fun query_load-word32stack_aft.30 () (_ BitVec 32) (load-word32 stack_after_75_bot (bvadd r1_after_220 #xfffffff8)))
(define-fun r0_after_76 () (_ BitVec 32) (ite (bvule stack_after_75_split (bvadd r1_after_220 #xfffffff8)) (load-word32 stack_after_75_top (bvadd r1_after_220 #xfffffff8)) (load-word32 stack_after_75_bot (bvadd r1_after_220 #xfffffff8))))
(define-fun cond_at_222 () Bool (and true (and (and (word32-eq (bvand r2_after_219 #x00000001) #x00000000) (word32-eq (bvand r2_after_219 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_77_ASM () Bool (and cond_at_222 path_cond_to_76_ASM))
(define-fun query_load-word32stack_aft.31 () (_ BitVec 32) (load-word32 stack_after_75_top (bvadd r2_after_219 #x00000004)))
(define-fun query_bvaddr2_after_219_x0 () (_ BitVec 32) (bvadd r2_after_219 #x00000004))
(define-fun query_load-word32stack_aft.32 () (_ BitVec 32) (load-word32 stack_after_75_bot (bvadd r2_after_219 #x00000004)))
(define-fun split_mem_top.2 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_75_split (bvadd r2_after_219 #x00000004)) (store-word32 stack_after_75_top (bvadd r2_after_219 #x00000004) r1_after_76) stack_after_75_top))
(define-fun query_load-word32split_mem.4 () (_ BitVec 32) (load-word32 split_mem_top.2 r2_after_219))
(define-fun query_r2_after_219 () (_ BitVec 32) r2_after_219)
(define-fun split_mem_bot.2 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_75_split (bvadd r2_after_219 #x00000004)) stack_after_75_bot (store-word32 stack_after_75_bot (bvadd r2_after_219 #x00000004) r1_after_76)))
(define-fun query_load-word32split_mem.5 () (_ BitVec 32) (load-word32 split_mem_bot.2 r2_after_219))
(define-fun stack_after_77_split () (_ BitVec 32) stack_after_75_split)
(define-fun stack_after_77_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_75_split r2_after_219) (store-word32 split_mem_top.2 r2_after_219 r0_after_76) split_mem_top.2))
(define-fun stack_after_77_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_75_split r2_after_219) split_mem_bot.2 (store-word32 split_mem_bot.2 r2_after_219 r0_after_76)))
(define-fun cond_at_223 () Bool (and (and (word32-eq (bvand r13_after_70 #x00000001) #x00000000) (word32-eq (bvand r13_after_70 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_78_ASM () Bool (and cond_at_223 path_cond_to_77_ASM))
(define-fun query_load-word32stack_aft.33 () (_ BitVec 32) (load-word32 stack_after_77_top (bvadd r13_after_70 #x0000001c)))
(define-fun query_bvaddr13_after_70_x0.5 () (_ BitVec 32) (bvadd r13_after_70 #x0000001c))
(define-fun query_load-word32stack_aft.34 () (_ BitVec 32) (load-word32 stack_after_77_bot (bvadd r13_after_70 #x0000001c)))
(define-fun stack_after_78_split () (_ BitVec 32) stack_after_77_split)
(define-fun stack_after_78_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_77_split (bvadd r13_after_70 #x0000001c)) (store-word32 stack_after_77_top (bvadd r13_after_70 #x0000001c) r3_after_212) stack_after_77_top))
(define-fun stack_after_78_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_77_split (bvadd r13_after_70 #x0000001c)) stack_after_77_bot (store-word32 stack_after_77_bot (bvadd r13_after_70 #x0000001c) r3_after_212)))
(define-fun cond_at_224 () Bool (and (and (word32-eq (bvand r13_after_70 #x00000001) #x00000000) (word32-eq (bvand r13_after_70 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_79_ASM () Bool (and cond_at_224 path_cond_to_78_ASM))
(define-fun query_load-word32stack_aft.35 () (_ BitVec 32) (load-word32 stack_after_78_top (bvadd r13_after_70 #x00000018)))
(define-fun query_bvaddr13_after_70_x0.6 () (_ BitVec 32) (bvadd r13_after_70 #x00000018))
(define-fun query_load-word32stack_aft.36 () (_ BitVec 32) (load-word32 stack_after_78_bot (bvadd r13_after_70 #x00000018)))
(define-fun stack_after_79_split () (_ BitVec 32) stack_after_78_split)
(define-fun stack_after_79_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_78_split (bvadd r13_after_70 #x00000018)) (store-word32 stack_after_78_top (bvadd r13_after_70 #x00000018) r5_after_70) stack_after_78_top))
(define-fun stack_after_79_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_78_split (bvadd r13_after_70 #x00000018)) stack_after_78_bot (store-word32 stack_after_78_bot (bvadd r13_after_70 #x00000018) r5_after_70)))
(define-fun r2_after_225 () (_ BitVec 32) (bvadd r13_after_70 #x00000010))
(define-fun r1_after_226 () (_ BitVec 32) (bvadd r13_after_70 #x00000050))
(define-fun cond_at_227 () Bool (and true (and (and (word32-eq (bvand r1_after_226 #x00000001) #x00000000) (word32-eq (bvand r1_after_226 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_80_ASM () Bool (and cond_at_227 path_cond_to_79_ASM))
(define-fun query_bvaddr1_after_226_x0 () (_ BitVec 32) (bvadd r1_after_226 #x00000004))
(define-fun query_load-word32stack_aft.37 () (_ BitVec 32) (load-word32 stack_after_79_top (bvadd r1_after_226 #x00000004)))
(define-fun query_load-word32stack_aft.38 () (_ BitVec 32) (load-word32 stack_after_79_bot (bvadd r1_after_226 #x00000004)))
(define-fun r1_after_80 () (_ BitVec 32) (ite (bvule stack_after_79_split (bvadd r1_after_226 #x00000004)) (load-word32 stack_after_79_top (bvadd r1_after_226 #x00000004)) (load-word32 stack_after_79_bot (bvadd r1_after_226 #x00000004))))
(define-fun query_r1_after_226 () (_ BitVec 32) r1_after_226)
(define-fun query_load-word32stack_aft.39 () (_ BitVec 32) (load-word32 stack_after_79_top r1_after_226))
(define-fun query_load-word32stack_aft.40 () (_ BitVec 32) (load-word32 stack_after_79_bot r1_after_226))
(define-fun r0_after_80 () (_ BitVec 32) (ite (bvule stack_after_79_split r1_after_226) (load-word32 stack_after_79_top r1_after_226) (load-word32 stack_after_79_bot r1_after_226)))
(define-fun cond_at_228 () Bool (and true (and (and (word32-eq (bvand r2_after_225 #x00000001) #x00000000) (word32-eq (bvand r2_after_225 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_81_ASM () Bool (and cond_at_228 path_cond_to_80_ASM))
(define-fun query_load-word32stack_aft.41 () (_ BitVec 32) (load-word32 stack_after_79_top (bvadd r2_after_225 #x00000004)))
(define-fun query_bvaddr2_after_225_x0 () (_ BitVec 32) (bvadd r2_after_225 #x00000004))
(define-fun query_load-word32stack_aft.42 () (_ BitVec 32) (load-word32 stack_after_79_bot (bvadd r2_after_225 #x00000004)))
(define-fun split_mem_top.3 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_79_split (bvadd r2_after_225 #x00000004)) (store-word32 stack_after_79_top (bvadd r2_after_225 #x00000004) r1_after_80) stack_after_79_top))
(define-fun query_load-word32split_mem.6 () (_ BitVec 32) (load-word32 split_mem_top.3 r2_after_225))
(define-fun query_r2_after_225 () (_ BitVec 32) r2_after_225)
(define-fun split_mem_bot.3 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_79_split (bvadd r2_after_225 #x00000004)) stack_after_79_bot (store-word32 stack_after_79_bot (bvadd r2_after_225 #x00000004) r1_after_80)))
(define-fun query_load-word32split_mem.7 () (_ BitVec 32) (load-word32 split_mem_bot.3 r2_after_225))
(define-fun stack_after_81_split () (_ BitVec 32) stack_after_79_split)
(define-fun stack_after_81_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_79_split r2_after_225) (store-word32 split_mem_top.3 r2_after_225 r0_after_80) split_mem_top.3))
(define-fun stack_after_81_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_79_split r2_after_225) split_mem_bot.3 (store-word32 split_mem_bot.3 r2_after_225 r0_after_80)))
(define-fun cond_at_229 () Bool (and (and (word32-eq (bvand r13_after_70 #x00000001) #x00000000) (word32-eq (bvand r13_after_70 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_82_ASM () Bool (and cond_at_229 path_cond_to_81_ASM))
(define-fun query_load-word32stack_aft.43 () (_ BitVec 32) (load-word32 stack_after_81_top (bvadd r13_after_70 #x0000000c)))
(define-fun query_bvaddr13_after_70_x0.7 () (_ BitVec 32) (bvadd r13_after_70 #x0000000c))
(define-fun query_load-word32stack_aft.44 () (_ BitVec 32) (load-word32 stack_after_81_bot (bvadd r13_after_70 #x0000000c)))
(define-fun stack_after_82_split () (_ BitVec 32) stack_after_81_split)
(define-fun stack_after_82_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_81_split (bvadd r13_after_70 #x0000000c)) (store-word32 stack_after_81_top (bvadd r13_after_70 #x0000000c) r4_after_70) stack_after_81_top))
(define-fun stack_after_82_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_81_split (bvadd r13_after_70 #x0000000c)) stack_after_81_bot (store-word32 stack_after_81_bot (bvadd r13_after_70 #x0000000c) r4_after_70)))
(define-fun r2_after_230 () (_ BitVec 32) (bvadd r13_after_70 #x00000058))
(define-fun cond_at_231 () Bool (and true (and (and (word32-eq (bvand r2_after_230 #x00000001) #x00000000) (word32-eq (bvand r2_after_230 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_83_ASM () Bool (and cond_at_231 path_cond_to_82_ASM))
(define-fun query_bvaddr2_after_230_x0 () (_ BitVec 32) (bvadd r2_after_230 #x00000004))
(define-fun query_load-word32stack_aft.45 () (_ BitVec 32) (load-word32 stack_after_82_top (bvadd r2_after_230 #x00000004)))
(define-fun query_load-word32stack_aft.46 () (_ BitVec 32) (load-word32 stack_after_82_bot (bvadd r2_after_230 #x00000004)))
(define-fun r1_after_83 () (_ BitVec 32) (ite (bvule stack_after_82_split (bvadd r2_after_230 #x00000004)) (load-word32 stack_after_82_top (bvadd r2_after_230 #x00000004)) (load-word32 stack_after_82_bot (bvadd r2_after_230 #x00000004))))
(define-fun query_r2_after_230 () (_ BitVec 32) r2_after_230)
(define-fun query_load-word32stack_aft.47 () (_ BitVec 32) (load-word32 stack_after_82_top r2_after_230))
(define-fun query_load-word32stack_aft.48 () (_ BitVec 32) (load-word32 stack_after_82_bot r2_after_230))
(define-fun r0_after_83 () (_ BitVec 32) (ite (bvule stack_after_82_split r2_after_230) (load-word32 stack_after_82_top r2_after_230) (load-word32 stack_after_82_bot r2_after_230)))
(define-fun cond_at_232 () Bool (and (and (word32-eq (bvand r13_after_70 #x00000001) #x00000000) (word32-eq (bvand r13_after_70 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true (and true true)))))))))
(define-fun path_cond_to_84_ASM () Bool (and cond_at_232 path_cond_to_83_ASM))
(define-fun query_load-word32stack_aft.49 () (_ BitVec 32) (load-word32 stack_after_82_top (bvadd r13_after_70 #x00000008)))
(define-fun query_bvaddr13_after_70_x0.8 () (_ BitVec 32) (bvadd r13_after_70 #x00000008))
(define-fun query_load-word32stack_aft.50 () (_ BitVec 32) (load-word32 stack_after_82_bot (bvadd r13_after_70 #x00000008)))
(define-fun split_mem_top.4 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_82_split (bvadd r13_after_70 #x00000008)) (store-word32 stack_after_82_top (bvadd r13_after_70 #x00000008) r1_after_83) stack_after_82_top))
(define-fun query_load-word32split_mem.8 () (_ BitVec 32) (load-word32 split_mem_top.4 (bvadd r13_after_70 #x00000004)))
(define-fun query_bvaddr13_after_70_x0.9 () (_ BitVec 32) (bvadd r13_after_70 #x00000004))
(define-fun split_mem_bot.4 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_82_split (bvadd r13_after_70 #x00000008)) stack_after_82_bot (store-word32 stack_after_82_bot (bvadd r13_after_70 #x00000008) r1_after_83)))
(define-fun query_load-word32split_mem.9 () (_ BitVec 32) (load-word32 split_mem_bot.4 (bvadd r13_after_70 #x00000004)))
(define-fun stack_after_84_split () (_ BitVec 32) stack_after_82_split)
(define-fun stack_after_84_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_82_split (bvadd r13_after_70 #x00000004)) (store-word32 split_mem_top.4 (bvadd r13_after_70 #x00000004) r0_after_83) split_mem_top.4))
(define-fun stack_after_84_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_82_split (bvadd r13_after_70 #x00000004)) split_mem_bot.4 (store-word32 split_mem_bot.4 (bvadd r13_after_70 #x00000004) r0_after_83)))
(define-fun cond_at_233 () Bool (and true (and (and (word32-eq (bvand r13_after_70 #x00000001) #x00000000) (word32-eq (bvand r13_after_70 #x00000002) #x00000000)) (and true (and true true)))))
(define-fun path_cond_to_85_ASM () Bool (and cond_at_233 path_cond_to_84_ASM))
(define-fun query_load-word32stack_aft.51 () (_ BitVec 32) (load-word32 stack_after_84_top r13_after_70))
(define-fun query_r13_after_70 () (_ BitVec 32) r13_after_70)
(define-fun query_load-word32stack_aft.52 () (_ BitVec 32) (load-word32 stack_after_84_bot r13_after_70))
(define-fun stack_after_85_split () (_ BitVec 32) stack_after_84_split)
(define-fun stack_after_85_top () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_84_split r13_after_70) (store-word32 stack_after_84_top r13_after_70 r3_after_212) stack_after_84_top))
(define-fun stack_after_85_bot () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_84_split r13_after_70) stack_after_84_bot (store-word32 stack_after_84_bot r13_after_70 r3_after_212)))
(define-fun cond_at_235 () Bool (and (and (word32-eq (bvand r13_after_70 #x00000001) #x00000000) (word32-eq (bvand r13_after_70 #x00000002) #x00000000)) (and true (and true (and true true)))))
(define-fun path_cond_to_86_ASM () Bool (and cond_at_235 path_cond_to_85_ASM))
(define-fun query_bvaddr13_after_70_x0.10 () (_ BitVec 32) (bvadd r13_after_70 #x00000034))
(define-fun query_load-word32stack_aft.53 () (_ BitVec 32) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000034)))
(define-fun query_load-word32stack_aft.54 () (_ BitVec 32) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000034)))
(define-fun r1_after_86 () (_ BitVec 32) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000034)) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000034)) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000034))))
(define-fun r0_after_236 () (_ BitVec 32) (bvand r7_after_70 #xfffffff0))
(declare-fun fun_success_at_87 () Bool)
(declare-fun r0_after_87 () (_ BitVec 32))
(declare-fun r1_after_87 () (_ BitVec 32))
(declare-fun r2_after_87 () (_ BitVec 32))
(declare-fun r3_after_87 () (_ BitVec 32))
(declare-fun r4_after_87 () (_ BitVec 32))
(declare-fun r5_after_87 () (_ BitVec 32))
(declare-fun r6_after_87 () (_ BitVec 32))
(declare-fun r7_after_87 () (_ BitVec 32))
(declare-fun r8_after_87 () (_ BitVec 32))
(declare-fun r9_after_87 () (_ BitVec 32))
(declare-fun r10_after_87 () (_ BitVec 32))
(declare-fun r11_after_87 () (_ BitVec 32))
(declare-fun r12_after_87 () (_ BitVec 32))
(declare-fun r13_after_87 () (_ BitVec 32))
(declare-fun r14_after_87 () (_ BitVec 32))
(declare-fun r15_after_87 () (_ BitVec 32))
(declare-fun r16_after_87 () (_ BitVec 32))
(declare-fun r17_after_87 () (_ BitVec 32))
(declare-fun r18_after_87 () (_ BitVec 32))
(declare-fun r19_after_87 () (_ BitVec 32))
(declare-fun r20_after_87 () (_ BitVec 32))
(declare-fun r21_after_87 () (_ BitVec 32))
(declare-fun r22_after_87 () (_ BitVec 32))
(declare-fun r23_after_87 () (_ BitVec 32))
(declare-fun r24_after_87 () (_ BitVec 32))
(declare-fun r25_after_87 () (_ BitVec 32))
(declare-fun r26_after_87 () (_ BitVec 32))
(declare-fun r27_after_87 () (_ BitVec 32))
(declare-fun r28_after_87 () (_ BitVec 32))
(declare-fun r29_after_87 () (_ BitVec 32))
(declare-fun r30_after_87 () (_ BitVec 32))
(declare-fun r31_after_87 () (_ BitVec 32))
(declare-fun mode_after_87 () (_ BitVec 32))
(declare-fun n_after_87 () Bool)
(declare-fun z_after_87 () Bool)
(declare-fun c_after_87 () Bool)
(declare-fun v_after_87 () Bool)
(declare-fun mem_after_87 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_after_87 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun stack_after_87 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun dom_stack_after_87 () (Array (_ BitVec 32) (_ BitVec 1)))
(declare-fun clock_after_87 () (_ BitVec 64))
(declare-fun ret_addr_input_ignore_after_87 () (_ BitVec 32))
(declare-fun stack_for_87_bot () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun stack_for_87_top () (Array (_ BitVec 30) (_ BitVec 32)))
(define-fun path_cond_to_5_ASM () Bool (and cond_at_98 path_cond_to_95_ASM))
(define-fun query_load-word32mem_initb.8 () (_ BitVec 32) (load-word32 mem_init (bvadd r3_after_96 #x00000624)))
(define-fun query_bvaddr3_after_96_x00 () (_ BitVec 32) (bvadd r3_after_96 #x00000624))
(define-fun mem_after_5 () (Array (_ BitVec 30) (_ BitVec 32)) (store-word32 mem_init (bvadd r3_after_96 #x00000624) r2_after_97))
(define-fun r0_after_99 () (_ BitVec 32) #x00000003)
(define-fun path_cond_to_100_ASM () Bool (or (or path_cond_to_41_ASM (or path_cond_to_61_ASM path_cond_to_86_ASM)) (or (or path_cond_to_5_ASM path_cond_to_68_ASM) (or path_cond_to_26_ASM path_cond_to_51_ASM))))
(define-fun r21_v_at_100 () (_ BitVec 32) (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r21_after_39 (ite path_cond_to_86_ASM r21_after_87 (ite path_cond_to_5_ASM r21_init (ite path_cond_to_61_ASM r21_after_59 (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r21_after_23 r21_after_27) r21_after_65))))))
(define-fun r17_v_at_100 () (_ BitVec 32) (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r17_after_27 r17_after_23) (ite path_cond_to_61_ASM r17_after_59 (ite path_cond_to_68_ASM r17_after_65 (ite path_cond_to_5_ASM r17_init (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r17_after_39 r17_after_87))))))
(define-fun ret_addr_input_ignore_v_at_100 () (_ BitVec 32) (ite path_cond_to_61_ASM ret_addr_input_ignore_after_59 (ite path_cond_to_68_ASM ret_addr_input_ignore_after_65 (ite path_cond_to_26_ASM ret_addr_input_ignore_v_at_133 (ite path_cond_to_86_ASM ret_addr_input_ignore_after_87 ret_addr_input_ignore_after_39)))))
(define-fun r10_v_at_100 () (_ BitVec 32) (ite path_cond_to_61_ASM r10_after_59 (ite path_cond_to_68_ASM r10_after_65 (ite path_cond_to_5_ASM r10_init (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r10_after_23 r10_after_27) (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r10_after_39 r10_after_87))))))
(define-fun clock_v_at_100 () (_ BitVec 64) (ite path_cond_to_61_ASM clock_after_59 (ite path_cond_to_86_ASM clock_after_87 (ite path_cond_to_5_ASM clock_init (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM clock_after_27 clock_after_23) (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) clock_after_39 clock_after_65))))))
(define-fun c_v_at_100 () Bool (ite path_cond_to_51_ASM c_after_171 (ite path_cond_to_5_ASM c_v_at_95 (ite path_cond_to_61_ASM c_after_193 (ite path_cond_to_86_ASM c_after_87 (ite path_cond_to_41_ASM c_after_160 (ite path_cond_to_68_ASM c_after_200 (ite path_cond_to_28_ASM c_after_140 c_after_131))))))))
(define-fun r20_v_at_100 () (_ BitVec 32) (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r20_after_23 r20_after_27) (ite path_cond_to_86_ASM r20_after_87 (ite path_cond_to_68_ASM r20_after_65 (ite path_cond_to_61_ASM r20_after_59 (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r20_after_39 r20_init))))))
(define-fun r11_v_at_100 () (_ BitVec 32) (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r11_after_39 (ite path_cond_to_68_ASM r11_after_65 (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r11_after_23 r11_after_27) (ite path_cond_to_86_ASM r11_after_87 (ite path_cond_to_5_ASM r11_init r11_after_59))))))
(define-fun r22_v_at_100 () (_ BitVec 32) (ite path_cond_to_5_ASM r22_init (ite path_cond_to_86_ASM r22_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r22_after_23 r22_after_27) (ite path_cond_to_68_ASM r22_after_65 (ite path_cond_to_61_ASM r22_after_59 r22_after_39))))))
(define-fun r4_v_at_100 () (_ BitVec 32) (ite path_cond_to_61_ASM r4_after_59 (ite path_cond_to_86_ASM r4_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r4_after_23 r4_after_27) (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r4_after_39 (ite path_cond_to_5_ASM (ite path_cond_to_4_ASM r4_init r4_after_7) r4_after_65))))))
(define-fun r27_v_at_100 () (_ BitVec 32) (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r27_after_23 r27_after_27) (ite path_cond_to_68_ASM r27_after_65 (ite path_cond_to_86_ASM r27_after_87 (ite path_cond_to_61_ASM r27_after_59 (ite path_cond_to_5_ASM r27_init r27_after_39))))))
(define-fun r16_v_at_100 () (_ BitVec 32) (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r16_after_39 (ite path_cond_to_5_ASM r16_init (ite path_cond_to_86_ASM r16_after_87 (ite path_cond_to_61_ASM r16_after_59 (ite path_cond_to_68_ASM r16_after_65 (ite path_cond_to_25_ASM r16_after_23 r16_after_27)))))))
(define-fun r7_v_at_100 () (_ BitVec 32) (ite path_cond_to_5_ASM r7_init (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r7_after_39 (ite path_cond_to_68_ASM r7_after_65 (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r7_after_23 r7_after_27) (ite path_cond_to_61_ASM r7_after_59 r7_after_87))))))
(define-fun dom_v_at_100 () (Array (_ BitVec 32) (_ BitVec 1)) (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) dom_after_39 (ite path_cond_to_68_ASM dom_after_65 (ite path_cond_to_86_ASM dom_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM dom_after_23 dom_after_27) (ite path_cond_to_5_ASM dom_init dom_after_59))))))
(define-fun n_v_at_100 () Bool (ite path_cond_to_86_ASM n_after_87 (ite path_cond_to_41_ASM n_after_160 (ite path_cond_to_61_ASM n_after_193 (ite path_cond_to_68_ASM n_after_200 (ite path_cond_to_5_ASM n_v_at_95 (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM n_after_131 n_after_140) n_after_171)))))))
(define-fun r18_v_at_100 () (_ BitVec 32) (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r18_after_39 (ite path_cond_to_5_ASM r18_init (ite path_cond_to_61_ASM r18_after_59 (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r18_after_23 r18_after_27) (ite path_cond_to_86_ASM r18_after_87 r18_after_65))))))
(define-fun mode_v_at_100 () (_ BitVec 32) (ite path_cond_to_61_ASM mode_after_59 (ite path_cond_to_5_ASM mode_init (ite path_cond_to_68_ASM mode_after_65 (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) mode_after_39 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM mode_after_27 mode_after_23) mode_after_87))))))
(define-fun r5_v_at_100 () (_ BitVec 32) (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r5_after_39 (ite path_cond_to_5_ASM (ite path_cond_to_11_ASM r5_after_10 r5_init) (ite path_cond_to_86_ASM r5_after_87 (ite path_cond_to_68_ASM r5_after_65 (ite path_cond_to_61_ASM r5_after_59 (ite path_cond_to_28_ASM r5_after_27 r5_after_23)))))))
(define-fun v_v_at_100 () Bool (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM v_after_131 v_after_140) (ite path_cond_to_51_ASM v_after_171 (ite path_cond_to_86_ASM v_after_87 (ite path_cond_to_41_ASM v_after_160 (ite path_cond_to_68_ASM v_after_200 (ite path_cond_to_61_ASM v_after_193 v_v_at_95)))))))
(define-fun r0_v_at_100 () (_ BitVec 32) (ite path_cond_to_5_ASM r0_after_99 (ite path_cond_to_26_ASM r0_after_135 (ite path_cond_to_41_ASM r0_after_40 (ite path_cond_to_61_ASM r0_after_60 (ite path_cond_to_51_ASM r0_after_175 (ite path_cond_to_86_ASM r0_after_87 r0_after_204)))))))
(define-fun r23_v_at_100 () (_ BitVec 32) (ite path_cond_to_5_ASM r23_init (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r23_after_39 (ite path_cond_to_86_ASM r23_after_87 (ite path_cond_to_68_ASM r23_after_65 (ite path_cond_to_61_ASM r23_after_59 (ite path_cond_to_28_ASM r23_after_27 r23_after_23)))))))
(define-fun r28_v_at_100 () (_ BitVec 32) (ite path_cond_to_5_ASM r28_init (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r28_after_23 r28_after_27) (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r28_after_39 (ite path_cond_to_61_ASM r28_after_59 (ite path_cond_to_86_ASM r28_after_87 r28_after_65))))))
(define-fun r19_v_at_100 () (_ BitVec 32) (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r19_after_39 (ite path_cond_to_5_ASM r19_init (ite path_cond_to_86_ASM r19_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r19_after_23 r19_after_27) (ite path_cond_to_68_ASM r19_after_65 r19_after_59))))))
(define-fun r12_v_at_100 () (_ BitVec 32) (ite path_cond_to_61_ASM r12_after_59 (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r12_after_39 (ite path_cond_to_68_ASM r12_after_65 (ite path_cond_to_5_ASM r12_after_91 (ite path_cond_to_86_ASM r12_after_87 (ite path_cond_to_28_ASM r12_after_27 r12_after_23)))))))
(define-fun z_v_at_100 () Bool (ite path_cond_to_41_ASM z_after_160 (ite path_cond_to_61_ASM z_after_193 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM z_after_140 z_after_131) (ite path_cond_to_5_ASM z_v_at_95 (ite path_cond_to_68_ASM z_after_200 (ite path_cond_to_86_ASM z_after_87 z_after_171)))))))
(define-fun r6_v_at_100 () (_ BitVec 32) (ite path_cond_to_41_ASM r6_after_39 (ite path_cond_to_51_ASM r0_after_43 (ite path_cond_to_61_ASM r6_after_59 (ite path_cond_to_5_ASM r6_init (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r6_after_23 r6_after_27) (ite path_cond_to_68_ASM r6_after_65 r6_after_87)))))))
(define-fun r25_v_at_100 () (_ BitVec 32) (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r25_after_27 r25_after_23) (ite path_cond_to_5_ASM r25_init (ite path_cond_to_61_ASM r25_after_59 (ite path_cond_to_68_ASM r25_after_65 (ite path_cond_to_86_ASM r25_after_87 r25_after_39))))))
(define-fun r8_v_at_100 () (_ BitVec 32) (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r8_after_39 (ite path_cond_to_5_ASM r8_init (ite path_cond_to_61_ASM r8_after_59 (ite path_cond_to_68_ASM r8_after_65 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r8_after_27 r8_after_23) r8_after_87))))))
(define-fun r3_v_at_100 () (_ BitVec 32) (ite path_cond_to_61_ASM r3_after_59 (ite path_cond_to_5_ASM r3_after_96 (ite path_cond_to_86_ASM r3_after_87 (ite path_cond_to_68_ASM r3_after_203 (ite path_cond_to_41_ASM r3_after_39 (ite path_cond_to_26_ASM r3_after_134 r3_after_174)))))))
(define-fun r30_v_at_100 () (_ BitVec 32) (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r30_after_39 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r30_after_27 r30_after_23) (ite path_cond_to_86_ASM r30_after_87 (ite path_cond_to_68_ASM r30_after_65 (ite path_cond_to_61_ASM r30_after_59 r30_init))))))
(define-fun r14_v_at_100 () (_ BitVec 32) (ite path_cond_to_86_ASM r14_after_87 (ite path_cond_to_68_ASM r14_after_65 (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r14_after_39 (ite path_cond_to_61_ASM r14_after_59 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r14_after_27 r14_after_23) r14_init))))))
(define-fun r9_v_at_100 () (_ BitVec 32) (ite path_cond_to_61_ASM r9_after_59 (ite path_cond_to_68_ASM r9_after_65 (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r9_after_39 (ite path_cond_to_5_ASM r9_init (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r9_after_23 r9_after_27) r9_after_87))))))
(define-fun r1_v_at_100 () (_ BitVec 32) (ite path_cond_to_51_ASM r1_after_43 (ite path_cond_to_41_ASM r1_after_39 (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r1_after_23 r1_after_27) (ite path_cond_to_68_ASM r1_after_65 (ite path_cond_to_86_ASM r1_after_87 (ite path_cond_to_5_ASM r1_init r1_after_59)))))))
(define-fun mem_v_at_100 () (Array (_ BitVec 30) (_ BitVec 32)) (ite path_cond_to_51_ASM mem_after_51 (ite path_cond_to_5_ASM mem_after_5 (ite path_cond_to_41_ASM mem_after_39 (ite path_cond_to_26_ASM mem_after_26 (ite path_cond_to_68_ASM mem_after_68 (ite path_cond_to_86_ASM mem_after_87 mem_after_59)))))))
(define-fun r13_v_at_100 () (_ BitVec 32) (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r13_after_23 r13_after_27) (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_5_ASM r13_after_90 (ite path_cond_to_86_ASM r13_after_87 r13_after_39))))))
(define-fun r31_v_at_100 () (_ BitVec 32) (ite path_cond_to_86_ASM r31_after_87 (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r31_after_39 (ite path_cond_to_68_ASM r31_after_65 (ite path_cond_to_61_ASM r31_after_59 (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r31_after_23 r31_after_27) r31_init))))))
(define-fun r24_v_at_100 () (_ BitVec 32) (ite path_cond_to_86_ASM r24_after_87 (ite path_cond_to_61_ASM r24_after_59 (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r24_after_39 (ite path_cond_to_68_ASM r24_after_65 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r24_after_27 r24_after_23) r24_init))))))
(define-fun r29_v_at_100 () (_ BitVec 32) (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r29_after_39 (ite path_cond_to_86_ASM r29_after_87 (ite path_cond_to_68_ASM r29_after_65 (ite path_cond_to_61_ASM r29_after_59 (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM r29_after_23 r29_after_27) r29_init))))))
(define-fun r15_v_at_100 () (_ BitVec 32) (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r15_after_27 r15_after_23) (ite path_cond_to_86_ASM r15_after_87 (ite path_cond_to_68_ASM r15_after_65 (ite path_cond_to_61_ASM r15_after_59 (ite path_cond_to_5_ASM r15_init r15_after_39))))))
(define-fun r26_v_at_100 () (_ BitVec 32) (ite path_cond_to_68_ASM r26_after_65 (ite path_cond_to_86_ASM r26_after_87 (ite (or path_cond_to_41_ASM path_cond_to_51_ASM) r26_after_39 (ite path_cond_to_5_ASM r26_init (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r26_after_27 r26_after_23) r26_after_59))))))
(define-fun r2_v_at_100 () (_ BitVec 32) (ite path_cond_to_41_ASM r2_after_39 (ite path_cond_to_61_ASM r2_after_59 (ite path_cond_to_86_ASM r2_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r2_after_27 r2_after_23) (ite path_cond_to_5_ASM r2_after_97 (ite path_cond_to_51_ASM r2_after_163 r2_after_65)))))))
(define-fun dom_stack_v_at_100 () (Array (_ BitVec 32) (_ BitVec 1)) (ite path_cond_to_68_ASM dom_stack_after_65 (ite path_cond_to_86_ASM dom_stack_after_87 (ite path_cond_to_5_ASM dom_stack_init (ite path_cond_to_61_ASM dom_stack_after_59 (ite path_cond_to_26_ASM (ite path_cond_to_25_ASM dom_stack_after_23 dom_stack_after_27) dom_stack_after_39))))))
(define-fun r13_after_100 () (_ BitVec 32) (bvadd r13_v_at_100 #x0000006c))
(define-fun query_bvaddr13_after_100_x () (_ BitVec 32) (bvadd r13_after_100 #x00000020))
(define-fun query_load-word32itepath_c.7 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x00000020)))
(define-fun query_load-word32itepath_c.8 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x00000020)))
(define-fun cond_at_101 () Bool (and (and true (and (and (word32-eq (bvand r13_after_100 #x00000001) #x00000000) (word32-eq (bvand r13_after_100 #x00000002) #x00000000)) (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and (word32-eq (bvand (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) (bvadd r13_after_100 #x00000020)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x00000020)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x00000020))) #x00000001) #x00000000) (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and true (and (word32-eq (bvand (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) (bvadd r13_after_100 #x00000020)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x00000020)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x00000020))) #x00000002) #x00000000) (and true (and (word32-eq (bvand (bvshl (bvlshr (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) (bvadd r13_after_100 #x00000020)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x00000020)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x00000020))) #x00000001) #x00000001) #x00000001) #x00000000) (word32-eq (bvand (bvshl (bvlshr (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) (bvadd r13_after_100 #x00000020)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x00000020)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x00000020))) #x00000001) #x00000001) #x00000002) #x00000000))))))))))))))))))))))))))))))))))))))))) (word32-eq (bvshl (bvlshr (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) (bvadd r13_after_100 #x00000020)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x00000020)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x00000020))) #x00000001) #x00000001) ret_init)))
(define-fun path_cond_to_Err_ASM () Bool (or (or (or (or (or (and (not cond_at_231) path_cond_to_82_ASM) (or (and (not cond_at_215) path_cond_to_72_ASM) (and (not cond_at_218) path_cond_to_74_ASM))) (or (and (not cond_at_117) path_cond_to_15_ASM) (or (and (not cond_at_92) path_cond_to_1_ASM) (and (not cond_at_112) path_cond_to_12_ASM)))) (or (or (and (not cond_at_147) path_cond_to_33_ASM) (or (and (not cond_at_176) path_cond_to_50_ASM) (and (not cond_at_120) path_cond_to_17_ASM))) (or (or (and (not cond_at_221) path_cond_to_75_ASM) (and (not cond_at_205) path_cond_to_67_ASM)) (or (and (not cond_at_224) path_cond_to_78_ASM) (and (not cond_at_198) path_cond_to_63_ASM))))) (or (or (or (and (not cond_at_118) path_cond_to_16_ASM) (or (and (not cond_at_181) path_cond_to_54_ASM) (and (not cond_at_222) path_cond_to_76_ASM))) (or (and (not cond_at_197) path_cond_to_62_ASM) (or (and (not cond_at_101) path_cond_to_100_ASM) (and (not cond_at_213) path_cond_to_69_ASM)))) (or (or (and (not cond_at_98) path_cond_to_95_ASM) (or (and (not cond_at_125) path_cond_to_20_ASM) (and (not cond_at_235) path_cond_to_85_ASM))) (or (or (and (not cond_at_232) path_cond_to_83_ASM) (and (not cond_at_109) path_cond_to_9_ASM)) (or (and (not cond_at_153) path_cond_to_153_ASM) (and (not cond_at_159) path_cond_to_38_ASM)))))) (or (or (or (or (and (not cond_at_115) path_cond_to_13_ASM) (or (and (not cond_at_155) path_cond_to_37_ASM) (and (not cond_at_182) path_cond_to_55_ASM))) (or (and (not cond_at_188) path_cond_to_187_ASM) (or (and (not cond_at_164) path_cond_to_42_ASM) (and (not cond_at_233) path_cond_to_84_ASM)))) (or (or (and (not cond_at_126) path_cond_to_21_ASM) (or (and (not cond_at_89) path_cond_to_89_ASM) (and (not cond_at_152) path_cond_to_34_ASM))) (or (or (and (not cond_at_145) path_cond_to_31_ASM) (and (not cond_at_223) path_cond_to_77_ASM)) (or (and (not cond_at_214) path_cond_to_71_ASM) (and (not cond_at_180) path_cond_to_53_ASM))))) (or (or (or (and (not cond_at_229) path_cond_to_81_ASM) (or false (and (not cond_at_210) path_cond_to_66_ASM))) (or (or (and (not cond_at_146) path_cond_to_32_ASM) (and (not cond_at_228) path_cond_to_80_ASM)) (or (and (not cond_at_192) path_cond_to_58_ASM) (and (not cond_at_165) path_cond_to_43_ASM)))) (or (or (and (not cond_at_217) path_cond_to_73_ASM) (or (and (not cond_at_116) path_cond_to_14_ASM) (and (not cond_at_136) path_cond_to_133_ASM))) (or (or (and (not cond_at_227) path_cond_to_79_ASM) (and (not cond_at_104) path_cond_to_3_ASM)) (or (and (not cond_at_121) path_cond_to_18_ASM) (and (not cond_at_124) path_cond_to_19_ASM))))))))
(define-fun path_cond_to_328_C () Bool true)
(define-fun ret__int_v_after_328 () (_ BitVec 32) (ite (bvult length___unsigned_long_v_init #x00000003) #x00000001 #x00000000))
(define-fun cond_at_327 () Bool (not (word32-eq ret__int_v_after_328 #x00000000)))
(define-fun path_cond_to_326_C () Bool (and (not cond_at_327) path_cond_to_328_C))
(define-fun cond_at_326 () Bool (and (bvslt #x00000000 #x00000003) (bvsle #x00000000 #x00000000)))
(define-fun path_cond_to_325_C () Bool (and cond_at_326 path_cond_to_326_C))
(define-fun ptr () (_ BitVec 32) #xe00022a4)
(declare-fun pvalid () Bool)
(assert (=> pvalid (and (not (word32-eq ptr #x00000000)) (=> (bvult #x00000000 #x00000030) (bvule ptr (bvsub #x00000000 #x00000030))))))
(assert pvalid)
(define-fun ptr.1 () (_ BitVec 32) #xe00022dc)
(declare-fun pvalid.1 () Bool)
(assert (=> pvalid.1 (and (not (word32-eq ptr.1 #x00000000)) (=> (bvult #x00000000 #x00000008) (bvule ptr.1 (bvsub #x00000000 #x00000008))))))
(assert (=> (and pvalid.1 pvalid) (or false (or false (or (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.1))))))
(assert (and (=> (and false pvalid) pvalid.1) (=> (and false pvalid.1) pvalid)))
(assert pvalid.1)
(define-fun ptr.2 () (_ BitVec 32) #xe001b420)
(declare-fun pvalid.2 () Bool)
(assert (=> pvalid.2 (and (not (word32-eq ptr.2 #x00000000)) (=> (bvult #x00000000 #x000000e8) (bvule ptr.2 (bvsub #x00000000 #x000000e8))))))
(assert (=> (and pvalid.2 pvalid) (or false (or false (or (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.2))))))
(assert (and (=> (and false pvalid) pvalid.2) (=> (and false pvalid.2) pvalid)))
(assert (=> (and pvalid.2 pvalid.1) (or false (or false (or (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.2))))))
(assert (and (=> (and false pvalid.1) pvalid.2) (=> (and false pvalid.2) pvalid.1)))
(assert pvalid.2)
(define-fun ptr.3 () (_ BitVec 32) #xe0024b04)
(declare-fun pvalid.3 () Bool)
(assert (=> pvalid.3 (and (word32-eq (bvand ptr.3 #x00000003) #x00000000) (and (not (word32-eq ptr.3 #x00000000)) (=> (bvult #x00000000 #x0000000c) (bvule ptr.3 (bvsub #x00000000 #x0000000c)))))))
(assert (=> (and pvalid.3 pvalid) (or false (or false (or (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.3))))))
(assert (and (=> (and false pvalid) pvalid.3) (=> (and false pvalid.3) pvalid)))
(assert (=> (and pvalid.3 pvalid.1) (or false (or false (or (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.3))))))
(assert (and (=> (and false pvalid.1) pvalid.3) (=> (and false pvalid.3) pvalid.1)))
(assert (=> (and pvalid.3 pvalid.2) (or false (or false (or (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.3))))))
(assert (and (=> (and false pvalid.2) pvalid.3) (=> (and false pvalid.3) pvalid.2)))
(define-fun cond_at_325 () Bool pvalid.3)
(define-fun path_cond_to_324_C () Bool (and cond_at_325 path_cond_to_325_C))
(define-fun query_bvadd_xe0024b04bvadd () (_ BitVec 32) (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000000))))
(define-fun query_load-word32Mem_initb () (_ BitVec 32) (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000000)))))
(define-fun ret__int_v_after_324 () (_ BitVec 32) (ite (word32-eq (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000000)))) #x00000000) #x00000001 #x00000000))
(define-fun path_cond_to_451_C () Bool (and cond_at_327 path_cond_to_328_C))
(define-fun path_cond_to_323_C () Bool (or path_cond_to_324_C path_cond_to_451_C))
(define-fun cond_at_323 () Bool (not (word32-eq (ite path_cond_to_324_C ret__int_v_after_324 ret__int_v_after_328) #x00000000)))
(define-fun path_cond_to_322_C () Bool (and (not cond_at_323) path_cond_to_323_C))
(define-fun cond_at_322 () Bool (and (bvslt #x00000001 #x00000003) (bvsle #x00000000 #x00000001)))
(define-fun path_cond_to_321_C () Bool (and cond_at_322 path_cond_to_322_C))
(define-fun cond_at_321 () Bool pvalid.3)
(define-fun path_cond_to_320_C () Bool (and cond_at_321 path_cond_to_321_C))
(define-fun query_bvadd_xe0024b04bvadd.1 () (_ BitVec 32) (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000001))))
(define-fun query_load-word32Mem_initb.1 () (_ BitVec 32) (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000001)))))
(define-fun ret__int_v_after_320 () (_ BitVec 32) (ite (word32-eq (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000001)))) #x00000000) #x00000001 #x00000000))
(define-fun path_cond_to_449_C () Bool (and cond_at_323 path_cond_to_323_C))
(define-fun path_cond_to_319_C () Bool (or path_cond_to_320_C path_cond_to_449_C))
(define-fun ret__int_v_v_at_319 () (_ BitVec 32) (ite path_cond_to_449_C (ite path_cond_to_324_C ret__int_v_after_324 ret__int_v_after_328) ret__int_v_after_320))
(define-fun cond_at_319 () Bool (not (word32-eq ret__int_v_v_at_319 #x00000000)))
(define-fun path_cond_to_315_C () Bool (and (not cond_at_319) path_cond_to_319_C))
(define-fun i___unsigned_long_v.2_after_315 () (_ BitVec 32) #x00000000)
(define-fun cond_at_414 () Bool (bvult i___unsigned_long_v.2_after_315 #x00000004))
(define-fun path_cond_to_413_C () Bool (and cond_at_414 path_cond_to_315_C))
(define-fun cond_at_413 () Bool (bvult i___unsigned_long_v.2_after_315 #x00000004))
(define-fun path_cond_to_412_C () Bool (and cond_at_413 path_cond_to_413_C))
(define-fun ptr.4 () (_ BitVec 32) #xe001c600)
(declare-fun pvalid.4 () Bool)
(assert (=> pvalid.4 (and (word32-eq (bvand ptr.4 #x00000003) #x00000000) (and (not (word32-eq ptr.4 #x00000000)) (=> (bvult #x00000000 #x00000004) (bvule ptr.4 (bvsub #x00000000 #x00000004)))))))
(assert (=> (and pvalid.4 pvalid) (or false (or false (or (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.4))))))
(assert (and (=> (and false pvalid) pvalid.4) (=> (and false pvalid.4) pvalid)))
(assert (=> (and pvalid.4 pvalid.1) (or false (or false (or (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.4))))))
(assert (and (=> (and false pvalid.1) pvalid.4) (=> (and false pvalid.4) pvalid.1)))
(assert (=> (and pvalid.4 pvalid.3) (or false (or false (or (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.4))))))
(assert (and (=> (and false pvalid.3) pvalid.4) (=> (and false pvalid.4) pvalid.3)))
(assert (=> (and pvalid.4 pvalid.2) (or false (or false (or (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.4))))))
(assert (and (=> (and false pvalid.2) pvalid.4) (=> (and false pvalid.4) pvalid.2)))
(define-fun cond_at_412 () Bool pvalid.4)
(define-fun path_cond_to_411_C () Bool (and cond_at_412 path_cond_to_412_C))
(define-fun query__xe001c600 () (_ BitVec 32) #xe001c600)
(define-fun query_load-word32Mem_init_ () (_ BitVec 32) (load-word32 Mem_init #xe001c600))
(define-fun thread___ptr_to_struct_tcb_C_v.2_after_411 () (_ BitVec 32) (load-word32 Mem_init #xe001c600))
(define-fun query_bvadd_xe001b480bvmul () (_ BitVec 32) (bvadd #xe001b480 (bvmul #x00000004 i___unsigned_long_v.2_after_315)))
(define-fun query_load-word32Mem_initb.2 () (_ BitVec 32) (load-word32 Mem_init (bvadd #xe001b480 (bvmul #x00000004 i___unsigned_long_v.2_after_315))))
(define-fun reg___unsigned_long_v.2_after_411 () (_ BitVec 32) (load-word32 Mem_init (bvadd #xe001b480 (bvmul #x00000004 i___unsigned_long_v.2_after_315))))
(define-fun ptr.5 () (_ BitVec 32) thread___ptr_to_struct_tcb_C_v.2_after_411)
(declare-fun pvalid.5 () Bool)
(assert (=> pvalid.5 (and (word32-eq (bvand ptr.5 #x00000003) #x00000000) (and (not (word32-eq ptr.5 #x00000000)) (=> (bvult #x00000000 #x00000098) (bvule ptr.5 (bvsub #x00000000 #x00000098)))))))
(assert (=> (and pvalid.5 pvalid) (or false (or false (or (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.5))))))
(assert (and (=> (and false pvalid) pvalid.5) (=> (and false pvalid.5) pvalid)))
(assert (=> (and pvalid.5 pvalid.4) (or false (or false (or (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.5))))))
(assert (and (=> (and false pvalid.4) pvalid.5) (=> (and false pvalid.5) pvalid.4)))
(assert (=> (and pvalid.5 pvalid.1) (or false (or false (or (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.5))))))
(assert (and (=> (and false pvalid.1) pvalid.5) (=> (and false pvalid.5) pvalid.1)))
(assert (=> (and pvalid.5 pvalid.3) (or false (or false (or (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.5))))))
(assert (and (=> (and false pvalid.3) pvalid.5) (=> (and false pvalid.5) pvalid.3)))
(assert (=> (and pvalid.5 pvalid.2) (or false (or false (or (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.5))))))
(assert (and (=> (and false pvalid.2) pvalid.5) (=> (and false pvalid.5) pvalid.2)))
(define-fun cond_at_429 () Bool (and (bvult reg___unsigned_long_v.2_after_411 #x00000014) pvalid.5))
(define-fun path_cond_to_428_C () Bool (and cond_at_429 path_cond_to_411_C))
(define-fun query_bvaddthread___ptr_to () (_ BitVec 32) (bvadd thread___ptr_to_struct_tcb_C_v.2_after_411 (bvmul #x00000004 reg___unsigned_long_v.2_after_411)))
(define-fun query_load-word32Mem_initb.3 () (_ BitVec 32) (load-word32 Mem_init (bvadd thread___ptr_to_struct_tcb_C_v.2_after_411 (bvmul #x00000004 reg___unsigned_long_v.2_after_411))))
(define-fun ret__unsigned_long_v.6_after_428 () (_ BitVec 32) (load-word32 Mem_init (bvadd thread___ptr_to_struct_tcb_C_v.2_after_411 (bvmul #x00000004 reg___unsigned_long_v.2_after_411))))
(define-fun path_cond_to_408_C () Bool (and (not cond_at_414) path_cond_to_315_C))
(define-fun ptr.6 () (_ BitVec 32) buffer___ptr_to_unsigned_long_v_init)
(declare-fun pvalid.6 () Bool)
(assert (=> pvalid.6 (and (word32-eq (bvand ptr.6 #x00000003) #x00000000) (and (bvule (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x3fffffff) (and (not (word32-eq ptr.6 #x00000000)) (=> (bvult #x00000000 (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001))) (bvule ptr.6 (bvsub #x00000000 (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001))))))))))
(assert (=> (and pvalid.6 pvalid.5) (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.6))))))
(assert (and (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.5) pvalid.6) (=> (and false pvalid.6) pvalid.5)))
(assert (=> (and pvalid.6 pvalid.4) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.4) pvalid.6) (=> (and false pvalid.6) pvalid.4)))
(assert (=> (and pvalid.6 pvalid.1) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.1) pvalid.6) (=> (and false pvalid.6) pvalid.1)))
(assert (=> (and pvalid.6 pvalid.3) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000)) (bvmul #x00000003 #x00000004))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.6))))))
(assert (and (=> (and (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000)) (bvmul #x00000003 #x00000004))) pvalid.3) pvalid.6) (=> (and false pvalid.6) pvalid.3)))
(assert (=> (and pvalid.6 pvalid) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid) pvalid.6) (=> (and false pvalid.6) pvalid)))
(assert (=> (and pvalid.6 pvalid.2) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.2) pvalid.6) (=> (and false pvalid.6) pvalid.2)))
(define-fun ptr.7 () (_ BitVec 32) (bvadd buffer___ptr_to_unsigned_long_v_init (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004)))
(declare-fun pvalid.7 () Bool)
(assert (=> pvalid.7 (and (word32-eq (bvand ptr.7 #x00000003) #x00000000) (and (not (word32-eq ptr.7 #x00000000)) (=> (bvult #x00000000 #x00000004) (bvule ptr.7 (bvsub #x00000000 #x00000004)))))))
(assert (=> (and pvalid.7 pvalid.5) (or (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.7 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.7 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x00000070) #x00000000))))))))))))))) (or false (or (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.7))))))
(assert (and (=> (and (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.7 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.7 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.7 ptr.5) #x00000070) #x00000000))))))))))))))) pvalid.5) pvalid.7) (=> (and false pvalid.7) pvalid.5)))
(assert (=> (and pvalid.7 pvalid.6) (or (word32-eq (bvurem (bvsub ptr.7 ptr.6) #x00000004) #x00000000) (or false (or (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.7))))))
(assert (and (=> (and (word32-eq (bvurem (bvsub ptr.7 ptr.6) #x00000004) #x00000000) pvalid.6) pvalid.7) (=> (and false pvalid.7) pvalid.6)))
(assert (=> (and pvalid.7 pvalid.4) (or false (or false (or (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.7))))))
(assert (and (=> (and false pvalid.4) pvalid.7) (=> (and false pvalid.7) pvalid.4)))
(assert (=> (and pvalid.7 pvalid.1) (or false (or false (or (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.7))))))
(assert (and (=> (and false pvalid.1) pvalid.7) (=> (and false pvalid.7) pvalid.1)))
(assert (=> (and pvalid.7 pvalid.3) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) (or false (or (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.7))))))
(assert (and (=> (and (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) pvalid.3) pvalid.7) (=> (and false pvalid.7) pvalid.3)))
(assert (=> (and pvalid.7 pvalid) (or false (or false (or (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.7))))))
(assert (and (=> (and false pvalid) pvalid.7) (=> (and false pvalid.7) pvalid)))
(assert (=> (and pvalid.7 pvalid.2) (or false (or false (or (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.7))))))
(assert (and (=> (and false pvalid.2) pvalid.7) (=> (and false pvalid.7) pvalid.2)))
(declare-fun pvalid.8 () Bool)
(assert (=> pvalid.8 (and (word32-eq (bvand ptr.6 #x00000003) #x00000000) (and (bvule (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x3fffffff) (and (not (word32-eq ptr.6 #x00000000)) (=> (bvult #x00000000 (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001))) (bvule ptr.6 (bvsub #x00000000 (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001))))))))))
(assert (=> (and pvalid.8 pvalid.5) (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.6))))))
(assert (and (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.5) pvalid.8) (=> (and false pvalid.8) pvalid.5)))
(assert (=> (and pvalid.8 pvalid.6) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.6))))))
(assert true)
(assert (=> (and pvalid.8 pvalid.4) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.4) pvalid.8) (=> (and false pvalid.8) pvalid.4)))
(assert (=> (and pvalid.8 pvalid.1) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.1) pvalid.8) (=> (and false pvalid.8) pvalid.1)))
(assert (=> (and pvalid.8 pvalid.3) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000)) (bvmul #x00000003 #x00000004))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.6))))))
(assert (and (=> (and (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000)) (bvmul #x00000003 #x00000004))) pvalid.3) pvalid.8) (=> (and false pvalid.8) pvalid.3)))
(assert (=> (and pvalid.8 pvalid.7) (or false (or (word32-eq (bvurem (bvsub ptr.7 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.7) (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.7) pvalid.8) (=> (and (word32-eq (bvurem (bvsub ptr.7 ptr.6) #x00000004) #x00000000) pvalid.8) pvalid.7)))
(assert (=> (and pvalid.8 pvalid) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid) pvalid.8) (=> (and false pvalid.8) pvalid)))
(assert (=> (and pvalid.8 pvalid.2) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.2) pvalid.8) (=> (and false pvalid.8) pvalid.2)))
(define-fun cond_at_408 () Bool (and (and (or (word32-eq (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000000) pvalid.6) pvalid.7) (or (word32-eq (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000000) pvalid.8)))
(define-fun path_cond_to_407_C () Bool (and cond_at_408 path_cond_to_408_C))
(define-fun query_bvaddbuffer___ptr_to () (_ BitVec 32) (bvadd buffer___ptr_to_unsigned_long_v_init (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004)))
(define-fun query_load-word32Mem_initb.4 () (_ BitVec 32) (load-word32 Mem_init (bvadd buffer___ptr_to_unsigned_long_v_init (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004))))
(define-fun ret__unsigned_long_v.3_after_407 () (_ BitVec 32) (load-word32 Mem_init (bvadd buffer___ptr_to_unsigned_long_v_init (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004))))
(define-fun path_cond_to_406_C () Bool (or path_cond_to_407_C path_cond_to_428_C))
(define-fun ret__unsigned_long_v.3_v_at_406 () (_ BitVec 32) (ite path_cond_to_407_C ret__unsigned_long_v.3_after_407 ret__unsigned_long_v.6_after_428))
(define-fun i___unsigned_long_v.1_after_313 () (_ BitVec 32) #x00000001)
(define-fun cond_at_403 () Bool (bvult i___unsigned_long_v.1_after_313 #x00000004))
(define-fun path_cond_to_402_C () Bool (and cond_at_403 path_cond_to_406_C))
(define-fun cond_at_402 () Bool (bvult i___unsigned_long_v.1_after_313 #x00000004))
(define-fun path_cond_to_401_C () Bool (and cond_at_402 path_cond_to_402_C))
(define-fun cond_at_401 () Bool pvalid.4)
(define-fun path_cond_to_400_C () Bool (and cond_at_401 path_cond_to_401_C))
(define-fun thread___ptr_to_struct_tcb_C_v.1_after_400 () (_ BitVec 32) (load-word32 Mem_init #xe001c600))
(define-fun query_bvadd_xe001b480bvmul.1 () (_ BitVec 32) (bvadd #xe001b480 (bvmul #x00000004 i___unsigned_long_v.1_after_313)))
(define-fun query_load-word32Mem_initb.5 () (_ BitVec 32) (load-word32 Mem_init (bvadd #xe001b480 (bvmul #x00000004 i___unsigned_long_v.1_after_313))))
(define-fun reg___unsigned_long_v.1_after_400 () (_ BitVec 32) (load-word32 Mem_init (bvadd #xe001b480 (bvmul #x00000004 i___unsigned_long_v.1_after_313))))
(define-fun ptr.8 () (_ BitVec 32) thread___ptr_to_struct_tcb_C_v.1_after_400)
(declare-fun pvalid.9 () Bool)
(assert (=> pvalid.9 (and (word32-eq (bvand ptr.8 #x00000003) #x00000000) (and (not (word32-eq ptr.8 #x00000000)) (=> (bvult #x00000000 #x00000098) (bvule ptr.8 (bvsub #x00000000 #x00000098)))))))
(assert (=> (and pvalid.9 pvalid.5) (or (word32-eq (bvsub ptr.8 ptr.5) #x00000000) (or (word32-eq (bvsub ptr.5 ptr.8) #x00000000) (or (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.8))))))
(assert (and (=> (and (word32-eq (bvsub ptr.8 ptr.5) #x00000000) pvalid.5) pvalid.9) (=> (and (word32-eq (bvsub ptr.5 ptr.8) #x00000000) pvalid.9) pvalid.5)))
(assert (=> (and pvalid.9 pvalid.6) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.8))))))
(assert (and (=> (and false pvalid.6) pvalid.9) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.9) pvalid.6)))
(assert (=> (and pvalid.9 pvalid.4) (or false (or false (or (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.8))))))
(assert (and (=> (and false pvalid.4) pvalid.9) (=> (and false pvalid.9) pvalid.4)))
(assert (=> (and pvalid.9 pvalid.1) (or false (or false (or (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.8))))))
(assert (and (=> (and false pvalid.1) pvalid.9) (=> (and false pvalid.9) pvalid.1)))
(assert (=> (and pvalid.9 pvalid.3) (or false (or false (or (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.8))))))
(assert (and (=> (and false pvalid.3) pvalid.9) (=> (and false pvalid.9) pvalid.3)))
(assert (=> (and pvalid.9 pvalid.7) (or false (or (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.7 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.7 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x00000070) #x00000000))))))))))))))) (or (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.7) (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.8))))))
(assert (and (=> (and false pvalid.7) pvalid.9) (=> (and (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.7 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.7 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.7 ptr.8) #x00000070) #x00000000))))))))))))))) pvalid.9) pvalid.7)))
(assert (=> (and pvalid.9 pvalid) (or false (or false (or (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.8))))))
(assert (and (=> (and false pvalid) pvalid.9) (=> (and false pvalid.9) pvalid)))
(assert (=> (and pvalid.9 pvalid.8) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.8))))))
(assert (and (=> (and false pvalid.8) pvalid.9) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.9) pvalid.8)))
(assert (=> (and pvalid.9 pvalid.2) (or false (or false (or (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.8))))))
(assert (and (=> (and false pvalid.2) pvalid.9) (=> (and false pvalid.9) pvalid.2)))
(define-fun cond_at_424 () Bool (and (bvult reg___unsigned_long_v.1_after_400 #x00000014) pvalid.9))
(define-fun path_cond_to_423_C () Bool (and cond_at_424 path_cond_to_400_C))
(define-fun query_bvaddthread___ptr_to.1 () (_ BitVec 32) (bvadd thread___ptr_to_struct_tcb_C_v.1_after_400 (bvmul #x00000004 reg___unsigned_long_v.1_after_400)))
(define-fun query_load-word32Mem_initb.6 () (_ BitVec 32) (load-word32 Mem_init (bvadd thread___ptr_to_struct_tcb_C_v.1_after_400 (bvmul #x00000004 reg___unsigned_long_v.1_after_400))))
(define-fun ret__unsigned_long_v.5_after_423 () (_ BitVec 32) (load-word32 Mem_init (bvadd thread___ptr_to_struct_tcb_C_v.1_after_400 (bvmul #x00000004 reg___unsigned_long_v.1_after_400))))
(define-fun path_cond_to_397_C () Bool (and (not cond_at_403) path_cond_to_406_C))
(declare-fun pvalid.10 () Bool)
(assert (=> pvalid.10 (and (word32-eq (bvand ptr.6 #x00000003) #x00000000) (and (bvule (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x3fffffff) (and (not (word32-eq ptr.6 #x00000000)) (=> (bvult #x00000000 (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001))) (bvule ptr.6 (bvsub #x00000000 (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001))))))))))
(assert (=> (and pvalid.10 pvalid.5) (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.6))))))
(assert (and (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.5) pvalid.10) (=> (and false pvalid.10) pvalid.5)))
(assert (=> (and pvalid.10 pvalid.6) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.6))))))
(assert true)
(assert (=> (and pvalid.10 pvalid.4) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.4) pvalid.10) (=> (and false pvalid.10) pvalid.4)))
(assert (=> (and pvalid.10 pvalid.9) (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.8) (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.6))))))
(assert (and (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.9) pvalid.10) (=> (and false pvalid.10) pvalid.9)))
(assert (=> (and pvalid.10 pvalid.1) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.1) pvalid.10) (=> (and false pvalid.10) pvalid.1)))
(assert (=> (and pvalid.10 pvalid.3) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000)) (bvmul #x00000003 #x00000004))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.6))))))
(assert (and (=> (and (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000)) (bvmul #x00000003 #x00000004))) pvalid.3) pvalid.10) (=> (and false pvalid.10) pvalid.3)))
(assert (=> (and pvalid.10 pvalid.7) (or false (or (word32-eq (bvurem (bvsub ptr.7 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.7) (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.7) pvalid.10) (=> (and (word32-eq (bvurem (bvsub ptr.7 ptr.6) #x00000004) #x00000000) pvalid.10) pvalid.7)))
(assert (=> (and pvalid.10 pvalid) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid) pvalid.10) (=> (and false pvalid.10) pvalid)))
(assert (=> (and pvalid.10 pvalid.8) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.6))))))
(assert true)
(assert (=> (and pvalid.10 pvalid.2) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.2) pvalid.10) (=> (and false pvalid.10) pvalid.2)))
(define-fun ptr.9 () (_ BitVec 32) (bvadd buffer___ptr_to_unsigned_long_v_init (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004)))
(declare-fun pvalid.11 () Bool)
(assert (=> pvalid.11 (and (word32-eq (bvand ptr.9 #x00000003) #x00000000) (and (not (word32-eq ptr.9 #x00000000)) (=> (bvult #x00000000 #x00000004) (bvule ptr.9 (bvsub #x00000000 #x00000004)))))))
(assert (=> (and pvalid.11 pvalid.5) (or (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.9 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.9 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x00000070) #x00000000))))))))))))))) (or false (or (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.9))))))
(assert (and (=> (and (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.9 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.9 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.9 ptr.5) #x00000070) #x00000000))))))))))))))) pvalid.5) pvalid.11) (=> (and false pvalid.11) pvalid.5)))
(assert (=> (and pvalid.11 pvalid.6) (or (word32-eq (bvurem (bvsub ptr.9 ptr.6) #x00000004) #x00000000) (or false (or (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.9))))))
(assert (and (=> (and (word32-eq (bvurem (bvsub ptr.9 ptr.6) #x00000004) #x00000000) pvalid.6) pvalid.11) (=> (and false pvalid.11) pvalid.6)))
(assert (=> (and pvalid.11 pvalid.4) (or false (or false (or (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.9))))))
(assert (and (=> (and false pvalid.4) pvalid.11) (=> (and false pvalid.11) pvalid.4)))
(assert (=> (and pvalid.11 pvalid.9) (or (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.9 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.9 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x00000070) #x00000000))))))))))))))) (or false (or (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.8) (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.9))))))
(assert (and (=> (and (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.9 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.9 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.9 ptr.8) #x00000070) #x00000000))))))))))))))) pvalid.9) pvalid.11) (=> (and false pvalid.11) pvalid.9)))
(assert (=> (and pvalid.11 pvalid.10) (or (word32-eq (bvurem (bvsub ptr.9 ptr.6) #x00000004) #x00000000) (or false (or (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.9))))))
(assert (and (=> (and (word32-eq (bvurem (bvsub ptr.9 ptr.6) #x00000004) #x00000000) pvalid.10) pvalid.11) (=> (and false pvalid.11) pvalid.10)))
(assert (=> (and pvalid.11 pvalid.1) (or false (or false (or (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.9))))))
(assert (and (=> (and false pvalid.1) pvalid.11) (=> (and false pvalid.11) pvalid.1)))
(assert (=> (and pvalid.11 pvalid.3) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) (or false (or (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.9))))))
(assert (and (=> (and (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) pvalid.3) pvalid.11) (=> (and false pvalid.11) pvalid.3)))
(assert (=> (and pvalid.11 pvalid.7) (or (word32-eq (bvsub ptr.9 ptr.7) #x00000000) (or (word32-eq (bvsub ptr.7 ptr.9) #x00000000) (or (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.7) (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.9))))))
(assert (and (=> (and (word32-eq (bvsub ptr.9 ptr.7) #x00000000) pvalid.7) pvalid.11) (=> (and (word32-eq (bvsub ptr.7 ptr.9) #x00000000) pvalid.11) pvalid.7)))
(assert (=> (and pvalid.11 pvalid) (or false (or false (or (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.9))))))
(assert (and (=> (and false pvalid) pvalid.11) (=> (and false pvalid.11) pvalid)))
(assert (=> (and pvalid.11 pvalid.8) (or (word32-eq (bvurem (bvsub ptr.9 ptr.6) #x00000004) #x00000000) (or false (or (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.9))))))
(assert (and (=> (and (word32-eq (bvurem (bvsub ptr.9 ptr.6) #x00000004) #x00000000) pvalid.8) pvalid.11) (=> (and false pvalid.11) pvalid.8)))
(assert (=> (and pvalid.11 pvalid.2) (or false (or false (or (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.9))))))
(assert (and (=> (and false pvalid.2) pvalid.11) (=> (and false pvalid.11) pvalid.2)))
(declare-fun pvalid.12 () Bool)
(assert (=> pvalid.12 (and (word32-eq (bvand ptr.6 #x00000003) #x00000000) (and (bvule (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x3fffffff) (and (not (word32-eq ptr.6 #x00000000)) (=> (bvult #x00000000 (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001))) (bvule ptr.6 (bvsub #x00000000 (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001))))))))))
(assert (=> (and pvalid.12 pvalid.11) (or false (or (word32-eq (bvurem (bvsub ptr.9 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.9) (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.11) pvalid.12) (=> (and (word32-eq (bvurem (bvsub ptr.9 ptr.6) #x00000004) #x00000000) pvalid.12) pvalid.11)))
(assert (=> (and pvalid.12 pvalid.5) (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.6))))))
(assert (and (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.5) pvalid.12) (=> (and false pvalid.12) pvalid.5)))
(assert (=> (and pvalid.12 pvalid.6) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.6))))))
(assert true)
(assert (=> (and pvalid.12 pvalid.4) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.4) pvalid.12) (=> (and false pvalid.12) pvalid.4)))
(assert (=> (and pvalid.12 pvalid.9) (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.8) (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.6))))))
(assert (and (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.9) pvalid.12) (=> (and false pvalid.12) pvalid.9)))
(assert (=> (and pvalid.12 pvalid.10) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.6))))))
(assert true)
(assert (=> (and pvalid.12 pvalid.1) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.1) pvalid.12) (=> (and false pvalid.12) pvalid.1)))
(assert (=> (and pvalid.12 pvalid.3) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000)) (bvmul #x00000003 #x00000004))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.6))))))
(assert (and (=> (and (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000)) (bvmul #x00000003 #x00000004))) pvalid.3) pvalid.12) (=> (and false pvalid.12) pvalid.3)))
(assert (=> (and pvalid.12 pvalid.7) (or false (or (word32-eq (bvurem (bvsub ptr.7 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.7) (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.7) pvalid.12) (=> (and (word32-eq (bvurem (bvsub ptr.7 ptr.6) #x00000004) #x00000000) pvalid.12) pvalid.7)))
(assert (=> (and pvalid.12 pvalid) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid) pvalid.12) (=> (and false pvalid.12) pvalid)))
(assert (=> (and pvalid.12 pvalid.8) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.6))))))
(assert true)
(assert (=> (and pvalid.12 pvalid.2) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.2) pvalid.12) (=> (and false pvalid.12) pvalid.2)))
(define-fun cond_at_397 () Bool (and (and (or (word32-eq (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000000) pvalid.10) pvalid.11) (or (word32-eq (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000000) pvalid.12)))
(define-fun path_cond_to_396_C () Bool (and cond_at_397 path_cond_to_397_C))
(define-fun query_bvaddbuffer___ptr_to.1 () (_ BitVec 32) (bvadd buffer___ptr_to_unsigned_long_v_init (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004)))
(define-fun query_load-word32Mem_initb.7 () (_ BitVec 32) (load-word32 Mem_init (bvadd buffer___ptr_to_unsigned_long_v_init (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004))))
(define-fun ret__unsigned_long_v.2_after_396 () (_ BitVec 32) (load-word32 Mem_init (bvadd buffer___ptr_to_unsigned_long_v_init (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004))))
(define-fun path_cond_to_395_C () Bool (or path_cond_to_423_C path_cond_to_396_C))
(define-fun ret__unsigned_long_v.2_v_at_395 () (_ BitVec 32) (ite path_cond_to_396_C ret__unsigned_long_v.2_after_396 ret__unsigned_long_v.5_after_423))
(define-fun i___unsigned_long_v_after_311 () (_ BitVec 32) #x00000002)
(define-fun cond_at_392 () Bool (bvult i___unsigned_long_v_after_311 #x00000004))
(define-fun path_cond_to_391_C () Bool (and cond_at_392 path_cond_to_395_C))
(define-fun cond_at_391 () Bool (bvult i___unsigned_long_v_after_311 #x00000004))
(define-fun path_cond_to_390_C () Bool (and cond_at_391 path_cond_to_391_C))
(define-fun cond_at_390 () Bool pvalid.4)
(define-fun path_cond_to_389_C () Bool (and cond_at_390 path_cond_to_390_C))
(define-fun thread___ptr_to_struct_tcb_C_v_after_389 () (_ BitVec 32) (load-word32 Mem_init #xe001c600))
(define-fun query_bvadd_xe001b480bvmul.2 () (_ BitVec 32) (bvadd #xe001b480 (bvmul #x00000004 i___unsigned_long_v_after_311)))
(define-fun query_load-word32Mem_initb.8 () (_ BitVec 32) (load-word32 Mem_init (bvadd #xe001b480 (bvmul #x00000004 i___unsigned_long_v_after_311))))
(define-fun reg___unsigned_long_v_after_389 () (_ BitVec 32) (load-word32 Mem_init (bvadd #xe001b480 (bvmul #x00000004 i___unsigned_long_v_after_311))))
(define-fun ptr.10 () (_ BitVec 32) thread___ptr_to_struct_tcb_C_v_after_389)
(declare-fun pvalid.13 () Bool)
(assert (=> pvalid.13 (and (word32-eq (bvand ptr.10 #x00000003) #x00000000) (and (not (word32-eq ptr.10 #x00000000)) (=> (bvult #x00000000 #x00000098) (bvule ptr.10 (bvsub #x00000000 #x00000098)))))))
(assert (=> (and pvalid.13 pvalid.11) (or false (or (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.9 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.9 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x00000070) #x00000000))))))))))))))) (or (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.9) (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.10))))))
(assert (and (=> (and false pvalid.11) pvalid.13) (=> (and (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.9 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.9 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.9 ptr.10) #x00000070) #x00000000))))))))))))))) pvalid.13) pvalid.11)))
(assert (=> (and pvalid.13 pvalid.5) (or (word32-eq (bvsub ptr.10 ptr.5) #x00000000) (or (word32-eq (bvsub ptr.5 ptr.10) #x00000000) (or (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.10))))))
(assert (and (=> (and (word32-eq (bvsub ptr.10 ptr.5) #x00000000) pvalid.5) pvalid.13) (=> (and (word32-eq (bvsub ptr.5 ptr.10) #x00000000) pvalid.13) pvalid.5)))
(assert (=> (and pvalid.13 pvalid.6) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.10))))))
(assert (and (=> (and false pvalid.6) pvalid.13) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.13) pvalid.6)))
(assert (=> (and pvalid.13 pvalid.4) (or false (or false (or (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.10))))))
(assert (and (=> (and false pvalid.4) pvalid.13) (=> (and false pvalid.13) pvalid.4)))
(assert (=> (and pvalid.13 pvalid.9) (or (word32-eq (bvsub ptr.10 ptr.8) #x00000000) (or (word32-eq (bvsub ptr.8 ptr.10) #x00000000) (or (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.8) (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.10))))))
(assert (and (=> (and (word32-eq (bvsub ptr.10 ptr.8) #x00000000) pvalid.9) pvalid.13) (=> (and (word32-eq (bvsub ptr.8 ptr.10) #x00000000) pvalid.13) pvalid.9)))
(assert (=> (and pvalid.13 pvalid.12) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.10))))))
(assert (and (=> (and false pvalid.12) pvalid.13) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.13) pvalid.12)))
(assert (=> (and pvalid.13 pvalid.10) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.10))))))
(assert (and (=> (and false pvalid.10) pvalid.13) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.13) pvalid.10)))
(assert (=> (and pvalid.13 pvalid.1) (or false (or false (or (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.10))))))
(assert (and (=> (and false pvalid.1) pvalid.13) (=> (and false pvalid.13) pvalid.1)))
(assert (=> (and pvalid.13 pvalid.3) (or false (or false (or (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.10))))))
(assert (and (=> (and false pvalid.3) pvalid.13) (=> (and false pvalid.13) pvalid.3)))
(assert (=> (and pvalid.13 pvalid.7) (or false (or (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.7 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.7 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x00000070) #x00000000))))))))))))))) (or (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.7) (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.10))))))
(assert (and (=> (and false pvalid.7) pvalid.13) (=> (and (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.7 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.7 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.7 ptr.10) #x00000070) #x00000000))))))))))))))) pvalid.13) pvalid.7)))
(assert (=> (and pvalid.13 pvalid) (or false (or false (or (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.10))))))
(assert (and (=> (and false pvalid) pvalid.13) (=> (and false pvalid.13) pvalid)))
(assert (=> (and pvalid.13 pvalid.8) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.10))))))
(assert (and (=> (and false pvalid.8) pvalid.13) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.13) pvalid.8)))
(assert (=> (and pvalid.13 pvalid.2) (or false (or false (or (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.10))))))
(assert (and (=> (and false pvalid.2) pvalid.13) (=> (and false pvalid.13) pvalid.2)))
(define-fun cond_at_419 () Bool (and (bvult reg___unsigned_long_v_after_389 #x00000014) pvalid.13))
(define-fun path_cond_to_418_C () Bool (and cond_at_419 path_cond_to_389_C))
(define-fun query_bvaddthread___ptr_to.2 () (_ BitVec 32) (bvadd thread___ptr_to_struct_tcb_C_v_after_389 (bvmul #x00000004 reg___unsigned_long_v_after_389)))
(define-fun query_load-word32Mem_initb.9 () (_ BitVec 32) (load-word32 Mem_init (bvadd thread___ptr_to_struct_tcb_C_v_after_389 (bvmul #x00000004 reg___unsigned_long_v_after_389))))
(define-fun ret__unsigned_long_v.4_after_418 () (_ BitVec 32) (load-word32 Mem_init (bvadd thread___ptr_to_struct_tcb_C_v_after_389 (bvmul #x00000004 reg___unsigned_long_v_after_389))))
(define-fun path_cond_to_386_C () Bool (and (not cond_at_392) path_cond_to_395_C))
(declare-fun pvalid.14 () Bool)
(assert (=> pvalid.14 (and (word32-eq (bvand ptr.6 #x00000003) #x00000000) (and (bvule (bvadd i___unsigned_long_v_after_311 #x00000001) #x3fffffff) (and (not (word32-eq ptr.6 #x00000000)) (=> (bvult #x00000000 (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001))) (bvule ptr.6 (bvsub #x00000000 (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001))))))))))
(assert (=> (and pvalid.14 pvalid.11) (or false (or (word32-eq (bvurem (bvsub ptr.9 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.9) (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.11) pvalid.14) (=> (and (word32-eq (bvurem (bvsub ptr.9 ptr.6) #x00000004) #x00000000) pvalid.14) pvalid.11)))
(assert (=> (and pvalid.14 pvalid.5) (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.6))))))
(assert (and (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.5) pvalid.14) (=> (and false pvalid.14) pvalid.5)))
(assert (=> (and pvalid.14 pvalid.6) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.6))))))
(assert true)
(assert (=> (and pvalid.14 pvalid.4) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.4) pvalid.14) (=> (and false pvalid.14) pvalid.4)))
(assert (=> (and pvalid.14 pvalid.9) (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.8) (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.6))))))
(assert (and (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.9) pvalid.14) (=> (and false pvalid.14) pvalid.9)))
(assert (=> (and pvalid.14 pvalid.12) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.6))))))
(assert true)
(assert (=> (and pvalid.14 pvalid.10) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.6))))))
(assert true)
(assert (=> (and pvalid.14 pvalid.1) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.1) pvalid.14) (=> (and false pvalid.14) pvalid.1)))
(assert (=> (and pvalid.14 pvalid.3) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000)) (bvmul #x00000003 #x00000004))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.6))))))
(assert (and (=> (and (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000)) (bvmul #x00000003 #x00000004))) pvalid.3) pvalid.14) (=> (and false pvalid.14) pvalid.3)))
(assert (=> (and pvalid.14 pvalid.7) (or false (or (word32-eq (bvurem (bvsub ptr.7 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.7) (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.7) pvalid.14) (=> (and (word32-eq (bvurem (bvsub ptr.7 ptr.6) #x00000004) #x00000000) pvalid.14) pvalid.7)))
(assert (=> (and pvalid.14 pvalid) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid) pvalid.14) (=> (and false pvalid.14) pvalid)))
(assert (=> (and pvalid.14 pvalid.8) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.6))))))
(assert true)
(assert (=> (and pvalid.14 pvalid.13) (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.10) (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.6))))))
(assert (and (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.13) pvalid.14) (=> (and false pvalid.14) pvalid.13)))
(assert (=> (and pvalid.14 pvalid.2) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.2) pvalid.14) (=> (and false pvalid.14) pvalid.2)))
(define-fun ptr.11 () (_ BitVec 32) (bvadd buffer___ptr_to_unsigned_long_v_init (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004)))
(declare-fun pvalid.15 () Bool)
(assert (=> pvalid.15 (and (word32-eq (bvand ptr.11 #x00000003) #x00000000) (and (not (word32-eq ptr.11 #x00000000)) (=> (bvult #x00000000 #x00000004) (bvule ptr.11 (bvsub #x00000000 #x00000004)))))))
(assert (=> (and pvalid.15 pvalid.11) (or (word32-eq (bvsub ptr.11 ptr.9) #x00000000) (or (word32-eq (bvsub ptr.9 ptr.11) #x00000000) (or (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.9) (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.11))))))
(assert (and (=> (and (word32-eq (bvsub ptr.11 ptr.9) #x00000000) pvalid.11) pvalid.15) (=> (and (word32-eq (bvsub ptr.9 ptr.11) #x00000000) pvalid.15) pvalid.11)))
(assert (=> (and pvalid.15 pvalid.5) (or (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.11 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.11 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x00000070) #x00000000))))))))))))))) (or false (or (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.11))))))
(assert (and (=> (and (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.11 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.11 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.11 ptr.5) #x00000070) #x00000000))))))))))))))) pvalid.5) pvalid.15) (=> (and false pvalid.15) pvalid.5)))
(assert (=> (and pvalid.15 pvalid.6) (or (word32-eq (bvurem (bvsub ptr.11 ptr.6) #x00000004) #x00000000) (or false (or (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.11))))))
(assert (and (=> (and (word32-eq (bvurem (bvsub ptr.11 ptr.6) #x00000004) #x00000000) pvalid.6) pvalid.15) (=> (and false pvalid.15) pvalid.6)))
(assert (=> (and pvalid.15 pvalid.4) (or false (or false (or (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.11))))))
(assert (and (=> (and false pvalid.4) pvalid.15) (=> (and false pvalid.15) pvalid.4)))
(assert (=> (and pvalid.15 pvalid.9) (or (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.11 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.11 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x00000070) #x00000000))))))))))))))) (or false (or (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.8) (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.11))))))
(assert (and (=> (and (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.11 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.11 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.11 ptr.8) #x00000070) #x00000000))))))))))))))) pvalid.9) pvalid.15) (=> (and false pvalid.15) pvalid.9)))
(assert (=> (and pvalid.15 pvalid.12) (or (word32-eq (bvurem (bvsub ptr.11 ptr.6) #x00000004) #x00000000) (or false (or (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.11))))))
(assert (and (=> (and (word32-eq (bvurem (bvsub ptr.11 ptr.6) #x00000004) #x00000000) pvalid.12) pvalid.15) (=> (and false pvalid.15) pvalid.12)))
(assert (=> (and pvalid.15 pvalid.10) (or (word32-eq (bvurem (bvsub ptr.11 ptr.6) #x00000004) #x00000000) (or false (or (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.11))))))
(assert (and (=> (and (word32-eq (bvurem (bvsub ptr.11 ptr.6) #x00000004) #x00000000) pvalid.10) pvalid.15) (=> (and false pvalid.15) pvalid.10)))
(assert (=> (and pvalid.15 pvalid.14) (or (word32-eq (bvurem (bvsub ptr.11 ptr.6) #x00000004) #x00000000) (or false (or (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.11))))))
(assert (and (=> (and (word32-eq (bvurem (bvsub ptr.11 ptr.6) #x00000004) #x00000000) pvalid.14) pvalid.15) (=> (and false pvalid.15) pvalid.14)))
(assert (=> (and pvalid.15 pvalid.1) (or false (or false (or (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.11))))))
(assert (and (=> (and false pvalid.1) pvalid.15) (=> (and false pvalid.15) pvalid.1)))
(assert (=> (and pvalid.15 pvalid.3) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) (or false (or (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.11))))))
(assert (and (=> (and (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) pvalid.3) pvalid.15) (=> (and false pvalid.15) pvalid.3)))
(assert (=> (and pvalid.15 pvalid.7) (or (word32-eq (bvsub ptr.11 ptr.7) #x00000000) (or (word32-eq (bvsub ptr.7 ptr.11) #x00000000) (or (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.7) (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.11))))))
(assert (and (=> (and (word32-eq (bvsub ptr.11 ptr.7) #x00000000) pvalid.7) pvalid.15) (=> (and (word32-eq (bvsub ptr.7 ptr.11) #x00000000) pvalid.15) pvalid.7)))
(assert (=> (and pvalid.15 pvalid) (or false (or false (or (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.11))))))
(assert (and (=> (and false pvalid) pvalid.15) (=> (and false pvalid.15) pvalid)))
(assert (=> (and pvalid.15 pvalid.8) (or (word32-eq (bvurem (bvsub ptr.11 ptr.6) #x00000004) #x00000000) (or false (or (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.11))))))
(assert (and (=> (and (word32-eq (bvurem (bvsub ptr.11 ptr.6) #x00000004) #x00000000) pvalid.8) pvalid.15) (=> (and false pvalid.15) pvalid.8)))
(assert (=> (and pvalid.15 pvalid.13) (or (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.11 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.11 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x00000070) #x00000000))))))))))))))) (or false (or (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.10) (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.11))))))
(assert (and (=> (and (or (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.11 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.11 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x00000084) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x00000078) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x00000094) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x00000090) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x00000074) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x00000080) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x00000088) #x00000000) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x0000007c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x0000008c) #x00000000) (or (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x0000005c) #x00000000) (word32-eq (bvsub (bvsub ptr.11 ptr.10) #x00000070) #x00000000))))))))))))))) pvalid.13) pvalid.15) (=> (and false pvalid.15) pvalid.13)))
(assert (=> (and pvalid.15 pvalid.2) (or false (or false (or (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.11))))))
(assert (and (=> (and false pvalid.2) pvalid.15) (=> (and false pvalid.15) pvalid.2)))
(declare-fun pvalid.16 () Bool)
(assert (=> pvalid.16 (and (word32-eq (bvand ptr.6 #x00000003) #x00000000) (and (bvule (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x3fffffff) (and (not (word32-eq ptr.6 #x00000000)) (=> (bvult #x00000000 (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001))) (bvule ptr.6 (bvsub #x00000000 (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001))))))))))
(assert (=> (and pvalid.16 pvalid.11) (or false (or (word32-eq (bvurem (bvsub ptr.9 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.9) (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.11) pvalid.16) (=> (and (word32-eq (bvurem (bvsub ptr.9 ptr.6) #x00000004) #x00000000) pvalid.16) pvalid.11)))
(assert (=> (and pvalid.16 pvalid.5) (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.6))))))
(assert (and (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.5) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.5) pvalid.16) (=> (and false pvalid.16) pvalid.5)))
(assert (=> (and pvalid.16 pvalid.15) (or false (or (word32-eq (bvurem (bvsub ptr.11 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.11) (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.15) pvalid.16) (=> (and (word32-eq (bvurem (bvsub ptr.11 ptr.6) #x00000004) #x00000000) pvalid.16) pvalid.15)))
(assert (=> (and pvalid.16 pvalid.6) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.6))))))
(assert true)
(assert (=> (and pvalid.16 pvalid.4) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.4) pvalid.16) (=> (and false pvalid.16) pvalid.4)))
(assert (=> (and pvalid.16 pvalid.9) (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.8) (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.6))))))
(assert (and (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.8) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.9) pvalid.16) (=> (and false pvalid.16) pvalid.9)))
(assert (=> (and pvalid.16 pvalid.12) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.6))))))
(assert true)
(assert (=> (and pvalid.16 pvalid.10) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.6))))))
(assert true)
(assert (=> (and pvalid.16 pvalid.14) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.6))))))
(assert true)
(assert (=> (and pvalid.16 pvalid.1) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.1) pvalid.16) (=> (and false pvalid.16) pvalid.1)))
(assert (=> (and pvalid.16 pvalid.3) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000)) (bvmul #x00000003 #x00000004))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.6))))))
(assert (and (=> (and (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.3) #x00000000) #x00000000)) (bvmul #x00000003 #x00000004))) pvalid.3) pvalid.16) (=> (and false pvalid.16) pvalid.3)))
(assert (=> (and pvalid.16 pvalid.7) (or false (or (word32-eq (bvurem (bvsub ptr.7 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.7) (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.7) pvalid.16) (=> (and (word32-eq (bvurem (bvsub ptr.7 ptr.6) #x00000004) #x00000000) pvalid.16) pvalid.7)))
(assert (=> (and pvalid.16 pvalid) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid) pvalid.16) (=> (and false pvalid.16) pvalid)))
(assert (=> (and pvalid.16 pvalid.8) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (word32-eq (bvurem (bvsub ptr.6 ptr.6) #x00000004) #x00000000) (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.6))))))
(assert true)
(assert (=> (and pvalid.16 pvalid.13) (or (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.10) (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.6))))))
(assert (and (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) (bvmul #x00000014 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000000) #x00000000) #x00000000)) (bvmul #x00000014 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) (bvmul #x00000003 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000050) #x00000000)) (bvmul #x00000003 #x00000004))) (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000060) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.10) #x00000068) #x00000000)) (bvmul #x00000002 #x00000004)))))) pvalid.13) pvalid.16) (=> (and false pvalid.16) pvalid.13)))
(assert (=> (and pvalid.16 pvalid.2) (or false (or false (or (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.6))))))
(assert (and (=> (and false pvalid.2) pvalid.16) (=> (and false pvalid.16) pvalid.2)))
(define-fun cond_at_386 () Bool (and (and (or (word32-eq (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000000) pvalid.14) pvalid.15) (or (word32-eq (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000000) pvalid.16)))
(define-fun path_cond_to_385_C () Bool (and cond_at_386 path_cond_to_386_C))
(define-fun query_bvaddbuffer___ptr_to.2 () (_ BitVec 32) (bvadd buffer___ptr_to_unsigned_long_v_init (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004)))
(define-fun query_load-word32Mem_initb.10 () (_ BitVec 32) (load-word32 Mem_init (bvadd buffer___ptr_to_unsigned_long_v_init (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004))))
(define-fun ret__unsigned_long_v.1_after_385 () (_ BitVec 32) (load-word32 Mem_init (bvadd buffer___ptr_to_unsigned_long_v_init (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004))))
(define-fun path_cond_to_384_C () Bool (or path_cond_to_418_C path_cond_to_385_C))
(define-fun ret__unsigned_long_v.1_v_at_384 () (_ BitVec 32) (ite path_cond_to_385_C ret__unsigned_long_v.1_after_385 ret__unsigned_long_v.4_after_418))
(define-fun cond_at_309 () Bool (and (bvslt #x00000000 #x00000003) (bvsle #x00000000 #x00000000)))
(define-fun path_cond_to_308_C () Bool (and cond_at_309 path_cond_to_384_C))
(define-fun cond_at_308 () Bool pvalid.3)
(define-fun path_cond_to_307_C () Bool (and cond_at_308 path_cond_to_308_C))
(define-fun cRootSlot___ptr_to_struct_cte_C_v_after_307 () (_ BitVec 32) (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000000)))))
(define-fun cond_at_306 () Bool pvalid.3)
(define-fun path_cond_to_305_C () Bool (and cond_at_306 path_cond_to_307_C))
(define-fun ptr.12 () (_ BitVec 32) (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000000)))))
(declare-fun pvalid.17 () Bool)
(assert (=> pvalid.17 (and (word32-eq (bvand ptr.12 #x00000003) #x00000000) (and (not (word32-eq ptr.12 #x00000000)) (=> (bvult #x00000000 #x00000010) (bvule ptr.12 (bvsub #x00000000 #x00000010)))))))
(assert (=> (and pvalid.17 pvalid.11) (or false (or (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.9) (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid.11) pvalid.17) (=> (and (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.17) pvalid.11)))
(assert (=> (and pvalid.17 pvalid.16) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid.16) pvalid.17) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) pvalid.17) pvalid.16)))
(assert (=> (and pvalid.17 pvalid.5) (or false (or false (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid.5) pvalid.17) (=> (and false pvalid.17) pvalid.5)))
(assert (=> (and pvalid.17 pvalid.15) (or false (or (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.11) (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid.15) pvalid.17) (=> (and (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.17) pvalid.15)))
(assert (=> (and pvalid.17 pvalid.6) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid.6) pvalid.17) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) pvalid.17) pvalid.6)))
(assert (=> (and pvalid.17 pvalid.4) (or false (or false (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid.4) pvalid.17) (=> (and false pvalid.17) pvalid.4)))
(assert (=> (and pvalid.17 pvalid.9) (or false (or false (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.8) (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid.9) pvalid.17) (=> (and false pvalid.17) pvalid.9)))
(assert (=> (and pvalid.17 pvalid.12) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid.12) pvalid.17) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) pvalid.17) pvalid.12)))
(assert (=> (and pvalid.17 pvalid.10) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid.10) pvalid.17) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) pvalid.17) pvalid.10)))
(assert (=> (and pvalid.17 pvalid.14) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid.14) pvalid.17) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) pvalid.17) pvalid.14)))
(assert (=> (and pvalid.17 pvalid.1) (or false (or false (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid.1) pvalid.17) (=> (and false pvalid.17) pvalid.1)))
(assert (=> (and pvalid.17 pvalid.3) (or false (or false (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid.3) pvalid.17) (=> (and false pvalid.17) pvalid.3)))
(assert (=> (and pvalid.17 pvalid.7) (or false (or (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.7) (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid.7) pvalid.17) (=> (and (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.17) pvalid.7)))
(assert (=> (and pvalid.17 pvalid) (or false (or false (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid) pvalid.17) (=> (and false pvalid.17) pvalid)))
(assert (=> (and pvalid.17 pvalid.8) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid.8) pvalid.17) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.12) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) pvalid.17) pvalid.8)))
(assert (=> (and pvalid.17 pvalid.13) (or false (or false (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.10) (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid.13) pvalid.17) (=> (and false pvalid.17) pvalid.13)))
(assert (=> (and pvalid.17 pvalid.2) (or false (or false (or (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.12))))))
(assert (and (=> (and false pvalid.2) pvalid.17) (=> (and false pvalid.17) pvalid.2)))
(define-fun cond_at_305 () Bool (and (and pvalid.17 (bvslt #x00000000 #x00000003)) (bvsle #x00000000 #x00000000)))
(define-fun path_cond_to_304_C () Bool (and cond_at_305 path_cond_to_305_C))
(define-fun cond_at_304 () Bool pvalid.3)
(define-fun path_cond_to_303_C () Bool (and cond_at_304 path_cond_to_304_C))
(define-fun query_bvaddload-word32Mem_ () (_ BitVec 32) (bvadd (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000000)))) (bvadd #x00000000 (bvmul #x00000004 #x00000000))))
(define-fun query_load-word32Mem_initb.11 () (_ BitVec 32) (load-word32 Mem_init (bvadd (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000000)))) (bvadd #x00000000 (bvmul #x00000004 #x00000000)))))
(define-fun cRootCap___struct_cap_C_v.words_C.0_after_303 () (_ BitVec 32) (load-word32 Mem_init (bvadd (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000000)))) (bvadd #x00000000 (bvmul #x00000004 #x00000000)))))
(define-fun query_bvaddload-word32Mem_.1 () (_ BitVec 32) (bvadd (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000000)))) (bvadd #x00000000 (bvmul #x00000004 #x00000001))))
(define-fun query_load-word32Mem_initb.12 () (_ BitVec 32) (load-word32 Mem_init (bvadd (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000000)))) (bvadd #x00000000 (bvmul #x00000004 #x00000001)))))
(define-fun cRootCap___struct_cap_C_v.words_C.1_after_303 () (_ BitVec 32) (load-word32 Mem_init (bvadd (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000000)))) (bvadd #x00000000 (bvmul #x00000004 #x00000001)))))
(define-fun cond_at_302 () Bool (and (bvslt #x00000001 #x00000003) (bvsle #x00000000 #x00000001)))
(define-fun path_cond_to_301_C () Bool (and cond_at_302 path_cond_to_303_C))
(define-fun cond_at_301 () Bool pvalid.3)
(define-fun path_cond_to_300_C () Bool (and cond_at_301 path_cond_to_301_C))
(define-fun vRootSlot___ptr_to_struct_cte_C_v_after_300 () (_ BitVec 32) (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000001)))))
(define-fun cond_at_299 () Bool pvalid.3)
(define-fun path_cond_to_298_C () Bool (and cond_at_299 path_cond_to_300_C))
(define-fun ptr.13 () (_ BitVec 32) (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000001)))))
(declare-fun pvalid.18 () Bool)
(assert (=> pvalid.18 (and (word32-eq (bvand ptr.13 #x00000003) #x00000000) (and (not (word32-eq ptr.13 #x00000000)) (=> (bvult #x00000000 #x00000010) (bvule ptr.13 (bvsub #x00000000 #x00000010)))))))
(assert (=> (and pvalid.18 pvalid.11) (or false (or (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.9) (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid.11) pvalid.18) (=> (and (or (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvsub ptr.9 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.9 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.18) pvalid.11)))
(assert (=> (and pvalid.18 pvalid.16) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid.16) pvalid.18) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) pvalid.18) pvalid.16)))
(assert (=> (and pvalid.18 pvalid.5) (or false (or false (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid.5) pvalid.18) (=> (and false pvalid.18) pvalid.5)))
(assert (=> (and pvalid.18 pvalid.15) (or false (or (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.11) (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid.15) pvalid.18) (=> (and (or (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvsub ptr.11 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.11 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.18) pvalid.15)))
(assert (=> (and pvalid.18 pvalid.6) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid.6) pvalid.18) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) pvalid.18) pvalid.6)))
(assert (=> (and pvalid.18 pvalid.4) (or false (or false (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid.4) pvalid.18) (=> (and false pvalid.18) pvalid.4)))
(assert (=> (and pvalid.18 pvalid.17) (or (word32-eq (bvsub ptr.13 ptr.12) #x00000000) (or (word32-eq (bvsub ptr.12 ptr.13) #x00000000) (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.12) (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.13))))))
(assert (and (=> (and (word32-eq (bvsub ptr.13 ptr.12) #x00000000) pvalid.17) pvalid.18) (=> (and (word32-eq (bvsub ptr.12 ptr.13) #x00000000) pvalid.18) pvalid.17)))
(assert (=> (and pvalid.18 pvalid.9) (or false (or false (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.8) (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid.9) pvalid.18) (=> (and false pvalid.18) pvalid.9)))
(assert (=> (and pvalid.18 pvalid.12) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid.12) pvalid.18) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) pvalid.18) pvalid.12)))
(assert (=> (and pvalid.18 pvalid.10) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid.10) pvalid.18) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) pvalid.18) pvalid.10)))
(assert (=> (and pvalid.18 pvalid.14) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid.14) pvalid.18) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) pvalid.18) pvalid.14)))
(assert (=> (and pvalid.18 pvalid.1) (or false (or false (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid.1) pvalid.18) (=> (and false pvalid.18) pvalid.1)))
(assert (=> (and pvalid.18 pvalid.3) (or false (or false (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid.3) pvalid.18) (=> (and false pvalid.18) pvalid.3)))
(assert (=> (and pvalid.18 pvalid.7) (or false (or (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.7) (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid.7) pvalid.18) (=> (and (or (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvsub ptr.7 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.7 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.18) pvalid.7)))
(assert (=> (and pvalid.18 pvalid) (or false (or false (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid) pvalid.18) (=> (and false pvalid.18) pvalid)))
(assert (=> (and pvalid.18 pvalid.8) (or false (or (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid.8) pvalid.18) (=> (and (or (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000000) #x00000000)) (bvmul #x00000002 #x00000004))) (and (and (bvult (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000) #x00000004) #x00000000)) (bvule (bvadd (bvmul (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001) #x00000004) (bvsub (bvsub (bvsub ptr.6 ptr.13) #x00000008) #x00000000)) (bvmul #x00000002 #x00000004)))) pvalid.18) pvalid.8)))
(assert (=> (and pvalid.18 pvalid.13) (or false (or false (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.10) (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid.13) pvalid.18) (=> (and false pvalid.18) pvalid.13)))
(assert (=> (and pvalid.18 pvalid.2) (or false (or false (or (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.13))))))
(assert (and (=> (and false pvalid.2) pvalid.18) (=> (and false pvalid.18) pvalid.2)))
(define-fun cond_at_298 () Bool (and (and pvalid.18 (bvslt #x00000001 #x00000003)) (bvsle #x00000000 #x00000001)))
(define-fun path_cond_to_297_C () Bool (and cond_at_298 path_cond_to_298_C))
(define-fun cond_at_297 () Bool pvalid.3)
(define-fun path_cond_to_296_C () Bool (and cond_at_297 path_cond_to_297_C))
(define-fun query_bvaddload-word32Mem_.2 () (_ BitVec 32) (bvadd (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000001)))) (bvadd #x00000000 (bvmul #x00000004 #x00000000))))
(define-fun query_load-word32Mem_initb.13 () (_ BitVec 32) (load-word32 Mem_init (bvadd (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000001)))) (bvadd #x00000000 (bvmul #x00000004 #x00000000)))))
(define-fun vRootCap___struct_cap_C_v.words_C.0_after_296 () (_ BitVec 32) (load-word32 Mem_init (bvadd (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000001)))) (bvadd #x00000000 (bvmul #x00000004 #x00000000)))))
(define-fun query_bvaddload-word32Mem_.3 () (_ BitVec 32) (bvadd (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000001)))) (bvadd #x00000000 (bvmul #x00000004 #x00000001))))
(define-fun query_load-word32Mem_initb.14 () (_ BitVec 32) (load-word32 Mem_init (bvadd (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000001)))) (bvadd #x00000000 (bvmul #x00000004 #x00000001)))))
(define-fun vRootCap___struct_cap_C_v.words_C.1_after_296 () (_ BitVec 32) (load-word32 Mem_init (bvadd (load-word32 Mem_init (bvadd #xe0024b04 (bvadd #x00000000 (bvmul #x00000004 #x00000001)))) (bvadd #x00000000 (bvmul #x00000004 #x00000001)))))
(define-fun cond_at_381 () Bool (and (and (and (bvsle #x00000000 #x00000000) (bvslt #x00000000 #x00000020)) (bvslt #x00000000 #x00000002)) (bvsle #x00000000 #x00000000)))
(define-fun path_cond_to_380_C () Bool (and cond_at_381 path_cond_to_296_C))
(define-fun ret___unsigned_v.2_after_380 () (_ BitVec 32) (bvshl (bvand cap___struct_cap_C_v.words_C.0_init #xfffffff0) #x00000000))
(define-fun ret__int_v.3_after_379 () (_ BitVec 32) (ite (not (word32-eq #x00000000 #x00000000)) #x00000001 #x00000000))
(define-fun cond_at_378 () Bool (not (word32-eq ret__int_v.3_after_379 #x00000000)))
(define-fun path_cond_to_377_C () Bool (and cond_at_378 path_cond_to_380_C))
(define-fun cond_at_377 () Bool (and (bvsle #x00000000 #x0000001f) (bvslt #x0000001f #x00000020)))
(define-fun path_cond_to_376_C () Bool (and cond_at_377 path_cond_to_377_C))
(define-fun ret__int_v.3_after_376 () (_ BitVec 32) (ite (not (word32-eq (bvand ret___unsigned_v.2_after_380 (bvshl #x00000001 #x0000001f)) #x00000000)) #x00000001 #x00000000))
(define-fun path_cond_to_465_C () Bool (and (not cond_at_378) path_cond_to_380_C))
(define-fun path_cond_to_375_C () Bool (or path_cond_to_376_C path_cond_to_465_C))
(define-fun cond_at_375 () Bool (not (not (not (word32-eq (ite path_cond_to_465_C ret__int_v.3_after_379 ret__int_v.3_after_376) #x00000000)))))
(define-fun path_cond_to_374_C () Bool (and cond_at_375 path_cond_to_375_C))
(define-fun ret___unsigned_v.2_after_374 () (_ BitVec 32) (bvor ret___unsigned_v.2_after_380 #x00000000))
(define-fun path_cond_to_463_C () Bool (and (not cond_at_375) path_cond_to_375_C))
(define-fun path_cond_to_373_C () Bool (or path_cond_to_463_C path_cond_to_374_C))
(define-fun ret___unsigned_v.2_v_at_373 () (_ BitVec 32) (ite path_cond_to_374_C ret___unsigned_v.2_after_374 ret___unsigned_v.2_after_380))
(define-fun ptr.14 () (_ BitVec 32) (bvadd (bvand ret___unsigned_v.2_v_at_373 (bvnot (bvsub (bvshl #x00000001 #x00000009) #x00000001))) (bvmul #x00000000 #x00000010)))
(declare-fun pvalid.19 () Bool)
(assert (=> pvalid.19 (and (word32-eq (bvand ptr.14 #x00000003) #x00000000) (and (bvule (bvsub #x00000000 #x00000000) #x0fffffff) (and (not (word32-eq ptr.14 #x00000000)) (=> (bvult #x00000000 (bvmul #x00000010 (bvsub #x00000000 #x00000000))) (bvule ptr.14 (bvsub #x00000000 (bvmul #x00000010 (bvsub #x00000000 #x00000000))))))))))
(assert (=> (and pvalid.19 pvalid.11) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.14) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.14) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.14) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.14) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.9) (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.14))))))
(assert (and (=> (and false pvalid.11) pvalid.19) (=> (and (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.14) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.14) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.14) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.14) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.19) pvalid.11)))
(assert (=> (and pvalid.19 pvalid.16) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.14))))))
(assert true)
(assert (=> (and pvalid.19 pvalid.5) (or false (or false (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.14))))))
(assert (and (=> (and false pvalid.5) pvalid.19) (=> (and false pvalid.19) pvalid.5)))
(assert (=> (and pvalid.19 pvalid.15) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.14) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.14) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.14) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.14) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.11) (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.14))))))
(assert (and (=> (and false pvalid.15) pvalid.19) (=> (and (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.14) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.14) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.14) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.14) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.19) pvalid.15)))
(assert (=> (and pvalid.19 pvalid.6) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.14))))))
(assert true)
(assert (=> (and pvalid.19 pvalid.4) (or false (or false (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.14))))))
(assert (and (=> (and false pvalid.4) pvalid.19) (=> (and false pvalid.19) pvalid.4)))
(assert (=> (and pvalid.19 pvalid.17) (or false (or (word32-eq (bvurem (bvsub ptr.12 ptr.14) #x00000010) #x00000000) (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.12) (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.14))))))
(assert (and (=> (and false pvalid.17) pvalid.19) (=> (and (word32-eq (bvurem (bvsub ptr.12 ptr.14) #x00000010) #x00000000) pvalid.19) pvalid.17)))
(assert (=> (and pvalid.19 pvalid.9) (or false (or false (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.8) (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.14))))))
(assert (and (=> (and false pvalid.9) pvalid.19) (=> (and false pvalid.19) pvalid.9)))
(assert (=> (and pvalid.19 pvalid.12) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.14))))))
(assert true)
(assert (=> (and pvalid.19 pvalid.10) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.14))))))
(assert true)
(assert (=> (and pvalid.19 pvalid.14) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.14))))))
(assert true)
(assert (=> (and pvalid.19 pvalid.1) (or false (or false (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.14))))))
(assert (and (=> (and false pvalid.1) pvalid.19) (=> (and false pvalid.19) pvalid.1)))
(assert (=> (and pvalid.19 pvalid.3) (or false (or false (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.14))))))
(assert (and (=> (and false pvalid.3) pvalid.19) (=> (and false pvalid.19) pvalid.3)))
(assert (=> (and pvalid.19 pvalid.7) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.14) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.14) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.14) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.14) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.7) (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.14))))))
(assert (and (=> (and false pvalid.7) pvalid.19) (=> (and (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.14) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.14) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.14) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.14) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.19) pvalid.7)))
(assert (=> (and pvalid.19 pvalid.18) (or false (or (word32-eq (bvurem (bvsub ptr.13 ptr.14) #x00000010) #x00000000) (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.13) (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.14))))))
(assert (and (=> (and false pvalid.18) pvalid.19) (=> (and (word32-eq (bvurem (bvsub ptr.13 ptr.14) #x00000010) #x00000000) pvalid.19) pvalid.18)))
(assert (=> (and pvalid.19 pvalid) (or false (or false (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.14))))))
(assert (and (=> (and false pvalid) pvalid.19) (=> (and false pvalid.19) pvalid)))
(assert (=> (and pvalid.19 pvalid.8) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.14) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.14))))))
(assert true)
(assert (=> (and pvalid.19 pvalid.13) (or false (or false (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.10) (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.14))))))
(assert (and (=> (and false pvalid.13) pvalid.19) (=> (and false pvalid.19) pvalid.13)))
(assert (=> (and pvalid.19 pvalid.2) (or false (or false (or (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.14))))))
(assert (and (=> (and false pvalid.2) pvalid.19) (=> (and false pvalid.19) pvalid.2)))
(define-fun ptr.15 () (_ BitVec 32) (bvand ret___unsigned_v.2_v_at_373 (bvnot (bvsub (bvshl #x00000001 #x00000009) #x00000001))))
(declare-fun pvalid.20 () Bool)
(assert (=> pvalid.20 (and (word32-eq (bvand ptr.15 #x00000003) #x00000000) (and (bvule #x00000000 #x0fffffff) (and (not (word32-eq ptr.15 #x00000000)) (=> (bvult #x00000000 (bvmul #x00000010 #x00000000)) (bvule ptr.15 (bvsub #x00000000 (bvmul #x00000010 #x00000000)))))))))
(assert (=> (and pvalid.20 pvalid.11) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.15) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.15) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.15) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.15) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.9) (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.15))))))
(assert (and (=> (and false pvalid.11) pvalid.20) (=> (and (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.15) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.15) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.15) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.15) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.20) pvalid.11)))
(assert (=> (and pvalid.20 pvalid.16) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.15))))))
(assert true)
(assert (=> (and pvalid.20 pvalid.5) (or false (or false (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.15))))))
(assert (and (=> (and false pvalid.5) pvalid.20) (=> (and false pvalid.20) pvalid.5)))
(assert (=> (and pvalid.20 pvalid.15) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.15) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.15) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.15) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.15) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.11) (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.15))))))
(assert (and (=> (and false pvalid.15) pvalid.20) (=> (and (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.15) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.15) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.15) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.15) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.20) pvalid.15)))
(assert (=> (and pvalid.20 pvalid.6) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.15))))))
(assert true)
(assert (=> (and pvalid.20 pvalid.4) (or false (or false (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.15))))))
(assert (and (=> (and false pvalid.4) pvalid.20) (=> (and false pvalid.20) pvalid.4)))
(assert (=> (and pvalid.20 pvalid.17) (or false (or (word32-eq (bvurem (bvsub ptr.12 ptr.15) #x00000010) #x00000000) (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.12) (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.15))))))
(assert (and (=> (and false pvalid.17) pvalid.20) (=> (and (word32-eq (bvurem (bvsub ptr.12 ptr.15) #x00000010) #x00000000) pvalid.20) pvalid.17)))
(assert (=> (and pvalid.20 pvalid.19) (or (word32-eq (bvurem (bvsub ptr.15 ptr.14) #x00000010) #x00000000) (or (word32-eq (bvurem (bvsub ptr.14 ptr.15) #x00000010) #x00000000) (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.14) (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.15))))))
(assert true)
(assert (=> (and pvalid.20 pvalid.9) (or false (or false (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.8) (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.15))))))
(assert (and (=> (and false pvalid.9) pvalid.20) (=> (and false pvalid.20) pvalid.9)))
(assert (=> (and pvalid.20 pvalid.12) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.15))))))
(assert true)
(assert (=> (and pvalid.20 pvalid.10) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.15))))))
(assert true)
(assert (=> (and pvalid.20 pvalid.14) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.15))))))
(assert true)
(assert (=> (and pvalid.20 pvalid.1) (or false (or false (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.15))))))
(assert (and (=> (and false pvalid.1) pvalid.20) (=> (and false pvalid.20) pvalid.1)))
(assert (=> (and pvalid.20 pvalid.3) (or false (or false (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.15))))))
(assert (and (=> (and false pvalid.3) pvalid.20) (=> (and false pvalid.20) pvalid.3)))
(assert (=> (and pvalid.20 pvalid.7) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.15) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.15) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.15) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.15) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.7) (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.15))))))
(assert (and (=> (and false pvalid.7) pvalid.20) (=> (and (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.15) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.15) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.15) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.15) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.20) pvalid.7)))
(assert (=> (and pvalid.20 pvalid.18) (or false (or (word32-eq (bvurem (bvsub ptr.13 ptr.15) #x00000010) #x00000000) (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.13) (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.15))))))
(assert (and (=> (and false pvalid.18) pvalid.20) (=> (and (word32-eq (bvurem (bvsub ptr.13 ptr.15) #x00000010) #x00000000) pvalid.20) pvalid.18)))
(assert (=> (and pvalid.20 pvalid) (or false (or false (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.15))))))
(assert (and (=> (and false pvalid) pvalid.20) (=> (and false pvalid.20) pvalid)))
(assert (=> (and pvalid.20 pvalid.8) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.15) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.15))))))
(assert true)
(assert (=> (and pvalid.20 pvalid.13) (or false (or false (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.10) (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.15))))))
(assert (and (=> (and false pvalid.13) pvalid.20) (=> (and false pvalid.20) pvalid.13)))
(assert (=> (and pvalid.20 pvalid.2) (or false (or false (or (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.15))))))
(assert (and (=> (and false pvalid.2) pvalid.20) (=> (and false pvalid.20) pvalid.2)))
(define-fun cond_at_293 () Bool (and (and (bvsle #x00000000 #x00000009) (bvslt #x00000009 #x00000020)) (or (word32-eq #x00000000 #x00000000) (or (and (bvslt #x00000000 #x00000000) pvalid.19) (and (not (word32-eq #x00000000 #x00000000)) (and (not (bvslt #x00000000 #x00000000)) pvalid.20))))))
(define-fun path_cond_to_292_C () Bool (and cond_at_293 path_cond_to_373_C))
(declare-fun slotCapLongRunningDelete_success_at_292 () Bool)
(declare-fun rv_space_ret__unsigned_long_v_after_292 () (_ BitVec 32))
(define-fun query_mem-eqmem_initMem_in () Bool (mem-eq mem_init Mem_init))
(define-fun query_implies-rodataMem_in () Bool (implies-rodata Mem_init))
(define-fun query_mem-eqmem_after_23me () Bool (mem-eq mem_after_23 mem_init))
(define-fun query_=stack_for_23_topsta () Bool (= stack_for_23_top stack_after_21))
(assert (=> (and (word32-eq r6_after_128 (bvadd (bvand ret___unsigned_v.2_v_at_373 (bvnot (bvsub (bvshl #x00000001 #x00000009) #x00000001))) (bvmul #x00000000 #x00000010))) (and (mem-eq mem_init Mem_init) (and (implies-rodata Mem_init) (and (word32-eq (bvand r13_after_90 #x00000003) #x00000000) (and (word32-eq #xe00183c0 #xe00183c0) (and (word32-eq (bvand #xe00183c0 #x00000003) #x00000000) (and (word32-eq r6_after_128 r6_after_128) (and (bvule #x00000070 r13_after_90) path_cond_to_292_C)))))))) (and (word32-eq r0_after_23 rv_space_ret__unsigned_long_v_after_292) (and (mem-eq mem_after_23 mem_init) (and (word32-eq r4_after_7 r4_after_23) (and (word32-eq r5_after_10 r5_after_23) (and (word32-eq r6_after_128 r6_after_23) (and (word32-eq r7_after_22 r7_after_23) (and (word32-eq r0_after_18 r8_after_23) (and (word32-eq r9_after_16 r9_after_23) (and (word32-eq r10_after_17 r10_after_23) (and (word32-eq r11_after_15 r11_after_23) (and (word32-eq r13_after_90 r13_after_23) (and (and (= r13_after_90 r13_after_23) (=> true (= stack_for_23_top stack_after_21))) (=> slotCapLongRunningDelete_success_at_292 slotCapLongRunningDelete_success_at_23)))))))))))))))
(define-fun query_mem-eqmem_after_23Me () Bool (mem-eq mem_after_23 Mem_init))
(define-fun query_mem-eqmem_after_27me () Bool (mem-eq mem_after_27 mem_after_23))
(define-fun query_=stack_for_27_topsta () Bool (= stack_for_27_top stack_for_23_top))
(assert (=> (and (word32-eq r0_after_138 (bvadd (bvand ret___unsigned_v.2_v_at_373 (bvnot (bvsub (bvshl #x00000001 #x00000009) #x00000001))) (bvmul #x00000000 #x00000010))) (and (mem-eq mem_after_23 Mem_init) (and (implies-rodata Mem_init) (and (word32-eq (bvand r13_after_23 #x00000003) #x00000000) (and (word32-eq #xe00183e4 #xe00183e4) (and (word32-eq (bvand #xe00183e4 #x00000003) #x00000000) (and (word32-eq r0_after_138 r0_after_138) (and (bvule #x00000070 r13_after_23) path_cond_to_292_C)))))))) (and (word32-eq r0_after_27 rv_space_ret__unsigned_long_v_after_292) (and (mem-eq mem_after_27 mem_after_23) (and (word32-eq r4_after_23 r4_after_27) (and (word32-eq r5_after_23 r5_after_27) (and (word32-eq r6_after_23 r6_after_27) (and (word32-eq r7_after_23 r7_after_27) (and (word32-eq r8_after_23 r8_after_27) (and (word32-eq r9_after_23 r9_after_27) (and (word32-eq r10_after_23 r10_after_27) (and (word32-eq r11_after_23 r11_after_27) (and (word32-eq r13_after_23 r13_after_27) (and (and (= r13_after_23 r13_after_27) (=> (bvule r13_after_23 r13_after_27) (= stack_for_27_top stack_for_23_top))) (=> slotCapLongRunningDelete_success_at_292 slotCapLongRunningDelete_success_at_27)))))))))))))))
(define-fun cond_at_290 () Bool (or (word32-eq #x00000000 #x00000000) (or (and (bvslt #x00000000 #x00000000) pvalid.19) (and (not (word32-eq #x00000000 #x00000000)) (and (not (bvslt #x00000000 #x00000000)) pvalid.20)))))
(define-fun path_cond_to_289_C () Bool (and cond_at_290 path_cond_to_292_C))
(define-fun ret__int_v_after_289 () (_ BitVec 32) (ite (not (word32-eq rv_space_ret__unsigned_long_v_after_292 #x00000000)) #x00000001 #x00000000))
(define-fun cond_at_288 () Bool (not (word32-eq ret__int_v_after_289 #x00000000)))
(define-fun path_cond_to_287_C () Bool (and (not cond_at_288) path_cond_to_289_C))
(define-fun cond_at_369 () Bool (and (and (and (bvsle #x00000000 #x00000000) (bvslt #x00000000 #x00000020)) (bvslt #x00000000 #x00000002)) (bvsle #x00000000 #x00000000)))
(define-fun path_cond_to_368_C () Bool (and cond_at_369 path_cond_to_287_C))
(define-fun ret___unsigned_v.1_after_368 () (_ BitVec 32) (bvshl (bvand cap___struct_cap_C_v.words_C.0_init #xfffffff0) #x00000000))
(define-fun ret__int_v.2_after_367 () (_ BitVec 32) (ite (not (word32-eq #x00000000 #x00000000)) #x00000001 #x00000000))
(define-fun cond_at_366 () Bool (not (word32-eq ret__int_v.2_after_367 #x00000000)))
(define-fun path_cond_to_365_C () Bool (and cond_at_366 path_cond_to_368_C))
(define-fun cond_at_365 () Bool (and (bvsle #x00000000 #x0000001f) (bvslt #x0000001f #x00000020)))
(define-fun path_cond_to_364_C () Bool (and cond_at_365 path_cond_to_365_C))
(define-fun ret__int_v.2_after_364 () (_ BitVec 32) (ite (not (word32-eq (bvand ret___unsigned_v.1_after_368 (bvshl #x00000001 #x0000001f)) #x00000000)) #x00000001 #x00000000))
(define-fun path_cond_to_461_C () Bool (and (not cond_at_366) path_cond_to_368_C))
(define-fun path_cond_to_363_C () Bool (or path_cond_to_364_C path_cond_to_461_C))
(define-fun cond_at_363 () Bool (not (not (not (word32-eq (ite path_cond_to_364_C ret__int_v.2_after_364 ret__int_v.2_after_367) #x00000000)))))
(define-fun path_cond_to_362_C () Bool (and cond_at_363 path_cond_to_363_C))
(define-fun ret___unsigned_v.1_after_362 () (_ BitVec 32) (bvor ret___unsigned_v.1_after_368 #x00000000))
(define-fun path_cond_to_459_C () Bool (and (not cond_at_363) path_cond_to_363_C))
(define-fun path_cond_to_361_C () Bool (or path_cond_to_362_C path_cond_to_459_C))
(define-fun ret___unsigned_v.1_v_at_361 () (_ BitVec 32) (ite path_cond_to_459_C ret___unsigned_v.1_after_368 ret___unsigned_v.1_after_362))
(define-fun ptr.16 () (_ BitVec 32) (bvadd (bvand ret___unsigned_v.1_v_at_361 (bvnot (bvsub (bvshl #x00000001 #x00000009) #x00000001))) (bvmul #x00000001 #x00000010)))
(declare-fun pvalid.21 () Bool)
(assert (=> pvalid.21 (and (word32-eq (bvand ptr.16 #x00000003) #x00000000) (and (bvule (bvsub #x00000000 #x00000001) #x0fffffff) (and (not (word32-eq ptr.16 #x00000000)) (=> (bvult #x00000000 (bvmul #x00000010 (bvsub #x00000000 #x00000001))) (bvule ptr.16 (bvsub #x00000000 (bvmul #x00000010 (bvsub #x00000000 #x00000001))))))))))
(assert (=> (and pvalid.21 pvalid.11) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.16) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.16) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.16) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.16) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.9) (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.16))))))
(assert (and (=> (and false pvalid.11) pvalid.21) (=> (and (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.16) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.16) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.16) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.16) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.21) pvalid.11)))
(assert (=> (and pvalid.21 pvalid.16) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.16))))))
(assert true)
(assert (=> (and pvalid.21 pvalid.5) (or false (or false (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.16))))))
(assert (and (=> (and false pvalid.5) pvalid.21) (=> (and false pvalid.21) pvalid.5)))
(assert (=> (and pvalid.21 pvalid.15) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.16) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.16) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.16) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.16) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.11) (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.16))))))
(assert (and (=> (and false pvalid.15) pvalid.21) (=> (and (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.16) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.16) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.16) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.16) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.21) pvalid.15)))
(assert (=> (and pvalid.21 pvalid.6) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.16))))))
(assert true)
(assert (=> (and pvalid.21 pvalid.4) (or false (or false (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.16))))))
(assert (and (=> (and false pvalid.4) pvalid.21) (=> (and false pvalid.21) pvalid.4)))
(assert (=> (and pvalid.21 pvalid.17) (or false (or (word32-eq (bvurem (bvsub ptr.12 ptr.16) #x00000010) #x00000000) (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.12) (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.16))))))
(assert (and (=> (and false pvalid.17) pvalid.21) (=> (and (word32-eq (bvurem (bvsub ptr.12 ptr.16) #x00000010) #x00000000) pvalid.21) pvalid.17)))
(assert (=> (and pvalid.21 pvalid.19) (or (word32-eq (bvurem (bvsub ptr.16 ptr.14) #x00000010) #x00000000) (or (word32-eq (bvurem (bvsub ptr.14 ptr.16) #x00000010) #x00000000) (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.14) (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.16))))))
(assert true)
(assert (=> (and pvalid.21 pvalid.9) (or false (or false (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.8) (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.16))))))
(assert (and (=> (and false pvalid.9) pvalid.21) (=> (and false pvalid.21) pvalid.9)))
(assert (=> (and pvalid.21 pvalid.12) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.16))))))
(assert true)
(assert (=> (and pvalid.21 pvalid.10) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.16))))))
(assert true)
(assert (=> (and pvalid.21 pvalid.14) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.16))))))
(assert true)
(assert (=> (and pvalid.21 pvalid.20) (or (word32-eq (bvurem (bvsub ptr.16 ptr.15) #x00000010) #x00000000) (or (word32-eq (bvurem (bvsub ptr.15 ptr.16) #x00000010) #x00000000) (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.15) (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.16))))))
(assert true)
(assert (=> (and pvalid.21 pvalid.1) (or false (or false (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.16))))))
(assert (and (=> (and false pvalid.1) pvalid.21) (=> (and false pvalid.21) pvalid.1)))
(assert (=> (and pvalid.21 pvalid.3) (or false (or false (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.16))))))
(assert (and (=> (and false pvalid.3) pvalid.21) (=> (and false pvalid.21) pvalid.3)))
(assert (=> (and pvalid.21 pvalid.7) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.16) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.16) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.16) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.16) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.7) (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.16))))))
(assert (and (=> (and false pvalid.7) pvalid.21) (=> (and (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.16) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.16) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.16) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.16) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.21) pvalid.7)))
(assert (=> (and pvalid.21 pvalid.18) (or false (or (word32-eq (bvurem (bvsub ptr.13 ptr.16) #x00000010) #x00000000) (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.13) (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.16))))))
(assert (and (=> (and false pvalid.18) pvalid.21) (=> (and (word32-eq (bvurem (bvsub ptr.13 ptr.16) #x00000010) #x00000000) pvalid.21) pvalid.18)))
(assert (=> (and pvalid.21 pvalid) (or false (or false (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.16))))))
(assert (and (=> (and false pvalid) pvalid.21) (=> (and false pvalid.21) pvalid)))
(assert (=> (and pvalid.21 pvalid.8) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.16) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.16))))))
(assert true)
(assert (=> (and pvalid.21 pvalid.13) (or false (or false (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.10) (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.16))))))
(assert (and (=> (and false pvalid.13) pvalid.21) (=> (and false pvalid.21) pvalid.13)))
(assert (=> (and pvalid.21 pvalid.2) (or false (or false (or (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.16))))))
(assert (and (=> (and false pvalid.2) pvalid.21) (=> (and false pvalid.21) pvalid.2)))
(define-fun ptr.17 () (_ BitVec 32) (bvand ret___unsigned_v.1_v_at_361 (bvnot (bvsub (bvshl #x00000001 #x00000009) #x00000001))))
(declare-fun pvalid.22 () Bool)
(assert (=> pvalid.22 (and (word32-eq (bvand ptr.17 #x00000003) #x00000000) (and (bvule #x00000001 #x0fffffff) (and (not (word32-eq ptr.17 #x00000000)) (=> (bvult #x00000000 (bvmul #x00000010 #x00000001)) (bvule ptr.17 (bvsub #x00000000 (bvmul #x00000010 #x00000001)))))))))
(assert (=> (and pvalid.22 pvalid.11) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.17) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.17) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.17) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.17) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.9) (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.17))))))
(assert (and (=> (and false pvalid.11) pvalid.22) (=> (and (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.17) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.17) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.17) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.9 ptr.17) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.22) pvalid.11)))
(assert (=> (and pvalid.22 pvalid.21) (or (word32-eq (bvurem (bvsub ptr.17 ptr.16) #x00000010) #x00000000) (or (word32-eq (bvurem (bvsub ptr.16 ptr.17) #x00000010) #x00000000) (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.16) (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.17))))))
(assert true)
(assert (=> (and pvalid.22 pvalid.17) (or false (or (word32-eq (bvurem (bvsub ptr.12 ptr.17) #x00000010) #x00000000) (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.12) (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.17))))))
(assert (and (=> (and false pvalid.17) pvalid.22) (=> (and (word32-eq (bvurem (bvsub ptr.12 ptr.17) #x00000010) #x00000000) pvalid.22) pvalid.17)))
(assert (=> (and pvalid.22 pvalid.1) (or false (or false (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.17))))))
(assert (and (=> (and false pvalid.1) pvalid.22) (=> (and false pvalid.22) pvalid.1)))
(assert (=> (and pvalid.22 pvalid.7) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.17) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.17) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.17) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.17) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.7) (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.17))))))
(assert (and (=> (and false pvalid.7) pvalid.22) (=> (and (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.17) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.17) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.17) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.7 ptr.17) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.22) pvalid.7)))
(assert (=> (and pvalid.22 pvalid.14) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.17))))))
(assert true)
(assert (=> (and pvalid.22 pvalid.5) (or false (or false (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.17))))))
(assert (and (=> (and false pvalid.5) pvalid.22) (=> (and false pvalid.22) pvalid.5)))
(assert (=> (and pvalid.22 pvalid.19) (or (word32-eq (bvurem (bvsub ptr.17 ptr.14) #x00000010) #x00000000) (or (word32-eq (bvurem (bvsub ptr.14 ptr.17) #x00000010) #x00000000) (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.14) (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.17))))))
(assert true)
(assert (=> (and pvalid.22 pvalid.12) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.17))))))
(assert true)
(assert (=> (and pvalid.22 pvalid.15) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.17) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.17) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.17) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.17) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.11) (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.17))))))
(assert (and (=> (and false pvalid.15) pvalid.22) (=> (and (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.17) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.17) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.17) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.11 ptr.17) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) pvalid.22) pvalid.15)))
(assert (=> (and pvalid.22 pvalid.10) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.17))))))
(assert true)
(assert (=> (and pvalid.22 pvalid.13) (or false (or false (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.10) (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.17))))))
(assert (and (=> (and false pvalid.13) pvalid.22) (=> (and false pvalid.22) pvalid.13)))
(assert (=> (and pvalid.22 pvalid.6) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.17))))))
(assert true)
(assert (=> (and pvalid.22 pvalid.3) (or false (or false (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.17))))))
(assert (and (=> (and false pvalid.3) pvalid.22) (=> (and false pvalid.22) pvalid.3)))
(assert (=> (and pvalid.22 pvalid) (or false (or false (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.17))))))
(assert (and (=> (and false pvalid) pvalid.22) (=> (and false pvalid.22) pvalid)))
(assert (=> (and pvalid.22 pvalid.16) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.17))))))
(assert true)
(assert (=> (and pvalid.22 pvalid.20) (or (word32-eq (bvurem (bvsub ptr.17 ptr.15) #x00000010) #x00000000) (or (word32-eq (bvurem (bvsub ptr.15 ptr.17) #x00000010) #x00000000) (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.15) (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.17))))))
(assert true)
(assert (=> (and pvalid.22 pvalid.4) (or false (or false (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.17))))))
(assert (and (=> (and false pvalid.4) pvalid.22) (=> (and false pvalid.22) pvalid.4)))
(assert (=> (and pvalid.22 pvalid.9) (or false (or false (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.8) (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.17))))))
(assert (and (=> (and false pvalid.9) pvalid.22) (=> (and false pvalid.22) pvalid.9)))
(assert (=> (and pvalid.22 pvalid.2) (or false (or false (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.17))))))
(assert (and (=> (and false pvalid.2) pvalid.22) (=> (and false pvalid.22) pvalid.2)))
(assert (=> (and pvalid.22 pvalid.18) (or false (or (word32-eq (bvurem (bvsub ptr.13 ptr.17) #x00000010) #x00000000) (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.13) (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.17))))))
(assert (and (=> (and false pvalid.18) pvalid.22) (=> (and (word32-eq (bvurem (bvsub ptr.13 ptr.17) #x00000010) #x00000000) pvalid.22) pvalid.18)))
(assert (=> (and pvalid.22 pvalid.8) (or false (or (or (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000000) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000000) #x00000000) #x00000004) #x00000000)) (and (bvult (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000008) #x00000000) (bvmul #x00000002 #x00000004)) (word32-eq (bvurem (bvsub (bvsub (bvurem (bvsub ptr.6 ptr.17) #x00000010) #x00000008) #x00000000) #x00000004) #x00000000))) (or (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.17))))))
(assert true)
(define-fun cond_at_285 () Bool (and (and (bvsle #x00000000 #x00000009) (bvslt #x00000009 #x00000020)) (or (word32-eq #x00000001 #x00000000) (or (and (bvslt #x00000001 #x00000000) pvalid.21) (and (not (word32-eq #x00000001 #x00000000)) (and (not (bvslt #x00000001 #x00000000)) pvalid.22))))))
(define-fun path_cond_to_284_C () Bool (and cond_at_285 path_cond_to_361_C))
(declare-fun slotCapLongRunningDelete_success_at_284 () Bool)
(declare-fun rv_space_ret__unsigned_long_v_after_284 () (_ BitVec 32))
(assert (=> (and (word32-eq r6_after_128 (bvadd (bvand ret___unsigned_v.1_v_at_361 (bvnot (bvsub (bvshl #x00000001 #x00000009) #x00000001))) (bvmul #x00000001 #x00000010))) (and (mem-eq mem_init Mem_init) (and (implies-rodata Mem_init) (and (word32-eq (bvand r13_after_90 #x00000003) #x00000000) (and (word32-eq #xe00183c0 #xe00183c0) (and (word32-eq (bvand #xe00183c0 #x00000003) #x00000000) (and (word32-eq r6_after_128 r6_after_128) (and (bvule #x00000070 r13_after_90) path_cond_to_284_C)))))))) (and (word32-eq r0_after_23 rv_space_ret__unsigned_long_v_after_284) (and (mem-eq mem_after_23 mem_init) (and (word32-eq r4_after_7 r4_after_23) (and (word32-eq r5_after_10 r5_after_23) (and (word32-eq r6_after_128 r6_after_23) (and (word32-eq r7_after_22 r7_after_23) (and (word32-eq r0_after_18 r8_after_23) (and (word32-eq r9_after_16 r9_after_23) (and (word32-eq r10_after_17 r10_after_23) (and (word32-eq r11_after_15 r11_after_23) (and (word32-eq r13_after_90 r13_after_23) (and (and (= r13_after_90 r13_after_23) (=> true (= stack_for_23_top stack_after_21))) (=> slotCapLongRunningDelete_success_at_284 slotCapLongRunningDelete_success_at_23)))))))))))))))
(assert (=> (and (word32-eq r0_after_138 (bvadd (bvand ret___unsigned_v.1_v_at_361 (bvnot (bvsub (bvshl #x00000001 #x00000009) #x00000001))) (bvmul #x00000001 #x00000010))) (and (mem-eq mem_after_23 Mem_init) (and (implies-rodata Mem_init) (and (word32-eq (bvand r13_after_23 #x00000003) #x00000000) (and (word32-eq #xe00183e4 #xe00183e4) (and (word32-eq (bvand #xe00183e4 #x00000003) #x00000000) (and (word32-eq r0_after_138 r0_after_138) (and (bvule #x00000070 r13_after_23) path_cond_to_284_C)))))))) (and (word32-eq r0_after_27 rv_space_ret__unsigned_long_v_after_284) (and (mem-eq mem_after_27 mem_after_23) (and (word32-eq r4_after_23 r4_after_27) (and (word32-eq r5_after_23 r5_after_27) (and (word32-eq r6_after_23 r6_after_27) (and (word32-eq r7_after_23 r7_after_27) (and (word32-eq r8_after_23 r8_after_27) (and (word32-eq r9_after_23 r9_after_27) (and (word32-eq r10_after_23 r10_after_27) (and (word32-eq r11_after_23 r11_after_27) (and (word32-eq r13_after_23 r13_after_27) (and (and (= r13_after_23 r13_after_27) (=> (bvule r13_after_23 r13_after_27) (= stack_for_27_top stack_for_23_top))) (=> slotCapLongRunningDelete_success_at_284 slotCapLongRunningDelete_success_at_27)))))))))))))))
(define-fun cond_at_282 () Bool (or (word32-eq #x00000001 #x00000000) (or (and (bvslt #x00000001 #x00000000) pvalid.21) (and (not (word32-eq #x00000001 #x00000000)) (and (not (bvslt #x00000001 #x00000000)) pvalid.22)))))
(define-fun path_cond_to_281_C () Bool (and cond_at_282 path_cond_to_284_C))
(define-fun ret__int_v_after_281 () (_ BitVec 32) (ite (not (word32-eq rv_space_ret__unsigned_long_v_after_284 #x00000000)) #x00000001 #x00000000))
(define-fun path_cond_to_447_C () Bool (and cond_at_288 path_cond_to_289_C))
(define-fun path_cond_to_280_C () Bool (or path_cond_to_281_C path_cond_to_447_C))
(define-fun ret__unsigned_long_v_v_at_280 () (_ BitVec 32) (ite path_cond_to_447_C rv_space_ret__unsigned_long_v_after_292 rv_space_ret__unsigned_long_v_after_284))
(define-fun cond_at_280 () Bool (not (word32-eq (ite path_cond_to_281_C ret__int_v_after_281 ret__int_v_after_289) #x00000000)))
(define-fun path_cond_to_276_C () Bool (and (not cond_at_280) path_cond_to_280_C))
(define-fun cond_at_276 () Bool (not (word32-eq ret__unsigned_long_v.2_v_at_395 #x00000000)))
(define-fun path_cond_to_275_C () Bool (and cond_at_276 path_cond_to_276_C))
(declare-fun updateCapData_success_at_275 () Bool)
(declare-fun rv_space_ret__struct_cap_C_v.words_C.0_after_275 () (_ BitVec 32))
(declare-fun rv_space_ret__struct_cap_C_v.words_C.1_after_275 () (_ BitVec 32))
(define-fun query_bvaddr13_after_27_x0.1 () (_ BitVec 32) (bvadd r13_after_27 #x00000000))
(define-fun query_load-word32stack_aft.55 () (_ BitVec 32) (load-word32 stack_after_34_top (bvadd r13_after_27 #x00000000)))
(define-fun query_load-word32stack_aft.56 () (_ BitVec 32) (load-word32 stack_after_34_bot (bvadd r13_after_27 #x00000000)))
(define-fun query_implies-rodatamem_af () Bool (implies-rodata mem_after_27))
(define-fun query_bvaddret_addr_input_ () (_ BitVec 32) (bvadd ret_addr_input_ignore_after_35 #x00000000))
(define-fun query_load-word32stack_for.22 () (_ BitVec 32) (load-word32 stack_for_35_top (bvadd ret_addr_input_ignore_after_35 #x00000000)))
(define-fun query_load-word32stack_for.23 () (_ BitVec 32) (load-word32 stack_for_35_bot (bvadd ret_addr_input_ignore_after_35 #x00000000)))
(define-fun query_bvaddret_addr_input_.1 () (_ BitVec 32) (bvadd ret_addr_input_ignore_after_35 #x00000004))
(define-fun query_load-word32stack_for.24 () (_ BitVec 32) (load-word32 stack_for_35_top (bvadd ret_addr_input_ignore_after_35 #x00000004)))
(define-fun query_load-word32stack_for.25 () (_ BitVec 32) (load-word32 stack_for_35_bot (bvadd ret_addr_input_ignore_after_35 #x00000004)))
(define-fun query_mem-eqmem_after_35me () Bool (mem-eq mem_after_35 mem_after_27))
(define-fun query_load-word32stack_aft.57 () (_ BitVec 32) (load-word32 stack_after_34_top (bvadd ret_addr_input_ignore_after_35 #x00000000)))
(define-fun query_load-word32stack_aft.58 () (_ BitVec 32) (load-word32 stack_after_34_bot (bvadd ret_addr_input_ignore_after_35 #x00000000)))
(define-fun split_mem_top.5 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_34_split (bvadd ret_addr_input_ignore_after_35 #x00000000)) (store-word32 stack_after_34_top (bvadd ret_addr_input_ignore_after_35 #x00000000) #x00000000) stack_after_34_top))
(define-fun query_load-word32split_mem.10 () (_ BitVec 32) (load-word32 split_mem_top.5 (bvadd ret_addr_input_ignore_after_35 #x00000004)))
(define-fun split_mem_bot.5 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_34_split (bvadd ret_addr_input_ignore_after_35 #x00000000)) stack_after_34_bot (store-word32 stack_after_34_bot (bvadd ret_addr_input_ignore_after_35 #x00000000) #x00000000)))
(define-fun query_load-word32split_mem.11 () (_ BitVec 32) (load-word32 split_mem_bot.5 (bvadd ret_addr_input_ignore_after_35 #x00000004)))
(define-fun split_mem_top.6 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_34_split (bvadd ret_addr_input_ignore_after_35 #x00000004)) (store-word32 split_mem_top.5 (bvadd ret_addr_input_ignore_after_35 #x00000004) #x00000000) split_mem_top.5))
(define-fun query_load-word32split_mem.12 () (_ BitVec 32) (load-word32 split_mem_top.6 (bvadd r13_after_27 #x00000000)))
(define-fun split_mem_bot.6 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_34_split (bvadd ret_addr_input_ignore_after_35 #x00000004)) split_mem_bot.5 (store-word32 split_mem_bot.5 (bvadd ret_addr_input_ignore_after_35 #x00000004) #x00000000)))
(define-fun query_load-word32split_mem.13 () (_ BitVec 32) (load-word32 split_mem_bot.6 (bvadd r13_after_27 #x00000000)))
(define-fun split_mem_top.7 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_35 (bvadd ret_addr_input_ignore_after_35 #x00000000)) (store-word32 stack_for_35_top (bvadd ret_addr_input_ignore_after_35 #x00000000) #x00000000) stack_for_35_top))
(define-fun query_load-word32split_mem.14 () (_ BitVec 32) (load-word32 split_mem_top.7 (bvadd ret_addr_input_ignore_after_35 #x00000004)))
(define-fun split_mem_bot.7 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_35 (bvadd ret_addr_input_ignore_after_35 #x00000000)) stack_for_35_bot (store-word32 stack_for_35_bot (bvadd ret_addr_input_ignore_after_35 #x00000000) #x00000000)))
(define-fun query_load-word32split_mem.15 () (_ BitVec 32) (load-word32 split_mem_bot.7 (bvadd ret_addr_input_ignore_after_35 #x00000004)))
(define-fun split_mem_top.8 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_35 (bvadd ret_addr_input_ignore_after_35 #x00000004)) (store-word32 split_mem_top.7 (bvadd ret_addr_input_ignore_after_35 #x00000004) #x00000000) split_mem_top.7))
(define-fun query_load-word32split_mem.16 () (_ BitVec 32) (load-word32 split_mem_top.8 (bvadd r13_after_27 #x00000000)))
(define-fun split_mem_bot.8 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_35 (bvadd ret_addr_input_ignore_after_35 #x00000004)) split_mem_bot.7 (store-word32 split_mem_bot.7 (bvadd ret_addr_input_ignore_after_35 #x00000004) #x00000000)))
(define-fun query_load-word32split_mem.17 () (_ BitVec 32) (load-word32 split_mem_bot.8 (bvadd r13_after_27 #x00000000)))
(define-fun query_=itebvuler13_after_3 () Bool (= (ite (bvule r13_after_35 (bvadd r13_after_27 #x00000000)) (store-word32 split_mem_top.8 (bvadd r13_after_27 #x00000000) #x00000000) split_mem_top.8) (ite (bvule stack_after_34_split (bvadd r13_after_27 #x00000000)) (store-word32 split_mem_top.6 (bvadd r13_after_27 #x00000000) #x00000000) split_mem_top.6)))
(assert (=> (and (word32-eq r1_after_150 #x00000000) (and (word32-eq r9_after_27 ret__unsigned_long_v.2_v_at_395) (and (word32-eq r8_after_27 cRootCap___struct_cap_C_v.words_C.0_after_303) (and (word32-eq (ite (bvule stack_after_34_split (bvadd r13_after_27 #x00000000)) (load-word32 stack_after_34_top (bvadd r13_after_27 #x00000000)) (load-word32 stack_after_34_bot (bvadd r13_after_27 #x00000000))) cRootCap___struct_cap_C_v.words_C.1_after_303) (and (implies-rodata mem_after_27) (and (word32-eq (bvand r13_after_27 #x00000003) #x00000000) (and (word32-eq #xe0018414 #xe0018414) (and (word32-eq (bvand #xe0018414 #x00000003) #x00000000) (and (word32-eq r0_after_32 r0_after_32) (and (bvule #x0000000c r13_after_27) (and (word32-eq (bvand r0_after_32 #x00000003) #x00000000) (and (bvule r13_after_27 r0_after_32) (and (bvule r0_after_32 (bvadd r0_after_32 #x00000004)) (and (bvult (bvadd r13_after_27 #x00000000) (bvadd r0_after_32 #x00000000)) (and (bvule r13_after_27 (bvadd r13_after_27 #x00000000)) path_cond_to_275_C))))))))))))))) (and (word32-eq (ite (bvule r13_after_35 (bvadd ret_addr_input_ignore_after_35 #x00000000)) (load-word32 stack_for_35_top (bvadd ret_addr_input_ignore_after_35 #x00000000)) (load-word32 stack_for_35_bot (bvadd ret_addr_input_ignore_after_35 #x00000000))) rv_space_ret__struct_cap_C_v.words_C.0_after_275) (and (word32-eq (ite (bvule r13_after_35 (bvadd ret_addr_input_ignore_after_35 #x00000004)) (load-word32 stack_for_35_top (bvadd ret_addr_input_ignore_after_35 #x00000004)) (load-word32 stack_for_35_bot (bvadd ret_addr_input_ignore_after_35 #x00000004))) rv_space_ret__struct_cap_C_v.words_C.1_after_275) (and (mem-eq mem_after_35 mem_after_27) (and (word32-eq r4_after_27 r4_after_35) (and (word32-eq r5_after_27 r5_after_35) (and (word32-eq r6_after_27 r6_after_35) (and (word32-eq r7_after_27 r7_after_35) (and (word32-eq r8_after_27 r8_after_35) (and (word32-eq r9_after_27 r9_after_35) (and (word32-eq r10_after_27 r10_after_35) (and (word32-eq r11_after_27 r11_after_35) (and (word32-eq r13_after_27 r13_after_35) (and (word32-eq r0_after_32 ret_addr_input_ignore_after_35) (and (and (= r13_after_27 r13_after_35) (=> (bvule stack_after_34_split r13_after_35) (= (ite (bvule r13_after_35 (bvadd r13_after_27 #x00000000)) (store-word32 split_mem_top.8 (bvadd r13_after_27 #x00000000) #x00000000) split_mem_top.8) (ite (bvule stack_after_34_split (bvadd r13_after_27 #x00000000)) (store-word32 split_mem_top.6 (bvadd r13_after_27 #x00000000) #x00000000) split_mem_top.6)))) (=> updateCapData_success_at_275 updateCapData_success_at_35)))))))))))))))))
(define-fun query_bvaddr13_after_39_x0.3 () (_ BitVec 32) (bvadd r13_after_39 #x00000000))
(define-fun query_load-word32stack_aft.59 () (_ BitVec 32) (load-word32 stack_after_55_top (bvadd r13_after_39 #x00000000)))
(define-fun query_load-word32stack_aft.60 () (_ BitVec 32) (load-word32 stack_after_55_bot (bvadd r13_after_39 #x00000000)))
(define-fun query_implies-rodatamem_af.1 () Bool (implies-rodata mem_after_39))
(define-fun query_bvaddret_addr_input_.2 () (_ BitVec 32) (bvadd ret_addr_input_ignore_after_57 #x00000000))
(define-fun query_load-word32stack_for.26 () (_ BitVec 32) (load-word32 stack_for_57_top (bvadd ret_addr_input_ignore_after_57 #x00000000)))
(define-fun query_load-word32stack_for.27 () (_ BitVec 32) (load-word32 stack_for_57_bot (bvadd ret_addr_input_ignore_after_57 #x00000000)))
(define-fun query_bvaddret_addr_input_.3 () (_ BitVec 32) (bvadd ret_addr_input_ignore_after_57 #x00000004))
(define-fun query_load-word32stack_for.28 () (_ BitVec 32) (load-word32 stack_for_57_top (bvadd ret_addr_input_ignore_after_57 #x00000004)))
(define-fun query_load-word32stack_for.29 () (_ BitVec 32) (load-word32 stack_for_57_bot (bvadd ret_addr_input_ignore_after_57 #x00000004)))
(define-fun query_mem-eqmem_after_57me () Bool (mem-eq mem_after_57 mem_after_39))
(define-fun query_load-word32stack_aft.61 () (_ BitVec 32) (load-word32 stack_after_55_top (bvadd ret_addr_input_ignore_after_57 #x00000004)))
(define-fun query_load-word32stack_aft.62 () (_ BitVec 32) (load-word32 stack_after_55_bot (bvadd ret_addr_input_ignore_after_57 #x00000004)))
(define-fun split_mem_top.9 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_55_split (bvadd ret_addr_input_ignore_after_57 #x00000004)) (store-word32 stack_after_55_top (bvadd ret_addr_input_ignore_after_57 #x00000004) #x00000000) stack_after_55_top))
(define-fun query_load-word32split_mem.18 () (_ BitVec 32) (load-word32 split_mem_top.9 (bvadd ret_addr_input_ignore_after_57 #x00000000)))
(define-fun split_mem_bot.9 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_55_split (bvadd ret_addr_input_ignore_after_57 #x00000004)) stack_after_55_bot (store-word32 stack_after_55_bot (bvadd ret_addr_input_ignore_after_57 #x00000004) #x00000000)))
(define-fun query_load-word32split_mem.19 () (_ BitVec 32) (load-word32 split_mem_bot.9 (bvadd ret_addr_input_ignore_after_57 #x00000000)))
(define-fun split_mem_top.10 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_55_split (bvadd ret_addr_input_ignore_after_57 #x00000000)) (store-word32 split_mem_top.9 (bvadd ret_addr_input_ignore_after_57 #x00000000) #x00000000) split_mem_top.9))
(define-fun query_load-word32split_mem.20 () (_ BitVec 32) (load-word32 split_mem_top.10 (bvadd r13_after_39 #x00000000)))
(define-fun split_mem_bot.10 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_55_split (bvadd ret_addr_input_ignore_after_57 #x00000000)) split_mem_bot.9 (store-word32 split_mem_bot.9 (bvadd ret_addr_input_ignore_after_57 #x00000000) #x00000000)))
(define-fun query_load-word32split_mem.21 () (_ BitVec 32) (load-word32 split_mem_bot.10 (bvadd r13_after_39 #x00000000)))
(define-fun split_mem_top.11 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_57 (bvadd ret_addr_input_ignore_after_57 #x00000004)) (store-word32 stack_for_57_top (bvadd ret_addr_input_ignore_after_57 #x00000004) #x00000000) stack_for_57_top))
(define-fun query_load-word32split_mem.22 () (_ BitVec 32) (load-word32 split_mem_top.11 (bvadd ret_addr_input_ignore_after_57 #x00000000)))
(define-fun split_mem_bot.11 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_57 (bvadd ret_addr_input_ignore_after_57 #x00000004)) stack_for_57_bot (store-word32 stack_for_57_bot (bvadd ret_addr_input_ignore_after_57 #x00000004) #x00000000)))
(define-fun query_load-word32split_mem.23 () (_ BitVec 32) (load-word32 split_mem_bot.11 (bvadd ret_addr_input_ignore_after_57 #x00000000)))
(define-fun split_mem_top.12 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_57 (bvadd ret_addr_input_ignore_after_57 #x00000000)) (store-word32 split_mem_top.11 (bvadd ret_addr_input_ignore_after_57 #x00000000) #x00000000) split_mem_top.11))
(define-fun query_load-word32split_mem.24 () (_ BitVec 32) (load-word32 split_mem_top.12 (bvadd r13_after_39 #x00000000)))
(define-fun split_mem_bot.12 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_57 (bvadd ret_addr_input_ignore_after_57 #x00000000)) split_mem_bot.11 (store-word32 split_mem_bot.11 (bvadd ret_addr_input_ignore_after_57 #x00000000) #x00000000)))
(define-fun query_load-word32split_mem.25 () (_ BitVec 32) (load-word32 split_mem_bot.12 (bvadd r13_after_39 #x00000000)))
(define-fun query_=itebvuler13_after_5 () Bool (= (ite (bvule r13_after_57 (bvadd r13_after_39 #x00000000)) (store-word32 split_mem_top.12 (bvadd r13_after_39 #x00000000) #x00000000) split_mem_top.12) (ite (bvule stack_after_55_split (bvadd r13_after_39 #x00000000)) (store-word32 split_mem_top.10 (bvadd r13_after_39 #x00000000) #x00000000) split_mem_top.10)))
(assert (=> (and (word32-eq r1_after_184 #x00000000) (and (word32-eq r10_after_39 ret__unsigned_long_v.2_v_at_395) (and (word32-eq r3_after_56 cRootCap___struct_cap_C_v.words_C.0_after_303) (and (word32-eq (ite (bvule stack_after_55_split (bvadd r13_after_39 #x00000000)) (load-word32 stack_after_55_top (bvadd r13_after_39 #x00000000)) (load-word32 stack_after_55_bot (bvadd r13_after_39 #x00000000))) cRootCap___struct_cap_C_v.words_C.1_after_303) (and (implies-rodata mem_after_39) (and (word32-eq (bvand r13_after_39 #x00000003) #x00000000) (and (word32-eq #xe00184a0 #xe00184a0) (and (word32-eq (bvand #xe00184a0 #x00000003) #x00000000) (and (word32-eq r0_after_185 r0_after_185) (and (bvule #x0000000c r13_after_39) (and (word32-eq (bvand r0_after_185 #x00000003) #x00000000) (and (bvule r13_after_39 r0_after_185) (and (bvule r0_after_185 (bvadd r0_after_185 #x00000004)) (and (bvult (bvadd r13_after_39 #x00000000) (bvadd r0_after_185 #x00000000)) (and (bvule r13_after_39 (bvadd r13_after_39 #x00000000)) path_cond_to_275_C))))))))))))))) (and (word32-eq (ite (bvule r13_after_57 (bvadd ret_addr_input_ignore_after_57 #x00000000)) (load-word32 stack_for_57_top (bvadd ret_addr_input_ignore_after_57 #x00000000)) (load-word32 stack_for_57_bot (bvadd ret_addr_input_ignore_after_57 #x00000000))) rv_space_ret__struct_cap_C_v.words_C.0_after_275) (and (word32-eq (ite (bvule r13_after_57 (bvadd ret_addr_input_ignore_after_57 #x00000004)) (load-word32 stack_for_57_top (bvadd ret_addr_input_ignore_after_57 #x00000004)) (load-word32 stack_for_57_bot (bvadd ret_addr_input_ignore_after_57 #x00000004))) rv_space_ret__struct_cap_C_v.words_C.1_after_275) (and (mem-eq mem_after_57 mem_after_39) (and (word32-eq r4_after_39 r4_after_57) (and (word32-eq r5_after_39 r5_after_57) (and (word32-eq r0_after_43 r6_after_57) (and (word32-eq r7_after_39 r7_after_57) (and (word32-eq r8_after_39 r8_after_57) (and (word32-eq r9_after_39 r9_after_57) (and (word32-eq r10_after_39 r10_after_57) (and (word32-eq r11_after_39 r11_after_57) (and (word32-eq r13_after_39 r13_after_57) (and (word32-eq r0_after_185 ret_addr_input_ignore_after_57) (and (and (= r13_after_39 r13_after_57) (=> (bvule stack_after_55_split r13_after_57) (= (ite (bvule r13_after_57 (bvadd r13_after_39 #x00000000)) (store-word32 split_mem_top.12 (bvadd r13_after_39 #x00000000) #x00000000) split_mem_top.12) (ite (bvule stack_after_55_split (bvadd r13_after_39 #x00000000)) (store-word32 split_mem_top.10 (bvadd r13_after_39 #x00000000) #x00000000) split_mem_top.10)))) (=> updateCapData_success_at_275 updateCapData_success_at_57)))))))))))))))))
(define-fun path_cond_to_445_C () Bool (and (not cond_at_276) path_cond_to_276_C))
(define-fun path_cond_to_273_C () Bool (or path_cond_to_445_C path_cond_to_275_C))
(define-fun cRootCap___struct_cap_C_v.words_C.0_v_at_273 () (_ BitVec 32) (ite path_cond_to_275_C rv_space_ret__struct_cap_C_v.words_C.0_after_275 cRootCap___struct_cap_C_v.words_C.0_after_303))
(define-fun cRootCap___struct_cap_C_v.words_C.1_v_at_273 () (_ BitVec 32) (ite path_cond_to_275_C rv_space_ret__struct_cap_C_v.words_C.1_after_275 cRootCap___struct_cap_C_v.words_C.1_after_303))
(declare-fun deriveCap_success_at_273 () Bool)
(declare-fun rv_space_ret__struct_deriveCap_ret_C_v.status_C_after_273 () (_ BitVec 32))
(declare-fun rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.0_after_273 () (_ BitVec 32))
(declare-fun rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.1_after_273 () (_ BitVec 32))
(declare-fun Mem_after_273 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun GhostAssertions_after_273 () (Array (_ BitVec 50) (_ BitVec 32)))
(define-fun query_mem-eqitepath_cond_t () Bool (mem-eq (ite path_cond_to_36_ASM mem_after_35 mem_after_27) Mem_init))
(define-fun query_bvaddret_addr_input_.4 () (_ BitVec 32) (bvadd ret_addr_input_ignore_after_39 #x00000000))
(define-fun query_load-word32stack_for.30 () (_ BitVec 32) (load-word32 stack_for_39_top (bvadd ret_addr_input_ignore_after_39 #x00000000)))
(define-fun query_load-word32stack_for.31 () (_ BitVec 32) (load-word32 stack_for_39_bot (bvadd ret_addr_input_ignore_after_39 #x00000000)))
(define-fun query_bvaddret_addr_input_.5 () (_ BitVec 32) (bvadd ret_addr_input_ignore_after_39 #x00000004))
(define-fun query_load-word32stack_for.32 () (_ BitVec 32) (load-word32 stack_for_39_top (bvadd ret_addr_input_ignore_after_39 #x00000004)))
(define-fun query_load-word32stack_for.33 () (_ BitVec 32) (load-word32 stack_for_39_bot (bvadd ret_addr_input_ignore_after_39 #x00000004)))
(define-fun query_bvaddret_addr_input_.6 () (_ BitVec 32) (bvadd ret_addr_input_ignore_after_39 #x00000008))
(define-fun query_load-word32stack_for.34 () (_ BitVec 32) (load-word32 stack_for_39_top (bvadd ret_addr_input_ignore_after_39 #x00000008)))
(define-fun query_load-word32stack_for.35 () (_ BitVec 32) (load-word32 stack_for_39_bot (bvadd ret_addr_input_ignore_after_39 #x00000008)))
(define-fun query_mem-eqmem_after_39Me () Bool (mem-eq mem_after_39 Mem_after_273))
(define-fun query_rodataMem_after_273 () Bool (rodata Mem_after_273))
(define-fun query_load-word32stack_aft.63 () (_ BitVec 32) (load-word32 stack_after_37_top (bvadd ret_addr_input_ignore_after_39 #x00000004)))
(define-fun query_load-word32stack_aft.64 () (_ BitVec 32) (load-word32 stack_after_37_bot (bvadd ret_addr_input_ignore_after_39 #x00000004)))
(define-fun split_mem_top.13 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_37_split (bvadd ret_addr_input_ignore_after_39 #x00000004)) (store-word32 stack_after_37_top (bvadd ret_addr_input_ignore_after_39 #x00000004) #x00000000) stack_after_37_top))
(define-fun query_load-word32split_mem.26 () (_ BitVec 32) (load-word32 split_mem_top.13 (bvadd ret_addr_input_ignore_after_39 #x00000000)))
(define-fun split_mem_bot.13 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_37_split (bvadd ret_addr_input_ignore_after_39 #x00000004)) stack_after_37_bot (store-word32 stack_after_37_bot (bvadd ret_addr_input_ignore_after_39 #x00000004) #x00000000)))
(define-fun query_load-word32split_mem.27 () (_ BitVec 32) (load-word32 split_mem_bot.13 (bvadd ret_addr_input_ignore_after_39 #x00000000)))
(define-fun split_mem_top.14 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_37_split (bvadd ret_addr_input_ignore_after_39 #x00000000)) (store-word32 split_mem_top.13 (bvadd ret_addr_input_ignore_after_39 #x00000000) #x00000000) split_mem_top.13))
(define-fun query_load-word32split_mem.28 () (_ BitVec 32) (load-word32 split_mem_top.14 (bvadd ret_addr_input_ignore_after_39 #x00000008)))
(define-fun split_mem_bot.14 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_37_split (bvadd ret_addr_input_ignore_after_39 #x00000000)) split_mem_bot.13 (store-word32 split_mem_bot.13 (bvadd ret_addr_input_ignore_after_39 #x00000000) #x00000000)))
(define-fun query_load-word32split_mem.29 () (_ BitVec 32) (load-word32 split_mem_bot.14 (bvadd ret_addr_input_ignore_after_39 #x00000008)))
(define-fun split_mem_top.15 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_39 (bvadd ret_addr_input_ignore_after_39 #x00000004)) (store-word32 stack_for_39_top (bvadd ret_addr_input_ignore_after_39 #x00000004) #x00000000) stack_for_39_top))
(define-fun query_load-word32split_mem.30 () (_ BitVec 32) (load-word32 split_mem_top.15 (bvadd ret_addr_input_ignore_after_39 #x00000000)))
(define-fun split_mem_bot.15 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_39 (bvadd ret_addr_input_ignore_after_39 #x00000004)) stack_for_39_bot (store-word32 stack_for_39_bot (bvadd ret_addr_input_ignore_after_39 #x00000004) #x00000000)))
(define-fun query_load-word32split_mem.31 () (_ BitVec 32) (load-word32 split_mem_bot.15 (bvadd ret_addr_input_ignore_after_39 #x00000000)))
(define-fun split_mem_top.16 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_39 (bvadd ret_addr_input_ignore_after_39 #x00000000)) (store-word32 split_mem_top.15 (bvadd ret_addr_input_ignore_after_39 #x00000000) #x00000000) split_mem_top.15))
(define-fun query_load-word32split_mem.32 () (_ BitVec 32) (load-word32 split_mem_top.16 (bvadd ret_addr_input_ignore_after_39 #x00000008)))
(define-fun split_mem_bot.16 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_39 (bvadd ret_addr_input_ignore_after_39 #x00000000)) split_mem_bot.15 (store-word32 split_mem_bot.15 (bvadd ret_addr_input_ignore_after_39 #x00000000) #x00000000)))
(define-fun query_load-word32split_mem.33 () (_ BitVec 32) (load-word32 split_mem_bot.16 (bvadd ret_addr_input_ignore_after_39 #x00000008)))
(define-fun query_=itebvuler13_after_3.1 () Bool (= (ite (bvule r13_after_39 (bvadd ret_addr_input_ignore_after_39 #x00000008)) (store-word32 split_mem_top.16 (bvadd ret_addr_input_ignore_after_39 #x00000008) #x00000000) split_mem_top.16) (ite (bvule stack_after_37_split (bvadd ret_addr_input_ignore_after_39 #x00000008)) (store-word32 split_mem_top.14 (bvadd ret_addr_input_ignore_after_39 #x00000008) #x00000000) split_mem_top.14)))
(assert (=> (and (word32-eq (ite path_cond_to_36_ASM r4_after_35 r4_after_27) cRootSlot___ptr_to_struct_cte_C_v_after_307) (and (word32-eq r2_after_38 cRootCap___struct_cap_C_v.words_C.0_v_at_273) (and (word32-eq r3_after_38 cRootCap___struct_cap_C_v.words_C.1_v_at_273) (and (mem-eq (ite path_cond_to_36_ASM mem_after_35 mem_after_27) Mem_init) (and (implies-rodata Mem_init) (and (word32-eq (bvand (ite path_cond_to_36_ASM r13_after_35 r13_after_27) #x00000003) #x00000000) (and (word32-eq #xe0018430 #xe0018430) (and (word32-eq (bvand #xe0018430 #x00000003) #x00000000) (and (word32-eq r0_after_157 r0_after_157) (and (bvule #x00000078 (ite path_cond_to_36_ASM r13_after_35 r13_after_27)) (and (word32-eq (bvand r0_after_157 #x00000003) #x00000000) (and (bvule (ite path_cond_to_36_ASM r13_after_35 r13_after_27) r0_after_157) (and (bvule r0_after_157 (bvadd r0_after_157 #x00000008)) path_cond_to_273_C))))))))))))) (and (word32-eq (ite (bvule r13_after_39 (bvadd ret_addr_input_ignore_after_39 #x00000000)) (load-word32 stack_for_39_top (bvadd ret_addr_input_ignore_after_39 #x00000000)) (load-word32 stack_for_39_bot (bvadd ret_addr_input_ignore_after_39 #x00000000))) rv_space_ret__struct_deriveCap_ret_C_v.status_C_after_273) (and (word32-eq (ite (bvule r13_after_39 (bvadd ret_addr_input_ignore_after_39 #x00000004)) (load-word32 stack_for_39_top (bvadd ret_addr_input_ignore_after_39 #x00000004)) (load-word32 stack_for_39_bot (bvadd ret_addr_input_ignore_after_39 #x00000004))) rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.0_after_273) (and (word32-eq (ite (bvule r13_after_39 (bvadd ret_addr_input_ignore_after_39 #x00000008)) (load-word32 stack_for_39_top (bvadd ret_addr_input_ignore_after_39 #x00000008)) (load-word32 stack_for_39_bot (bvadd ret_addr_input_ignore_after_39 #x00000008))) rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.1_after_273) (and (mem-eq mem_after_39 Mem_after_273) (and (rodata Mem_after_273) (and (word32-eq (ite path_cond_to_36_ASM r4_after_35 r4_after_27) r4_after_39) (and (word32-eq (ite path_cond_to_30_ASM r5_after_27 r5_after_35) r5_after_39) (and (word32-eq (ite path_cond_to_30_ASM r6_after_27 r6_after_35) r6_after_39) (and (word32-eq (ite path_cond_to_36_ASM r7_after_35 r7_after_27) r7_after_39) (and (word32-eq (ite path_cond_to_30_ASM r8_after_27 r8_after_36) r8_after_39) (and (word32-eq (ite path_cond_to_36_ASM r9_after_35 r9_after_27) r9_after_39) (and (word32-eq (ite path_cond_to_30_ASM r10_after_27 r10_after_35) r10_after_39) (and (word32-eq (ite path_cond_to_36_ASM r11_after_35 r11_after_27) r11_after_39) (and (word32-eq (ite path_cond_to_36_ASM r13_after_35 r13_after_27) r13_after_39) (and (word32-eq r0_after_157 ret_addr_input_ignore_after_39) (and (and (= (ite path_cond_to_36_ASM r13_after_35 r13_after_27) r13_after_39) (=> (bvule stack_after_37_split r13_after_39) (= (ite (bvule r13_after_39 (bvadd ret_addr_input_ignore_after_39 #x00000008)) (store-word32 split_mem_top.16 (bvadd ret_addr_input_ignore_after_39 #x00000008) #x00000000) split_mem_top.16) (ite (bvule stack_after_37_split (bvadd ret_addr_input_ignore_after_39 #x00000008)) (store-word32 split_mem_top.14 (bvadd ret_addr_input_ignore_after_39 #x00000008) #x00000000) split_mem_top.14)))) (=> deriveCap_success_at_273 deriveCap_success_at_39)))))))))))))))))))
(define-fun cond_at_271 () Bool (not (word32-eq rv_space_ret__struct_deriveCap_ret_C_v.status_C_after_273 #x00000000)))
(define-fun path_cond_to_269_C () Bool (and (not cond_at_271) path_cond_to_273_C))
(define-fun cond_at_357 () Bool (and (bvslt #x00000000 #x00000002) (bvsle #x00000000 #x00000000)))
(define-fun path_cond_to_356_C () Bool (and cond_at_357 path_cond_to_269_C))
(define-fun cond_at_356 () Bool (not (word32-eq (bvand rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.0_after_273 #x0000000e) #x0000000e)))
(define-fun path_cond_to_353_C () Bool (and (not cond_at_356) path_cond_to_356_C))
(define-fun cond_at_353 () Bool (and (and (and (bvsle #x00000000 #x00000000) (bvslt #x00000000 #x00000020)) (bvslt #x00000000 #x00000002)) (bvsle #x00000000 #x00000000)))
(define-fun path_cond_to_352_C () Bool (and cond_at_353 path_cond_to_353_C))
(define-fun ret__unsigned_v.2_after_352 () (_ BitVec 32) (bvand (bvlshr rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.0_after_273 #x00000000) #x000000ff))
(define-fun path_cond_to_355_C () Bool (and cond_at_356 path_cond_to_356_C))
(define-fun cond_at_355 () Bool (and (and (and (bvsle #x00000000 #x00000000) (bvslt #x00000000 #x00000020)) (bvslt #x00000000 #x00000002)) (bvsle #x00000000 #x00000000)))
(define-fun path_cond_to_354_C () Bool (and cond_at_355 path_cond_to_355_C))
(define-fun ret__unsigned_v.2_after_354 () (_ BitVec 32) (bvand (bvlshr rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.0_after_273 #x00000000) #x0000000f))
(define-fun path_cond_to_351_C () Bool (or path_cond_to_354_C path_cond_to_352_C))
(define-fun cond_at_266 () Bool (not (word32-eq (ite path_cond_to_354_C ret__unsigned_v.2_after_354 ret__unsigned_v.2_after_352) #x0000000a)))
(define-fun path_cond_to_262_C () Bool (and (not cond_at_266) path_cond_to_351_C))
(define-fun cond_at_262 () Bool (not (word32-eq ret__unsigned_long_v.1_v_at_384 #x00000000)))
(define-fun path_cond_to_261_C () Bool (and cond_at_262 path_cond_to_262_C))
(declare-fun updateCapData_success_at_261 () Bool)
(declare-fun rv_space_ret__struct_cap_C_v.words_C.0_after_261 () (_ BitVec 32))
(declare-fun rv_space_ret__struct_cap_C_v.words_C.1_after_261 () (_ BitVec 32))
(assert (=> (and (word32-eq r1_after_150 #x00000000) (and (word32-eq r9_after_27 ret__unsigned_long_v.1_v_at_384) (and (word32-eq r8_after_27 vRootCap___struct_cap_C_v.words_C.0_after_296) (and (word32-eq (ite (bvule stack_after_34_split (bvadd r13_after_27 #x00000000)) (load-word32 stack_after_34_top (bvadd r13_after_27 #x00000000)) (load-word32 stack_after_34_bot (bvadd r13_after_27 #x00000000))) vRootCap___struct_cap_C_v.words_C.1_after_296) (and (implies-rodata mem_after_27) (and (word32-eq (bvand r13_after_27 #x00000003) #x00000000) (and (word32-eq #xe0018414 #xe0018414) (and (word32-eq (bvand #xe0018414 #x00000003) #x00000000) (and (word32-eq r0_after_32 r0_after_32) (and (bvule #x0000000c r13_after_27) (and (word32-eq (bvand r0_after_32 #x00000003) #x00000000) (and (bvule r13_after_27 r0_after_32) (and (bvule r0_after_32 (bvadd r0_after_32 #x00000004)) (and (bvult (bvadd r13_after_27 #x00000000) (bvadd r0_after_32 #x00000000)) (and (bvule r13_after_27 (bvadd r13_after_27 #x00000000)) path_cond_to_261_C))))))))))))))) (and (word32-eq (ite (bvule r13_after_35 (bvadd ret_addr_input_ignore_after_35 #x00000000)) (load-word32 stack_for_35_top (bvadd ret_addr_input_ignore_after_35 #x00000000)) (load-word32 stack_for_35_bot (bvadd ret_addr_input_ignore_after_35 #x00000000))) rv_space_ret__struct_cap_C_v.words_C.0_after_261) (and (word32-eq (ite (bvule r13_after_35 (bvadd ret_addr_input_ignore_after_35 #x00000004)) (load-word32 stack_for_35_top (bvadd ret_addr_input_ignore_after_35 #x00000004)) (load-word32 stack_for_35_bot (bvadd ret_addr_input_ignore_after_35 #x00000004))) rv_space_ret__struct_cap_C_v.words_C.1_after_261) (and (mem-eq mem_after_35 mem_after_27) (and (word32-eq r4_after_27 r4_after_35) (and (word32-eq r5_after_27 r5_after_35) (and (word32-eq r6_after_27 r6_after_35) (and (word32-eq r7_after_27 r7_after_35) (and (word32-eq r8_after_27 r8_after_35) (and (word32-eq r9_after_27 r9_after_35) (and (word32-eq r10_after_27 r10_after_35) (and (word32-eq r11_after_27 r11_after_35) (and (word32-eq r13_after_27 r13_after_35) (and (word32-eq r0_after_32 ret_addr_input_ignore_after_35) (and (and (= r13_after_27 r13_after_35) (=> (bvule stack_after_34_split r13_after_35) (= (ite (bvule r13_after_35 (bvadd r13_after_27 #x00000000)) (store-word32 split_mem_top.8 (bvadd r13_after_27 #x00000000) #x00000000) split_mem_top.8) (ite (bvule stack_after_34_split (bvadd r13_after_27 #x00000000)) (store-word32 split_mem_top.6 (bvadd r13_after_27 #x00000000) #x00000000) split_mem_top.6)))) (=> updateCapData_success_at_261 updateCapData_success_at_35)))))))))))))))))
(assert (=> (and (word32-eq r1_after_184 #x00000000) (and (word32-eq r10_after_39 ret__unsigned_long_v.1_v_at_384) (and (word32-eq r3_after_56 vRootCap___struct_cap_C_v.words_C.0_after_296) (and (word32-eq (ite (bvule stack_after_55_split (bvadd r13_after_39 #x00000000)) (load-word32 stack_after_55_top (bvadd r13_after_39 #x00000000)) (load-word32 stack_after_55_bot (bvadd r13_after_39 #x00000000))) vRootCap___struct_cap_C_v.words_C.1_after_296) (and (implies-rodata mem_after_39) (and (word32-eq (bvand r13_after_39 #x00000003) #x00000000) (and (word32-eq #xe00184a0 #xe00184a0) (and (word32-eq (bvand #xe00184a0 #x00000003) #x00000000) (and (word32-eq r0_after_185 r0_after_185) (and (bvule #x0000000c r13_after_39) (and (word32-eq (bvand r0_after_185 #x00000003) #x00000000) (and (bvule r13_after_39 r0_after_185) (and (bvule r0_after_185 (bvadd r0_after_185 #x00000004)) (and (bvult (bvadd r13_after_39 #x00000000) (bvadd r0_after_185 #x00000000)) (and (bvule r13_after_39 (bvadd r13_after_39 #x00000000)) path_cond_to_261_C))))))))))))))) (and (word32-eq (ite (bvule r13_after_57 (bvadd ret_addr_input_ignore_after_57 #x00000000)) (load-word32 stack_for_57_top (bvadd ret_addr_input_ignore_after_57 #x00000000)) (load-word32 stack_for_57_bot (bvadd ret_addr_input_ignore_after_57 #x00000000))) rv_space_ret__struct_cap_C_v.words_C.0_after_261) (and (word32-eq (ite (bvule r13_after_57 (bvadd ret_addr_input_ignore_after_57 #x00000004)) (load-word32 stack_for_57_top (bvadd ret_addr_input_ignore_after_57 #x00000004)) (load-word32 stack_for_57_bot (bvadd ret_addr_input_ignore_after_57 #x00000004))) rv_space_ret__struct_cap_C_v.words_C.1_after_261) (and (mem-eq mem_after_57 mem_after_39) (and (word32-eq r4_after_39 r4_after_57) (and (word32-eq r5_after_39 r5_after_57) (and (word32-eq r0_after_43 r6_after_57) (and (word32-eq r7_after_39 r7_after_57) (and (word32-eq r8_after_39 r8_after_57) (and (word32-eq r9_after_39 r9_after_57) (and (word32-eq r10_after_39 r10_after_57) (and (word32-eq r11_after_39 r11_after_57) (and (word32-eq r13_after_39 r13_after_57) (and (word32-eq r0_after_185 ret_addr_input_ignore_after_57) (and (and (= r13_after_39 r13_after_57) (=> (bvule stack_after_55_split r13_after_57) (= (ite (bvule r13_after_57 (bvadd r13_after_39 #x00000000)) (store-word32 split_mem_top.12 (bvadd r13_after_39 #x00000000) #x00000000) split_mem_top.12) (ite (bvule stack_after_55_split (bvadd r13_after_39 #x00000000)) (store-word32 split_mem_top.10 (bvadd r13_after_39 #x00000000) #x00000000) split_mem_top.10)))) (=> updateCapData_success_at_261 updateCapData_success_at_57)))))))))))))))))
(define-fun path_cond_to_443_C () Bool (and (not cond_at_262) path_cond_to_262_C))
(define-fun path_cond_to_259_C () Bool (or path_cond_to_261_C path_cond_to_443_C))
(define-fun rv_space_ret__struct_cap_C_v.words_C.1_v_at_259 () (_ BitVec 32) (ite path_cond_to_443_C rv_space_ret__struct_cap_C_v.words_C.1_after_275 rv_space_ret__struct_cap_C_v.words_C.1_after_261))
(define-fun vRootCap___struct_cap_C_v.words_C.1_v_at_259 () (_ BitVec 32) (ite path_cond_to_443_C vRootCap___struct_cap_C_v.words_C.1_after_296 rv_space_ret__struct_cap_C_v.words_C.1_after_261))
(define-fun rv_space_ret__struct_cap_C_v.words_C.0_v_at_259 () (_ BitVec 32) (ite path_cond_to_261_C rv_space_ret__struct_cap_C_v.words_C.0_after_261 rv_space_ret__struct_cap_C_v.words_C.0_after_275))
(define-fun vRootCap___struct_cap_C_v.words_C.0_v_at_259 () (_ BitVec 32) (ite path_cond_to_261_C rv_space_ret__struct_cap_C_v.words_C.0_after_261 vRootCap___struct_cap_C_v.words_C.0_after_296))
(declare-fun deriveCap_success_at_259 () Bool)
(declare-fun rv_space_ret__struct_deriveCap_ret_C_v.status_C_after_259 () (_ BitVec 32))
(declare-fun rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.0_after_259 () (_ BitVec 32))
(declare-fun rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.1_after_259 () (_ BitVec 32))
(declare-fun Mem_after_259 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun GhostAssertions_after_259 () (Array (_ BitVec 50) (_ BitVec 32)))
(define-fun query_mem-eqitepath_cond_t.1 () Bool (mem-eq (ite path_cond_to_56_ASM mem_after_57 mem_after_39) Mem_after_273))
(define-fun query_implies-rodataMem_af () Bool (implies-rodata Mem_after_273))
(define-fun query_bvaddret_addr_input_.7 () (_ BitVec 32) (bvadd ret_addr_input_ignore_after_59 #x00000000))
(define-fun query_load-word32stack_for.36 () (_ BitVec 32) (load-word32 stack_for_59_top (bvadd ret_addr_input_ignore_after_59 #x00000000)))
(define-fun query_load-word32stack_for.37 () (_ BitVec 32) (load-word32 stack_for_59_bot (bvadd ret_addr_input_ignore_after_59 #x00000000)))
(define-fun query_bvaddret_addr_input_.8 () (_ BitVec 32) (bvadd ret_addr_input_ignore_after_59 #x00000004))
(define-fun query_load-word32stack_for.38 () (_ BitVec 32) (load-word32 stack_for_59_top (bvadd ret_addr_input_ignore_after_59 #x00000004)))
(define-fun query_load-word32stack_for.39 () (_ BitVec 32) (load-word32 stack_for_59_bot (bvadd ret_addr_input_ignore_after_59 #x00000004)))
(define-fun query_bvaddret_addr_input_.9 () (_ BitVec 32) (bvadd ret_addr_input_ignore_after_59 #x00000008))
(define-fun query_load-word32stack_for.40 () (_ BitVec 32) (load-word32 stack_for_59_top (bvadd ret_addr_input_ignore_after_59 #x00000008)))
(define-fun query_load-word32stack_for.41 () (_ BitVec 32) (load-word32 stack_for_59_bot (bvadd ret_addr_input_ignore_after_59 #x00000008)))
(define-fun query_mem-eqmem_after_59Me () Bool (mem-eq mem_after_59 Mem_after_259))
(define-fun query_rodataMem_after_259 () Bool (rodata Mem_after_259))
(define-fun query_load-word32itepath_c.9 () (_ BitVec 32) (load-word32 (ite path_cond_to_56_ASM stack_for_57_top stack_after_44_top) (bvadd ret_addr_input_ignore_after_59 #x00000004)))
(define-fun query_load-word32itepath_c.10 () (_ BitVec 32) (load-word32 (ite path_cond_to_56_ASM stack_for_57_bot stack_after_44_bot) (bvadd ret_addr_input_ignore_after_59 #x00000004)))
(define-fun split_mem_top.17 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule (ite path_cond_to_56_ASM r13_after_57 stack_after_44_split) (bvadd ret_addr_input_ignore_after_59 #x00000004)) (store-word32 (ite path_cond_to_56_ASM stack_for_57_top stack_after_44_top) (bvadd ret_addr_input_ignore_after_59 #x00000004) #x00000000) (ite path_cond_to_56_ASM stack_for_57_top stack_after_44_top)))
(define-fun query_load-word32split_mem.34 () (_ BitVec 32) (load-word32 split_mem_top.17 (bvadd ret_addr_input_ignore_after_59 #x00000008)))
(define-fun split_mem_bot.17 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule (ite path_cond_to_56_ASM r13_after_57 stack_after_44_split) (bvadd ret_addr_input_ignore_after_59 #x00000004)) (ite path_cond_to_56_ASM stack_for_57_bot stack_after_44_bot) (store-word32 (ite path_cond_to_56_ASM stack_for_57_bot stack_after_44_bot) (bvadd ret_addr_input_ignore_after_59 #x00000004) #x00000000)))
(define-fun query_load-word32split_mem.35 () (_ BitVec 32) (load-word32 split_mem_bot.17 (bvadd ret_addr_input_ignore_after_59 #x00000008)))
(define-fun split_mem_top.18 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule (ite path_cond_to_56_ASM r13_after_57 stack_after_44_split) (bvadd ret_addr_input_ignore_after_59 #x00000008)) (store-word32 split_mem_top.17 (bvadd ret_addr_input_ignore_after_59 #x00000008) #x00000000) split_mem_top.17))
(define-fun query_load-word32split_mem.36 () (_ BitVec 32) (load-word32 split_mem_top.18 (bvadd ret_addr_input_ignore_after_59 #x00000000)))
(define-fun split_mem_bot.18 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule (ite path_cond_to_56_ASM r13_after_57 stack_after_44_split) (bvadd ret_addr_input_ignore_after_59 #x00000008)) split_mem_bot.17 (store-word32 split_mem_bot.17 (bvadd ret_addr_input_ignore_after_59 #x00000008) #x00000000)))
(define-fun query_load-word32split_mem.37 () (_ BitVec 32) (load-word32 split_mem_bot.18 (bvadd ret_addr_input_ignore_after_59 #x00000000)))
(define-fun split_mem_top.19 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_59 (bvadd ret_addr_input_ignore_after_59 #x00000004)) (store-word32 stack_for_59_top (bvadd ret_addr_input_ignore_after_59 #x00000004) #x00000000) stack_for_59_top))
(define-fun query_load-word32split_mem.38 () (_ BitVec 32) (load-word32 split_mem_top.19 (bvadd ret_addr_input_ignore_after_59 #x00000008)))
(define-fun split_mem_bot.19 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_59 (bvadd ret_addr_input_ignore_after_59 #x00000004)) stack_for_59_bot (store-word32 stack_for_59_bot (bvadd ret_addr_input_ignore_after_59 #x00000004) #x00000000)))
(define-fun query_load-word32split_mem.39 () (_ BitVec 32) (load-word32 split_mem_bot.19 (bvadd ret_addr_input_ignore_after_59 #x00000008)))
(define-fun split_mem_top.20 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_59 (bvadd ret_addr_input_ignore_after_59 #x00000008)) (store-word32 split_mem_top.19 (bvadd ret_addr_input_ignore_after_59 #x00000008) #x00000000) split_mem_top.19))
(define-fun query_load-word32split_mem.40 () (_ BitVec 32) (load-word32 split_mem_top.20 (bvadd ret_addr_input_ignore_after_59 #x00000000)))
(define-fun split_mem_bot.20 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_59 (bvadd ret_addr_input_ignore_after_59 #x00000008)) split_mem_bot.19 (store-word32 split_mem_bot.19 (bvadd ret_addr_input_ignore_after_59 #x00000008) #x00000000)))
(define-fun query_load-word32split_mem.41 () (_ BitVec 32) (load-word32 split_mem_bot.20 (bvadd ret_addr_input_ignore_after_59 #x00000000)))
(define-fun query_=itebvuler13_after_5.1 () Bool (= (ite (bvule r13_after_59 (bvadd ret_addr_input_ignore_after_59 #x00000000)) (store-word32 split_mem_top.20 (bvadd ret_addr_input_ignore_after_59 #x00000000) #x00000000) split_mem_top.20) (ite (bvule (ite path_cond_to_56_ASM r13_after_57 stack_after_44_split) (bvadd ret_addr_input_ignore_after_59 #x00000000)) (store-word32 split_mem_top.18 (bvadd ret_addr_input_ignore_after_59 #x00000000) #x00000000) split_mem_top.18)))
(assert (=> (and (word32-eq (ite path_cond_to_52_ASM r5_after_39 r5_after_57) vRootSlot___ptr_to_struct_cte_C_v_after_300) (and (word32-eq r2_after_58 vRootCap___struct_cap_C_v.words_C.0_v_at_259) (and (word32-eq r3_after_58 vRootCap___struct_cap_C_v.words_C.1_v_at_259) (and (mem-eq (ite path_cond_to_56_ASM mem_after_57 mem_after_39) Mem_after_273) (and (implies-rodata Mem_after_273) (and (word32-eq (bvand (ite path_cond_to_56_ASM r13_after_57 r13_after_39) #x00000003) #x00000000) (and (word32-eq #xe00184b4 #xe00184b4) (and (word32-eq (bvand #xe00184b4 #x00000003) #x00000000) (and (word32-eq r0_after_190 r0_after_190) (and (bvule #x00000078 (ite path_cond_to_56_ASM r13_after_57 r13_after_39)) (and (word32-eq (bvand r0_after_190 #x00000003) #x00000000) (and (bvule (ite path_cond_to_56_ASM r13_after_57 r13_after_39) r0_after_190) (and (bvule r0_after_190 (bvadd r0_after_190 #x00000008)) path_cond_to_259_C))))))))))))) (and (word32-eq (ite (bvule r13_after_59 (bvadd ret_addr_input_ignore_after_59 #x00000000)) (load-word32 stack_for_59_top (bvadd ret_addr_input_ignore_after_59 #x00000000)) (load-word32 stack_for_59_bot (bvadd ret_addr_input_ignore_after_59 #x00000000))) rv_space_ret__struct_deriveCap_ret_C_v.status_C_after_259) (and (word32-eq (ite (bvule r13_after_59 (bvadd ret_addr_input_ignore_after_59 #x00000004)) (load-word32 stack_for_59_top (bvadd ret_addr_input_ignore_after_59 #x00000004)) (load-word32 stack_for_59_bot (bvadd ret_addr_input_ignore_after_59 #x00000004))) rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.0_after_259) (and (word32-eq (ite (bvule r13_after_59 (bvadd ret_addr_input_ignore_after_59 #x00000008)) (load-word32 stack_for_59_top (bvadd ret_addr_input_ignore_after_59 #x00000008)) (load-word32 stack_for_59_bot (bvadd ret_addr_input_ignore_after_59 #x00000008))) rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.1_after_259) (and (mem-eq mem_after_59 Mem_after_259) (and (rodata Mem_after_259) (and (word32-eq (ite path_cond_to_56_ASM r4_after_57 r4_after_39) r4_after_59) (and (word32-eq (ite path_cond_to_52_ASM r5_after_39 r5_after_57) r5_after_59) (and (word32-eq (ite path_cond_to_56_ASM r6_after_57 r0_after_43) r6_after_59) (and (word32-eq (ite path_cond_to_52_ASM r7_after_39 r7_after_57) r7_after_59) (and (word32-eq (ite path_cond_to_52_ASM r8_after_39 r8_after_57) r8_after_59) (and (word32-eq (ite path_cond_to_56_ASM r9_after_57 r9_after_39) r9_after_59) (and (word32-eq (ite path_cond_to_52_ASM r10_after_39 r10_after_57) r10_after_59) (and (word32-eq (ite path_cond_to_52_ASM r11_after_39 r11_after_57) r11_after_59) (and (word32-eq (ite path_cond_to_56_ASM r13_after_57 r13_after_39) r13_after_59) (and (word32-eq r0_after_190 ret_addr_input_ignore_after_59) (and (and (= (ite path_cond_to_56_ASM r13_after_57 r13_after_39) r13_after_59) (=> (bvule (ite path_cond_to_56_ASM r13_after_57 stack_after_44_split) r13_after_59) (= (ite (bvule r13_after_59 (bvadd ret_addr_input_ignore_after_59 #x00000000)) (store-word32 split_mem_top.20 (bvadd ret_addr_input_ignore_after_59 #x00000000) #x00000000) split_mem_top.20) (ite (bvule (ite path_cond_to_56_ASM r13_after_57 stack_after_44_split) (bvadd ret_addr_input_ignore_after_59 #x00000000)) (store-word32 split_mem_top.18 (bvadd ret_addr_input_ignore_after_59 #x00000000) #x00000000) split_mem_top.18)))) (=> deriveCap_success_at_259 deriveCap_success_at_59)))))))))))))))))))
(define-fun cond_at_257 () Bool (not (word32-eq rv_space_ret__struct_deriveCap_ret_C_v.status_C_after_259 #x00000000)))
(define-fun path_cond_to_255_C () Bool (and (not cond_at_257) path_cond_to_259_C))
(declare-fun isValidVTableRoot_success_at_254 () Bool)
(declare-fun rv_space_ret__unsigned_long_v_after_254 () (_ BitVec 32))
(define-fun query_implies-rodatamem_af.2 () Bool (implies-rodata mem_after_59))
(define-fun query_mem-eqmem_after_65me () Bool (mem-eq mem_after_65 mem_after_59))
(define-fun query_=stack_for_65_topsta () Bool (= stack_for_65_top stack_after_64_top))
(assert (=> (and (word32-eq r0_after_63 rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.0_after_259) (and (word32-eq r1_after_63 rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.1_after_259) (and (implies-rodata mem_after_59) (and (word32-eq (bvand r13_after_59 #x00000003) #x00000000) (and (word32-eq #xe00184d4 #xe00184d4) (and (word32-eq (bvand #xe00184d4 #x00000003) #x00000000) (and (word32-eq r0_after_63 r0_after_63) (and (bvule #x00000008 r13_after_59) path_cond_to_255_C)))))))) (and (word32-eq r0_after_65 rv_space_ret__unsigned_long_v_after_254) (and (mem-eq mem_after_65 mem_after_59) (and (word32-eq r4_after_59 r4_after_65) (and (word32-eq r5_after_59 r5_after_65) (and (word32-eq r6_after_59 r6_after_65) (and (word32-eq r7_after_59 r7_after_65) (and (word32-eq r8_after_59 r8_after_65) (and (word32-eq r9_after_59 r9_after_65) (and (word32-eq r10_after_59 r10_after_65) (and (word32-eq r11_after_59 r11_after_65) (and (word32-eq r13_after_59 r13_after_65) (and (and (= r13_after_59 r13_after_65) (=> (bvule stack_after_64_split r13_after_65) (= stack_for_65_top stack_after_64_top))) (=> isValidVTableRoot_success_at_254 isValidVTableRoot_success_at_65)))))))))))))))
(define-fun cond_at_252 () Bool (not (not (word32-eq rv_space_ret__unsigned_long_v_after_254 #x00000000))))
(define-fun path_cond_to_248_C () Bool (and (not cond_at_252) path_cond_to_255_C))
(declare-fun pvalid.23 () Bool)
(assert (=> pvalid.23 (and (not (word32-eq ptr #x00000000)) (=> (bvult #x00000000 #x00000030) (bvule ptr (bvsub #x00000000 #x00000030))))))
(assert pvalid.23)
(declare-fun pvalid.24 () Bool)
(assert (=> pvalid.24 (and (not (word32-eq ptr.1 #x00000000)) (=> (bvult #x00000000 #x00000008) (bvule ptr.1 (bvsub #x00000000 #x00000008))))))
(assert (=> (and pvalid.24 pvalid.23) (or false (or false (or (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.1))))))
(assert (and (=> (and false pvalid.23) pvalid.24) (=> (and false pvalid.24) pvalid.23)))
(assert pvalid.24)
(declare-fun pvalid.25 () Bool)
(assert (=> pvalid.25 (and (not (word32-eq ptr.2 #x00000000)) (=> (bvult #x00000000 #x000000e8) (bvule ptr.2 (bvsub #x00000000 #x000000e8))))))
(assert (=> (and pvalid.25 pvalid.23) (or false (or false (or (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.2))))))
(assert (and (=> (and false pvalid.23) pvalid.25) (=> (and false pvalid.25) pvalid.23)))
(assert (=> (and pvalid.25 pvalid.24) (or false (or false (or (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.2))))))
(assert (and (=> (and false pvalid.24) pvalid.25) (=> (and false pvalid.25) pvalid.24)))
(assert pvalid.25)
(declare-fun pvalid.26 () Bool)
(assert (=> pvalid.26 (and (word32-eq (bvand ptr.4 #x00000003) #x00000000) (and (not (word32-eq ptr.4 #x00000000)) (=> (bvult #x00000000 #x00000004) (bvule ptr.4 (bvsub #x00000000 #x00000004)))))))
(assert (=> (and pvalid.26 pvalid.23) (or false (or false (or (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.4))))))
(assert (and (=> (and false pvalid.23) pvalid.26) (=> (and false pvalid.26) pvalid.23)))
(assert (=> (and pvalid.26 pvalid.24) (or false (or false (or (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.4))))))
(assert (and (=> (and false pvalid.24) pvalid.26) (=> (and false pvalid.26) pvalid.24)))
(assert (=> (and pvalid.26 pvalid.25) (or false (or false (or (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.4))))))
(assert (and (=> (and false pvalid.25) pvalid.26) (=> (and false pvalid.26) pvalid.25)))
(define-fun cond_at_248 () Bool pvalid.26)
(define-fun path_cond_to_251_C () Bool (and cond_at_252 path_cond_to_255_C))
(define-fun ptr.18 () (_ BitVec 32) #xe001c60c)
(declare-fun pvalid.27 () Bool)
(assert (=> pvalid.27 (and (word32-eq (bvand ptr.18 #x00000003) #x00000000) (and (not (word32-eq ptr.18 #x00000000)) (=> (bvult #x00000000 #x0000001c) (bvule ptr.18 (bvsub #x00000000 #x0000001c)))))))
(assert (=> (and pvalid.27 pvalid.23) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.23) pvalid.27) (=> (and false pvalid.27) pvalid.23)))
(assert (=> (and pvalid.27 pvalid.26) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.26) pvalid.27) (=> (and false pvalid.27) pvalid.26)))
(assert (=> (and pvalid.27 pvalid.24) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.24) pvalid.27) (=> (and false pvalid.27) pvalid.24)))
(assert (=> (and pvalid.27 pvalid.25) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.25) pvalid.27) (=> (and false pvalid.27) pvalid.25)))
(define-fun cond_at_251 () Bool pvalid.27)
(define-fun path_cond_to_265_C () Bool (and cond_at_266 path_cond_to_351_C))
(declare-fun pvalid.28 () Bool)
(assert (=> pvalid.28 (and (not (word32-eq ptr #x00000000)) (=> (bvult #x00000000 #x00000030) (bvule ptr (bvsub #x00000000 #x00000030))))))
(assert pvalid.28)
(declare-fun pvalid.29 () Bool)
(assert (=> pvalid.29 (and (not (word32-eq ptr.1 #x00000000)) (=> (bvult #x00000000 #x00000008) (bvule ptr.1 (bvsub #x00000000 #x00000008))))))
(assert (=> (and pvalid.29 pvalid.28) (or false (or false (or (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.1))))))
(assert (and (=> (and false pvalid.28) pvalid.29) (=> (and false pvalid.29) pvalid.28)))
(assert pvalid.29)
(declare-fun pvalid.30 () Bool)
(assert (=> pvalid.30 (and (not (word32-eq ptr.2 #x00000000)) (=> (bvult #x00000000 #x000000e8) (bvule ptr.2 (bvsub #x00000000 #x000000e8))))))
(assert (=> (and pvalid.30 pvalid.28) (or false (or false (or (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.2))))))
(assert (and (=> (and false pvalid.28) pvalid.30) (=> (and false pvalid.30) pvalid.28)))
(assert (=> (and pvalid.30 pvalid.29) (or false (or false (or (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.2))))))
(assert (and (=> (and false pvalid.29) pvalid.30) (=> (and false pvalid.30) pvalid.29)))
(assert pvalid.30)
(declare-fun pvalid.31 () Bool)
(assert (=> pvalid.31 (and (word32-eq (bvand ptr.18 #x00000003) #x00000000) (and (not (word32-eq ptr.18 #x00000000)) (=> (bvult #x00000000 #x0000001c) (bvule ptr.18 (bvsub #x00000000 #x0000001c)))))))
(assert (=> (and pvalid.31 pvalid.28) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.28) pvalid.31) (=> (and false pvalid.31) pvalid.28)))
(assert (=> (and pvalid.31 pvalid.29) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.29) pvalid.31) (=> (and false pvalid.31) pvalid.29)))
(assert (=> (and pvalid.31 pvalid.30) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.30) pvalid.31) (=> (and false pvalid.31) pvalid.30)))
(define-fun cond_at_265 () Bool pvalid.31)
(define-fun path_cond_to_279_C () Bool (and cond_at_280 path_cond_to_280_C))
(declare-fun pvalid.32 () Bool)
(assert (=> pvalid.32 (and (word32-eq (bvand ptr.18 #x00000003) #x00000000) (and (not (word32-eq ptr.18 #x00000000)) (=> (bvult #x00000000 #x0000001c) (bvule ptr.18 (bvsub #x00000000 #x0000001c)))))))
(assert (=> (and pvalid.32 pvalid.11) (or false (or (or (word32-eq (bvsub (bvsub (bvsub ptr.9 ptr.18) #x00000000) #x00000010) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.9 ptr.18) #x00000000) #x00000018) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.9 ptr.18) #x00000000) #x00000000) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.9 ptr.18) #x00000000) #x00000014) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.9 ptr.18) #x00000000) #x00000008) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.9 ptr.18) #x00000000) #x0000000c) #x00000000) (word32-eq (bvsub (bvsub (bvsub ptr.9 ptr.18) #x00000000) #x00000004) #x00000000))))))) (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.9) (bvult (bvadd ptr.9 (bvsub #x00000004 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.11) pvalid.32) (=> (and (or (word32-eq (bvsub (bvsub (bvsub ptr.9 ptr.18) #x00000000) #x00000010) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.9 ptr.18) #x00000000) #x00000018) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.9 ptr.18) #x00000000) #x00000000) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.9 ptr.18) #x00000000) #x00000014) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.9 ptr.18) #x00000000) #x00000008) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.9 ptr.18) #x00000000) #x0000000c) #x00000000) (word32-eq (bvsub (bvsub (bvsub ptr.9 ptr.18) #x00000000) #x00000004) #x00000000))))))) pvalid.32) pvalid.11)))
(assert (=> (and pvalid.32 pvalid.21) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.16) (bvult (bvadd ptr.16 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000001)) #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.21) pvalid.32) (=> (and false pvalid.32) pvalid.21)))
(assert (=> (and pvalid.32 pvalid.17) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.12) (bvult (bvadd ptr.12 (bvsub #x00000010 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.17) pvalid.32) (=> (and false pvalid.32) pvalid.17)))
(assert (=> (and pvalid.32 pvalid.1) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.1) (bvult (bvadd ptr.1 (bvsub #x00000008 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.1) pvalid.32) (=> (and false pvalid.32) pvalid.1)))
(assert (=> (and pvalid.32 pvalid.7) (or false (or (or (word32-eq (bvsub (bvsub (bvsub ptr.7 ptr.18) #x00000000) #x00000010) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.7 ptr.18) #x00000000) #x00000018) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.7 ptr.18) #x00000000) #x00000000) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.7 ptr.18) #x00000000) #x00000014) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.7 ptr.18) #x00000000) #x00000008) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.7 ptr.18) #x00000000) #x0000000c) #x00000000) (word32-eq (bvsub (bvsub (bvsub ptr.7 ptr.18) #x00000000) #x00000004) #x00000000))))))) (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.7) (bvult (bvadd ptr.7 (bvsub #x00000004 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.7) pvalid.32) (=> (and (or (word32-eq (bvsub (bvsub (bvsub ptr.7 ptr.18) #x00000000) #x00000010) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.7 ptr.18) #x00000000) #x00000018) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.7 ptr.18) #x00000000) #x00000000) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.7 ptr.18) #x00000000) #x00000014) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.7 ptr.18) #x00000000) #x00000008) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.7 ptr.18) #x00000000) #x0000000c) #x00000000) (word32-eq (bvsub (bvsub (bvsub ptr.7 ptr.18) #x00000000) #x00000004) #x00000000))))))) pvalid.32) pvalid.7)))
(assert (=> (and pvalid.32 pvalid.22) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.17) (bvult (bvadd ptr.17 (bvsub (bvmul #x00000010 #x00000001) #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.22) pvalid.32) (=> (and false pvalid.32) pvalid.22)))
(assert (=> (and pvalid.32 pvalid.14) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v_after_311 #x00000001)) #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.14) pvalid.32) (=> (and false pvalid.32) pvalid.14)))
(assert (=> (and pvalid.32 pvalid.5) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.5) (bvult (bvadd ptr.5 (bvsub #x00000098 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.5) pvalid.32) (=> (and false pvalid.32) pvalid.5)))
(assert (=> (and pvalid.32 pvalid.19) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.14) (bvult (bvadd ptr.14 (bvsub (bvmul #x00000010 (bvsub #x00000000 #x00000000)) #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.19) pvalid.32) (=> (and false pvalid.32) pvalid.19)))
(assert (=> (and pvalid.32 pvalid.12) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.1_after_313 #x00000001) #x00000001)) #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.12) pvalid.32) (=> (and false pvalid.32) pvalid.12)))
(assert (=> (and pvalid.32 pvalid.15) (or false (or (or (word32-eq (bvsub (bvsub (bvsub ptr.11 ptr.18) #x00000000) #x00000010) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.11 ptr.18) #x00000000) #x00000018) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.11 ptr.18) #x00000000) #x00000000) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.11 ptr.18) #x00000000) #x00000014) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.11 ptr.18) #x00000000) #x00000008) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.11 ptr.18) #x00000000) #x0000000c) #x00000000) (word32-eq (bvsub (bvsub (bvsub ptr.11 ptr.18) #x00000000) #x00000004) #x00000000))))))) (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.11) (bvult (bvadd ptr.11 (bvsub #x00000004 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.15) pvalid.32) (=> (and (or (word32-eq (bvsub (bvsub (bvsub ptr.11 ptr.18) #x00000000) #x00000010) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.11 ptr.18) #x00000000) #x00000018) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.11 ptr.18) #x00000000) #x00000000) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.11 ptr.18) #x00000000) #x00000014) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.11 ptr.18) #x00000000) #x00000008) #x00000000) (or (word32-eq (bvsub (bvsub (bvsub ptr.11 ptr.18) #x00000000) #x0000000c) #x00000000) (word32-eq (bvsub (bvsub (bvsub ptr.11 ptr.18) #x00000000) #x00000004) #x00000000))))))) pvalid.32) pvalid.15)))
(assert (=> (and pvalid.32 pvalid.10) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.1_after_313 #x00000001)) #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.10) pvalid.32) (=> (and false pvalid.32) pvalid.10)))
(assert (=> (and pvalid.32 pvalid.13) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.10) (bvult (bvadd ptr.10 (bvsub #x00000098 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.13) pvalid.32) (=> (and false pvalid.32) pvalid.13)))
(assert (=> (and pvalid.32 pvalid.6) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd i___unsigned_long_v.2_after_315 #x00000001)) #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.6) pvalid.32) (=> (and false pvalid.32) pvalid.6)))
(assert (=> (and pvalid.32 pvalid.3) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.3) (bvult (bvadd ptr.3 (bvsub #x0000000c #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.3) pvalid.32) (=> (and false pvalid.32) pvalid.3)))
(assert (=> (and pvalid.32 pvalid) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr) (bvult (bvadd ptr (bvsub #x00000030 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid) pvalid.32) (=> (and false pvalid.32) pvalid)))
(assert (=> (and pvalid.32 pvalid.16) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v_after_311 #x00000001) #x00000001)) #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.16) pvalid.32) (=> (and false pvalid.32) pvalid.16)))
(assert (=> (and pvalid.32 pvalid.20) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.15) (bvult (bvadd ptr.15 (bvsub (bvmul #x00000010 #x00000000) #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.20) pvalid.32) (=> (and false pvalid.32) pvalid.20)))
(assert (=> (and pvalid.32 pvalid.4) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.4) (bvult (bvadd ptr.4 (bvsub #x00000004 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.4) pvalid.32) (=> (and false pvalid.32) pvalid.4)))
(assert (=> (and pvalid.32 pvalid.9) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.8) (bvult (bvadd ptr.8 (bvsub #x00000098 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.9) pvalid.32) (=> (and false pvalid.32) pvalid.9)))
(assert (=> (and pvalid.32 pvalid.2) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.2) (bvult (bvadd ptr.2 (bvsub #x000000e8 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.2) pvalid.32) (=> (and false pvalid.32) pvalid.2)))
(assert (=> (and pvalid.32 pvalid.18) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.13) (bvult (bvadd ptr.13 (bvsub #x00000010 #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.18) pvalid.32) (=> (and false pvalid.32) pvalid.18)))
(assert (=> (and pvalid.32 pvalid.8) (or false (or false (or (bvult (bvadd ptr.18 (bvsub #x0000001c #x00000001)) ptr.6) (bvult (bvadd ptr.6 (bvsub (bvmul #x00000004 (bvadd (bvadd i___unsigned_long_v.2_after_315 #x00000001) #x00000001)) #x00000001)) ptr.18))))))
(assert (and (=> (and false pvalid.8) pvalid.32) (=> (and false pvalid.32) pvalid.8)))
(define-fun cond_at_279 () Bool pvalid.32)
(define-fun path_cond_to_318_C () Bool (and cond_at_319 path_cond_to_319_C))
(define-fun cond_at_318 () Bool pvalid.32)
(define-fun path_cond_to_247_C () Bool (and cond_at_248 path_cond_to_248_C))
(declare-fun setThreadState_success_at_247 () Bool)
(define-fun query_load-word32Mem_after () (_ BitVec 32) (load-word32 Mem_after_259 #xe001c600))
(declare-fun Mem_after_247 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun GhostAssertions_after_247 () (Array (_ BitVec 50) (_ BitVec 32)))
(define-fun query_mem-eqmem_after_65Me () Bool (mem-eq mem_after_65 Mem_after_259))
(define-fun query_implies-rodataMem_af.1 () Bool (implies-rodata Mem_after_259))
(define-fun query_mem-eqmem_after_70Me () Bool (mem-eq mem_after_70 Mem_after_247))
(define-fun query_rodataMem_after_247 () Bool (rodata Mem_after_247))
(define-fun query_=stack_for_70_topsta () Bool (= stack_for_70_top stack_for_65_top))
(assert (=> (and (word32-eq r0_after_69 (load-word32 Mem_after_259 #xe001c600)) (and (word32-eq r1_after_209 #x00000002) (and (mem-eq mem_after_65 Mem_after_259) (and (implies-rodata Mem_after_259) (and (word32-eq (bvand r13_after_65 #x00000003) #x00000000) (and (word32-eq #xe0018504 #xe0018504) (and (word32-eq (bvand #xe0018504 #x00000003) #x00000000) (and (word32-eq r0_after_69 r0_after_69) (and (bvule #x00000034 r13_after_65) path_cond_to_247_C))))))))) (and (mem-eq mem_after_70 Mem_after_247) (and (rodata Mem_after_247) (and (word32-eq r4_after_65 r4_after_70) (and (word32-eq r5_after_65 r5_after_70) (and (word32-eq r6_after_65 r6_after_70) (and (word32-eq r7_after_65 r7_after_70) (and (word32-eq r8_after_65 r8_after_70) (and (word32-eq r9_after_65 r9_after_70) (and (word32-eq r10_after_65 r10_after_70) (and (word32-eq r11_after_65 r11_after_70) (and (word32-eq r13_after_65 r13_after_70) (and (and (= r13_after_65 r13_after_70) (=> (bvule r13_after_65 r13_after_70) (= stack_for_70_top stack_for_65_top))) (=> setThreadState_success_at_247 setThreadState_success_at_70)))))))))))))))
(define-fun cond_at_348 () Bool (and (and (and (bvsle #x00000000 #x00000000) (bvslt #x00000000 #x00000020)) (bvslt #x00000000 #x00000002)) (bvsle #x00000000 #x00000000)))
(define-fun path_cond_to_347_C () Bool (and cond_at_348 path_cond_to_247_C))
(define-fun ret___unsigned_v_after_347 () (_ BitVec 32) (bvshl (bvand cap___struct_cap_C_v.words_C.0_init #xfffffff0) #x00000000))
(define-fun ret__int_v.1_after_346 () (_ BitVec 32) (ite (not (word32-eq #x00000000 #x00000000)) #x00000001 #x00000000))
(define-fun cond_at_345 () Bool (not (word32-eq ret__int_v.1_after_346 #x00000000)))
(define-fun path_cond_to_344_C () Bool (and cond_at_345 path_cond_to_347_C))
(define-fun cond_at_344 () Bool (and (bvsle #x00000000 #x0000001f) (bvslt #x0000001f #x00000020)))
(define-fun path_cond_to_343_C () Bool (and cond_at_344 path_cond_to_344_C))
(define-fun ret__int_v.1_after_343 () (_ BitVec 32) (ite (not (word32-eq (bvand ret___unsigned_v_after_347 (bvshl #x00000001 #x0000001f)) #x00000000)) #x00000001 #x00000000))
(define-fun path_cond_to_455_C () Bool (and (not cond_at_345) path_cond_to_347_C))
(define-fun path_cond_to_342_C () Bool (or path_cond_to_343_C path_cond_to_455_C))
(define-fun cond_at_342 () Bool (not (not (not (word32-eq (ite path_cond_to_455_C ret__int_v.1_after_346 ret__int_v.1_after_343) #x00000000)))))
(define-fun path_cond_to_341_C () Bool (and cond_at_342 path_cond_to_342_C))
(define-fun ret___unsigned_v_after_341 () (_ BitVec 32) (bvor ret___unsigned_v_after_347 #x00000000))
(define-fun path_cond_to_453_C () Bool (and (not cond_at_342) path_cond_to_342_C))
(define-fun path_cond_to_340_C () Bool (or path_cond_to_453_C path_cond_to_341_C))
(define-fun cond_at_336 () Bool (and (and (and (bvslt #x00000000 #x00000002) (bvsle #x00000000 #x00000000)) (bvsle #x00000000 #x00000000)) (bvslt #x00000000 #x00000020)))
(define-fun path_cond_to_335_C () Bool (and cond_at_336 path_cond_to_340_C))
(define-fun cap___struct_cap_C_v.words_C.0.1_after_335 () (_ BitVec 32) (bvor #x00000000 (bvshl (bvand #x00000000 #x0000000f) #x00000000)))
(define-fun cond_at_334 () Bool (and (bvslt #x00000001 #x00000002) (bvsle #x00000000 #x00000001)))
(define-fun path_cond_to_Err_C () Bool (or (or (or (or (or (and (not cond_at_293) path_cond_to_373_C) (and (not cond_at_304) path_cond_to_304_C)) (or (and (not cond_at_285) path_cond_to_361_C) (or (and (not cond_at_297) path_cond_to_297_C) (and (not cond_at_377) path_cond_to_377_C)))) (or (or (and (not cond_at_325) path_cond_to_325_C) (or (and (not cond_at_401) path_cond_to_401_C) (and (not cond_at_424) path_cond_to_400_C))) (or (and (not cond_at_334) path_cond_to_335_C) (or (and (not cond_at_348) path_cond_to_247_C) (and (not cond_at_298) path_cond_to_298_C))))) (or (or (or (and (not cond_at_321) path_cond_to_321_C) (or (and (not cond_at_299) path_cond_to_300_C) (and (not cond_at_326) path_cond_to_326_C))) (or (and (not cond_at_381) path_cond_to_296_C) (or (and (not cond_at_402) path_cond_to_402_C) (and (not cond_at_308) path_cond_to_308_C)))) (or (or (and (not cond_at_309) path_cond_to_384_C) (or (and (not cond_at_302) path_cond_to_303_C) (and (not cond_at_301) path_cond_to_301_C))) (or (and (not cond_at_412) path_cond_to_412_C) (or (and (not cond_at_344) path_cond_to_344_C) (and (not cond_at_248) path_cond_to_248_C)))))) (or (or (or (or (and (not cond_at_357) path_cond_to_269_C) (and (not cond_at_419) path_cond_to_389_C)) (or (and (not cond_at_408) path_cond_to_408_C) (or (and (not cond_at_390) path_cond_to_390_C) (and (not cond_at_353) path_cond_to_353_C)))) (or (or (and (not cond_at_251) path_cond_to_251_C) (or (and (not cond_at_391) path_cond_to_391_C) (and (not cond_at_265) path_cond_to_265_C))) (or (and (not cond_at_305) path_cond_to_305_C) (or (and (not cond_at_322) path_cond_to_322_C) (and (not cond_at_306) path_cond_to_307_C))))) (or (or (or (and (not cond_at_282) path_cond_to_284_C) (or (and (not cond_at_397) path_cond_to_397_C) (and (not cond_at_355) path_cond_to_355_C))) (or (and (not cond_at_369) path_cond_to_287_C) (or (and (not cond_at_318) path_cond_to_318_C) (and (not cond_at_279) path_cond_to_279_C)))) (or (or (and (not cond_at_413) path_cond_to_413_C) (or (and (not cond_at_336) path_cond_to_340_C) (and (not cond_at_386) path_cond_to_386_C))) (or (and (not cond_at_429) path_cond_to_411_C) (or (and (not cond_at_365) path_cond_to_365_C) (and (not cond_at_290) path_cond_to_292_C))))))))
(define-fun path_cond_to_6_ASM () Bool (and cond_at_101 path_cond_to_100_ASM))
(define-fun query_bvaddr13_after_100_x.1 () (_ BitVec 32) (bvadd r13_after_100 #x0000001c))
(define-fun query_load-word32itepath_c.11 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x0000001c)))
(define-fun query_load-word32itepath_c.12 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x0000001c)))
(define-fun r11_after_6 () (_ BitVec 32) (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) (bvadd r13_after_100 #x0000001c)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x0000001c)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x0000001c))))
(define-fun query_bvaddr13_after_100_x.2 () (_ BitVec 32) (bvadd r13_after_100 #x00000018))
(define-fun query_load-word32itepath_c.13 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x00000018)))
(define-fun query_load-word32itepath_c.14 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x00000018)))
(define-fun r10_after_6 () (_ BitVec 32) (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) (bvadd r13_after_100 #x00000018)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x00000018)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x00000018))))
(define-fun query_bvaddr13_after_100_x.3 () (_ BitVec 32) (bvadd r13_after_100 #x00000014))
(define-fun query_load-word32itepath_c.15 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x00000014)))
(define-fun query_load-word32itepath_c.16 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x00000014)))
(define-fun r9_after_6 () (_ BitVec 32) (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) (bvadd r13_after_100 #x00000014)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x00000014)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x00000014))))
(define-fun query_bvaddr13_after_100_x.4 () (_ BitVec 32) (bvadd r13_after_100 #x00000010))
(define-fun query_load-word32itepath_c.17 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x00000010)))
(define-fun query_load-word32itepath_c.18 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x00000010)))
(define-fun r8_after_6 () (_ BitVec 32) (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) (bvadd r13_after_100 #x00000010)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x00000010)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x00000010))))
(define-fun query_bvaddr13_after_100_x.5 () (_ BitVec 32) (bvadd r13_after_100 #x0000000c))
(define-fun query_load-word32itepath_c.19 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x0000000c)))
(define-fun query_load-word32itepath_c.20 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x0000000c)))
(define-fun r7_after_6 () (_ BitVec 32) (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) (bvadd r13_after_100 #x0000000c)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x0000000c)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x0000000c))))
(define-fun query_bvaddr13_after_100_x.6 () (_ BitVec 32) (bvadd r13_after_100 #x00000008))
(define-fun query_load-word32itepath_c.21 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x00000008)))
(define-fun query_load-word32itepath_c.22 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x00000008)))
(define-fun r6_after_6 () (_ BitVec 32) (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) (bvadd r13_after_100 #x00000008)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x00000008)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x00000008))))
(define-fun query_bvaddr13_after_100_x.7 () (_ BitVec 32) (bvadd r13_after_100 #x00000004))
(define-fun query_load-word32itepath_c.23 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x00000004)))
(define-fun query_load-word32itepath_c.24 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x00000004)))
(define-fun r5_after_6 () (_ BitVec 32) (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) (bvadd r13_after_100 #x00000004)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) (bvadd r13_after_100 #x00000004)) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) (bvadd r13_after_100 #x00000004))))
(define-fun query_r13_after_100 () (_ BitVec 32) r13_after_100)
(define-fun query_load-word32itepath_c.25 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) r13_after_100))
(define-fun query_load-word32itepath_c.26 () (_ BitVec 32) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) r13_after_100))
(define-fun r4_after_6 () (_ BitVec 32) (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) r13_after_100) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))) r13_after_100) (load-word32 (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))) r13_after_100)))
(define-fun r13_after_6 () (_ BitVec 32) (bvadd r13_after_100 #x00000024))
(define-fun path_cond_to_333_C () Bool (and cond_at_334 path_cond_to_335_C))
(define-fun cap___struct_cap_C_v.words_C.1.1_after_333 () (_ BitVec 32) #x00000000)
(declare-fun fun_success_at_242 () Bool)
(declare-fun rv_space_ret__unsigned_long_v_after_242 () (_ BitVec 32))
(declare-fun Mem_after_242 () (Array (_ BitVec 30) (_ BitVec 32)))
(declare-fun GhostAssertions_after_242 () (Array (_ BitVec 50) (_ BitVec 32)))
(define-fun query_bvaddr13_after_70_x0.11 () (_ BitVec 32) (bvadd r13_after_70 #x00000000))
(define-fun query_load-word32stack_aft.65 () (_ BitVec 32) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000000)))
(define-fun query_load-word32stack_aft.66 () (_ BitVec 32) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000000)))
(define-fun query_load-word32stack_aft.67 () (_ BitVec 32) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000004)))
(define-fun query_load-word32stack_aft.68 () (_ BitVec 32) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000004)))
(define-fun query_load-word32stack_aft.69 () (_ BitVec 32) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000008)))
(define-fun query_load-word32stack_aft.70 () (_ BitVec 32) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000008)))
(define-fun query_load-word32stack_aft.71 () (_ BitVec 32) (load-word32 stack_after_85_top (bvadd r13_after_70 #x0000000c)))
(define-fun query_load-word32stack_aft.72 () (_ BitVec 32) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x0000000c)))
(define-fun query_bvaddr13_after_70_x0.12 () (_ BitVec 32) (bvadd r13_after_70 #x00000010))
(define-fun query_load-word32stack_aft.73 () (_ BitVec 32) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000010)))
(define-fun query_load-word32stack_aft.74 () (_ BitVec 32) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000010)))
(define-fun query_bvaddr13_after_70_x0.13 () (_ BitVec 32) (bvadd r13_after_70 #x00000014))
(define-fun query_load-word32stack_aft.75 () (_ BitVec 32) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000014)))
(define-fun query_load-word32stack_aft.76 () (_ BitVec 32) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000014)))
(define-fun query_load-word32stack_aft.77 () (_ BitVec 32) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000018)))
(define-fun query_load-word32stack_aft.78 () (_ BitVec 32) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000018)))
(define-fun query_load-word32stack_aft.79 () (_ BitVec 32) (load-word32 stack_after_85_top (bvadd r13_after_70 #x0000001c)))
(define-fun query_load-word32stack_aft.80 () (_ BitVec 32) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x0000001c)))
(define-fun query_bvaddr13_after_70_x0.14 () (_ BitVec 32) (bvadd r13_after_70 #x00000020))
(define-fun query_load-word32stack_aft.81 () (_ BitVec 32) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000020)))
(define-fun query_load-word32stack_aft.82 () (_ BitVec 32) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000020)))
(define-fun query_bvaddr13_after_70_x0.15 () (_ BitVec 32) (bvadd r13_after_70 #x00000024))
(define-fun query_load-word32stack_aft.83 () (_ BitVec 32) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000024)))
(define-fun query_load-word32stack_aft.84 () (_ BitVec 32) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000024)))
(define-fun query_load-word32stack_aft.85 () (_ BitVec 32) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000028)))
(define-fun query_load-word32stack_aft.86 () (_ BitVec 32) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000028)))
(define-fun query_load-word32stack_aft.87 () (_ BitVec 32) (load-word32 stack_after_85_top (bvadd r13_after_70 #x0000002c)))
(define-fun query_load-word32stack_aft.88 () (_ BitVec 32) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x0000002c)))
(define-fun query_implies-rodataMem_af.2 () Bool (implies-rodata Mem_after_247))
(define-fun query_mem-eqmem_after_87Me () Bool (mem-eq mem_after_87 Mem_after_242))
(define-fun query_rodataMem_after_242 () Bool (rodata Mem_after_242))
(define-fun split_mem_top.21 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000024)) (store-word32 stack_after_85_top (bvadd r13_after_70 #x00000024) #x00000000) stack_after_85_top))
(define-fun query_load-word32split_mem.42 () (_ BitVec 32) (load-word32 split_mem_top.21 (bvadd r13_after_70 #x00000018)))
(define-fun split_mem_bot.21 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000024)) stack_after_85_bot (store-word32 stack_after_85_bot (bvadd r13_after_70 #x00000024) #x00000000)))
(define-fun query_load-word32split_mem.43 () (_ BitVec 32) (load-word32 split_mem_bot.21 (bvadd r13_after_70 #x00000018)))
(define-fun split_mem_top.22 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000018)) (store-word32 split_mem_top.21 (bvadd r13_after_70 #x00000018) #x00000000) split_mem_top.21))
(define-fun query_load-word32split_mem.44 () (_ BitVec 32) (load-word32 split_mem_top.22 (bvadd r13_after_70 #x00000008)))
(define-fun split_mem_bot.22 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000018)) split_mem_bot.21 (store-word32 split_mem_bot.21 (bvadd r13_after_70 #x00000018) #x00000000)))
(define-fun query_load-word32split_mem.45 () (_ BitVec 32) (load-word32 split_mem_bot.22 (bvadd r13_after_70 #x00000008)))
(define-fun split_mem_top.23 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000008)) (store-word32 split_mem_top.22 (bvadd r13_after_70 #x00000008) #x00000000) split_mem_top.22))
(define-fun query_load-word32split_mem.46 () (_ BitVec 32) (load-word32 split_mem_top.23 (bvadd r13_after_70 #x0000000c)))
(define-fun split_mem_bot.23 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000008)) split_mem_bot.22 (store-word32 split_mem_bot.22 (bvadd r13_after_70 #x00000008) #x00000000)))
(define-fun query_load-word32split_mem.47 () (_ BitVec 32) (load-word32 split_mem_bot.23 (bvadd r13_after_70 #x0000000c)))
(define-fun split_mem_top.24 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x0000000c)) (store-word32 split_mem_top.23 (bvadd r13_after_70 #x0000000c) #x00000000) split_mem_top.23))
(define-fun query_load-word32split_mem.48 () (_ BitVec 32) (load-word32 split_mem_top.24 (bvadd r13_after_70 #x0000001c)))
(define-fun split_mem_bot.24 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x0000000c)) split_mem_bot.23 (store-word32 split_mem_bot.23 (bvadd r13_after_70 #x0000000c) #x00000000)))
(define-fun query_load-word32split_mem.49 () (_ BitVec 32) (load-word32 split_mem_bot.24 (bvadd r13_after_70 #x0000001c)))
(define-fun split_mem_top.25 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x0000001c)) (store-word32 split_mem_top.24 (bvadd r13_after_70 #x0000001c) #x00000000) split_mem_top.24))
(define-fun query_load-word32split_mem.50 () (_ BitVec 32) (load-word32 split_mem_top.25 (bvadd r13_after_70 #x00000014)))
(define-fun split_mem_bot.25 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x0000001c)) split_mem_bot.24 (store-word32 split_mem_bot.24 (bvadd r13_after_70 #x0000001c) #x00000000)))
(define-fun query_load-word32split_mem.51 () (_ BitVec 32) (load-word32 split_mem_bot.25 (bvadd r13_after_70 #x00000014)))
(define-fun split_mem_top.26 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000014)) (store-word32 split_mem_top.25 (bvadd r13_after_70 #x00000014) #x00000000) split_mem_top.25))
(define-fun query_load-word32split_mem.52 () (_ BitVec 32) (load-word32 split_mem_top.26 (bvadd r13_after_70 #x0000002c)))
(define-fun split_mem_bot.26 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000014)) split_mem_bot.25 (store-word32 split_mem_bot.25 (bvadd r13_after_70 #x00000014) #x00000000)))
(define-fun query_load-word32split_mem.53 () (_ BitVec 32) (load-word32 split_mem_bot.26 (bvadd r13_after_70 #x0000002c)))
(define-fun split_mem_top.27 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x0000002c)) (store-word32 split_mem_top.26 (bvadd r13_after_70 #x0000002c) #x00000000) split_mem_top.26))
(define-fun query_load-word32split_mem.54 () (_ BitVec 32) (load-word32 split_mem_top.27 (bvadd r13_after_70 #x00000028)))
(define-fun split_mem_bot.27 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x0000002c)) split_mem_bot.26 (store-word32 split_mem_bot.26 (bvadd r13_after_70 #x0000002c) #x00000000)))
(define-fun query_load-word32split_mem.55 () (_ BitVec 32) (load-word32 split_mem_bot.27 (bvadd r13_after_70 #x00000028)))
(define-fun split_mem_top.28 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000028)) (store-word32 split_mem_top.27 (bvadd r13_after_70 #x00000028) #x00000000) split_mem_top.27))
(define-fun query_load-word32split_mem.56 () (_ BitVec 32) (load-word32 split_mem_top.28 (bvadd r13_after_70 #x00000010)))
(define-fun split_mem_bot.28 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000028)) split_mem_bot.27 (store-word32 split_mem_bot.27 (bvadd r13_after_70 #x00000028) #x00000000)))
(define-fun query_load-word32split_mem.57 () (_ BitVec 32) (load-word32 split_mem_bot.28 (bvadd r13_after_70 #x00000010)))
(define-fun split_mem_top.29 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000010)) (store-word32 split_mem_top.28 (bvadd r13_after_70 #x00000010) #x00000000) split_mem_top.28))
(define-fun query_load-word32split_mem.58 () (_ BitVec 32) (load-word32 split_mem_top.29 (bvadd r13_after_70 #x00000000)))
(define-fun split_mem_bot.29 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000010)) split_mem_bot.28 (store-word32 split_mem_bot.28 (bvadd r13_after_70 #x00000010) #x00000000)))
(define-fun query_load-word32split_mem.59 () (_ BitVec 32) (load-word32 split_mem_bot.29 (bvadd r13_after_70 #x00000000)))
(define-fun split_mem_top.30 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000000)) (store-word32 split_mem_top.29 (bvadd r13_after_70 #x00000000) #x00000000) split_mem_top.29))
(define-fun query_load-word32split_mem.60 () (_ BitVec 32) (load-word32 split_mem_top.30 (bvadd r13_after_70 #x00000020)))
(define-fun split_mem_bot.30 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000000)) split_mem_bot.29 (store-word32 split_mem_bot.29 (bvadd r13_after_70 #x00000000) #x00000000)))
(define-fun query_load-word32split_mem.61 () (_ BitVec 32) (load-word32 split_mem_bot.30 (bvadd r13_after_70 #x00000020)))
(define-fun split_mem_top.31 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000020)) (store-word32 split_mem_top.30 (bvadd r13_after_70 #x00000020) #x00000000) split_mem_top.30))
(define-fun query_load-word32split_mem.62 () (_ BitVec 32) (load-word32 split_mem_top.31 (bvadd r13_after_70 #x00000004)))
(define-fun split_mem_bot.31 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000020)) split_mem_bot.30 (store-word32 split_mem_bot.30 (bvadd r13_after_70 #x00000020) #x00000000)))
(define-fun query_load-word32split_mem.63 () (_ BitVec 32) (load-word32 split_mem_bot.31 (bvadd r13_after_70 #x00000004)))
(define-fun query_load-word32stack_for.42 () (_ BitVec 32) (load-word32 stack_for_87_top (bvadd r13_after_70 #x00000024)))
(define-fun query_load-word32stack_for.43 () (_ BitVec 32) (load-word32 stack_for_87_bot (bvadd r13_after_70 #x00000024)))
(define-fun split_mem_top.32 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000024)) (store-word32 stack_for_87_top (bvadd r13_after_70 #x00000024) #x00000000) stack_for_87_top))
(define-fun query_load-word32split_mem.64 () (_ BitVec 32) (load-word32 split_mem_top.32 (bvadd r13_after_70 #x00000018)))
(define-fun split_mem_bot.32 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000024)) stack_for_87_bot (store-word32 stack_for_87_bot (bvadd r13_after_70 #x00000024) #x00000000)))
(define-fun query_load-word32split_mem.65 () (_ BitVec 32) (load-word32 split_mem_bot.32 (bvadd r13_after_70 #x00000018)))
(define-fun split_mem_top.33 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000018)) (store-word32 split_mem_top.32 (bvadd r13_after_70 #x00000018) #x00000000) split_mem_top.32))
(define-fun query_load-word32split_mem.66 () (_ BitVec 32) (load-word32 split_mem_top.33 (bvadd r13_after_70 #x00000008)))
(define-fun split_mem_bot.33 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000018)) split_mem_bot.32 (store-word32 split_mem_bot.32 (bvadd r13_after_70 #x00000018) #x00000000)))
(define-fun query_load-word32split_mem.67 () (_ BitVec 32) (load-word32 split_mem_bot.33 (bvadd r13_after_70 #x00000008)))
(define-fun split_mem_top.34 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000008)) (store-word32 split_mem_top.33 (bvadd r13_after_70 #x00000008) #x00000000) split_mem_top.33))
(define-fun query_load-word32split_mem.68 () (_ BitVec 32) (load-word32 split_mem_top.34 (bvadd r13_after_70 #x0000000c)))
(define-fun split_mem_bot.34 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000008)) split_mem_bot.33 (store-word32 split_mem_bot.33 (bvadd r13_after_70 #x00000008) #x00000000)))
(define-fun query_load-word32split_mem.69 () (_ BitVec 32) (load-word32 split_mem_bot.34 (bvadd r13_after_70 #x0000000c)))
(define-fun split_mem_top.35 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x0000000c)) (store-word32 split_mem_top.34 (bvadd r13_after_70 #x0000000c) #x00000000) split_mem_top.34))
(define-fun query_load-word32split_mem.70 () (_ BitVec 32) (load-word32 split_mem_top.35 (bvadd r13_after_70 #x0000001c)))
(define-fun split_mem_bot.35 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x0000000c)) split_mem_bot.34 (store-word32 split_mem_bot.34 (bvadd r13_after_70 #x0000000c) #x00000000)))
(define-fun query_load-word32split_mem.71 () (_ BitVec 32) (load-word32 split_mem_bot.35 (bvadd r13_after_70 #x0000001c)))
(define-fun split_mem_top.36 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x0000001c)) (store-word32 split_mem_top.35 (bvadd r13_after_70 #x0000001c) #x00000000) split_mem_top.35))
(define-fun query_load-word32split_mem.72 () (_ BitVec 32) (load-word32 split_mem_top.36 (bvadd r13_after_70 #x00000014)))
(define-fun split_mem_bot.36 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x0000001c)) split_mem_bot.35 (store-word32 split_mem_bot.35 (bvadd r13_after_70 #x0000001c) #x00000000)))
(define-fun query_load-word32split_mem.73 () (_ BitVec 32) (load-word32 split_mem_bot.36 (bvadd r13_after_70 #x00000014)))
(define-fun split_mem_top.37 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000014)) (store-word32 split_mem_top.36 (bvadd r13_after_70 #x00000014) #x00000000) split_mem_top.36))
(define-fun query_load-word32split_mem.74 () (_ BitVec 32) (load-word32 split_mem_top.37 (bvadd r13_after_70 #x0000002c)))
(define-fun split_mem_bot.37 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000014)) split_mem_bot.36 (store-word32 split_mem_bot.36 (bvadd r13_after_70 #x00000014) #x00000000)))
(define-fun query_load-word32split_mem.75 () (_ BitVec 32) (load-word32 split_mem_bot.37 (bvadd r13_after_70 #x0000002c)))
(define-fun split_mem_top.38 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x0000002c)) (store-word32 split_mem_top.37 (bvadd r13_after_70 #x0000002c) #x00000000) split_mem_top.37))
(define-fun query_load-word32split_mem.76 () (_ BitVec 32) (load-word32 split_mem_top.38 (bvadd r13_after_70 #x00000028)))
(define-fun split_mem_bot.38 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x0000002c)) split_mem_bot.37 (store-word32 split_mem_bot.37 (bvadd r13_after_70 #x0000002c) #x00000000)))
(define-fun query_load-word32split_mem.77 () (_ BitVec 32) (load-word32 split_mem_bot.38 (bvadd r13_after_70 #x00000028)))
(define-fun split_mem_top.39 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000028)) (store-word32 split_mem_top.38 (bvadd r13_after_70 #x00000028) #x00000000) split_mem_top.38))
(define-fun query_load-word32split_mem.78 () (_ BitVec 32) (load-word32 split_mem_top.39 (bvadd r13_after_70 #x00000010)))
(define-fun split_mem_bot.39 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000028)) split_mem_bot.38 (store-word32 split_mem_bot.38 (bvadd r13_after_70 #x00000028) #x00000000)))
(define-fun query_load-word32split_mem.79 () (_ BitVec 32) (load-word32 split_mem_bot.39 (bvadd r13_after_70 #x00000010)))
(define-fun split_mem_top.40 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000010)) (store-word32 split_mem_top.39 (bvadd r13_after_70 #x00000010) #x00000000) split_mem_top.39))
(define-fun query_load-word32split_mem.80 () (_ BitVec 32) (load-word32 split_mem_top.40 (bvadd r13_after_70 #x00000000)))
(define-fun split_mem_bot.40 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000010)) split_mem_bot.39 (store-word32 split_mem_bot.39 (bvadd r13_after_70 #x00000010) #x00000000)))
(define-fun query_load-word32split_mem.81 () (_ BitVec 32) (load-word32 split_mem_bot.40 (bvadd r13_after_70 #x00000000)))
(define-fun split_mem_top.41 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000000)) (store-word32 split_mem_top.40 (bvadd r13_after_70 #x00000000) #x00000000) split_mem_top.40))
(define-fun query_load-word32split_mem.82 () (_ BitVec 32) (load-word32 split_mem_top.41 (bvadd r13_after_70 #x00000020)))
(define-fun split_mem_bot.41 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000000)) split_mem_bot.40 (store-word32 split_mem_bot.40 (bvadd r13_after_70 #x00000000) #x00000000)))
(define-fun query_load-word32split_mem.83 () (_ BitVec 32) (load-word32 split_mem_bot.41 (bvadd r13_after_70 #x00000020)))
(define-fun split_mem_top.42 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000020)) (store-word32 split_mem_top.41 (bvadd r13_after_70 #x00000020) #x00000000) split_mem_top.41))
(define-fun query_load-word32split_mem.84 () (_ BitVec 32) (load-word32 split_mem_top.42 (bvadd r13_after_70 #x00000004)))
(define-fun split_mem_bot.42 () (Array (_ BitVec 30) (_ BitVec 32)) (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000020)) split_mem_bot.41 (store-word32 split_mem_bot.41 (bvadd r13_after_70 #x00000020) #x00000000)))
(define-fun query_load-word32split_mem.85 () (_ BitVec 32) (load-word32 split_mem_bot.42 (bvadd r13_after_70 #x00000004)))
(define-fun query_=itebvuler13_after_8 () Bool (= (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000004)) (store-word32 split_mem_top.42 (bvadd r13_after_70 #x00000004) #x00000000) split_mem_top.42) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000004)) (store-word32 split_mem_top.31 (bvadd r13_after_70 #x00000004) #x00000000) split_mem_top.31)))
(assert (=> (and (word32-eq r0_after_236 (ite path_cond_to_453_C ret___unsigned_v_after_347 ret___unsigned_v_after_341)) (and (word32-eq r1_after_86 slot___ptr_to_struct_cte_C_v_init) (and (word32-eq r11_after_70 ret__unsigned_long_v.3_v_at_406) (and (word32-eq r3_after_212 #x00000000) (and (word32-eq (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000000)) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000000)) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000000))) #x00000000) (and (word32-eq (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000004)) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000004)) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000004))) rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.0_after_273) (and (word32-eq (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000008)) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000008)) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000008))) rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.1_after_273) (and (word32-eq (ite (bvule stack_after_85_split (bvadd r13_after_70 #x0000000c)) (load-word32 stack_after_85_top (bvadd r13_after_70 #x0000000c)) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x0000000c))) cRootSlot___ptr_to_struct_cte_C_v_after_307) (and (word32-eq (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000010)) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000010)) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000010))) rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.0_after_259) (and (word32-eq (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000014)) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000014)) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000014))) rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.1_after_259) (and (word32-eq (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000018)) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000018)) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000018))) vRootSlot___ptr_to_struct_cte_C_v_after_300) (and (word32-eq (ite (bvule stack_after_85_split (bvadd r13_after_70 #x0000001c)) (load-word32 stack_after_85_top (bvadd r13_after_70 #x0000001c)) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x0000001c))) #x00000000) (and (word32-eq (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000020)) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000020)) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000020))) cap___struct_cap_C_v.words_C.0.1_after_335) (and (word32-eq (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000024)) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000024)) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000024))) cap___struct_cap_C_v.words_C.1.1_after_333) (and (word32-eq (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000028)) (load-word32 stack_after_85_top (bvadd r13_after_70 #x00000028)) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x00000028))) #x00000000) (and (word32-eq (ite (bvule stack_after_85_split (bvadd r13_after_70 #x0000002c)) (load-word32 stack_after_85_top (bvadd r13_after_70 #x0000002c)) (load-word32 stack_after_85_bot (bvadd r13_after_70 #x0000002c))) #x00000004) (and (mem-eq mem_after_70 Mem_after_247) (and (implies-rodata Mem_after_247) (and (word32-eq (bvand r13_after_70 #x00000003) #x00000000) (and (word32-eq #xe001856c #xe001856c) (and (word32-eq (bvand #xe001856c #x00000003) #x00000000) (and (word32-eq r0_after_236 r0_after_236) (and (bvule #x000001a4 r13_after_70) (and (bvule r13_after_70 (bvadd r13_after_70 #x0000002c)) path_cond_to_333_C)))))))))))))))))))))))) (and (word32-eq r0_after_87 rv_space_ret__unsigned_long_v_after_242) (and (mem-eq mem_after_87 Mem_after_242) (and (rodata Mem_after_242) (and (word32-eq r4_after_70 r4_after_87) (and (word32-eq r5_after_70 r5_after_87) (and (word32-eq r6_after_70 r6_after_87) (and (word32-eq r7_after_70 r7_after_87) (and (word32-eq r8_after_70 r8_after_87) (and (word32-eq r9_after_70 r9_after_87) (and (word32-eq r10_after_70 r10_after_87) (and (word32-eq r11_after_70 r11_after_87) (and (word32-eq r13_after_70 r13_after_87) (and (and (= r13_after_70 r13_after_87) (=> (bvule stack_after_85_split r13_after_87) (= (ite (bvule r13_after_87 (bvadd r13_after_70 #x00000004)) (store-word32 split_mem_top.42 (bvadd r13_after_70 #x00000004) #x00000000) split_mem_top.42) (ite (bvule stack_after_85_split (bvadd r13_after_70 #x00000004)) (store-word32 split_mem_top.31 (bvadd r13_after_70 #x00000004) #x00000000) split_mem_top.31)))) (=> fun_success_at_242 fun_success_at_87))))))))))))))))
(define-fun path_cond_to_250_C () Bool (and cond_at_251 path_cond_to_251_C))
(define-fun query_load-word32Mem_after.1 () (_ BitVec 32) (load-word32 Mem_after_259 (bvadd #xe001c60c #x00000018)))
(define-fun query_bvadd_xe001c60c_x000 () (_ BitVec 32) (bvadd #xe001c60c #x00000018))
(define-fun Mem_after_250 () (Array (_ BitVec 30) (_ BitVec 32)) (store-word32 Mem_after_259 (bvadd #xe001c60c #x00000018) #x00000003))
(define-fun ret__unsigned_long_v_after_249 () (_ BitVec 32) #x00000003)
(define-fun path_cond_to_256_C () Bool (and cond_at_257 path_cond_to_259_C))
(define-fun path_cond_to_264_C () Bool (and cond_at_265 path_cond_to_265_C))
(define-fun query_load-word32Mem_after.2 () (_ BitVec 32) (load-word32 Mem_after_273 (bvadd #xe001c60c #x00000018)))
(define-fun Mem_after_264 () (Array (_ BitVec 30) (_ BitVec 32)) (store-word32 Mem_after_273 (bvadd #xe001c60c #x00000018) #x00000003))
(define-fun ret__unsigned_long_v_after_263 () (_ BitVec 32) #x00000003)
(define-fun path_cond_to_270_C () Bool (and cond_at_271 path_cond_to_273_C))
(define-fun path_cond_to_278_C () Bool (and cond_at_279 path_cond_to_279_C))
(define-fun query_load-word32Mem_initb.15 () (_ BitVec 32) (load-word32 Mem_init (bvadd #xe001c60c #x00000018)))
(define-fun Mem_after_278 () (Array (_ BitVec 30) (_ BitVec 32)) (store-word32 Mem_init (bvadd #xe001c60c #x00000018) #x00000003))
(define-fun ret__unsigned_long_v_after_277 () (_ BitVec 32) #x00000003)
(define-fun path_cond_to_317_C () Bool (and cond_at_318 path_cond_to_318_C))
(define-fun Mem_after_317 () (Array (_ BitVec 30) (_ BitVec 32)) (store-word32 Mem_init (bvadd #xe001c60c #x00000018) #x00000007))
(define-fun ret__unsigned_long_v_after_316 () (_ BitVec 32) #x00000003)
(define-fun path_cond_to_239_C () Bool (or (or path_cond_to_333_C (or path_cond_to_317_C path_cond_to_278_C)) (or (or path_cond_to_250_C path_cond_to_264_C) (or path_cond_to_256_C path_cond_to_270_C))))
(define-fun rv_space_ret__unsigned_v_v_at_239 () (_ BitVec 32) (ite (or path_cond_to_270_C path_cond_to_278_C) (ite path_cond_to_281_C ret___unsigned_v.1_v_at_361 ret___unsigned_v.2_v_at_373) (ite path_cond_to_333_C (ite path_cond_to_453_C ret___unsigned_v_after_347 ret___unsigned_v_after_341) (ite path_cond_to_354_C ret__unsigned_v.2_after_354 ret__unsigned_v.2_after_352))))
(define-fun cRootCap___struct_cap_C_v.words_C.1_v_at_239 () (_ BitVec 32) (ite (or path_cond_to_333_C path_cond_to_250_C path_cond_to_256_C path_cond_to_264_C) rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.1_after_273 (ite path_cond_to_270_C cRootCap___struct_cap_C_v.words_C.1_v_at_273 cRootCap___struct_cap_C_v.words_C.1_after_303)))
(define-fun Mem_v_at_239 () (Array (_ BitVec 30) (_ BitVec 32)) (ite path_cond_to_264_C Mem_after_264 (ite path_cond_to_256_C Mem_after_259 (ite path_cond_to_278_C Mem_after_278 (ite path_cond_to_250_C Mem_after_250 (ite path_cond_to_333_C Mem_after_242 (ite path_cond_to_270_C Mem_after_273 Mem_after_317)))))))
(define-fun rv_space_ret__struct_deriveCap_ret_C_v.status_C_v_at_239 () (_ BitVec 32) (ite (or path_cond_to_264_C path_cond_to_270_C) rv_space_ret__struct_deriveCap_ret_C_v.status_C_after_273 rv_space_ret__struct_deriveCap_ret_C_v.status_C_after_259))
(define-fun rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.1_v_at_239 () (_ BitVec 32) (ite (or path_cond_to_264_C path_cond_to_270_C) rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.1_after_273 rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.1_after_259))
(define-fun ret__unsigned_long_v_v_at_239 () (_ BitVec 32) (ite path_cond_to_278_C ret__unsigned_long_v_after_277 (ite path_cond_to_317_C ret__unsigned_long_v_after_316 (ite path_cond_to_333_C rv_space_ret__unsigned_long_v_after_242 (ite path_cond_to_256_C rv_space_ret__struct_deriveCap_ret_C_v.status_C_after_259 (ite path_cond_to_250_C ret__unsigned_long_v_after_249 (ite path_cond_to_270_C rv_space_ret__struct_deriveCap_ret_C_v.status_C_after_273 ret__unsigned_long_v_after_263)))))))
(define-fun cRootCap___struct_cap_C_v.words_C.0_v_at_239 () (_ BitVec 32) (ite path_cond_to_270_C cRootCap___struct_cap_C_v.words_C.0_v_at_273 (ite (or path_cond_to_333_C path_cond_to_250_C path_cond_to_256_C path_cond_to_264_C) rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.0_after_273 cRootCap___struct_cap_C_v.words_C.0_after_303)))
(define-fun dc_ret___struct_deriveCap_ret_C_v.cap_C.words_C.0_v_at_239 () (_ BitVec 32) (ite (or path_cond_to_333_C path_cond_to_250_C path_cond_to_256_C) rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.0_after_259 rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.0_after_273))
(define-fun rv_space_ret__struct_cap_C_v.words_C.1_v_at_239 () (_ BitVec 32) (ite (or path_cond_to_264_C path_cond_to_270_C) rv_space_ret__struct_cap_C_v.words_C.1_after_275 (ite path_cond_to_333_C cap___struct_cap_C_v.words_C.1.1_after_333 rv_space_ret__struct_cap_C_v.words_C.1_v_at_259)))
(define-fun ret__int_v_v_at_239 () (_ BitVec 32) (ite (or path_cond_to_333_C path_cond_to_250_C path_cond_to_256_C path_cond_to_264_C path_cond_to_270_C path_cond_to_278_C) (ite path_cond_to_281_C ret__int_v_after_281 ret__int_v_after_289) ret__int_v_v_at_319))
(define-fun rv_space_ret__unsigned_long_v_v_at_239 () (_ BitVec 32) (ite path_cond_to_333_C rv_space_ret__unsigned_long_v_after_242 (ite path_cond_to_250_C rv_space_ret__unsigned_long_v_after_254 ret__unsigned_long_v_v_at_280)))
(define-fun vRootCap___struct_cap_C_v.words_C.0_v_at_239 () (_ BitVec 32) (ite (or path_cond_to_264_C path_cond_to_270_C path_cond_to_278_C) vRootCap___struct_cap_C_v.words_C.0_after_296 (ite (or path_cond_to_333_C path_cond_to_250_C) rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.0_after_259 vRootCap___struct_cap_C_v.words_C.0_v_at_259)))
(define-fun vRootCap___struct_cap_C_v.words_C.1_v_at_239 () (_ BitVec 32) (ite path_cond_to_256_C vRootCap___struct_cap_C_v.words_C.1_v_at_259 (ite (or path_cond_to_264_C path_cond_to_270_C path_cond_to_278_C) vRootCap___struct_cap_C_v.words_C.1_after_296 rv_space_ret__struct_deriveCap_ret_C_v.cap_C.words_C.1_after_259)))
(define-fun rv_space_ret__struct_cap_C_v.words_C.0_v_at_239 () (_ BitVec 32) (ite path_cond_to_333_C cap___struct_cap_C_v.words_C.0.1_after_335 (ite (or path_cond_to_250_C path_cond_to_256_C) rv_space_ret__struct_cap_C_v.words_C.0_v_at_259 rv_space_ret__struct_cap_C_v.words_C.0_after_275)))
(define-fun GhostAssertions_v_at_239 () (Array (_ BitVec 50) (_ BitVec 32)) (ite (or path_cond_to_250_C path_cond_to_256_C) GhostAssertions_after_259 (ite (or path_cond_to_278_C path_cond_to_317_C) GhostAssertions_init (ite path_cond_to_333_C GhostAssertions_after_242 GhostAssertions_after_273))))
(define-fun query_bvaddr13_init_x00000 () (_ BitVec 32) (bvadd r13_init #x00000000))
(define-fun query_load-word32stack_ini.1 () (_ BitVec 32) (load-word32 stack_init (bvadd r13_init #x00000000)))
(define-fun query_rodataMem_init () Bool (rodata Mem_init))
(define-fun query_mem-eqmem_v_at_100Me () Bool (mem-eq mem_v_at_100 Mem_v_at_239))
(define-fun query_implies-rodataMem_v_ () Bool (implies-rodata Mem_v_at_239))
(declare-fun stack-eq-witness () (_ BitVec 32))
(assert (= (bvand stack-eq-witness #x00000003) #x00000000))
(assert (bvule r13_init stack-eq-witness))
(define-fun query_stack-eq-witness () (_ BitVec 32) stack-eq-witness)
(define-fun query_load-word32store-wor.11 () (_ BitVec 32) (load-word32 (store-word32 stack_init (bvadd r13_init #x00000000) #x00000000) stack-eq-witness))
(define-fun split_mem_top.43 () (Array (_ BitVec 30) (_ BitVec 32)) (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_top (ite path_cond_to_68_ASM stack_for_65_top (ite path_cond_to_41_ASM stack_for_39_top (ite path_cond_to_86_ASM stack_for_87_top (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_top stack_for_23_top) stack_after_44_top)))))))
(define-fun query_load-word32split_mem.86 () (_ BitVec 32) (load-word32 split_mem_top.43 (bvadd r13_init #x00000000)))
(define-fun split_mem_bot.43 () (Array (_ BitVec 30) (_ BitVec 32)) (ite path_cond_to_5_ASM stack_after_2 (ite path_cond_to_61_ASM stack_for_59_bot (ite path_cond_to_68_ASM stack_for_65_bot (ite path_cond_to_41_ASM stack_for_39_bot (ite path_cond_to_86_ASM stack_for_87_bot (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM stack_for_27_bot stack_for_23_bot) stack_after_44_bot)))))))
(define-fun query_load-word32split_mem.87 () (_ BitVec 32) (load-word32 split_mem_bot.43 (bvadd r13_init #x00000000)))
(define-fun query_load-word32itebvulei () (_ BitVec 32) (load-word32 (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) (bvadd r13_init #x00000000)) (store-word32 split_mem_top.43 (bvadd r13_init #x00000000) #x00000000) split_mem_top.43) stack-eq-witness))
(define-fun query_load-word32itebvulei.1 () (_ BitVec 32) (load-word32 (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) (bvadd r13_init #x00000000)) split_mem_bot.43 (store-word32 split_mem_bot.43 (bvadd r13_init #x00000000) #x00000000)) stack-eq-witness))
(define-fun stack-eq () Bool (word32-eq (load-word32 (store-word32 stack_init (bvadd r13_init #x00000000) #x00000000) stack-eq-witness) (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) stack-eq-witness) (load-word32 (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) (bvadd r13_init #x00000000)) (store-word32 split_mem_top.43 (bvadd r13_init #x00000000) #x00000000) split_mem_top.43) stack-eq-witness) (load-word32 (ite (bvule (ite path_cond_to_5_ASM #x00000000 (ite path_cond_to_61_ASM r13_after_59 (ite path_cond_to_68_ASM r13_after_65 (ite path_cond_to_41_ASM r13_after_39 (ite path_cond_to_86_ASM r13_after_87 (ite path_cond_to_26_ASM (ite path_cond_to_28_ASM r13_after_27 r13_after_23) stack_after_44_split)))))) (bvadd r13_init #x00000000)) split_mem_bot.43 (store-word32 split_mem_bot.43 (bvadd r13_init #x00000000) #x00000000)) stack-eq-witness))))
(assert (not (=> (=> path_cond_to_Err_C false) (=> (word32-eq r0_init cap___struct_cap_C_v.words_C.0_init) (=> (word32-eq r1_init cap___struct_cap_C_v.words_C.1_init) (=> (word32-eq r2_init length___unsigned_long_v_init) (=> (word32-eq r3_init slot___ptr_to_struct_cte_C_v_init) (=> (word32-eq (load-word32 stack_init (bvadd r13_init #x00000000)) buffer___ptr_to_unsigned_long_v_init) (=> (mem-eq mem_init Mem_init) (=> (rodata Mem_init) (=> (word32-eq (bvand r13_init #x00000003) #x00000000) (=> (word32-eq ret_init r14_init) (=> (word32-eq (bvand ret_init #x00000003) #x00000000) (=> (word32-eq ret_addr_input_init r0_init) (=> (bvule #x00000234 r13_init) (=> (bvule r13_init (bvadd r13_init #x00000000)) (=> (=> path_cond_to_Err_ASM false) (=> true (word32-eq r0_v_at_100 ret__unsigned_long_v_v_at_239)))))))))))))))))))
(check-sat)
