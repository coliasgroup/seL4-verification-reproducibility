these 2 derivations will be built:
  /nix/store/bix1lfw78iril197fn5bl6k4pssy3vyz-graph-refine-just-stack-bounds.drv
  /nix/store/cyki0hz09a6n43b9r6s8zx316lv2n43p-graph-refine-all.drv
building '/nix/store/bix1lfw78iril197fn5bl6k4pssy3vyz-graph-refine-just-stack-bounds.drv'...
Loading syntax from ./CFunctions.txt
Loaded 835 functions, 75 structs, 0 globals.
Loading syntax from ./ASMFunctions.txt
Missing nodes after calls to idle_thread
  in ['halt']
Missing nodes after calls to restore_user_context
  in ['c_handle_data_fault', 'c_handle_undefined_instruction', 'c_handle_interrupt']
Missing nodes after calls to halt
  in ['handleReply', 'Arch_createObject', 'completeSignal', 'init_freemem', 'unmapPage', 'doFlush', 'maskCapRights', 'decodeInvocation', 'cteDelete', 'Arch_setMRs_fault', 'handleInterrupt', 'Arch_deriveCap', 'invokeCNodeSaveCaller', 'handleSyscall', 'arm_reset_exception', 'createObject', 'Arch_handleFaultReply']
Missing nodes after calls to instruction'isb_sy_E000097C
  in ['fpsimd_HWCapTest']
Missing nodes after calls to instruction'ldr_pc_pc_20_e0010038_arm_vector_table_0x38_E001001C
  in ['arm_vector_table']
Warning: dead arc in c_handle_syscall: 67 -> 3758164096
  (follows Basic node!)
Warning: dead arc in c_handle_syscall: 69 -> 3758164096
  (follows Basic node!)
Warning: dead arc in arm_fiq_exception: 7 -> 3758162208
  (follows Basic node!)
Warning: dead arc in arm_fiq_exception: 9 -> 3758162208
  (follows Basic node!)
Warning: dead arc in c_handle_instruction_fault: 3758162396 -> 3758162400
  (follows Basic node!)
Warning: dead arc in _start: 3758096388 -> 3758096392
  (follows Basic node!)
Loaded 481 functions, 0 structs, 0 globals.
Pseudo-Compiling.
Doing stack/inst logic.
Computing stack bounds.
Doing recursion analysis for function group:
  ['Kernel_C.deletingIRQHandler', 'Kernel_C.finaliseCap', 'Kernel_C.suspend', 'Kernel_C.cancelIPC', 'Kernel_C.cteDeleteOne']
Doing recursion analysis for function group:
  ['Kernel_C.reduceZombie', 'Kernel_C.cteDelete', 'Kernel_C.finaliseSlot']
Computed recursion limits.
Doing stack analysis for 'APFromVMRights'. (1 of 428)
Doing stack analysis for 'Arch_activateIdleThread'. (2 of 428)
Doing stack analysis for 'Arch_configureIdleThread'. (3 of 428)
Doing stack analysis for 'Arch_createObject'. (4 of 428)
Doing stack analysis for 'Arch_decodeIRQControlInvocation'. (5 of 428)
Doing stack analysis for 'Arch_decodeInvocation'. (6 of 428)
Doing stack analysis for 'Arch_decodeTransfer'. (7 of 428)
Doing stack analysis for 'Arch_deriveCap'. (8 of 428)
Doing stack analysis for 'Arch_finaliseCap'. (9 of 428)
Doing stack analysis for 'Arch_getObjectSize'. (10 of 428)
Doing stack analysis for 'Arch_handleFaultReply'. (11 of 428)
Doing stack analysis for 'Arch_isFrameType'. (12 of 428)
Doing stack analysis for 'Arch_maskCapRights'. (13 of 428)
Doing stack analysis for 'Arch_performTransfer'. (14 of 428)
Doing stack analysis for 'Arch_postModifyRegisters'. (15 of 428)
Doing stack analysis for 'Arch_prepareThreadDelete'. (16 of 428)
Doing stack analysis for 'Arch_sameObjectAs'. (17 of 428)
Doing stack analysis for 'Arch_sameRegionAs'. (18 of 428)
Doing stack analysis for 'Arch_setMRs_fault'. (19 of 428)
Doing stack analysis for 'Arch_switchToIdleThread'. (20 of 428)
Doing stack analysis for 'Arch_switchToThread'. (21 of 428)
Doing stack analysis for 'Arch_updateCapData'. (22 of 428)
Doing stack analysis for 'activateThread'. (23 of 428)
Doing stack analysis for 'activate_global_pd'. (24 of 428)
Doing stack analysis for 'alloc_rootserver_obj'. (25 of 428)
Doing stack analysis for 'arch_clean_invalidate_L1_caches'. (26 of 428)
Doing stack analysis for 'arch_clean_invalidate_caches'. (27 of 428)
Doing stack analysis for 'arch_get_n_paging'. (28 of 428)
Doing stack analysis for 'arm_errata'. (29 of 428)
Doing stack analysis for 'armv_init_user_access'. (30 of 428)
Doing stack analysis for 'bi_finalise'. (31 of 428)
Doing stack analysis for 'bindNotification'. (32 of 428)
Doing stack analysis for 'branchFlushRange'. (33 of 428)
Doing stack analysis for 'c_handle_data_fault'. (34 of 428)
Doing stack analysis for 'c_handle_fastpath_call'. (35 of 428)
Doing stack analysis for 'c_handle_fastpath_reply_recv'. (36 of 428)
Doing stack analysis for 'c_handle_instruction_fault'. (37 of 428)
Doing stack analysis for 'c_handle_interrupt'. (38 of 428)
Doing stack analysis for 'c_handle_undefined_instruction'. (39 of 428)
Doing stack analysis for 'calculate_extra_bi_size_bits'. (40 of 428)
Doing stack analysis for 'cancelAllIPC'. (41 of 428)
Doing stack analysis for 'cancelAllSignals'. (42 of 428)
Doing stack analysis for 'cancelBadgedSends'. (43 of 428)
Doing stack analysis for 'cancelIPC'. (44 of 428)
Doing stack analysis for 'cancelSignal'. (45 of 428)
Doing stack analysis for 'capSwapForDelete'. (46 of 428)
Doing stack analysis for 'char_to_long'. (47 of 428)
Doing stack analysis for 'checkValidIPCBuffer'. (48 of 428)
Doing stack analysis for 'chooseThread'. (49 of 428)
Doing stack analysis for 'cleanCacheRange_PoU'. (50 of 428)
Doing stack analysis for 'cleanCacheRange_RAM'. (51 of 428)
Doing stack analysis for 'cleanCaches_PoU'. (52 of 428)
Doing stack analysis for 'cleanInvalidateCacheRange_RAM'. (53 of 428)
Doing stack analysis for 'cleanInvalidateL1Caches'. (54 of 428)
Doing stack analysis for 'cleanInvalidate_D_PoC'. (55 of 428)
Aborting Problem (Function (cleanInvalidate_D_PoC)), complex loop
Doing stack analysis for 'cleanInvalidate_L1D'. (56 of 428)
Aborting Problem (Function (cleanInvalidate_L1D)), complex loop
Doing stack analysis for 'clean_D_PoU'. (57 of 428)
Aborting Problem (Function (clean_D_PoU)), complex loop
Doing stack analysis for 'completeSignal'. (58 of 428)
Doing stack analysis for 'configureIdleThread'. (59 of 428)
Doing stack analysis for 'copyGlobalMappings'. (60 of 428)
Doing stack analysis for 'copyMRs'. (61 of 428)
Doing stack analysis for 'cpu_iface_init'. (62 of 428)
Doing stack analysis for 'cpu_initLocalIRQController'. (63 of 428)
Doing stack analysis for 'createNewObjects'. (64 of 428)
Doing stack analysis for 'createObject'. (65 of 428)
Doing stack analysis for 'create_bi_frame_cap'. (66 of 428)
Doing stack analysis for 'create_device_untypeds'. (67 of 428)
Doing stack analysis for 'create_domain_cap'. (68 of 428)
Doing stack analysis for 'create_frames_of_region'. (69 of 428)
Doing stack analysis for 'create_idle_thread'. (70 of 428)
Doing stack analysis for 'create_initial_thread'. (71 of 428)
Doing stack analysis for 'create_ipcbuf_frame_cap'. (72 of 428)
Doing stack analysis for 'create_it_address_space'. (73 of 428)
Doing stack analysis for 'create_it_asid_pool'. (74 of 428)
Doing stack analysis for 'create_kernel_untypeds'. (75 of 428)
Doing stack analysis for 'create_mapped_it_frame_cap'. (76 of 428)
Doing stack analysis for 'create_root_cnode'. (77 of 428)
Doing stack analysis for 'create_rootserver_objects'. (78 of 428)
Doing stack analysis for 'create_unmapped_it_frame_cap'. (79 of 428)
Doing stack analysis for 'create_untypeds_for_region'. (80 of 428)
Doing stack analysis for 'cteDelete'. (81 of 428)
Doing stack analysis for 'cteDeleteOne'. (82 of 428)
Doing stack analysis for 'cteInsert'. (83 of 428)
Doing stack analysis for 'cteMove'. (84 of 428)
Doing stack analysis for 'cteRevoke'. (85 of 428)
Doing stack analysis for 'cteSwap'. (86 of 428)
Doing stack analysis for 'decodeARMMMUInvocation'. (87 of 428)
Doing stack analysis for 'decodeBindNotification'. (88 of 428)
Doing stack analysis for 'decodeCNodeInvocation'. (89 of 428)
Doing stack analysis for 'decodeCopyRegisters'. (90 of 428)
Doing stack analysis for 'decodeDomainInvocation'. (91 of 428)
Doing stack analysis for 'decodeIRQControlInvocation'. (92 of 428)
Doing stack analysis for 'decodeIRQHandlerInvocation'. (93 of 428)
Doing stack analysis for 'decodeInvocation'. (94 of 428)
Doing stack analysis for 'decodeReadRegisters'. (95 of 428)
Doing stack analysis for 'decodeSetIPCBuffer'. (96 of 428)
Doing stack analysis for 'decodeSetMCPriority'. (97 of 428)
Doing stack analysis for 'decodeSetPriority'. (98 of 428)
Doing stack analysis for 'decodeSetSchedParams'. (99 of 428)
Doing stack analysis for 'decodeSetSpace'. (100 of 428)
Doing stack analysis for 'decodeTCBConfigure'. (101 of 428)
Doing stack analysis for 'decodeTCBInvocation'. (102 of 428)
Doing stack analysis for 'decodeUnbindNotification'. (103 of 428)
Doing stack analysis for 'decodeUntypedInvocation'. (104 of 428)
Doing stack analysis for 'decodeWriteRegisters'. (105 of 428)
Doing stack analysis for 'deleteASID'. (106 of 428)
Doing stack analysis for 'deleteASIDPool'. (107 of 428)
Doing stack analysis for 'deleteCallerCap'. (108 of 428)
Doing stack analysis for 'deletedIRQHandler'. (109 of 428)
Doing stack analysis for 'deletingIRQHandler'. (110 of 428)
Doing stack analysis for 'deriveCap'. (111 of 428)
Doing stack analysis for 'dist_init'. (112 of 428)
Doing stack analysis for 'doFaultTransfer'. (113 of 428)
Doing stack analysis for 'doFlush'. (114 of 428)
Doing stack analysis for 'doIPCTransfer'. (115 of 428)
Doing stack analysis for 'doNBRecvFailedTransfer'. (116 of 428)
Doing stack analysis for 'doNormalTransfer'. (117 of 428)
Doing stack analysis for 'doReplyTransfer'. (118 of 428)
Doing stack analysis for 'emptySlot'. (119 of 428)
Doing stack analysis for 'ensureEmptySlot'. (120 of 428)
Doing stack analysis for 'ensureNoChildren'. (121 of 428)
Doing stack analysis for 'finaliseCap'. (122 of 428)
Doing stack analysis for 'findFreeHWASID'. (123 of 428)
Doing stack analysis for 'findPDForASID'. (124 of 428)
Doing stack analysis for 'flushPage'. (125 of 428)
Doing stack analysis for 'flushSpace'. (126 of 428)
Doing stack analysis for 'flushTable'. (127 of 428)
Doing stack analysis for 'fpsimd_HWCapTest'. (128 of 428)
Doing stack analysis for 'getExtraCPtr'. (129 of 428)
Doing stack analysis for 'getHWASID'. (130 of 428)
Doing stack analysis for 'getObjectSize'. (131 of 428)
Doing stack analysis for 'getReceiveSlots'. (132 of 428)
Doing stack analysis for 'getRestartPC'. (133 of 428)
Doing stack analysis for 'get_avail_p_regs'. (134 of 428)
Doing stack analysis for 'get_num_avail_p_regs'. (135 of 428)
Doing stack analysis for 'halt'. (136 of 428)
Doing stack analysis for 'handleDoubleFault'. (137 of 428)
Doing stack analysis for 'handleFault'. (138 of 428)
Doing stack analysis for 'handleFaultReply'. (139 of 428)
Doing stack analysis for 'handleInterrupt'. (140 of 428)
Doing stack analysis for 'handleInterruptEntry'. (141 of 428)
Doing stack analysis for 'handleInvocation'. (142 of 428)
Doing stack analysis for 'handleRecv'. (143 of 428)
Doing stack analysis for 'handleReply'. (144 of 428)
Doing stack analysis for 'handleSyscall'. (145 of 428)
Doing stack analysis for 'handleUnknownSyscall'. (146 of 428)
Doing stack analysis for 'handleUserLevelFault'. (147 of 428)
Doing stack analysis for 'handleVMFault'. (148 of 428)
Doing stack analysis for 'handleVMFaultEvent'. (149 of 428)
Doing stack analysis for 'hasCancelSendRights'. (150 of 428)
Doing stack analysis for 'idle_thread'. (151 of 428)
Doing stack analysis for 'initIRQController'. (152 of 428)
Doing stack analysis for 'initL2Cache'. (153 of 428)
Doing stack analysis for 'initTimer'. (154 of 428)
Doing stack analysis for 'init_core_state'. (155 of 428)
Doing stack analysis for 'init_freemem'. (156 of 428)
Doing stack analysis for 'init_kernel'. (157 of 428)
Aborting Problem (Function (init_kernel)), complex loop
Doing stack analysis for 'insertNewCap'. (158 of 428)
Doing stack analysis for 'insert_region'. (159 of 428)
Doing stack analysis for "instruction'cpsid_aif_E0010948". (160 of 428)
Doing stack analysis for "instruction'dmb_sy_E0011460". (161 of 428)
Doing stack analysis for "instruction'dmb_sy_E0012014". (162 of 428)
Doing stack analysis for "instruction'dmb_sy_E0012054". (163 of 428)
Doing stack analysis for "instruction'dmb_sy_E0012068". (164 of 428)
Doing stack analysis for "instruction'dmb_sy_E00120DC". (165 of 428)
Doing stack analysis for "instruction'dmb_sy_E0012128". (166 of 428)
Doing stack analysis for "instruction'dmb_sy_E0012170". (167 of 428)
Doing stack analysis for "instruction'dmb_sy_E001221C". (168 of 428)
Doing stack analysis for "instruction'dmb_sy_E00122F0". (169 of 428)
Doing stack analysis for "instruction'dmb_sy_E001252C". (170 of 428)
Doing stack analysis for "instruction'dmb_sy_E0012570". (171 of 428)
Doing stack analysis for "instruction'dmb_sy_E0012978". (172 of 428)
Doing stack analysis for "instruction'dmb_sy_E00129C4". (173 of 428)
Doing stack analysis for "instruction'dmb_sy_E0012AA4". (174 of 428)
Doing stack analysis for "instruction'dmb_sy_E0019D44". (175 of 428)
Doing stack analysis for "instruction'dsb_sy_E00009B8". (176 of 428)
Doing stack analysis for "instruction'dsb_sy_E00009D4". (177 of 428)
Doing stack analysis for "instruction'dsb_sy_E00009E0". (178 of 428)
Doing stack analysis for "instruction'dsb_sy_E0003EC4". (179 of 428)
Doing stack analysis for "instruction'dsb_sy_E0003ECC". (180 of 428)
Doing stack analysis for "instruction'dsb_sy_E0011074". (181 of 428)
Doing stack analysis for "instruction'dsb_sy_E001107C". (182 of 428)
Doing stack analysis for "instruction'dsb_sy_E0011134". (183 of 428)
Doing stack analysis for "instruction'dsb_sy_E00111A0". (184 of 428)
Doing stack analysis for "instruction'dsb_sy_E00111DC". (185 of 428)
Doing stack analysis for "instruction'dsb_sy_E0011274". (186 of 428)
Doing stack analysis for "instruction'dsb_sy_E00113A8". (187 of 428)
Doing stack analysis for "instruction'dsb_sy_E00113BC". (188 of 428)
Doing stack analysis for "instruction'dsb_sy_E0011400". (189 of 428)
Doing stack analysis for "instruction'dsb_sy_E001140C". (190 of 428)
Doing stack analysis for "instruction'dsb_sy_E0011488". (191 of 428)
Doing stack analysis for "instruction'dsb_sy_E0011494". (192 of 428)
Doing stack analysis for "instruction'dsb_sy_E0012028". (193 of 428)
Doing stack analysis for "instruction'dsb_sy_E00120A0". (194 of 428)
Doing stack analysis for "instruction'dsb_sy_E00120B4". (195 of 428)
Doing stack analysis for "instruction'dsb_sy_E00120F0". (196 of 428)
Doing stack analysis for "instruction'dsb_sy_E0012584". (197 of 428)
Doing stack analysis for "instruction'dsb_sy_E001268C". (198 of 428)
Doing stack analysis for "instruction'dsb_sy_E00126C0". (199 of 428)
Doing stack analysis for "instruction'dsb_sy_E00126C8". (200 of 428)
Doing stack analysis for "instruction'dsb_sy_E00126D8". (201 of 428)
Doing stack analysis for "instruction'dsb_sy_E00126F8". (202 of 428)
Doing stack analysis for "instruction'dsb_sy_E0012704". (203 of 428)
Doing stack analysis for "instruction'dsb_sy_E001292C". (204 of 428)
Doing stack analysis for "instruction'dsb_sy_E0012934". (205 of 428)
Doing stack analysis for "instruction'dsb_sy_E0012944". (206 of 428)
Doing stack analysis for "instruction'dsb_sy_E0012A00". (207 of 428)
Doing stack analysis for "instruction'dsb_sy_E0012A20". (208 of 428)
Doing stack analysis for "instruction'dsb_sy_E0012A30". (209 of 428)
Doing stack analysis for "instruction'isb_sy_E000097C". (210 of 428)
Doing stack analysis for "instruction'isb_sy_E00009D0". (211 of 428)
Doing stack analysis for "instruction'isb_sy_E00009E4". (212 of 428)
Doing stack analysis for "instruction'isb_sy_E0003ED0". (213 of 428)
Doing stack analysis for "instruction'isb_sy_E0011080". (214 of 428)
Doing stack analysis for "instruction'isb_sy_E001114C". (215 of 428)
Doing stack analysis for "instruction'isb_sy_E00111B8". (216 of 428)
Doing stack analysis for "instruction'isb_sy_E00111C0". (217 of 428)
Doing stack analysis for "instruction'isb_sy_E00111D0". (218 of 428)
Doing stack analysis for "instruction'isb_sy_E00111F4". (219 of 428)
Doing stack analysis for "instruction'isb_sy_E001128C". (220 of 428)
Doing stack analysis for "instruction'isb_sy_E0011294". (221 of 428)
Doing stack analysis for "instruction'isb_sy_E00112AC". (222 of 428)
Doing stack analysis for "instruction'isb_sy_E00113C0". (223 of 428)
Doing stack analysis for "instruction'isb_sy_E0011410". (224 of 428)
Doing stack analysis for "instruction'isb_sy_E0011498". (225 of 428)
Doing stack analysis for "instruction'isb_sy_E00125A8". (226 of 428)
Doing stack analysis for "instruction'isb_sy_E00126B0". (227 of 428)
Doing stack analysis for "instruction'isb_sy_E00126D4". (228 of 428)
Doing stack analysis for "instruction'isb_sy_E0012708". (229 of 428)
Doing stack analysis for "instruction'isb_sy_E0012940". (230 of 428)
Doing stack analysis for "instruction'isb_sy_E00129F0". (231 of 428)
Doing stack analysis for "instruction'isb_sy_E0012A1C". (232 of 428)
Doing stack analysis for "instruction'isb_sy_E0012A24". (233 of 428)
Doing stack analysis for "instruction'mcr_15_0_ip_cr7_cr10_1_E00120D8". (234 of 428)
Doing stack analysis for "instruction'mcr_15_0_ip_cr8_cr7_2_E0011078". (235 of 428)
Doing stack analysis for "instruction'mcr_15_0_lr_cr7_cr10_1_E0012010". (236 of 428)
Doing stack analysis for "instruction'mcr_15_0_r0_cr10_cr1_0_E0010894". (237 of 428)
Doing stack analysis for "instruction'mcr_15_0_r0_cr10_cr1_1_E0010888". (238 of 428)
Doing stack analysis for "instruction'mcr_15_0_r0_cr13_cr0_1_E00111BC". (239 of 428)
Doing stack analysis for "instruction'mcr_15_0_r0_cr13_cr0_1_E0011290". (240 of 428)
Doing stack analysis for "instruction'mcr_15_0_r0_cr2_cr0_0_E00112A8". (241 of 428)
Doing stack analysis for "instruction'mcr_15_0_r0_cr7_cr11_1_E00122EC". (242 of 428)
Doing stack analysis for "instruction'mcr_15_0_r0_cr8_cr7_1_E0010880". (243 of 428)
Doing stack analysis for "instruction'mcr_15_0_r0_cr8_cr7_2_E0011408". (244 of 428)
Doing stack analysis for "instruction'mcr_15_0_r0_cr8_cr7_2_E0011490". (245 of 428)
Doing stack analysis for "instruction'mcr_15_0_r1_cr10_cr0_0_E0010890". (246 of 428)
Doing stack analysis for "instruction'mcr_15_0_r1_cr10_cr0_1_E0010884". (247 of 428)
Doing stack analysis for "instruction'mcr_15_0_r1_cr7_cr10_2_E0011D88". (248 of 428)
Doing stack analysis for "instruction'mcr_15_0_r1_cr7_cr14_2_E0011E68". (249 of 428)
Doing stack analysis for "instruction'mcr_15_0_r1_cr7_cr14_2_E0011F68". (250 of 428)
Doing stack analysis for "instruction'mcr_15_0_r2_cr10_cr0_0_E0010898". (251 of 428)
Doing stack analysis for "instruction'mcr_15_0_r2_cr10_cr0_1_E001088C". (252 of 428)
Doing stack analysis for "instruction'mcr_15_0_r2_cr7_cr11_1_E001145C". (253 of 428)
Doing stack analysis for "instruction'mcr_15_0_r2_cr7_cr11_1_E0012218". (254 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr13_cr0_4_E00038EC". (255 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr14_cr1_0_E0011FE4". (256 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr1_cr0_2_E0000978". (257 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr2_cr0_0_E00009CC". (258 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr2_cr0_0_E0011148". (259 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr2_cr0_0_E00111B4". (260 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr2_cr0_0_E00111CC". (261 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr2_cr0_0_E00111F0". (262 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr2_cr0_0_E0011288". (263 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr7_cr11_1_E001216C". (264 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr7_cr11_1_E0019D40". (265 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr7_cr14_1_E001209C". (266 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr7_cr5_0_E00126D0". (267 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr7_cr5_0_E001293C". (268 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr7_cr5_0_E0012A18". (269 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr7_cr5_1_E00125A4". (270 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr7_cr5_7_E00125D8". (271 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr7_cr6_1_E001256C". (272 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr8_cr7_0_E00009DC". (273 of 428)
Doing stack analysis for "instruction'mcr_15_0_r3_cr8_cr7_1_E00113B8". (274 of 428)
Doing stack analysis for "instruction'mcr_15_0_r4_cr8_cr7_0_E0003EC8". (275 of 428)
Doing stack analysis for "instruction'mcr_15_0_r4_cr8_cr7_2_E0012700". (276 of 428)
Doing stack analysis for "instruction'mcr_15_2_r2_cr0_cr0_0_E0011DFC". (277 of 428)
Doing stack analysis for "instruction'mcr_15_2_r2_cr0_cr0_0_E0011ED8". (278 of 428)
Doing stack analysis for "instruction'mcr_15_2_r2_cr0_cr0_0_E0011F2C". (279 of 428)
Doing stack analysis for "instruction'mcr_15_2_r3_cr0_cr0_0_E0011F24". (280 of 428)
Doing stack analysis for "instruction'mcr_15_2_r9_cr0_cr0_0_E0011DF4". (281 of 428)
Doing stack analysis for "instruction'mcr_15_2_r9_cr0_cr0_0_E0011ED0". (282 of 428)
Doing stack analysis for "instruction'mrc_15_0_r1_cr6_cr0_0_E001132C". (283 of 428)
Doing stack analysis for "instruction'mrc_15_0_r2_cr13_cr0_2_E0010130". (284 of 428)
Doing stack analysis for "instruction'mrc_15_0_r2_cr13_cr0_2_E0010158". (285 of 428)
Doing stack analysis for "instruction'mrc_15_0_r2_cr13_cr0_2_E0010188". (286 of 428)
Doing stack analysis for "instruction'mrc_15_0_r2_cr13_cr0_2_E00101B4". (287 of 428)
Doing stack analysis for "instruction'mrc_15_0_r2_cr13_cr0_3_E0010138". (288 of 428)
Doing stack analysis for "instruction'mrc_15_0_r2_cr13_cr0_3_E0010160". (289 of 428)
Doing stack analysis for "instruction'mrc_15_0_r2_cr13_cr0_3_E0010190". (290 of 428)
Doing stack analysis for "instruction'mrc_15_0_r2_cr13_cr0_3_E00101BC". (291 of 428)
Doing stack analysis for "instruction'mrc_15_0_r3_cr0_cr1_1_E0011FD4". (292 of 428)
Doing stack analysis for "instruction'mrc_15_0_r3_cr0_cr1_2_E0011FD0". (293 of 428)
Doing stack analysis for "instruction'mrc_15_0_r3_cr1_cr0_2_E0000970". (294 of 428)
Doing stack analysis for "instruction'mrc_15_0_r3_cr5_cr0_0_E0011330". (295 of 428)
Doing stack analysis for "instruction'mrc_15_0_r3_cr5_cr0_1_E0011358". (296 of 428)
Doing stack analysis for "instruction'mrc_15_1_fp_cr0_cr0_1_E0011E40". (297 of 428)
Doing stack analysis for "instruction'mrc_15_1_r3_cr0_cr0_0_E0011DF8". (298 of 428)
Doing stack analysis for "instruction'mrc_15_1_r3_cr0_cr0_0_E0011ED4". (299 of 428)
Doing stack analysis for "instruction'mrc_15_1_r3_cr0_cr0_0_E0011F28". (300 of 428)
Doing stack analysis for "instruction'mrc_15_1_r3_cr0_cr0_1_E0011D58". (301 of 428)
Doing stack analysis for "instruction'mrc_15_2_r2_cr0_cr0_0_E0011DEC". (302 of 428)
Doing stack analysis for "instruction'mrc_15_2_r2_cr0_cr0_0_E0011EC8". (303 of 428)
Doing stack analysis for "instruction'mrc_15_2_r2_cr0_cr0_0_E0011F1C". (304 of 428)
Doing stack analysis for "instruction'strex_r0_r1_r3_E0011210". (305 of 428)
Doing stack analysis for "instruction'vmrs_r3_fpexc_E0000990". (306 of 428)
Doing stack analysis for "instruction'vmrs_r3_fpexc_E000099C". (307 of 428)
Doing stack analysis for "instruction'vmrs_r3_fpexc_E0003B54". (308 of 428)
Doing stack analysis for "instruction'vmsr_fpexc_r3_E0000998". (309 of 428)
Doing stack analysis for "instruction'vmsr_fpexc_r3_E0003B5C". (310 of 428)
Doing stack analysis for "instruction'wfi_E00108A0". (311 of 428)
Doing stack analysis for 'invalidateASIDEntry'. (312 of 428)
Doing stack analysis for 'invalidateCacheRange_I'. (313 of 428)
Doing stack analysis for 'invalidateCacheRange_RAM'. (314 of 428)
Doing stack analysis for 'invalidateTLBByASID'. (315 of 428)
Doing stack analysis for 'invokeCNodeCancelBadgedSends'. (316 of 428)
Doing stack analysis for 'invokeCNodeDelete'. (317 of 428)
Doing stack analysis for 'invokeCNodeInsert'. (318 of 428)
Doing stack analysis for 'invokeCNodeMove'. (319 of 428)
Doing stack analysis for 'invokeCNodeRevoke'. (320 of 428)
Doing stack analysis for 'invokeCNodeRotate'. (321 of 428)
Doing stack analysis for 'invokeCNodeSaveCaller'. (322 of 428)
Doing stack analysis for 'invokeIRQControl'. (323 of 428)
Doing stack analysis for 'invokeIRQHandler_AckIRQ'. (324 of 428)
Doing stack analysis for 'invokeIRQHandler_ClearIRQHandler'. (325 of 428)
Doing stack analysis for 'invokeIRQHandler_SetIRQHandler'. (326 of 428)
Doing stack analysis for 'invokeTCB_CopyRegisters'. (327 of 428)
Doing stack analysis for 'invokeTCB_NotificationControl'. (328 of 428)
Doing stack analysis for 'invokeTCB_ReadRegisters'. (329 of 428)
Doing stack analysis for 'invokeTCB_Resume'. (330 of 428)
Doing stack analysis for 'invokeTCB_Suspend'. (331 of 428)
Doing stack analysis for 'invokeTCB_ThreadControl'. (332 of 428)
Doing stack analysis for 'invokeTCB_WriteRegisters'. (333 of 428)
Doing stack analysis for 'invokeUntyped_Retype'. (334 of 428)
Doing stack analysis for 'isFinalCapability'. (335 of 428)
Doing stack analysis for 'isIOSpaceFrameCap'. (336 of 428)
Doing stack analysis for 'isIRQActive'. (337 of 428)
Doing stack analysis for 'isMDBParentOf'. (338 of 428)
Doing stack analysis for 'isValidVTableRoot'. (339 of 428)
Doing stack analysis for 'loadCapTransfer'. (340 of 428)
Doing stack analysis for 'loadHWASID'. (341 of 428)
Doing stack analysis for 'lockTLBEntry'. (342 of 428)
Doing stack analysis for 'lockTLBEntryCritical'. (343 of 428)
Doing stack analysis for 'lookupCap'. (344 of 428)
Doing stack analysis for 'lookupCapAndSlot'. (345 of 428)
Doing stack analysis for 'lookupExtraCaps'. (346 of 428)
Doing stack analysis for 'lookupIPCBuffer'. (347 of 428)
Doing stack analysis for 'lookupPDSlot'. (348 of 428)
Doing stack analysis for 'lookupPTSlot'. (349 of 428)
Doing stack analysis for 'lookupPivotSlot'. (350 of 428)
Doing stack analysis for 'lookupSlot'. (351 of 428)
Doing stack analysis for 'lookupSlotForCNodeOp'. (352 of 428)
Doing stack analysis for 'lookupSourceSlot'. (353 of 428)
Doing stack analysis for 'lookupTargetSlot'. (354 of 428)
Doing stack analysis for 'makeUserPDE'. (355 of 428)
Doing stack analysis for 'map_kernel_devices'. (356 of 428)
Doing stack analysis for 'map_kernel_frame'. (357 of 428)
Doing stack analysis for 'map_kernel_window'. (358 of 428)
Aborting Problem (Function (map_kernel_window)), complex loop
Doing stack analysis for 'maskCapRights'. (359 of 428)
Doing stack analysis for 'maskVMRights'. (360 of 428)
Doing stack analysis for 'maybe_alloc_extra_bi'. (361 of 428)
Doing stack analysis for 'memcpy'. (362 of 428)
Doing stack analysis for 'memset'. (363 of 428)
Doing stack analysis for 'memzero'. (364 of 428)
Doing stack analysis for 'merge_regions'. (365 of 428)
Aborting Problem (Function (merge_regions)), complex loop
Doing stack analysis for 'pageTableMapped'. (366 of 428)
Doing stack analysis for 'performInvocation_Endpoint'. (367 of 428)
Doing stack analysis for 'performInvocation_Notification'. (368 of 428)
Doing stack analysis for 'performInvocation_Reply'. (369 of 428)
Doing stack analysis for 'plat_cleanCache'. (370 of 428)
Doing stack analysis for 'populate_bi_frame'. (371 of 428)
Doing stack analysis for 'possibleSwitchTo'. (372 of 428)
Doing stack analysis for 'preemptionPoint'. (373 of 428)
Doing stack analysis for 'provide_cap'. (374 of 428)
Doing stack analysis for 'receiveIPC'. (375 of 428)
Doing stack analysis for 'receiveSignal'. (376 of 428)
Doing stack analysis for 'replyFromKernel_error'. (377 of 428)
Doing stack analysis for 'replyFromKernel_success_empty'. (378 of 428)
Doing stack analysis for 'rescheduleRequired'. (379 of 428)
Doing stack analysis for 'reserve_region'. (380 of 428)
Doing stack analysis for 'resolveAddressBits'. (381 of 428)
Doing stack analysis for 'restart'. (382 of 428)
Doing stack analysis for 'restore_user_context'. (383 of 428)
Doing stack analysis for 'sameObjectAs'. (384 of 428)
Doing stack analysis for 'sameRegionAs'. (385 of 428)
Doing stack analysis for 'schedule'. (386 of 428)
Doing stack analysis for 'scheduleChooseNewThread'. (387 of 428)
Doing stack analysis for 'scheduleTCB'. (388 of 428)
Doing stack analysis for 'sendFaultIPC'. (389 of 428)
Doing stack analysis for 'sendIPC'. (390 of 428)
Doing stack analysis for 'sendSignal'. (391 of 428)
Doing stack analysis for 'setDomain'. (392 of 428)
Doing stack analysis for 'setExtraBadge'. (393 of 428)
Doing stack analysis for 'setIRQState'. (394 of 428)
Doing stack analysis for 'setIRQTrigger'. (395 of 428)
Doing stack analysis for 'setMCPriority'. (396 of 428)
Doing stack analysis for 'setMRs_fault'. (397 of 428)
Doing stack analysis for 'setMRs_syscall_error'. (398 of 428)
Doing stack analysis for 'setNextPC'. (399 of 428)
Doing stack analysis for 'setPriority'. (400 of 428)
Doing stack analysis for 'setThreadState'. (401 of 428)
Doing stack analysis for 'setVMRoot'. (402 of 428)
Doing stack analysis for 'setVMRootForFlush'. (403 of 428)
Doing stack analysis for 'setupCallerCap'. (404 of 428)
Doing stack analysis for 'setupReplyMaster'. (405 of 428)
Doing stack analysis for 'slotCapLongRunningDelete'. (406 of 428)
Doing stack analysis for 'slowpath'. (407 of 428)
Doing stack analysis for 'str_to_long'. (408 of 428)
Doing stack analysis for 'strlcat'. (409 of 428)
Doing stack analysis for 'strlcpy'. (410 of 428)
Doing stack analysis for 'strncmp'. (411 of 428)
Doing stack analysis for 'strnlen'. (412 of 428)
Doing stack analysis for 'suspend'. (413 of 428)
Doing stack analysis for 'switchToIdleThread'. (414 of 428)
Doing stack analysis for 'switchToThread'. (415 of 428)
Doing stack analysis for 'tcbEPAppend'. (416 of 428)
Doing stack analysis for 'tcbEPDequeue'. (417 of 428)
Doing stack analysis for 'tcbSchedAppend'. (418 of 428)
Doing stack analysis for 'tcbSchedDequeue'. (419 of 428)
Doing stack analysis for 'tcbSchedEnqueue'. (420 of 428)
Doing stack analysis for 'timerTick'. (421 of 428)
Doing stack analysis for 'unbindMaybeNotification'. (422 of 428)
Doing stack analysis for 'unbindNotification'. (423 of 428)
Doing stack analysis for 'unmapPage'. (424 of 428)
Doing stack analysis for 'unmapPageTable'. (425 of 428)
Doing stack analysis for 'updateCapData'. (426 of 428)
Doing stack analysis for 'write_it_asid_pool'. (427 of 428)
Doing stack analysis for 'write_slot'. (428 of 428)
Computed stack bounds.
Warning: asm instruction name: formatting: "asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"
Warning: asm instruction name: formatting: "asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"
Function 'init_kernel' contains unhandled instructions:
  ["instruction'vmsr_fpexc_r3_E0003B5C", "instruction'vmrs_r3_fpexc_E0003B54"]
Function 'Arch_switchToThread' contains unhandled instructions:
  ["instruction'strex_r0_r1_r3_E0011210"]
Function 'Kernel_C.fpsimd_HWCapTest' contains unhandled instructions:
  ["asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"]
Function 'arm_vector_table' contains unhandled instructions:
  ["instruction'ldr_pc_pc_24_e0010020_arm_vector_table_0x20_E0010000", "instruction'ldr_pc_pc_24_e001002c_arm_vector_table_0x2c_E001000C", "instruction'ldr_pc_pc_20_e0010038_arm_vector_table_0x38_E001001C", "instruction'ldr_pc_pc_24_e0010024_arm_vector_table_0x24_E0010004", "instruction'ldr_pc_pc_24_e0010030_arm_vector_table_0x30_E0010010", "instruction'ldr_pc_pc_24_e0010028_arm_vector_table_0x28_E0010008", "instruction'ldr_pc_pc_20_e0010034_arm_vector_table_0x34_E0010018", "instruction'ldr_pc_pc_4_e0010020_arm_vector_table_0x20_E0010014"]
Function 'arm_undefined_inst_exception' contains unhandled instructions:
  ["instruction'cps_19_E0010040", "instruction'srsia_sp_19_E001003C", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E0010044"]
Function 'arm_data_abort_exception' contains unhandled instructions:
  ["instruction'cps_19_E00100BC", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E00100C0", "instruction'srsia_sp_19_E00100B8"]
Function 'Kernel_C.supportsAsyncExceptions' contains unhandled instructions:
  ["asm_instruction'.fpu_vfp\\nvmsr_fpexc,_%0", "asm_instruction'.fpu_vfp\\nvmrs_%0,_fpexc"]
Function 'Kernel_C.clearEnFPEXC' contains unhandled instructions:
  ["asm_instruction'.fpu_vfp\\nvmsr_fpexc,_%0", "asm_instruction'.fpu_vfp\\nvmrs_%0,_fpexc"]
Function 'arm_irq_exception' contains unhandled instructions:
  ["instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E00100F4", "instruction'cps_19_E00100F0", "instruction'srsia_sp_19_E00100EC"]
Function 'fpsimd_HWCapTest' contains unhandled instructions:
  ["instruction'vmrs_r3_fpexc_E0000990", "instruction'vmrs_r3_fpexc_E000099C", "instruction'vmsr_fpexc_r3_E0000998"]
Function '_start' contains unhandled instructions:
  ["instruction'cps_23_E0000034", "instruction'cps_19_E000003C"]
Function 'arm_prefetch_abort_exception' contains unhandled instructions:
  ["instruction'cps_19_E001008C", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E0010090", "instruction'srsia_sp_19_E0010088"]
Function 'halt' contains unhandled instructions:
  ["instruction'cpsid_aif_E0010948"]
Checking.

real    2m58.019s
user    2m46.757s
sys     0m15.495s
building '/nix/store/cyki0hz09a6n43b9r6s8zx316lv2n43p-graph-refine-all.drv'...
Loading syntax from ./CFunctions.txt
Loaded 835 functions, 75 structs, 0 globals.
Loading syntax from ./ASMFunctions.txt
Missing nodes after calls to idle_thread
  in ['halt']
Missing nodes after calls to restore_user_context
  in ['c_handle_data_fault', 'c_handle_undefined_instruction', 'c_handle_interrupt']
Missing nodes after calls to halt
  in ['handleReply', 'Arch_createObject', 'completeSignal', 'init_freemem', 'unmapPage', 'doFlush', 'maskCapRights', 'decodeInvocation', 'cteDelete', 'Arch_setMRs_fault', 'handleInterrupt', 'Arch_deriveCap', 'invokeCNodeSaveCaller', 'handleSyscall', 'arm_reset_exception', 'createObject', 'Arch_handleFaultReply']
Missing nodes after calls to instruction'isb_sy_E000097C
  in ['fpsimd_HWCapTest']
Missing nodes after calls to instruction'ldr_pc_pc_20_e0010038_arm_vector_table_0x38_E001001C
  in ['arm_vector_table']
Warning: dead arc in c_handle_syscall: 67 -> 3758164096
  (follows Basic node!)
Warning: dead arc in c_handle_syscall: 69 -> 3758164096
  (follows Basic node!)
Warning: dead arc in arm_fiq_exception: 7 -> 3758162208
  (follows Basic node!)
Warning: dead arc in arm_fiq_exception: 9 -> 3758162208
  (follows Basic node!)
Warning: dead arc in c_handle_instruction_fault: 3758162396 -> 3758162400
  (follows Basic node!)
Warning: dead arc in _start: 3758096388 -> 3758096392
  (follows Basic node!)
Loaded 481 functions, 0 structs, 0 globals.
Pseudo-Compiling.
Doing stack/inst logic.
Warning: asm instruction name: formatting: "asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"
Warning: asm instruction name: formatting: "asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"
Function 'init_kernel' contains unhandled instructions:
  ["instruction'vmsr_fpexc_r3_E0003B5C", "instruction'vmrs_r3_fpexc_E0003B54"]
Function 'Arch_switchToThread' contains unhandled instructions:
  ["instruction'strex_r0_r1_r3_E0011210"]
Function 'Kernel_C.fpsimd_HWCapTest' contains unhandled instructions:
  ["asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"]
Function 'arm_vector_table' contains unhandled instructions:
  ["instruction'ldr_pc_pc_24_e0010020_arm_vector_table_0x20_E0010000", "instruction'ldr_pc_pc_24_e001002c_arm_vector_table_0x2c_E001000C", "instruction'ldr_pc_pc_20_e0010038_arm_vector_table_0x38_E001001C", "instruction'ldr_pc_pc_24_e0010024_arm_vector_table_0x24_E0010004", "instruction'ldr_pc_pc_24_e0010030_arm_vector_table_0x30_E0010010", "instruction'ldr_pc_pc_24_e0010028_arm_vector_table_0x28_E0010008", "instruction'ldr_pc_pc_20_e0010034_arm_vector_table_0x34_E0010018", "instruction'ldr_pc_pc_4_e0010020_arm_vector_table_0x20_E0010014"]
Function 'arm_undefined_inst_exception' contains unhandled instructions:
  ["instruction'cps_19_E0010040", "instruction'srsia_sp_19_E001003C", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E0010044"]
Function 'arm_data_abort_exception' contains unhandled instructions:
  ["instruction'cps_19_E00100BC", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E00100C0", "instruction'srsia_sp_19_E00100B8"]
Function 'Kernel_C.supportsAsyncExceptions' contains unhandled instructions:
  ["asm_instruction'.fpu_vfp\\nvmsr_fpexc,_%0", "asm_instruction'.fpu_vfp\\nvmrs_%0,_fpexc"]
Function 'Kernel_C.clearEnFPEXC' contains unhandled instructions:
  ["asm_instruction'.fpu_vfp\\nvmsr_fpexc,_%0", "asm_instruction'.fpu_vfp\\nvmrs_%0,_fpexc"]
Function 'arm_irq_exception' contains unhandled instructions:
  ["instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E00100F4", "instruction'cps_19_E00100F0", "instruction'srsia_sp_19_E00100EC"]
Function 'fpsimd_HWCapTest' contains unhandled instructions:
  ["instruction'vmrs_r3_fpexc_E0000990", "instruction'vmrs_r3_fpexc_E000099C", "instruction'vmsr_fpexc_r3_E0000998"]
Function '_start' contains unhandled instructions:
  ["instruction'cps_23_E0000034", "instruction'cps_19_E000003C"]
Function 'arm_prefetch_abort_exception' contains unhandled instructions:
  ["instruction'cps_19_E001008C", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E0010090", "instruction'srsia_sp_19_E0010088"]
Function 'halt' contains unhandled instructions:
  ["instruction'cpsid_aif_E0010948"]
Checking.
Checking 282 function pair problems
Testing Function pair Pairing (cpu_iface_init (ASM) <= Kernel_C.cpu_iface_init (C))
  (function pairing 1 of 282)
 .. built problem, finding proof
Discovered that points [23 (loop head)] can be bounded
  (in problem)
Discovered a loop relation for split points [67, 11]
  (in problem)
Now doing proof search in 67 init case in problem.
Now doing proof search in 67 loop case in problem.
ProofNode ('Restr', (23, ('Number', (0, 6))), (ProofNode ('Split', ((67, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Var', Type ('Word', 32), name = 'r3')]), (11, (0, 1), [Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (67, ('Number', (0, 1))), (ProofNode ('Restr', (11, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (67, ('Offset', (0, 1))), (ProofNode ('Restr', (11, ('Offset', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),))
 .. proof found.
Step 1: 
  Prove the number of visits to 23 is in {0 ..< 6}
    .. proven.
Step 2: 
  prove visits to 67 related to visits to 11
    with equalities
      ((Mem) ('mem')) (@ addr 67)
      = ((Mem) ('Mem')) (@ addr 11)
    and with invariants
      ((Word32) ('r7')) (@ addr 67)
      ((Word32) ('r4')) (@ addr 67)
      ((Word32) ('r8')) (@ addr 67)
      ((Word32) ('r5')) (@ addr 67)
      ((Word32) ('r6')) (@ addr 67)
      ((Word32) ('r0')) (@ addr 67)
      ((Word32) ('r9')) (@ addr 67)
      ((Word32) ('ret')) (@ addr 67)
      ((Word32) ('r2')) (@ addr 67)
      ((Word32) ('r11')) (@ addr 67)
      ((Word32) ('r13')) (@ addr 67)
      ((Word32) ('r10')) (@ addr 67)
      ((Bool) (ROData('mem'))) (@ addr 67)
      ((Word32) ('r14')) (@ addr 67)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 67)
      ((Word32) ('r3')) (@ addr 67)
      ((Word32[50]) ('GhostAssertions')) (@ addr 11)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 11)
    .. proven.
Step 3: case in (2) where the length of the sequence < 2
  Prove the number of visits to 67 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 11 is in {0 ..< 1}
    .. proven.
Step 5: 
  prove all verification conditions
    .. proven.
Step 6: case in (2) where the length of the sequence is i + 2
  Prove the number of visits to 67 is in {i + 0 ..< i + 1}
    .. proven.
Step 7: 
  Prove the number of visits to 11 is in {i + 0 ..< i + 1}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cpu_iface_init (ASM) <= Kernel_C.cpu_iface_init (C)), time taken: 13.29s
Testing Function pair Pairing (performInvocation_Reply (ASM) <= Kernel_C.performInvocation_Reply (C))
  (function pairing 2 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (performInvocation_Reply (ASM) <= Kernel_C.performInvocation_Reply (C)), time taken: 0.50s
Testing Function pair Pairing (decodeInvocation (ASM) <= Kernel_C.decodeInvocation (C))
  (function pairing 3 of 282)
 .. built problem, finding proof
Decided to case split at (264, 'ASM')
  (in problem)
Now doing proof search in true case (264 visited) in problem.
Now doing proof search in false case (264 not visited) in problem.
Decided to case split at (192, 'ASM')
  (in false case (264 not visited) in problem)
Now doing proof search in true case (192 visited) in false case (264 not visited) in problem.
Now doing proof search in false case (192 not visited) in false case (264 not visited) in problem.
Decided to case split at (183, 'ASM')
  (in false case (192 not visited) in false case (264 not visited) in problem)
Now doing proof search in true case (183 visited) in false case (192 not visited) in false case (264 not visited) in problem.
Now doing proof search in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem.
Decided to case split at (138, 'ASM')
  (in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem)
Now doing proof search in true case (138 visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem.
Now doing proof search in false case (138 not visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem.
Decided to case split at (174, 'ASM')
  (in false case (138 not visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem)
Now doing proof search in true case (174 visited) in false case (138 not visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem.
Now doing proof search in false case (174 not visited) in false case (138 not visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem.
Decided to case split at (394, 'ASM')
  (in false case (174 not visited) in false case (138 not visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem)
Now doing proof search in true case (394 visited) in false case (174 not visited) in false case (138 not visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem.
Now doing proof search in false case (394 not visited) in false case (174 not visited) in false case (138 not visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem.
Decided to case split at (156, 'ASM')
  (in false case (394 not visited) in false case (174 not visited) in false case (138 not visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem)
Now doing proof search in true case (156 visited) in false case (394 not visited) in false case (174 not visited) in false case (138 not visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem.
Now doing proof search in false case (156 not visited) in false case (394 not visited) in false case (174 not visited) in false case (138 not visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem.
Decided to case split at (147, 'ASM')
  (in false case (156 not visited) in false case (394 not visited) in false case (174 not visited) in false case (138 not visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem)
Now doing proof search in true case (147 visited) in false case (156 not visited) in false case (394 not visited) in false case (174 not visited) in false case (138 not visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem.
Now doing proof search in false case (147 not visited) in false case (156 not visited) in false case (394 not visited) in false case (174 not visited) in false case (138 not visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem.
Decided to case split at (165, 'ASM')
  (in false case (147 not visited) in false case (156 not visited) in false case (394 not visited) in false case (174 not visited) in false case (138 not visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem)
Now doing proof search in true case (165 visited) in false case (147 not visited) in false case (156 not visited) in false case (394 not visited) in false case (174 not visited) in false case (138 not visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem.
Now doing proof search in false case (165 not visited) in false case (147 not visited) in false case (156 not visited) in false case (394 not visited) in false case (174 not visited) in false case (138 not visited) in false case (183 not visited) in false case (192 not visited) in false case (264 not visited) in problem.
ProofNode ('CaseSplit', (264, 'ASM'), (ProofNode ('Restr', (264, ('Number', (1, 2))), (ProofNode ('Restr', (92, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (264, ('Number', (0, 1))), (ProofNode ('CaseSplit', (192, 'ASM'), (ProofNode ('Restr', (192, ('Number', (1, 2))), (ProofNode ('Restr', (82, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (192, ('Number', (0, 1))), (ProofNode ('Restr', (82, ('Number', (0, 1))), (ProofNode ('CaseSplit', (183, 'ASM'), (ProofNode ('Restr', (183, ('Number', (1, 2))), (ProofNode ('Restr', (70, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (183, ('Number', (0, 1))), (ProofNode ('Restr', (70, ('Number', (0, 1))), (ProofNode ('CaseSplit', (138, 'ASM'), (ProofNode ('Restr', (138, ('Number', (1, 2))), (ProofNode ('Restr', (79, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (138, ('Number', (0, 1))), (ProofNode ('Restr', (79, ('Number', (0, 1))), (ProofNode ('CaseSplit', (174, 'ASM'), (ProofNode ('Restr', (174, ('Number', (1, 2))), (ProofNode ('Restr', (76, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (174, ('Number', (0, 1))), (ProofNode ('Restr', (76, ('Number', (0, 1))), (ProofNode ('CaseSplit', (394, 'ASM'), (ProofNode ('Restr', (394, ('Number', (1, 2))), (ProofNode ('Restr', (73, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (394, ('Number', (0, 1))), (ProofNode ('Restr', (73, ('Number', (0, 1))), (ProofNode ('CaseSplit', (156, 'ASM'), (ProofNode ('Restr', (156, ('Number', (1, 2))), (ProofNode ('Restr', (50, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (156, ('Number', (0, 1))), (ProofNode ('Restr', (50, ('Number', (0, 1))), (ProofNode ('CaseSplit', (147, 'ASM'), (ProofNode ('Restr', (147, ('Number', (1, 2))), (ProofNode ('Restr', (33, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (147, ('Number', (0, 1))), (ProofNode ('Restr', (33, ('Number', (0, 1))), (ProofNode ('CaseSplit', (165, 'ASM'), (ProofNode ('Restr', (165, ('Number', (1, 2))), (ProofNode ('Restr', (67, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (165, ('Number', (0, 1))), (ProofNode ('Restr', (67, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)))),)),)))),)),)))),)),)))),)),)))),))))
 .. proof found.
Step 1: 
  case split on whether 264 is visited
Step 2: case in (1) where 264 is visited
  Prove the number of visits to 264 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 92 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 264 is not visited
  Prove the number of visits to 264 is in {0 ..< 1}
    .. proven.
Step 6: 
  case split on whether 192 is visited
Step 7: case in (6) where 192 is visited
  Prove the number of visits to 192 is in {1 ..< 2}
    .. proven.
Step 8: 
  Prove the number of visits to 82 is in {1 ..< 2}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (6) where 192 is not visited
  Prove the number of visits to 192 is in {0 ..< 1}
    .. proven.
Step 11: 
  Prove the number of visits to 82 is in {0 ..< 1}
    .. proven.
Step 12: 
  case split on whether 183 is visited
Step 13: case in (12) where 183 is visited
  Prove the number of visits to 183 is in {1 ..< 2}
    .. proven.
Step 14: 
  Prove the number of visits to 70 is in {1 ..< 2}
    .. proven.
Step 15: 
  prove all verification conditions
    .. proven.
Step 16: case in (12) where 183 is not visited
  Prove the number of visits to 183 is in {0 ..< 1}
    .. proven.
Step 17: 
  Prove the number of visits to 70 is in {0 ..< 1}
    .. proven.
Step 18: 
  case split on whether 138 is visited
Step 19: case in (18) where 138 is visited
  Prove the number of visits to 138 is in {1 ..< 2}
    .. proven.
Step 20: 
  Prove the number of visits to 79 is in {1 ..< 2}
    .. proven.
Step 21: 
  prove all verification conditions
    .. proven.
Step 22: case in (18) where 138 is not visited
  Prove the number of visits to 138 is in {0 ..< 1}
    .. proven.
Step 23: 
  Prove the number of visits to 79 is in {0 ..< 1}
    .. proven.
Step 24: 
  case split on whether 174 is visited
Step 25: case in (24) where 174 is visited
  Prove the number of visits to 174 is in {1 ..< 2}
    .. proven.
Step 26: 
  Prove the number of visits to 76 is in {1 ..< 2}
    .. proven.
Step 27: 
  prove all verification conditions
    .. proven.
Step 28: case in (24) where 174 is not visited
  Prove the number of visits to 174 is in {0 ..< 1}
    .. proven.
Step 29: 
  Prove the number of visits to 76 is in {0 ..< 1}
    .. proven.
Step 30: 
  case split on whether 394 is visited
Step 31: case in (30) where 394 is visited
  Prove the number of visits to 394 is in {1 ..< 2}
    .. proven.
Step 32: 
  Prove the number of visits to 73 is in {1 ..< 2}
    .. proven.
Step 33: 
  prove all verification conditions
    .. proven.
Step 34: case in (30) where 394 is not visited
  Prove the number of visits to 394 is in {0 ..< 1}
    .. proven.
Step 35: 
  Prove the number of visits to 73 is in {0 ..< 1}
    .. proven.
Step 36: 
  case split on whether 156 is visited
Step 37: case in (36) where 156 is visited
  Prove the number of visits to 156 is in {1 ..< 2}
    .. proven.
Step 38: 
  Prove the number of visits to 50 is in {1 ..< 2}
    .. proven.
Step 39: 
  prove all verification conditions
    .. proven.
Step 40: case in (36) where 156 is not visited
  Prove the number of visits to 156 is in {0 ..< 1}
    .. proven.
Step 41: 
  Prove the number of visits to 50 is in {0 ..< 1}
    .. proven.
Step 42: 
  case split on whether 147 is visited
Step 43: case in (42) where 147 is visited
  Prove the number of visits to 147 is in {1 ..< 2}
    .. proven.
Step 44: 
  Prove the number of visits to 33 is in {1 ..< 2}
    .. proven.
Step 45: 
  prove all verification conditions
    .. proven.
Step 46: case in (42) where 147 is not visited
  Prove the number of visits to 147 is in {0 ..< 1}
    .. proven.
Step 47: 
  Prove the number of visits to 33 is in {0 ..< 1}
    .. proven.
Step 48: 
  case split on whether 165 is visited
Step 49: case in (48) where 165 is visited
  Prove the number of visits to 165 is in {1 ..< 2}
    .. proven.
Step 50: 
  Prove the number of visits to 67 is in {1 ..< 2}
    .. proven.
Step 51: 
  prove all verification conditions
    .. proven.
Step 52: case in (48) where 165 is not visited
  Prove the number of visits to 165 is in {0 ..< 1}
    .. proven.
Step 53: 
  Prove the number of visits to 67 is in {0 ..< 1}
    .. proven.
Step 54: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeInvocation (ASM) <= Kernel_C.decodeInvocation (C)), time taken: 263.61s
Testing Function pair Pairing (getExtraCPtr (ASM) <= Kernel_C.getExtraCPtr (C))
  (function pairing 4 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (getExtraCPtr (ASM) <= Kernel_C.getExtraCPtr (C)), time taken: 0.22s
Testing Function pair Pairing (invokeTCB_Suspend (ASM) <= Kernel_C.invokeTCB_Suspend (C))
  (function pairing 5 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeTCB_Suspend (ASM) <= Kernel_C.invokeTCB_Suspend (C)), time taken: 0.48s
Testing Function pair Pairing (cleanInvalidateL1Caches (ASM) <= Kernel_C.cleanInvalidateL1Caches (C))
  (function pairing 6 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cleanInvalidateL1Caches (ASM) <= Kernel_C.cleanInvalidateL1Caches (C)), time taken: 1.31s
Testing Function pair Pairing (schedule (ASM) <= Kernel_C.schedule (C))
  (function pairing 7 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (schedule (ASM) <= Kernel_C.schedule (C)), time taken: 14.67s
Testing Function pair Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C))
  (function pairing 8 of 282)
Skipping Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C)), underspecified C
Testing Function pair Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))
  (function pairing 9 of 282)
Aborting Problem (Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C)), time taken: 0.00s
Testing Function pair Pairing (calculate_extra_bi_size_bits (ASM) <= Kernel_C.calculate_extra_bi_size_bits (C))
  (function pairing 10 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (calculate_extra_bi_size_bits (ASM) <= Kernel_C.calculate_extra_bi_size_bits (C)), time taken: 3.58s
Testing Function pair Pairing (ensureEmptySlot (ASM) <= Kernel_C.ensureEmptySlot (C))
  (function pairing 11 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (ensureEmptySlot (ASM) <= Kernel_C.ensureEmptySlot (C)), time taken: 0.73s
Testing Function pair Pairing (halt (ASM) <= Kernel_C.halt (C))
  (function pairing 12 of 282)
Skipping Pairing (halt (ASM) <= Kernel_C.halt (C)), underspecified C
Testing Function pair Pairing (chooseThread (ASM) <= Kernel_C.chooseThread (C))
  (function pairing 13 of 282)
 .. built problem, finding proof
Decided to case split at (24, 'ASM')
  (in problem)
Now doing proof search in true case (24 visited) in problem.
Now doing proof search in false case (24 not visited) in problem.
ProofNode ('CaseSplit', (24, 'ASM'), (ProofNode ('Restr', (24, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (24, ('Number', (0, 1))), (ProofNode ('Restr', (10, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 24 is visited
Step 2: case in (1) where 24 is visited
  Prove the number of visits to 24 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 24 is not visited
  Prove the number of visits to 24 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 10 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (chooseThread (ASM) <= Kernel_C.chooseThread (C)), time taken: 10.57s
Testing Function pair Pairing (replyFromKernel_error (ASM) <= Kernel_C.replyFromKernel_error (C))
  (function pairing 14 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (replyFromKernel_error (ASM) <= Kernel_C.replyFromKernel_error (C)), time taken: 4.68s
Testing Function pair Pairing (strlcat (ASM) <= Kernel_C.strlcat (C))
  (function pairing 15 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [47, 29]
  (in problem)
Now doing proof search in 47 init case in problem.
Discovered a loop relation for split points [94, 5]
  (in 47 init case in problem)
Now doing proof search in 94 init case in 47 init case in problem.
Now doing proof search in 94 loop case in 47 init case in problem.
Now doing proof search in 47 loop case in problem.
Discovered a loop relation for split points [94, 5]
  (in 47 loop case in problem)
Now doing proof search in 94 init case in 47 loop case in problem.
Now doing proof search in 94 loop case in 47 loop case in problem.
ProofNode ('Split', ((47, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r3')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r2')])])]), (29, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#24#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [], 2, 1), (ProofNode ('Restr', (47, ('Number', (0, 3))), (ProofNode ('Restr', (29, ('Number', (0, 3))), (ProofNode ('Split', ((94, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r0')])])]), (5, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (94, ('Number', (0, 3))), (ProofNode ('Restr', (5, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (94, ('Offset', (0, 3))), (ProofNode ('Restr', (5, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (47, ('Offset', (0, 3))), (ProofNode ('Restr', (29, ('Offset', (0, 3))), (ProofNode ('Split', ((94, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r0')])])]), (5, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (94, ('Number', (0, 3))), (ProofNode ('Restr', (5, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (94, ('Offset', (0, 3))), (ProofNode ('Restr', (5, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 47 related to visits to 29
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 47)
      ((Word32) ('r4')) (@ addr 47)
      ((Word32) ('r8')) (@ addr 47)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 47)
      ((Word32) ('r13')) (@ addr 47)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 1)))) (@ addr 47)
      ((Word32) ('r9')) (@ addr 47)
      ((Word32) ('ret')) (@ addr 47)
      ((Word32) ('r2')) (@ addr 47)
      ((Word32) ('r11')) (@ addr 47)
      ((Word32) ('r1')) (@ addr 47)
      ((Word32) ('r10')) (@ addr 47)
      ((Mem) ('mem')) (@ addr 47)
      ((Word32) ('r5')) (@ addr 47)
      ((Word32) ('r6')) (@ addr 47)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 47)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r2')), ((Word32) ('r3')))))) (@ addr 47)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r3')), ((Word32) ('r2')))))) (@ addr 47)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 29)
      ((Word32) ('size___unsigned_long#v')) (@ addr 29)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 29)
      ((Word32) ('src___ptr_to_char#v')) (@ addr 29)
      ((Word32) (('loop#24#count' + ((0 - '#seq-visits') * 1)))) (@ addr 29)
      ((Mem) ('Mem')) (@ addr 29)
      ((Word32[50]) ('GhostAssertions')) (@ addr 29)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 47 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 29 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove visits to 94 related to visits to 5
    with equalities
      ((Mem) ('mem')) (@ addr 94)
      = ((Mem) ('Mem')) (@ addr 5)
    and with invariants
      ((Word32) ('r4')) (@ addr 94)
      ((Word32) ('r8')) (@ addr 94)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 94)
      ((Word32) ('r13')) (@ addr 94)
      ((Word32) ('r5')) (@ addr 94)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 94)
      ((Word32) ('r9')) (@ addr 94)
      ((Word32) ('ret')) (@ addr 94)
      ((Word32) ('r2')) (@ addr 94)
      ((Word32) ('r11')) (@ addr 94)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 94)
      ((Word32) ('r10')) (@ addr 94)
      ((Bool) (ROData('mem'))) (@ addr 94)
      ((Word32) ('r6')) (@ addr 94)
      ((Word32) ('r7')) (@ addr 94)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 94)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r2')), ((Word32) ('r0')))))) (@ addr 94)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 5)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 5)
      ((Word32) ('size___unsigned_long#v')) (@ addr 5)
      ((Word32) (('src___ptr_to_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 5)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 5)
      ((Word32[50]) ('GhostAssertions')) (@ addr 5)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 94 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 5 is in {0 ..< 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 94 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 5 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 47 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 29 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 94 related to visits to 5
    with equalities
      ((Mem) ('mem')) (@ addr 94)
      = ((Mem) ('Mem')) (@ addr 5)
    and with invariants
      ((Word32) ('r4')) (@ addr 94)
      ((Word32) ('r8')) (@ addr 94)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 94)
      ((Word32) ('r13')) (@ addr 94)
      ((Word32) ('r5')) (@ addr 94)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 94)
      ((Word32) ('r9')) (@ addr 94)
      ((Word32) ('ret')) (@ addr 94)
      ((Word32) ('r2')) (@ addr 94)
      ((Word32) ('r11')) (@ addr 94)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 94)
      ((Word32) ('r10')) (@ addr 94)
      ((Bool) (ROData('mem'))) (@ addr 94)
      ((Word32) ('r6')) (@ addr 94)
      ((Word32) ('r7')) (@ addr 94)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 94)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r2')), ((Word32) ('r0')))))) (@ addr 94)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 5)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 5)
      ((Word32) ('size___unsigned_long#v')) (@ addr 5)
      ((Word32) (('src___ptr_to_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 5)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 5)
      ((Word32[50]) ('GhostAssertions')) (@ addr 5)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 94 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 5 is in {0 ..< 3}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 94 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 5 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (strlcat (ASM) <= Kernel_C.strlcat (C)), time taken: 527.74s
Testing Function pair Pairing (invokeTCB_Resume (ASM) <= Kernel_C.invokeTCB_Resume (C))
  (function pairing 16 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeTCB_Resume (ASM) <= Kernel_C.invokeTCB_Resume (C)), time taken: 0.47s
Testing Function pair Pairing (create_idle_thread (ASM) <= Kernel_C.create_idle_thread (C))
  (function pairing 17 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_idle_thread (ASM) <= Kernel_C.create_idle_thread (C)), time taken: 0.71s
Testing Function pair Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))
  (function pairing 18 of 282)
Aborting Problem (Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))): underspecified asm_instruction'.word_0xeef00a10__\nmov_%0,_r0________\n
Result ProblemAbort for pair Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C)), time taken: 0.00s
Testing Function pair Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C))
  (function pairing 19 of 282)
 .. built problem, finding proof
Decided to case split at (72, 'ASM')
  (in problem)
Now doing proof search in true case (72 visited) in problem.
Now doing proof search in false case (72 not visited) in problem.
Decided to case split at (129, 'ASM')
  (in false case (72 not visited) in problem)
Now doing proof search in true case (129 visited) in false case (72 not visited) in problem.
Now doing proof search in false case (129 not visited) in false case (72 not visited) in problem.
Decided to case split at (74, 'ASM')
  (in false case (129 not visited) in false case (72 not visited) in problem)
Now doing proof search in true case (74 visited) in false case (129 not visited) in false case (72 not visited) in problem.
Now doing proof search in false case (74 not visited) in false case (129 not visited) in false case (72 not visited) in problem.
ProofNode ('CaseSplit', (72, 'ASM'), (ProofNode ('Restr', (72, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (72, ('Number', (0, 1))), (ProofNode ('Restr', (17, ('Number', (0, 1))), (ProofNode ('CaseSplit', (129, 'ASM'), (ProofNode ('Restr', (129, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (129, ('Number', (0, 1))), (ProofNode ('CaseSplit', (74, 'ASM'), (ProofNode ('Restr', (74, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (74, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)))),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 72 is visited
Step 2: case in (1) where 72 is visited
  Prove the number of visits to 72 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 72 is not visited
  Prove the number of visits to 72 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 17 is in {0 ..< 1}
    .. proven.
Step 6: 
  case split on whether 129 is visited
Step 7: case in (6) where 129 is visited
  Prove the number of visits to 129 is in {1 ..< 2}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Step 9: case in (6) where 129 is not visited
  Prove the number of visits to 129 is in {0 ..< 1}
    .. proven.
Step 10: 
  case split on whether 74 is visited
Step 11: case in (10) where 74 is visited
  Prove the number of visits to 74 is in {1 ..< 2}
    .. proven.
Step 12: 
  prove all verification conditions
    .. proven.
Step 13: case in (10) where 74 is not visited
  Prove the number of visits to 74 is in {0 ..< 1}
    .. proven.
Step 14: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C)), time taken: 108.90s
Testing Function pair Pairing (doNormalTransfer (ASM) <= Kernel_C.doNormalTransfer (C))
  (function pairing 20 of 282)
 .. built problem, finding proof
Discovered that points [280 (loop head)] can be bounded
  (in problem)
Discovered that points [207 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (280, ('Number', (0, 5))), (ProofNode ('Restr', (207, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 280 is in {0 ..< 5}
    .. proven.
Step 2: 
  Prove the number of visits to 207 is in {0 ..< 4}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (doNormalTransfer (ASM) <= Kernel_C.doNormalTransfer (C)), time taken: 446.06s
Testing Function pair Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C))
  (function pairing 21 of 282)
 .. built problem, finding proof
Decided to case split at (76, 'ASM')
  (in problem)
Now doing proof search in true case (76 visited) in problem.
Now doing proof search in false case (76 not visited) in problem.
Decided to case split at (71, 'ASM')
  (in false case (76 not visited) in problem)
Now doing proof search in true case (71 visited) in false case (76 not visited) in problem.
Now doing proof search in false case (71 not visited) in false case (76 not visited) in problem.
ProofNode ('CaseSplit', (76, 'ASM'), (ProofNode ('Restr', (76, ('Number', (1, 2))), (ProofNode ('Restr', (12, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (76, ('Number', (0, 1))), (ProofNode ('Restr', (12, ('Number', (0, 1))), (ProofNode ('CaseSplit', (71, 'ASM'), (ProofNode ('Restr', (71, ('Number', (1, 2))), (ProofNode ('Restr', (20, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (71, ('Number', (0, 1))), (ProofNode ('Restr', (20, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 76 is visited
Step 2: case in (1) where 76 is visited
  Prove the number of visits to 76 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 12 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. failed to prove this.
      (failure kind: 'sat')
Result False for pair Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C)), time taken: 11.51s
Testing Function pair Pairing (create_bi_frame_cap (ASM) <= Kernel_C.create_bi_frame_cap (C))
  (function pairing 22 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_bi_frame_cap (ASM) <= Kernel_C.create_bi_frame_cap (C)), time taken: 10.26s
Testing Function pair Pairing (Arch_sameObjectAs (ASM) <= Kernel_C.Arch_sameObjectAs (C))
  (function pairing 23 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_sameObjectAs (ASM) <= Kernel_C.Arch_sameObjectAs (C)), time taken: 3.72s
Testing Function pair Pairing (memcpy (ASM) <= Kernel_C.memcpy (C))
  (function pairing 24 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [17, 13]
  (in problem)
Now doing proof search in 17 init case in problem.
Now doing proof search in 17 loop case in problem.
ProofNode ('Split', ((17, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (13, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'q___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'p___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'ptr_dst___ptr_to_void#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (17, ('Number', (0, 3))), (ProofNode ('Restr', (13, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (17, ('Offset', (0, 3))), (ProofNode ('Restr', (13, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 17 related to visits to 13
    with equalities
      ((Mem) ('mem')) (@ addr 17)
      = ((Mem) ('Mem')) (@ addr 13)
    and with invariants
      ((Word32) ('r7')) (@ addr 17)
      ((Word32) ('r4')) (@ addr 17)
      ((Word32) ('r8')) (@ addr 17)
      ((Word32) ('r14')) (@ addr 17)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 17)
      ((Word32) ('r5')) (@ addr 17)
      ((Word32) ('r0')) (@ addr 17)
      ((Word32) ('r9')) (@ addr 17)
      ((Word32) ('ret')) (@ addr 17)
      ((Word32) ('r2')) (@ addr 17)
      ((Word32) ('r11')) (@ addr 17)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 17)
      ((Word32) ('r13')) (@ addr 17)
      ((Word32) ('r10')) (@ addr 17)
      ((Bool) (ROData('mem'))) (@ addr 17)
      ((Word32) ('r6')) (@ addr 17)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 17)
      ((Word32) (('q___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
      ((Word32) (('n___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 13)
      ((Word32) (('p___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
      ((Word32) ('ptr_dst___ptr_to_void#v')) (@ addr 13)
      ((Word32[50]) ('GhostAssertions')) (@ addr 13)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 17 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 13 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 17 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 13 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (memcpy (ASM) <= Kernel_C.memcpy (C)), time taken: 33.15s
Testing Function pair Pairing (cteSwap (ASM) <= Kernel_C.cteSwap (C))
  (function pairing 25 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cteSwap (ASM) <= Kernel_C.cteSwap (C)), time taken: 11.97s
Testing Function pair Pairing (cteMove (ASM) <= Kernel_C.cteMove (C))
  (function pairing 26 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cteMove (ASM) <= Kernel_C.cteMove (C)), time taken: 6.36s
Testing Function pair Pairing (getReceiveSlots (ASM) <= Kernel_C.getReceiveSlots (C))
  (function pairing 27 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (getReceiveSlots (ASM) <= Kernel_C.getReceiveSlots (C)), time taken: 10.93s
Testing Function pair Pairing (invokeIRQHandler_SetIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_SetIRQHandler (C))
  (function pairing 28 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeIRQHandler_SetIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_SetIRQHandler (C)), time taken: 1.56s
Testing Function pair Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C))
  (function pairing 29 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C)), time taken: 17.26s
Testing Function pair Pairing (init_core_state (ASM) <= Kernel_C.init_core_state (C))
  (function pairing 30 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (init_core_state (ASM) <= Kernel_C.init_core_state (C)), time taken: 0.29s
Testing Function pair Pairing (handleUnknownSyscall (ASM) <= Kernel_C.handleUnknownSyscall (C))
  (function pairing 31 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleUnknownSyscall (ASM) <= Kernel_C.handleUnknownSyscall (C)), time taken: 1.21s
Testing Function pair Pairing (invokeTCB_NotificationControl (ASM) <= Kernel_C.invokeTCB_NotificationControl (C))
  (function pairing 32 of 282)
 .. built problem, finding proof
Decided to case split at (9, 'ASM')
  (in problem)
Now doing proof search in true case (9 visited) in problem.
Now doing proof search in false case (9 not visited) in problem.
ProofNode ('CaseSplit', (9, 'ASM'), (ProofNode ('Restr', (9, ('Number', (1, 2))), (ProofNode ('Restr', (4, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (9, ('Number', (0, 1))), (ProofNode ('Restr', (4, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 9 is visited
Step 2: case in (1) where 9 is visited
  Prove the number of visits to 9 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 4 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 9 is not visited
  Prove the number of visits to 9 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 4 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeTCB_NotificationControl (ASM) <= Kernel_C.invokeTCB_NotificationControl (C)), time taken: 2.43s
Testing Function pair Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C))
  (function pairing 33 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C)), time taken: 43.13s
Testing Function pair Pairing (write_slot (ASM) <= Kernel_C.write_slot (C))
  (function pairing 34 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (write_slot (ASM) <= Kernel_C.write_slot (C)), time taken: 3.84s
Testing Function pair Pairing (cteRevoke (ASM) <= Kernel_C.cteRevoke (C))
  (function pairing 35 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [50, 23]
  (in problem)
Now doing proof search in 50 init case in problem.
Now doing proof search in 50 loop case in problem.
ProofNode ('Split', ((50, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'nextPtr___ptr_to_struct_cte_C#v'))], 2, 1), (ProofNode ('Restr', (50, ('Number', (0, 3))), (ProofNode ('Restr', (23, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (50, ('Offset', (0, 3))), (ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 50 related to visits to 23
    with equalities
      ((Mem) ('mem')) (@ addr 50)
      = ((Mem) ('Mem')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 50)
      = ((Word32) ('nextPtr___ptr_to_struct_cte_C#v')) (@ addr 23)
    and with invariants
      ((Word32) ('r8')) (@ addr 50)
      ((Word32) ('r5')) (@ addr 50)
      ((Word32) ('r9')) (@ addr 50)
      ((Word32) ('ret')) (@ addr 50)
      ((Word32) ('r11')) (@ addr 50)
      ((Word32) ('r13')) (@ addr 50)
      ((Word32) ('r10')) (@ addr 50)
      ((Bool) (ROData('mem'))) (@ addr 50)
      ((Word32) ('r6')) (@ addr 50)
      ((Word32) ('r7')) (@ addr 50)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 50)
      ((Word32) ('slot___ptr_to_struct_cte_C#v')) (@ addr 23)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 23)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 50 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 23 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 50 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 23 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cteRevoke (ASM) <= Kernel_C.cteRevoke (C)), time taken: 69.02s
Testing Function pair Pairing (decodeSetPriority (ASM) <= Kernel_C.decodeSetPriority (C))
  (function pairing 36 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeSetPriority (ASM) <= Kernel_C.decodeSetPriority (C)), time taken: 11.13s
Testing Function pair Pairing (setExtraBadge (ASM) <= Kernel_C.setExtraBadge (C))
  (function pairing 37 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setExtraBadge (ASM) <= Kernel_C.setExtraBadge (C)), time taken: 0.40s
Testing Function pair Pairing (armv_init_user_access (ASM) <= Kernel_C.armv_init_user_access (C))
  (function pairing 38 of 282)
 .. built problem, finding proof
Discovered that points [29 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (29, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 29 is in {0 ..< 2}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (armv_init_user_access (ASM) <= Kernel_C.armv_init_user_access (C)), time taken: 0.99s
Testing Function pair Pairing (activate_global_pd (ASM) <= Kernel_C.activate_global_pd (C))
  (function pairing 39 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (activate_global_pd (ASM) <= Kernel_C.activate_global_pd (C)), time taken: 2.72s
Testing Function pair Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C))
  (function pairing 40 of 282)
 .. built problem, finding proof
Decided to case split at (57, 'ASM')
  (in problem)
Now doing proof search in true case (57 visited) in problem.
Discovered that points [454 (loop head)] can be bounded
  (in true case (57 visited) in problem)
Discovered that points [443 (loop head)] can be bounded
  (in true case (57 visited) in problem)
Discovered that points [381 (loop head)] can be bounded
  (in true case (57 visited) in problem)
Discovered that points [370 (loop head)] can be bounded
  (in true case (57 visited) in problem)
Now doing proof search in false case (57 not visited) in problem.
Decided to case split at (75, 'ASM')
  (in false case (57 not visited) in problem)
Now doing proof search in true case (75 visited) in false case (57 not visited) in problem.
Discovered that points [454 (loop head)] can be bounded
  (in true case (75 visited) in false case (57 not visited) in problem)
Discovered that points [443 (loop head)] can be bounded
  (in true case (75 visited) in false case (57 not visited) in problem)
Discovered that points [381 (loop head)] can be bounded
  (in true case (75 visited) in false case (57 not visited) in problem)
Discovered that points [370 (loop head)] can be bounded
  (in true case (75 visited) in false case (57 not visited) in problem)
Now doing proof search in false case (75 not visited) in false case (57 not visited) in problem.
Decided to case split at (61, 'ASM')
  (in false case (75 not visited) in false case (57 not visited) in problem)
Now doing proof search in true case (61 visited) in false case (75 not visited) in false case (57 not visited) in problem.
Discovered that points [454 (loop head)] can be bounded
  (in true case (61 visited) in false case (75 not visited) in false case (57 not visited) in problem)
Discovered that points [443 (loop head)] can be bounded
  (in true case (61 visited) in false case (75 not visited) in false case (57 not visited) in problem)
Discovered that points [381 (loop head)] can be bounded
  (in true case (61 visited) in false case (75 not visited) in false case (57 not visited) in problem)
Discovered that points [370 (loop head)] can be bounded
  (in true case (61 visited) in false case (75 not visited) in false case (57 not visited) in problem)
Now doing proof search in false case (61 not visited) in false case (75 not visited) in false case (57 not visited) in problem.
Discovered that points [454 (loop head)] can be bounded
  (in false case (61 not visited) in false case (75 not visited) in false case (57 not visited) in problem)
Discovered that points [443 (loop head)] can be bounded
  (in false case (61 not visited) in false case (75 not visited) in false case (57 not visited) in problem)
Discovered that points [381 (loop head)] can be bounded
  (in false case (61 not visited) in false case (75 not visited) in false case (57 not visited) in problem)

**************************************
FATAL ERROR
Broken pipe

**************************************


**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [134, 375]
  (in false case (61 not visited) in false case (75 not visited) in false case (57 not visited) in problem)
Now doing proof search in 134 init case in false case (61 not visited) in false case (75 not visited) in false case (57 not visited) in problem.
Now doing proof search in 134 loop case in false case (61 not visited) in false case (75 not visited) in false case (57 not visited) in problem.
ProofNode ('CaseSplit', (57, 'ASM'), (ProofNode ('Restr', (57, ('Number', (1, 2))), (ProofNode ('Restr', (454, ('Number', (0, 5))), (ProofNode ('Restr', (443, ('Number', (0, 2))), (ProofNode ('Restr', (381, ('Number', (0, 1))), (ProofNode ('Restr', (370, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (57, ('Number', (0, 1))), (ProofNode ('Restr', (35, ('Number', (0, 1))), (ProofNode ('CaseSplit', (75, 'ASM'), (ProofNode ('Restr', (75, ('Number', (1, 2))), (ProofNode ('Restr', (454, ('Number', (0, 1))), (ProofNode ('Restr', (443, ('Number', (0, 1))), (ProofNode ('Restr', (381, ('Number', (0, 1))), (ProofNode ('Restr', (370, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (75, ('Number', (0, 1))), (ProofNode ('CaseSplit', (61, 'ASM'), (ProofNode ('Restr', (61, ('Number', (1, 2))), (ProofNode ('Restr', (454, ('Number', (0, 1))), (ProofNode ('Restr', (443, ('Number', (0, 1))), (ProofNode ('Restr', (381, ('Number', (0, 1))), (ProofNode ('Restr', (370, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (61, ('Number', (0, 1))), (ProofNode ('Restr', (42, ('Number', (0, 1))), (ProofNode ('Restr', (454, ('Number', (0, 1))), (ProofNode ('Restr', (443, ('Number', (0, 1))), (ProofNode ('Restr', (381, ('Number', (0, 6))), (ProofNode ('Split', ((134, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (375, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'receiver___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'receiveIPCBuffer___ptr_to_unsigned_long#v.6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'length___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'receiveIPCBuffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'sender___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'sender___ptr_to_struct_tcb_C#v.1'), Expr ('Var', Type ('Word', 32), name = 'id___anonymous_enum#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.6'))], 2, 1), (ProofNode ('Restr', (134, ('Number', (0, 1))), (ProofNode ('Restr', (375, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (134, ('Offset', (0, 3))), (ProofNode ('Restr', (375, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)),)))),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 57 is visited
Step 2: case in (1) where 57 is visited
  Prove the number of visits to 57 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 454 is in {0 ..< 5}
    .. proven.
Step 4: 
  Prove the number of visits to 443 is in {0 ..< 2}
    .. proven.
Step 5: 
  Prove the number of visits to 381 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 370 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (1) where 57 is not visited
  Prove the number of visits to 57 is in {0 ..< 1}
    .. proven.
Step 9: 
  Prove the number of visits to 35 is in {0 ..< 1}
    .. proven.
Step 10: 
  case split on whether 75 is visited
Step 11: case in (10) where 75 is visited
  Prove the number of visits to 75 is in {1 ..< 2}
    .. proven.
Step 12: 
  Prove the number of visits to 454 is in {0 ..< 1}
    .. proven.
Step 13: 
  Prove the number of visits to 443 is in {0 ..< 1}
    .. proven.
Step 14: 
  Prove the number of visits to 381 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 370 is in {0 ..< 1}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (10) where 75 is not visited
  Prove the number of visits to 75 is in {0 ..< 1}
    .. proven.
Step 18: 
  case split on whether 61 is visited
Step 19: case in (18) where 61 is visited
  Prove the number of visits to 61 is in {1 ..< 2}
    .. proven.
Step 20: 
  Prove the number of visits to 454 is in {0 ..< 1}
    .. proven.
Step 21: 
  Prove the number of visits to 443 is in {0 ..< 1}
    .. proven.
Step 22: 
  Prove the number of visits to 381 is in {0 ..< 1}
    .. proven.
Step 23: 
  Prove the number of visits to 370 is in {0 ..< 1}
    .. proven.
Step 24: 
  prove all verification conditions
    .. proven.
Step 25: case in (18) where 61 is not visited
  Prove the number of visits to 61 is in {0 ..< 1}
    .. proven.
Step 26: 
  Prove the number of visits to 42 is in {0 ..< 1}
    .. proven.
Step 27: 
  Prove the number of visits to 454 is in {0 ..< 1}
    .. proven.
Step 28: 
  Prove the number of visits to 443 is in {0 ..< 1}
    .. proven.
Step 29: 
  Prove the number of visits to 381 is in {0 ..< 6}
    .. proven.
Step 30: 
  prove visits to 134 related to visits to 375
    with equalities
      ((Mem) ('mem')) (@ addr 134)
      = ((Mem) ('Mem.6')) (@ addr 375)
    and with invariants
      ((Word32) ('r7')) (@ addr 134)
      ((Word32) ('r8')) (@ addr 134)
      ((Word32) ('r14')) (@ addr 134)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 134)
      ((Word32) ('r13')) (@ addr 134)
      ((Word32) ('r5')) (@ addr 134)
      ((Word32) ('r0')) (@ addr 134)
      ((Word32) ('r9')) (@ addr 134)
      ((Word32) ('ret')) (@ addr 134)
      ((Word32) ('r2')) (@ addr 134)
      ((Word32) ('r11')) (@ addr 134)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 134)
      ((Word32) ('r10')) (@ addr 134)
      ((Bool) (ROData('mem'))) (@ addr 134)
      ((Word32) ('r6')) (@ addr 134)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 134)
      ((Word32) ('receiver___ptr_to_struct_tcb_C#v')) (@ addr 375)
      ((Word32) ('receiveIPCBuffer___ptr_to_unsigned_long#v.6')) (@ addr 375)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 375)
      ((Word32) ('length___unsigned_long#v')) (@ addr 375)
      ((Word32) ('receiveIPCBuffer___ptr_to_unsigned_long#v')) (@ addr 375)
      ((Word32) ('sender___ptr_to_struct_tcb_C#v')) (@ addr 375)
      ((Word32[50]) ('GhostAssertions.6')) (@ addr 375)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 375)
      ((Word32) ('sender___ptr_to_struct_tcb_C#v.1')) (@ addr 375)
      ((Word32) ('id___anonymous_enum#v')) (@ addr 375)
    .. proven.
Step 31: case in (30) where the length of the sequence < 2
  Prove the number of visits to 134 is in {0 ..< 1}
    .. proven.
Step 32: 
  Prove the number of visits to 375 is in {0 ..< 2}
    .. proven.
Step 33: 
  prove all verification conditions
    .. proven.
Step 34: case in (30) where the length of the sequence is i + 2
  Prove the number of visits to 134 is in {i + 0 ..< i + 3}
    .. proven.
Step 35: 
  Prove the number of visits to 375 is in {i + 0 ..< i + 3}
    .. proven.
Step 36: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C)), time taken: 514.82s
Testing Function pair Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C))
  (function pairing 41 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [56, 36]
  (in problem)
Now doing proof search in 56 init case in problem.
Discovered that points [13 (loop head)] can be bounded
  (in 56 init case in problem)
Discovered that points [160 (loop head)] can be bounded
  (in 56 init case in problem)
Now doing proof search in 56 loop case in problem.

**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [101, 195]
  (in 56 loop case in problem)
Now doing proof search in 101 init case in 56 loop case in problem.
Now doing proof search in 101 loop case in 56 loop case in problem.
ProofNode ('Split', ((56, (1, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Var', Type ('Word', 32), name = 'r12')]), (36, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'buffer___ptr_to_unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#26#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'resumeTarget___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'archInfo___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (56, ('Number', (0, 4))), (ProofNode ('Restr', (36, ('Number', (0, 4))), (ProofNode ('Restr', (13, ('Number', (0, 2))), (ProofNode ('Restr', (160, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (56, ('Offset', (0, 3))), (ProofNode ('Restr', (36, ('Offset', (0, 3))), (ProofNode ('Split', ((101, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (195, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'buffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'archInfo___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#13#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'resumeTarget___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1')), (Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'w___unsigned_long#v')), (Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'reg___unsigned_long#v'))], 2, 1), (ProofNode ('Restr', (101, ('Number', (0, 3))), (ProofNode ('Restr', (195, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (101, ('Offset', (0, 3))), (ProofNode ('Restr', (195, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits [2, 3, 4 ...] to 56 related to visits [2, 3, 4 ...] to 36
    with equalities
      ((Mem) ('mem')) (@ addr 56)
      = ((Mem) ('Mem')) (@ addr 36)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 4)))) (@ addr 56)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 56)
      ((Word32) ('r13')) (@ addr 56)
      ((Word32) ('r9')) (@ addr 56)
      ((Word32) ('r6')) (@ addr 56)
      ((Word32) (('r7' + ((0 - '#seq-visits') * 4)))) (@ addr 56)
      ((Word32) ('r8')) (@ addr 56)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 56)
      ((Word32) ('r11')) (@ addr 56)
      ((Word32) ('r5')) (@ addr 56)
      ((Word32) ('ret')) (@ addr 56)
      ((Word32) ('r1')) (@ addr 56)
      ((Word32) ('r2')) (@ addr 56)
      ((Bool) (ROData('mem'))) (@ addr 56)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 56)
      ((Word32) ('r12')) (@ addr 56)
      ((Word32) ('buffer___ptr_to_unsigned_long#v')) (@ addr 36)
      ((Word32) (('loop#26#count' + ((0 - '#seq-visits') * 1)))) (@ addr 36)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 36)
      ((Word32) ('resumeTarget___unsigned_long#v')) (@ addr 36)
      ((Word32) ('n___unsigned_long#v')) (@ addr 36)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 36)
      ((Word32) ('archInfo___unsigned_long#v')) (@ addr 36)
      ((Word32[50]) ('GhostAssertions')) (@ addr 36)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 56 is in {0 ..< 4}
    .. proven.
Step 3: 
  Prove the number of visits to 36 is in {0 ..< 4}
    .. proven.
Step 4: 
  Prove the number of visits to 13 is in {0 ..< 2}
    .. proven.
Step 5: 
  Prove the number of visits to 160 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Step 7: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 56 is in {i + 0 ..< i + 3}
    .. proven.
Step 8: 
  Prove the number of visits to 36 is in {i + 0 ..< i + 3}
    .. proven.
Step 9: 
  prove visits to 101 related to visits to 195
    with equalities
      ((Mem) ('mem')) (@ addr 101)
      = ((Mem) ('Mem.1')) (@ addr 195)
      ((Word32) ('r12')) (@ addr 101)
      = ((Word32) ('w___unsigned_long#v')) (@ addr 195)
      ((Word32) ('r14')) (@ addr 101)
      = ((Word32) ('reg___unsigned_long#v')) (@ addr 195)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 4)))) (@ addr 101)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 101)
      ((Word32) ('r13')) (@ addr 101)
      ((Word32) ('r6')) (@ addr 101)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 101)
      ((Word32) ('r1')) (@ addr 101)
      ((Word32) ('r5')) (@ addr 101)
      ((Word32) ('r7')) (@ addr 101)
      ((Word32) ('ret')) (@ addr 101)
      ((Word32) ('r11')) (@ addr 101)
      ((Word32) ('r2')) (@ addr 101)
      ((Bool) (ROData('mem'))) (@ addr 101)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 101)
      ((Word32) ('buffer___ptr_to_unsigned_long#v')) (@ addr 195)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 195)
      ((Word32) ('archInfo___unsigned_long#v')) (@ addr 195)
      ((Word32) (('loop#13#count' + ((0 - '#seq-visits') * 1)))) (@ addr 195)
      ((Word32) ('n___unsigned_long#v')) (@ addr 195)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 195)
      ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 195)
      ((Word32) ('resumeTarget___unsigned_long#v')) (@ addr 195)
      ((Word32[50]) ('GhostAssertions.1')) (@ addr 195)
    .. proven.
Step 10: case in (9) where the length of the sequence < 2
  Prove the number of visits to 101 is in {0 ..< 3}
    .. proven.
Step 11: 
  Prove the number of visits to 195 is in {0 ..< 3}
    .. proven.
Step 12: 
  prove all verification conditions
    .. proven.
Step 13: case in (9) where the length of the sequence is j + 2
  Prove the number of visits to 101 is in {j + 0 ..< j + 3}
    .. proven.
Step 14: 
  Prove the number of visits to 195 is in {j + 0 ..< j + 3}
    .. proven.
Step 15: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C)), time taken: 985.40s
Testing Function pair Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C))
  (function pairing 42 of 282)
Skipping Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C)), underspecified C
Testing Function pair Pairing (dist_init (ASM) <= Kernel_C.dist_init (C))
  (function pairing 43 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [63, 51]
  (in problem)
Now doing proof search in 63 init case in problem.
Discovered a loop relation for split points [69, 42]
  (in 63 init case in problem)
Now doing proof search in 69 init case in 63 init case in problem.
Discovered a loop relation for split points [137, 213]
  (in 69 init case in 63 init case in problem)
Now doing proof search in 137 init case in 69 init case in 63 init case in problem.
Discovered a loop relation for split points [81, 28]
  (in 137 init case in 69 init case in 63 init case in problem)
Now doing proof search in 81 init case in 137 init case in 69 init case in 63 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 81 init case in 137 init case in 69 init case in 63 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 81 init case in 137 init case in 69 init case in 63 init case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 81 init case in 137 init case in 69 init case in 63 init case in problem)
Discovered that points [182 (loop head)] can be bounded
  (in 81 init case in 137 init case in 69 init case in 63 init case in problem)
Now doing proof search in 81 loop case in 137 init case in 69 init case in 63 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 81 loop case in 137 init case in 69 init case in 63 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 81 loop case in 137 init case in 69 init case in 63 init case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 81 loop case in 137 init case in 69 init case in 63 init case in problem)
Discovered that points [182 (loop head)] can be bounded
  (in 81 loop case in 137 init case in 69 init case in 63 init case in problem)
Now doing proof search in 137 loop case in 69 init case in 63 init case in problem.
Discovered a loop relation for split points [81, 28]
  (in 137 loop case in 69 init case in 63 init case in problem)
Now doing proof search in 81 init case in 137 loop case in 69 init case in 63 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 81 init case in 137 loop case in 69 init case in 63 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 81 init case in 137 loop case in 69 init case in 63 init case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 81 init case in 137 loop case in 69 init case in 63 init case in problem)
Discovered that points [182 (loop head)] can be bounded
  (in 81 init case in 137 loop case in 69 init case in 63 init case in problem)
Now doing proof search in 81 loop case in 137 loop case in 69 init case in 63 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 81 loop case in 137 loop case in 69 init case in 63 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 81 loop case in 137 loop case in 69 init case in 63 init case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 81 loop case in 137 loop case in 69 init case in 63 init case in problem)
Discovered that points [182 (loop head)] can be bounded
  (in 81 loop case in 137 loop case in 69 init case in 63 init case in problem)
Now doing proof search in 69 loop case in 63 init case in problem.
Discovered a loop relation for split points [137, 213]
  (in 69 loop case in 63 init case in problem)
Now doing proof search in 137 init case in 69 loop case in 63 init case in problem.
Discovered a loop relation for split points [81, 28]
  (in 137 init case in 69 loop case in 63 init case in problem)
Now doing proof search in 81 init case in 137 init case in 69 loop case in 63 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 81 init case in 137 init case in 69 loop case in 63 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 81 init case in 137 init case in 69 loop case in 63 init case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 81 init case in 137 init case in 69 loop case in 63 init case in problem)
Discovered that points [182 (loop head)] can be bounded
  (in 81 init case in 137 init case in 69 loop case in 63 init case in problem)
Now doing proof search in 81 loop case in 137 init case in 69 loop case in 63 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 81 loop case in 137 init case in 69 loop case in 63 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 81 loop case in 137 init case in 69 loop case in 63 init case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 81 loop case in 137 init case in 69 loop case in 63 init case in problem)
Discovered that points [182 (loop head)] can be bounded
  (in 81 loop case in 137 init case in 69 loop case in 63 init case in problem)
Now doing proof search in 137 loop case in 69 loop case in 63 init case in problem.
Discovered a loop relation for split points [81, 28]
  (in 137 loop case in 69 loop case in 63 init case in problem)
Now doing proof search in 81 init case in 137 loop case in 69 loop case in 63 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 81 init case in 137 loop case in 69 loop case in 63 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 81 init case in 137 loop case in 69 loop case in 63 init case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 81 init case in 137 loop case in 69 loop case in 63 init case in problem)
Discovered that points [182 (loop head)] can be bounded
  (in 81 init case in 137 loop case in 69 loop case in 63 init case in problem)
Now doing proof search in 81 loop case in 137 loop case in 69 loop case in 63 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 81 loop case in 137 loop case in 69 loop case in 63 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 81 loop case in 137 loop case in 69 loop case in 63 init case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 81 loop case in 137 loop case in 69 loop case in 63 init case in problem)
Discovered that points [182 (loop head)] can be bounded
  (in 81 loop case in 137 loop case in 69 loop case in 63 init case in problem)
Now doing proof search in 63 loop case in problem.
Discovered a loop relation for split points [69, 42]
  (in 63 loop case in problem)
Now doing proof search in 69 init case in 63 loop case in problem.
Discovered that points [210 (loop head)] can be bounded
  (in 69 init case in 63 loop case in problem)
Discovered that points [24 (loop head)] can be bounded
  (in 69 init case in 63 loop case in problem)
Discovered that points [16 (loop head)] can be bounded
  (in 69 init case in 63 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 69 init case in 63 loop case in problem)
Discovered that points [137 (loop head)] can be bounded
  (in 69 init case in 63 loop case in problem)
Discovered that points [157 (loop head)] can be bounded
  (in 69 init case in 63 loop case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 69 init case in 63 loop case in problem)
Discovered that points [182 (loop head)] can be bounded
  (in 69 init case in 63 loop case in problem)
Now doing proof search in 69 loop case in 63 loop case in problem.
Discovered a loop relation for split points [137, 213]
  (in 69 loop case in 63 loop case in problem)
Now doing proof search in 137 init case in 69 loop case in 63 loop case in problem.
Discovered a loop relation for split points [81, 28]
  (in 137 init case in 69 loop case in 63 loop case in problem)
Now doing proof search in 81 init case in 137 init case in 69 loop case in 63 loop case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 81 init case in 137 init case in 69 loop case in 63 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 81 init case in 137 init case in 69 loop case in 63 loop case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 81 init case in 137 init case in 69 loop case in 63 loop case in problem)
Discovered that points [182 (loop head)] can be bounded
  (in 81 init case in 137 init case in 69 loop case in 63 loop case in problem)
Now doing proof search in 81 loop case in 137 init case in 69 loop case in 63 loop case in problem.
Discovered a loop relation for split points [86, 20]
  (in 81 loop case in 137 init case in 69 loop case in 63 loop case in problem)
Now doing proof search in 86 init case in 81 loop case in 137 init case in 69 loop case in 63 loop case in problem.
Discovered that points [182 (loop head)] can be bounded
  (in 86 init case in 81 loop case in 137 init case in 69 loop case in 63 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 86 init case in 81 loop case in 137 init case in 69 loop case in 63 loop case in problem)
Now doing proof search in 86 loop case in 81 loop case in 137 init case in 69 loop case in 63 loop case in problem.
Discovered a loop relation for split points [89, 13]
  (in 86 loop case in 81 loop case in 137 init case in 69 loop case in 63 loop case in problem)
Now doing proof search in 89 init case in 86 loop case in 81 loop case in 137 init case in 69 loop case in 63 loop case in problem.
Now doing proof search in 89 loop case in 86 loop case in 81 loop case in 137 init case in 69 loop case in 63 loop case in problem.
Now doing proof search in 137 loop case in 69 loop case in 63 loop case in problem.
Discovered a loop relation for split points [81, 28]
  (in 137 loop case in 69 loop case in 63 loop case in problem)
Now doing proof search in 81 init case in 137 loop case in 69 loop case in 63 loop case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 81 init case in 137 loop case in 69 loop case in 63 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 81 init case in 137 loop case in 69 loop case in 63 loop case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 81 init case in 137 loop case in 69 loop case in 63 loop case in problem)
Discovered that points [182 (loop head)] can be bounded
  (in 81 init case in 137 loop case in 69 loop case in 63 loop case in problem)
Now doing proof search in 81 loop case in 137 loop case in 69 loop case in 63 loop case in problem.
Discovered a loop relation for split points [86, 20]
  (in 81 loop case in 137 loop case in 69 loop case in 63 loop case in problem)
Now doing proof search in 86 init case in 81 loop case in 137 loop case in 69 loop case in 63 loop case in problem.
Discovered that points [182 (loop head)] can be bounded
  (in 86 init case in 81 loop case in 137 loop case in 69 loop case in 63 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 86 init case in 81 loop case in 137 loop case in 69 loop case in 63 loop case in problem)
Now doing proof search in 86 loop case in 81 loop case in 137 loop case in 69 loop case in 63 loop case in problem.
Discovered a loop relation for split points [89, 13]
  (in 86 loop case in 81 loop case in 137 loop case in 69 loop case in 63 loop case in problem)
Now doing proof search in 89 init case in 86 loop case in 81 loop case in 137 loop case in 69 loop case in 63 loop case in problem.
Now doing proof search in 89 loop case in 86 loop case in 81 loop case in 137 loop case in 69 loop case in 63 loop case in problem.
ProofNode ('Split', ((63, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (51, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#44#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (63, ('Number', (0, 3))), (ProofNode ('Restr', (51, ('Number', (0, 3))), (ProofNode ('Split', ((69, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (42, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#33#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (69, ('Number', (0, 1))), (ProofNode ('Restr', (42, ('Number', (0, 1))), (ProofNode ('Split', ((137, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (213, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v.1'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])])]), [], 2, 1), (ProofNode ('Restr', (137, ('Number', (0, 3))), (ProofNode ('Restr', (213, ('Number', (0, 3))), (ProofNode ('Split', ((81, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (81, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (169, ('Number', (0, 1))), (ProofNode ('Restr', (182, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (81, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (16, ('Number', (0, 2))), (ProofNode ('Restr', (5, ('Number', (0, 3))), (ProofNode ('Restr', (169, ('Number', (0, 1))), (ProofNode ('Restr', (182, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)))),)),)), ProofNode ('Restr', (137, ('Offset', (0, 3))), (ProofNode ('Restr', (213, ('Offset', (0, 3))), (ProofNode ('Split', ((81, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (81, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (169, ('Number', (0, 1))), (ProofNode ('Restr', (182, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (81, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (16, ('Number', (0, 2))), (ProofNode ('Restr', (5, ('Number', (0, 3))), (ProofNode ('Restr', (169, ('Number', (0, 1))), (ProofNode ('Restr', (182, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)))),)),)))),)),)), ProofNode ('Restr', (69, ('Offset', (0, 3))), (ProofNode ('Restr', (42, ('Offset', (0, 3))), (ProofNode ('Split', ((137, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (213, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v.1'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])])]), [], 2, 1), (ProofNode ('Restr', (137, ('Number', (0, 3))), (ProofNode ('Restr', (213, ('Number', (0, 3))), (ProofNode ('Split', ((81, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (81, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (169, ('Number', (0, 1))), (ProofNode ('Restr', (182, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (81, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (16, ('Number', (0, 2))), (ProofNode ('Restr', (5, ('Number', (0, 4))), (ProofNode ('Restr', (169, ('Number', (0, 1))), (ProofNode ('Restr', (182, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)))),)),)), ProofNode ('Restr', (137, ('Offset', (0, 3))), (ProofNode ('Restr', (213, ('Offset', (0, 3))), (ProofNode ('Split', ((81, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (81, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (169, ('Number', (0, 1))), (ProofNode ('Restr', (182, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (81, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (16, ('Number', (0, 2))), (ProofNode ('Restr', (5, ('Number', (0, 4))), (ProofNode ('Restr', (169, ('Number', (0, 1))), (ProofNode ('Restr', (182, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)))),)),)))),)),)))),)),)), ProofNode ('Restr', (63, ('Offset', (0, 3))), (ProofNode ('Restr', (51, ('Offset', (0, 3))), (ProofNode ('Split', ((69, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (42, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#33#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (69, ('Number', (0, 1))), (ProofNode ('Restr', (42, ('Number', (0, 1))), (ProofNode ('Restr', (210, ('Number', (0, 1))), (ProofNode ('Restr', (24, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (137, ('Number', (0, 1))), (ProofNode ('Restr', (157, ('Number', (0, 1))), (ProofNode ('Restr', (169, ('Number', (0, 1))), (ProofNode ('Restr', (182, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)),)),)), ProofNode ('Restr', (69, ('Offset', (0, 3))), (ProofNode ('Restr', (42, ('Offset', (0, 3))), (ProofNode ('Split', ((137, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (213, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v.1'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])])]), [], 2, 1), (ProofNode ('Restr', (137, ('Number', (0, 3))), (ProofNode ('Restr', (213, ('Number', (0, 3))), (ProofNode ('Split', ((81, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (81, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (169, ('Number', (0, 1))), (ProofNode ('Restr', (182, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (81, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Split', ((86, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (20, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#15#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (86, ('Number', (0, 3))), (ProofNode ('Restr', (20, ('Number', (0, 3))), (ProofNode ('Restr', (182, ('Number', (0, 5))), (ProofNode ('Restr', (5, ('Number', (0, 6))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (86, ('Offset', (0, 3))), (ProofNode ('Restr', (20, ('Offset', (0, 3))), (ProofNode ('Split', ((89, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (13, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (89, ('Number', (0, 1))), (ProofNode ('Restr', (13, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (89, ('Offset', (0, 3))), (ProofNode ('Restr', (13, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)), ProofNode ('Restr', (137, ('Offset', (0, 3))), (ProofNode ('Restr', (213, ('Offset', (0, 3))), (ProofNode ('Split', ((81, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (81, ('Number', (0, 1))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (169, ('Number', (0, 1))), (ProofNode ('Restr', (182, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (81, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Split', ((86, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (20, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#15#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (86, ('Number', (0, 3))), (ProofNode ('Restr', (20, ('Number', (0, 3))), (ProofNode ('Restr', (182, ('Number', (0, 5))), (ProofNode ('Restr', (5, ('Number', (0, 6))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (86, ('Offset', (0, 3))), (ProofNode ('Restr', (20, ('Offset', (0, 3))), (ProofNode ('Split', ((89, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (13, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (89, ('Number', (0, 1))), (ProofNode ('Restr', (13, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (89, ('Offset', (0, 3))), (ProofNode ('Restr', (13, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 63 related to visits to 51
    with equalities
      ((Mem) ('mem')) (@ addr 63)
      = ((Mem) ('Mem')) (@ addr 51)
    and with invariants
      ((Word32) ('r7')) (@ addr 63)
      ((Word32) ('r4')) (@ addr 63)
      ((Word32) ('r8')) (@ addr 63)
      ((Word32) ('r14')) (@ addr 63)
      ((Word32) ('r5')) (@ addr 63)
      ((Word32) ('r0')) (@ addr 63)
      ((Word32) ('r9')) (@ addr 63)
      ((Word32) ('ret')) (@ addr 63)
      ((Word32) ('r2')) (@ addr 63)
      ((Word32) ('r11')) (@ addr 63)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 63)
      ((Word32) ('r13')) (@ addr 63)
      ((Word32) ('r10')) (@ addr 63)
      ((Bool) (ROData('mem'))) (@ addr 63)
      ((Word32) ('r6')) (@ addr 63)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 63)
      ((Word32) ('nirqs___int#v')) (@ addr 51)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 51)
      ((Word32) (('loop#44#count' + ((0 - '#seq-visits') * 1)))) (@ addr 51)
      ((Word32[50]) ('GhostAssertions')) (@ addr 51)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 63 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 51 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove visits to 69 related to visits to 42
    with equalities
      ((Mem) ('mem')) (@ addr 69)
      = ((Mem) ('Mem')) (@ addr 42)
    and with invariants
      ((Word32) ('r7')) (@ addr 69)
      ((Word32) ('r4')) (@ addr 69)
      ((Word32) ('r8')) (@ addr 69)
      ((Word32) ('r14')) (@ addr 69)
      ((Word32) ('r5')) (@ addr 69)
      ((Word32) ('r0')) (@ addr 69)
      ((Word32) ('r9')) (@ addr 69)
      ((Word32) ('ret')) (@ addr 69)
      ((Word32) ('r2')) (@ addr 69)
      ((Word32) ('r11')) (@ addr 69)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 69)
      ((Word32) ('r12')) (@ addr 69)
      ((Word32) ('r13')) (@ addr 69)
      ((Word32) ('r10')) (@ addr 69)
      ((Bool) (ROData('mem'))) (@ addr 69)
      ((Word32) ('r6')) (@ addr 69)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 69)
      ((Word32) ('nirqs___int#v')) (@ addr 42)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 42)
      ((Word32) (('loop#33#count' + ((0 - '#seq-visits') * 1)))) (@ addr 42)
      ((Word32[50]) ('GhostAssertions')) (@ addr 42)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 69 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 42 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove visits to 137 related to visits to 213
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 137)
      ((Word32) ('r4')) (@ addr 137)
      ((Word32) ('r8')) (@ addr 137)
      ((Word32) ('r14')) (@ addr 137)
      ((Word32) ('r5')) (@ addr 137)
      ((Word32) ('r0')) (@ addr 137)
      ((Word32) ('r9')) (@ addr 137)
      ((Word32) ('ret')) (@ addr 137)
      ((Word32) ('r2')) (@ addr 137)
      ((Word32) ('r11')) (@ addr 137)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 137)
      ((Word32) ('r13')) (@ addr 137)
      ((Word32) ('r10')) (@ addr 137)
      ((Mem) ('mem')) (@ addr 137)
      ((Word32) ('r6')) (@ addr 137)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 137)
      ((Word32) ('nirqs___int#v.1')) (@ addr 213)
      ((Word32) ('nirqs___int#v')) (@ addr 213)
      ((Mem) ('Mem.1')) (@ addr 213)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 213)
      ((Mem) ('Mem')) (@ addr 213)
      ((Word32[50]) ('GhostAssertions')) (@ addr 213)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 213)
    .. proven.
Step 8: case in (7) where the length of the sequence < 2
  Prove the number of visits to 137 is in {0 ..< 3}
    .. proven.
Step 9: 
  Prove the number of visits to 213 is in {0 ..< 3}
    .. proven.
Step 10: 
  prove visits to 81 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 81)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 81)
      ((Word32) ('r4')) (@ addr 81)
      ((Word32) ('r8')) (@ addr 81)
      ((Word32) ('r14')) (@ addr 81)
      ((Word32) ('r3')) (@ addr 81)
      ((Word32) ('r5')) (@ addr 81)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 81)
      ((Word32) ('r9')) (@ addr 81)
      ((Word32) ('ret')) (@ addr 81)
      ((Word32) ('r2')) (@ addr 81)
      ((Word32) ('r11')) (@ addr 81)
      ((Word32) ('r12')) (@ addr 81)
      ((Word32) ('r13')) (@ addr 81)
      ((Word32) ('r10')) (@ addr 81)
      ((Bool) (ROData('mem'))) (@ addr 81)
      ((Word32) ('r6')) (@ addr 81)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 81)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 11: case in (10) where the length of the sequence < 2
  Prove the number of visits to 81 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 13: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 14: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 169 is in {0 ..< 1}
    .. proven.
Step 16: 
  Prove the number of visits to 182 is in {0 ..< 1}
    .. proven.
Step 17: 
  prove all verification conditions
    .. proven.
Step 18: case in (10) where the length of the sequence is a + 2
  Prove the number of visits to 81 is in {a + 0 ..< a + 3}
    .. proven.
Step 19: 
  Prove the number of visits to 28 is in {a + 0 ..< a + 3}
    .. proven.
Step 20: 
  Prove the number of visits to 16 is in {0 ..< 2}
    .. proven.
Step 21: 
  Prove the number of visits to 5 is in {0 ..< 3}
    .. proven.
Step 22: 
  Prove the number of visits to 169 is in {0 ..< 1}
    .. proven.
Step 23: 
  Prove the number of visits to 182 is in {0 ..< 2}
    .. proven.
Step 24: 
  prove all verification conditions
    .. proven.
Step 25: case in (7) where the length of the sequence is k + 2
  Prove the number of visits to 137 is in {k + 0 ..< k + 3}
    .. proven.
Step 26: 
  Prove the number of visits to 213 is in {k + 0 ..< k + 3}
    .. proven.
Step 27: 
  prove visits to 81 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 81)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 81)
      ((Word32) ('r4')) (@ addr 81)
      ((Word32) ('r8')) (@ addr 81)
      ((Word32) ('r14')) (@ addr 81)
      ((Word32) ('r3')) (@ addr 81)
      ((Word32) ('r5')) (@ addr 81)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 81)
      ((Word32) ('r9')) (@ addr 81)
      ((Word32) ('ret')) (@ addr 81)
      ((Word32) ('r2')) (@ addr 81)
      ((Word32) ('r11')) (@ addr 81)
      ((Word32) ('r12')) (@ addr 81)
      ((Word32) ('r13')) (@ addr 81)
      ((Word32) ('r10')) (@ addr 81)
      ((Bool) (ROData('mem'))) (@ addr 81)
      ((Word32) ('r6')) (@ addr 81)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 81)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 28: case in (27) where the length of the sequence < 2
  Prove the number of visits to 81 is in {0 ..< 1}
    .. proven.
Step 29: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 30: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 31: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 32: 
  Prove the number of visits to 169 is in {0 ..< 1}
    .. proven.
Step 33: 
  Prove the number of visits to 182 is in {0 ..< 1}
    .. proven.
Step 34: 
  prove all verification conditions
    .. proven.
Step 35: case in (27) where the length of the sequence is b + 2
  Prove the number of visits to 81 is in {b + 0 ..< b + 3}
    .. proven.
Step 36: 
  Prove the number of visits to 28 is in {b + 0 ..< b + 3}
    .. proven.
Step 37: 
  Prove the number of visits to 16 is in {0 ..< 2}
    .. proven.
Step 38: 
  Prove the number of visits to 5 is in {0 ..< 3}
    .. proven.
Step 39: 
  Prove the number of visits to 169 is in {0 ..< 1}
    .. proven.
Step 40: 
  Prove the number of visits to 182 is in {0 ..< 2}
    .. proven.
Step 41: 
  prove all verification conditions
    .. proven.
Step 42: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 69 is in {j + 0 ..< j + 3}
    .. proven.
Step 43: 
  Prove the number of visits to 42 is in {j + 0 ..< j + 3}
    .. proven.
Step 44: 
  prove visits to 137 related to visits to 213
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 137)
      ((Word32) ('r4')) (@ addr 137)
      ((Word32) ('r8')) (@ addr 137)
      ((Word32) ('r14')) (@ addr 137)
      ((Word32) ('r5')) (@ addr 137)
      ((Word32) ('r0')) (@ addr 137)
      ((Word32) ('r9')) (@ addr 137)
      ((Word32) ('ret')) (@ addr 137)
      ((Word32) ('r2')) (@ addr 137)
      ((Word32) ('r11')) (@ addr 137)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 137)
      ((Word32) ('r13')) (@ addr 137)
      ((Word32) ('r10')) (@ addr 137)
      ((Mem) ('mem')) (@ addr 137)
      ((Word32) ('r6')) (@ addr 137)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 137)
      ((Word32) ('nirqs___int#v.1')) (@ addr 213)
      ((Word32) ('nirqs___int#v')) (@ addr 213)
      ((Mem) ('Mem.1')) (@ addr 213)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 213)
      ((Mem) ('Mem')) (@ addr 213)
      ((Word32[50]) ('GhostAssertions')) (@ addr 213)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 213)
    .. proven.
Step 45: case in (44) where the length of the sequence < 2
  Prove the number of visits to 137 is in {0 ..< 3}
    .. proven.
Step 46: 
  Prove the number of visits to 213 is in {0 ..< 3}
    .. proven.
Step 47: 
  prove visits to 81 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 81)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 81)
      ((Word32) ('r4')) (@ addr 81)
      ((Word32) ('r8')) (@ addr 81)
      ((Word32) ('r14')) (@ addr 81)
      ((Word32) ('r3')) (@ addr 81)
      ((Word32) ('r5')) (@ addr 81)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 81)
      ((Word32) ('r9')) (@ addr 81)
      ((Word32) ('ret')) (@ addr 81)
      ((Word32) ('r2')) (@ addr 81)
      ((Word32) ('r11')) (@ addr 81)
      ((Word32) ('r12')) (@ addr 81)
      ((Word32) ('r13')) (@ addr 81)
      ((Word32) ('r10')) (@ addr 81)
      ((Bool) (ROData('mem'))) (@ addr 81)
      ((Word32) ('r6')) (@ addr 81)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 81)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 48: case in (47) where the length of the sequence < 2
  Prove the number of visits to 81 is in {0 ..< 1}
    .. proven.
Step 49: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 50: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 51: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 52: 
  Prove the number of visits to 169 is in {0 ..< 1}
    .. proven.
Step 53: 
  Prove the number of visits to 182 is in {0 ..< 1}
    .. proven.
Step 54: 
  prove all verification conditions
    .. proven.
Step 55: case in (47) where the length of the sequence is i2 + 2
  Prove the number of visits to 81 is in {i2 + 0 ..< i2 + 3}
    .. proven.
Step 56: 
  Prove the number of visits to 28 is in {i2 + 0 ..< i2 + 3}
    .. proven.
Step 57: 
  Prove the number of visits to 16 is in {0 ..< 2}
    .. proven.
Step 58: 
  Prove the number of visits to 5 is in {0 ..< 4}
    .. proven.
Step 59: 
  Prove the number of visits to 169 is in {0 ..< 1}
    .. proven.
Step 60: 
  Prove the number of visits to 182 is in {0 ..< 3}
    .. proven.
Step 61: 
  prove all verification conditions
    .. proven.
Step 62: case in (44) where the length of the sequence is c + 2
  Prove the number of visits to 137 is in {c + 0 ..< c + 3}
    .. proven.
Step 63: 
  Prove the number of visits to 213 is in {c + 0 ..< c + 3}
    .. proven.
Step 64: 
  prove visits to 81 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 81)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 81)
      ((Word32) ('r4')) (@ addr 81)
      ((Word32) ('r8')) (@ addr 81)
      ((Word32) ('r14')) (@ addr 81)
      ((Word32) ('r3')) (@ addr 81)
      ((Word32) ('r5')) (@ addr 81)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 81)
      ((Word32) ('r9')) (@ addr 81)
      ((Word32) ('ret')) (@ addr 81)
      ((Word32) ('r2')) (@ addr 81)
      ((Word32) ('r11')) (@ addr 81)
      ((Word32) ('r12')) (@ addr 81)
      ((Word32) ('r13')) (@ addr 81)
      ((Word32) ('r10')) (@ addr 81)
      ((Bool) (ROData('mem'))) (@ addr 81)
      ((Word32) ('r6')) (@ addr 81)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 81)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 65: case in (64) where the length of the sequence < 2
  Prove the number of visits to 81 is in {0 ..< 1}
    .. proven.
Step 66: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 67: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 68: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 69: 
  Prove the number of visits to 169 is in {0 ..< 1}
    .. proven.
Step 70: 
  Prove the number of visits to 182 is in {0 ..< 1}
    .. proven.
Step 71: 
  prove all verification conditions
    .. proven.
Step 72: case in (64) where the length of the sequence is j2 + 2
  Prove the number of visits to 81 is in {j2 + 0 ..< j2 + 3}
    .. proven.
Step 73: 
  Prove the number of visits to 28 is in {j2 + 0 ..< j2 + 3}
    .. proven.
Step 74: 
  Prove the number of visits to 16 is in {0 ..< 2}
    .. proven.
Step 75: 
  Prove the number of visits to 5 is in {0 ..< 4}
    .. proven.
Step 76: 
  Prove the number of visits to 169 is in {0 ..< 1}
    .. proven.
Step 77: 
  Prove the number of visits to 182 is in {0 ..< 3}
    .. proven.
Step 78: 
  prove all verification conditions
    .. proven.
Step 79: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 63 is in {i + 0 ..< i + 3}
    .. proven.
Step 80: 
  Prove the number of visits to 51 is in {i + 0 ..< i + 3}
    .. proven.
Step 81: 
  prove visits to 69 related to visits to 42
    with equalities
      ((Mem) ('mem')) (@ addr 69)
      = ((Mem) ('Mem')) (@ addr 42)
    and with invariants
      ((Word32) ('r7')) (@ addr 69)
      ((Word32) ('r4')) (@ addr 69)
      ((Word32) ('r8')) (@ addr 69)
      ((Word32) ('r14')) (@ addr 69)
      ((Word32) ('r5')) (@ addr 69)
      ((Word32) ('r0')) (@ addr 69)
      ((Word32) ('r9')) (@ addr 69)
      ((Word32) ('ret')) (@ addr 69)
      ((Word32) ('r2')) (@ addr 69)
      ((Word32) ('r11')) (@ addr 69)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 69)
      ((Word32) ('r12')) (@ addr 69)
      ((Word32) ('r13')) (@ addr 69)
      ((Word32) ('r10')) (@ addr 69)
      ((Bool) (ROData('mem'))) (@ addr 69)
      ((Word32) ('r6')) (@ addr 69)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 69)
      ((Word32) ('nirqs___int#v')) (@ addr 42)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 42)
      ((Word32) (('loop#33#count' + ((0 - '#seq-visits') * 1)))) (@ addr 42)
      ((Word32[50]) ('GhostAssertions')) (@ addr 42)
    .. proven.
Step 82: case in (81) where the length of the sequence < 2
  Prove the number of visits to 69 is in {0 ..< 1}
    .. proven.
Step 83: 
  Prove the number of visits to 42 is in {0 ..< 1}
    .. proven.
Step 84: 
  Prove the number of visits to 210 is in {0 ..< 1}
    .. proven.
Step 85: 
  Prove the number of visits to 24 is in {0 ..< 1}
    .. proven.
Step 86: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 87: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 88: 
  Prove the number of visits to 137 is in {0 ..< 1}
    .. proven.
Step 89: 
  Prove the number of visits to 157 is in {0 ..< 1}
    .. proven.
Step 90: 
  Prove the number of visits to 169 is in {0 ..< 1}
    .. proven.
Step 91: 
  Prove the number of visits to 182 is in {0 ..< 1}
    .. proven.
Step 92: 
  prove all verification conditions
    .. proven.
Step 93: case in (81) where the length of the sequence is k2 + 2
  Prove the number of visits to 69 is in {k2 + 0 ..< k2 + 3}
    .. proven.
Step 94: 
  Prove the number of visits to 42 is in {k2 + 0 ..< k2 + 3}
    .. proven.
Step 95: 
  prove visits to 137 related to visits to 213
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 137)
      ((Word32) ('r4')) (@ addr 137)
      ((Word32) ('r8')) (@ addr 137)
      ((Word32) ('r14')) (@ addr 137)
      ((Word32) ('r5')) (@ addr 137)
      ((Word32) ('r0')) (@ addr 137)
      ((Word32) ('r9')) (@ addr 137)
      ((Word32) ('ret')) (@ addr 137)
      ((Word32) ('r2')) (@ addr 137)
      ((Word32) ('r11')) (@ addr 137)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 137)
      ((Word32) ('r13')) (@ addr 137)
      ((Word32) ('r10')) (@ addr 137)
      ((Mem) ('mem')) (@ addr 137)
      ((Word32) ('r6')) (@ addr 137)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 137)
      ((Word32) ('nirqs___int#v.1')) (@ addr 213)
      ((Word32) ('nirqs___int#v')) (@ addr 213)
      ((Mem) ('Mem.1')) (@ addr 213)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 213)
      ((Mem) ('Mem')) (@ addr 213)
      ((Word32[50]) ('GhostAssertions')) (@ addr 213)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 213)
    .. proven.
Step 96: case in (95) where the length of the sequence < 2
  Prove the number of visits to 137 is in {0 ..< 3}
    .. proven.
Step 97: 
  Prove the number of visits to 213 is in {0 ..< 3}
    .. proven.
Step 98: 
  prove visits to 81 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 81)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 81)
      ((Word32) ('r4')) (@ addr 81)
      ((Word32) ('r8')) (@ addr 81)
      ((Word32) ('r14')) (@ addr 81)
      ((Word32) ('r3')) (@ addr 81)
      ((Word32) ('r5')) (@ addr 81)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 81)
      ((Word32) ('r9')) (@ addr 81)
      ((Word32) ('ret')) (@ addr 81)
      ((Word32) ('r2')) (@ addr 81)
      ((Word32) ('r11')) (@ addr 81)
      ((Word32) ('r12')) (@ addr 81)
      ((Word32) ('r13')) (@ addr 81)
      ((Word32) ('r10')) (@ addr 81)
      ((Bool) (ROData('mem'))) (@ addr 81)
      ((Word32) ('r6')) (@ addr 81)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 81)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 99: case in (98) where the length of the sequence < 2
  Prove the number of visits to 81 is in {0 ..< 1}
    .. proven.
Step 100: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 101: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 102: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 103: 
  Prove the number of visits to 169 is in {0 ..< 1}
    .. proven.
Step 104: 
  Prove the number of visits to 182 is in {0 ..< 1}
    .. proven.
Step 105: 
  prove all verification conditions
    .. proven.
Step 106: case in (98) where the length of the sequence is b2 + 2
  Prove the number of visits to 81 is in {b2 + 0 ..< b2 + 3}
    .. proven.
Step 107: 
  Prove the number of visits to 28 is in {b2 + 0 ..< b2 + 3}
    .. proven.
Step 108: 
  prove visits to 86 related to visits to 20
    with equalities
      ((Mem) ('mem')) (@ addr 86)
      = ((Mem) ('Mem')) (@ addr 20)
    and with invariants
      ((Word32) ('r7')) (@ addr 86)
      ((Word32) ('r4')) (@ addr 86)
      ((Word32) ('r8')) (@ addr 86)
      ((Word32) ('r14')) (@ addr 86)
      ((Word32) ('r5')) (@ addr 86)
      ((Word32) ('r0')) (@ addr 86)
      ((Word32) ('r9')) (@ addr 86)
      ((Word32) ('ret')) (@ addr 86)
      ((Word32) ('r2')) (@ addr 86)
      ((Word32) ('r11')) (@ addr 86)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 86)
      ((Word32) ('r12')) (@ addr 86)
      ((Word32) ('r13')) (@ addr 86)
      ((Word32) ('r10')) (@ addr 86)
      ((Bool) (ROData('mem'))) (@ addr 86)
      ((Word32) ('r6')) (@ addr 86)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 86)
      ((Word32) (('loop#15#count' + ((0 - '#seq-visits') * 1)))) (@ addr 20)
      ((Word32) ('nirqs___int#v')) (@ addr 20)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 20)
      ((Word32[50]) ('GhostAssertions')) (@ addr 20)
    .. proven.
Step 109: case in (108) where the length of the sequence < 2
  Prove the number of visits to 86 is in {0 ..< 3}
    .. proven.
Step 110: 
  Prove the number of visits to 20 is in {0 ..< 3}
    .. proven.
Step 111: 
  Prove the number of visits to 182 is in {0 ..< 5}
    .. proven.
Step 112: 
  Prove the number of visits to 5 is in {0 ..< 6}
    .. proven.
Step 113: 
  prove all verification conditions
    .. proven.
Step 114: case in (108) where the length of the sequence is c2 + 2
  Prove the number of visits to 86 is in {c2 + 0 ..< c2 + 3}
    .. proven.
Step 115: 
  Prove the number of visits to 20 is in {c2 + 0 ..< c2 + 3}
    .. proven.
Step 116: 
  prove visits to 89 related to visits to 13
    with equalities
      ((Mem) ('mem')) (@ addr 89)
      = ((Mem) ('Mem')) (@ addr 13)
    and with invariants
      ((Word32) ('r7')) (@ addr 89)
      ((Word32) ('r4')) (@ addr 89)
      ((Word32) ('r8')) (@ addr 89)
      ((Word32) ('r14')) (@ addr 89)
      ((Word32) ('r5')) (@ addr 89)
      ((Word32) ('r0')) (@ addr 89)
      ((Word32) ('r9')) (@ addr 89)
      ((Word32) ('ret')) (@ addr 89)
      ((Word32) ('r2')) (@ addr 89)
      ((Word32) ('r11')) (@ addr 89)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 89)
      ((Word32) ('r12')) (@ addr 89)
      ((Word32) ('r13')) (@ addr 89)
      ((Word32) ('r10')) (@ addr 89)
      ((Bool) (ROData('mem'))) (@ addr 89)
      ((Word32) ('r6')) (@ addr 89)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 89)
      ((Word32) ('nirqs___int#v')) (@ addr 13)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 13)
      ((Word32[50]) ('GhostAssertions')) (@ addr 13)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
    .. proven.
Step 117: case in (116) where the length of the sequence < 2
  Prove the number of visits to 89 is in {0 ..< 1}
    .. proven.
Step 118: 
  Prove the number of visits to 13 is in {0 ..< 1}
    .. proven.
Step 119: 
  prove all verification conditions
    .. proven.
Step 120: case in (116) where the length of the sequence is i3 + 2
  Prove the number of visits to 89 is in {i3 + 0 ..< i3 + 3}
    .. proven.
Step 121: 
  Prove the number of visits to 13 is in {i3 + 0 ..< i3 + 3}
    .. proven.
Step 122: 
  prove all verification conditions
    .. proven.
Step 123: case in (95) where the length of the sequence is a2 + 2
  Prove the number of visits to 137 is in {a2 + 0 ..< a2 + 3}
    .. proven.
Step 124: 
  Prove the number of visits to 213 is in {a2 + 0 ..< a2 + 3}
    .. proven.
Step 125: 
  prove visits to 81 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 81)
      = ((Mem) ('Mem')) (@ addr 28)
    and with invariants
      ((Word32) ('r7')) (@ addr 81)
      ((Word32) ('r4')) (@ addr 81)
      ((Word32) ('r8')) (@ addr 81)
      ((Word32) ('r14')) (@ addr 81)
      ((Word32) ('r3')) (@ addr 81)
      ((Word32) ('r5')) (@ addr 81)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 81)
      ((Word32) ('r9')) (@ addr 81)
      ((Word32) ('ret')) (@ addr 81)
      ((Word32) ('r2')) (@ addr 81)
      ((Word32) ('r11')) (@ addr 81)
      ((Word32) ('r12')) (@ addr 81)
      ((Word32) ('r13')) (@ addr 81)
      ((Word32) ('r10')) (@ addr 81)
      ((Bool) (ROData('mem'))) (@ addr 81)
      ((Word32) ('r6')) (@ addr 81)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 81)
      ((Word8) ('target___unsigned_char#v')) (@ addr 28)
      ((Word32) ('nirqs___int#v')) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 28)
      ((Word32[50]) ('GhostAssertions')) (@ addr 28)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
    .. proven.
Step 126: case in (125) where the length of the sequence < 2
  Prove the number of visits to 81 is in {0 ..< 1}
    .. proven.
Step 127: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 128: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 129: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 130: 
  Prove the number of visits to 169 is in {0 ..< 1}
    .. proven.
Step 131: 
  Prove the number of visits to 182 is in {0 ..< 1}
    .. proven.
Step 132: 
  prove all verification conditions
    .. proven.
Step 133: case in (125) where the length of the sequence is j3 + 2
  Prove the number of visits to 81 is in {j3 + 0 ..< j3 + 3}
    .. proven.
Step 134: 
  Prove the number of visits to 28 is in {j3 + 0 ..< j3 + 3}
    .. proven.
Step 135: 
  prove visits to 86 related to visits to 20
    with equalities
      ((Mem) ('mem')) (@ addr 86)
      = ((Mem) ('Mem')) (@ addr 20)
    and with invariants
      ((Word32) ('r7')) (@ addr 86)
      ((Word32) ('r4')) (@ addr 86)
      ((Word32) ('r8')) (@ addr 86)
      ((Word32) ('r14')) (@ addr 86)
      ((Word32) ('r5')) (@ addr 86)
      ((Word32) ('r0')) (@ addr 86)
      ((Word32) ('r9')) (@ addr 86)
      ((Word32) ('ret')) (@ addr 86)
      ((Word32) ('r2')) (@ addr 86)
      ((Word32) ('r11')) (@ addr 86)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 86)
      ((Word32) ('r12')) (@ addr 86)
      ((Word32) ('r13')) (@ addr 86)
      ((Word32) ('r10')) (@ addr 86)
      ((Bool) (ROData('mem'))) (@ addr 86)
      ((Word32) ('r6')) (@ addr 86)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 86)
      ((Word32) (('loop#15#count' + ((0 - '#seq-visits') * 1)))) (@ addr 20)
      ((Word32) ('nirqs___int#v')) (@ addr 20)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 20)
      ((Word32[50]) ('GhostAssertions')) (@ addr 20)
    .. proven.
Step 136: case in (135) where the length of the sequence < 2
  Prove the number of visits to 86 is in {0 ..< 3}
    .. proven.
Step 137: 
  Prove the number of visits to 20 is in {0 ..< 3}
    .. proven.
Step 138: 
  Prove the number of visits to 182 is in {0 ..< 5}
    .. proven.
Step 139: 
  Prove the number of visits to 5 is in {0 ..< 6}
    .. proven.
Step 140: 
  prove all verification conditions
    .. proven.
Step 141: case in (135) where the length of the sequence is k3 + 2
  Prove the number of visits to 86 is in {k3 + 0 ..< k3 + 3}
    .. proven.
Step 142: 
  Prove the number of visits to 20 is in {k3 + 0 ..< k3 + 3}
    .. proven.
Step 143: 
  prove visits to 89 related to visits to 13
    with equalities
      ((Mem) ('mem')) (@ addr 89)
      = ((Mem) ('Mem')) (@ addr 13)
    and with invariants
      ((Word32) ('r7')) (@ addr 89)
      ((Word32) ('r4')) (@ addr 89)
      ((Word32) ('r8')) (@ addr 89)
      ((Word32) ('r14')) (@ addr 89)
      ((Word32) ('r5')) (@ addr 89)
      ((Word32) ('r0')) (@ addr 89)
      ((Word32) ('r9')) (@ addr 89)
      ((Word32) ('ret')) (@ addr 89)
      ((Word32) ('r2')) (@ addr 89)
      ((Word32) ('r11')) (@ addr 89)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 89)
      ((Word32) ('r12')) (@ addr 89)
      ((Word32) ('r13')) (@ addr 89)
      ((Word32) ('r10')) (@ addr 89)
      ((Bool) (ROData('mem'))) (@ addr 89)
      ((Word32) ('r6')) (@ addr 89)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 89)
      ((Word32) ('nirqs___int#v')) (@ addr 13)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 13)
      ((Word32[50]) ('GhostAssertions')) (@ addr 13)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
    .. proven.
Step 144: case in (143) where the length of the sequence < 2
  Prove the number of visits to 89 is in {0 ..< 1}
    .. proven.
Step 145: 
  Prove the number of visits to 13 is in {0 ..< 1}
    .. proven.
Step 146: 
  prove all verification conditions
    .. proven.
Step 147: case in (143) where the length of the sequence is a3 + 2
  Prove the number of visits to 89 is in {a3 + 0 ..< a3 + 3}
    .. proven.
Step 148: 
  Prove the number of visits to 13 is in {a3 + 0 ..< a3 + 3}
    .. proven.
Step 149: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (dist_init (ASM) <= Kernel_C.dist_init (C)), time taken: 2126.99s
Testing Function pair Pairing (Arch_finaliseCap (ASM) <= Kernel_C.Arch_finaliseCap (C))
  (function pairing 44 of 282)
 .. built problem, finding proof
Decided to case split at (101, 'ASM')
  (in problem)
Now doing proof search in true case (101 visited) in problem.
Now doing proof search in false case (101 not visited) in problem.
Decided to case split at (86, 'ASM')
  (in false case (101 not visited) in problem)
Now doing proof search in true case (86 visited) in false case (101 not visited) in problem.
Now doing proof search in false case (86 not visited) in false case (101 not visited) in problem.
Decided to case split at (107, 'ASM')
  (in false case (86 not visited) in false case (101 not visited) in problem)
Now doing proof search in true case (107 visited) in false case (86 not visited) in false case (101 not visited) in problem.
Now doing proof search in false case (107 not visited) in false case (86 not visited) in false case (101 not visited) in problem.
ProofNode ('CaseSplit', (101, 'ASM'), (ProofNode ('Restr', (101, ('Number', (1, 2))), (ProofNode ('Restr', (14, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (101, ('Number', (0, 1))), (ProofNode ('Restr', (14, ('Number', (0, 1))), (ProofNode ('CaseSplit', (86, 'ASM'), (ProofNode ('Restr', (86, ('Number', (1, 2))), (ProofNode ('Restr', (48, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (86, ('Number', (0, 1))), (ProofNode ('Restr', (48, ('Number', (0, 1))), (ProofNode ('CaseSplit', (107, 'ASM'), (ProofNode ('Restr', (107, ('Number', (1, 2))), (ProofNode ('Restr', (38, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (107, ('Number', (0, 1))), (ProofNode ('Restr', (38, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 101 is visited
Step 2: case in (1) where 101 is visited
  Prove the number of visits to 101 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 14 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 101 is not visited
  Prove the number of visits to 101 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 14 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 86 is visited
Step 8: case in (7) where 86 is visited
  Prove the number of visits to 86 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 48 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 86 is not visited
  Prove the number of visits to 86 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 48 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 107 is visited
Step 14: case in (13) where 107 is visited
  Prove the number of visits to 107 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 38 is in {1 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where 107 is not visited
  Prove the number of visits to 107 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 38 is in {0 ..< 1}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_finaliseCap (ASM) <= Kernel_C.Arch_finaliseCap (C)), time taken: 119.96s
Testing Function pair Pairing (getHWASID (ASM) <= Kernel_C.getHWASID (C))
  (function pairing 45 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (getHWASID (ASM) <= Kernel_C.getHWASID (C)), time taken: 2.88s
Testing Function pair Pairing (initIRQController (ASM) <= Kernel_C.initIRQController (C))
  (function pairing 46 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (initIRQController (ASM) <= Kernel_C.initIRQController (C)), time taken: 0.48s
Testing Function pair Pairing (tcbSchedEnqueue (ASM) <= Kernel_C.tcbSchedEnqueue (C))
  (function pairing 47 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (tcbSchedEnqueue (ASM) <= Kernel_C.tcbSchedEnqueue (C)), time taken: 6.40s
Testing Function pair Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))
  (function pairing 48 of 282)
Aborting Problem (Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))): underspecified Kernel_C.clearExMonitor
Result ProblemAbort for pair Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C)), time taken: 0.00s
Testing Function pair Pairing (setMCPriority (ASM) <= Kernel_C.setMCPriority (C))
  (function pairing 49 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setMCPriority (ASM) <= Kernel_C.setMCPriority (C)), time taken: 0.40s
Testing Function pair Pairing (insertNewCap (ASM) <= Kernel_C.insertNewCap (C))
  (function pairing 50 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (insertNewCap (ASM) <= Kernel_C.insertNewCap (C)), time taken: 5.81s
Testing Function pair Pairing (decodeReadRegisters (ASM) <= Kernel_C.decodeReadRegisters (C))
  (function pairing 51 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeReadRegisters (ASM) <= Kernel_C.decodeReadRegisters (C)), time taken: 15.03s
Testing Function pair Pairing (maybe_alloc_extra_bi (ASM) <= Kernel_C.maybe_alloc_extra_bi (C))
  (function pairing 52 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (maybe_alloc_extra_bi (ASM) <= Kernel_C.maybe_alloc_extra_bi (C)), time taken: 0.77s
Testing Function pair Pairing (checkValidIPCBuffer (ASM) <= Kernel_C.checkValidIPCBuffer (C))
  (function pairing 53 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (checkValidIPCBuffer (ASM) <= Kernel_C.checkValidIPCBuffer (C)), time taken: 3.07s
Testing Function pair Pairing (activateThread (ASM) <= Kernel_C.activateThread (C))
  (function pairing 54 of 282)
 .. built problem, finding proof
Decided to case split at (32, 'ASM')
  (in problem)
Now doing proof search in true case (32 visited) in problem.
Now doing proof search in false case (32 not visited) in problem.
Decided to case split at (29, 'ASM')
  (in false case (32 not visited) in problem)
Now doing proof search in true case (29 visited) in false case (32 not visited) in problem.
Now doing proof search in false case (29 not visited) in false case (32 not visited) in problem.
ProofNode ('CaseSplit', (32, 'ASM'), (ProofNode ('Restr', (32, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (32, ('Number', (0, 1))), (ProofNode ('CaseSplit', (29, 'ASM'), (ProofNode ('Restr', (29, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (29, ('Number', (0, 1))), (ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),))))
 .. proof found.
Step 1: 
  case split on whether 32 is visited
Step 2: case in (1) where 32 is visited
  Prove the number of visits to 32 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 32 is not visited
  Prove the number of visits to 32 is in {0 ..< 1}
    .. proven.
Step 5: 
  case split on whether 29 is visited
Step 6: case in (5) where 29 is visited
  Prove the number of visits to 29 is in {1 ..< 2}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (5) where 29 is not visited
  Prove the number of visits to 29 is in {0 ..< 1}
    .. proven.
Step 9: 
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (activateThread (ASM) <= Kernel_C.activateThread (C)), time taken: 9.03s
Testing Function pair Pairing (str_to_long (ASM) <= Kernel_C.str_to_long (C))
  (function pairing 55 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [59, 11]
  (in problem)
Now doing proof search in 59 init case in problem.
Now doing proof search in 59 loop case in problem.
ProofNode ('Split', ((59, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (11, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'base___unsigned#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'str___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'res___long#v')), (Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'val___long#v'))], 2, 1), (ProofNode ('Restr', (59, ('Number', (0, 3))), (ProofNode ('Restr', (11, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (59, ('Offset', (0, 3))), (ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 59 related to visits to 11
    with equalities
      ((Word32) ('r0')) (@ addr 59)
      = ((Word32) ('res___long#v')) (@ addr 11)
      ((Word32) ('r5')) (@ addr 59)
      = ((Word32) ('val___long#v')) (@ addr 11)
    and with invariants
      ((Word32) ('r7')) (@ addr 59)
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 59)
      ((Word32) ('r8')) (@ addr 59)
      ((Word32) ('r9')) (@ addr 59)
      ((Word32) ('ret')) (@ addr 59)
      ((Word32) ('r11')) (@ addr 59)
      ((Word32) ('r13')) (@ addr 59)
      ((Word32) ('r10')) (@ addr 59)
      ((Mem) ('mem')) (@ addr 59)
      ((Word32) ('r6')) (@ addr 59)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 59)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 11)
      ((Word32) ('base___unsigned#v')) (@ addr 11)
      ((Mem) ('Mem')) (@ addr 11)
      ((Word32) (('str___ptr_to_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 11)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 59 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 11 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 59 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 11 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (str_to_long (ASM) <= Kernel_C.str_to_long (C)), time taken: 319.08s
Testing Function pair Pairing (getRestartPC (ASM) <= Kernel_C.getRestartPC (C))
  (function pairing 56 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (getRestartPC (ASM) <= Kernel_C.getRestartPC (C)), time taken: 0.20s
Testing Function pair Pairing (create_it_asid_pool (ASM) <= Kernel_C.create_it_asid_pool (C))
  (function pairing 57 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_it_asid_pool (ASM) <= Kernel_C.create_it_asid_pool (C)), time taken: 18.95s
Testing Function pair Pairing (initL2Cache (ASM) <= Kernel_C.initL2Cache (C))
  (function pairing 58 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [82, 46]
  (in problem)
Now doing proof search in 82 init case in problem.
Now doing proof search in 82 loop case in problem.
ProofNode ('Split', ((82, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (46, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#46#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (82, ('Number', (0, 1))), (ProofNode ('Restr', (46, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (82, ('Offset', (0, 1))), (ProofNode ('Restr', (46, ('Offset', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 82 related to visits to 46
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 82)
      ((Word32) ('r4')) (@ addr 82)
      ((Word32) ('r8')) (@ addr 82)
      ((Word32) ('r11')) (@ addr 82)
      ((Word32) ('r5')) (@ addr 82)
      ((Word32) ('r6')) (@ addr 82)
      ((Word32) ('r0')) (@ addr 82)
      ((Word32) ('r9')) (@ addr 82)
      ((Word32) ('ret')) (@ addr 82)
      ((Word32) ('r2')) (@ addr 82)
      ((Word32) ('r13')) (@ addr 82)
      ((Word32) ('r10')) (@ addr 82)
      ((Mem) ('mem')) (@ addr 82)
      ((Word32) ('r14')) (@ addr 82)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 82)
      ((Word32) (('loop#46#count' + ((0 - '#seq-visits') * 1)))) (@ addr 46)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 82 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 46 is in {0 ..< 1}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 82 is in {i + 0 ..< i + 1}
    .. proven.
Step 6: 
  Prove the number of visits to 46 is in {i + 0 ..< i + 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (initL2Cache (ASM) <= Kernel_C.initL2Cache (C)), time taken: 7.54s
Testing Function pair Pairing (invokeTCB_CopyRegisters (ASM) <= Kernel_C.invokeTCB_CopyRegisters (C))
  (function pairing 59 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [55, 29]
  (in problem)
Now doing proof search in 55 init case in problem.
Discovered a loop relation for split points [68, 9]
  (in 55 init case in problem)
Now doing proof search in 68 init case in 55 init case in problem.
Now doing proof search in 68 loop case in 55 init case in problem.
Now doing proof search in 55 loop case in problem.
Discovered a loop relation for split points [68, 9]
  (in 55 loop case in problem)
Now doing proof search in 68 init case in 55 loop case in problem.
Now doing proof search in 68 loop case in 55 loop case in problem.
ProofNode ('Split', ((55, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (29, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'transferArch___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#25#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'transferInteger___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (55, ('Number', (0, 1))), (ProofNode ('Restr', (29, ('Number', (0, 2))), (ProofNode ('Split', ((68, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (9, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'transferArch___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (68, ('Number', (0, 1))), (ProofNode ('Restr', (9, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (68, ('Offset', (0, 3))), (ProofNode ('Restr', (9, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (55, ('Offset', (0, 3))), (ProofNode ('Restr', (29, ('Offset', (0, 3))), (ProofNode ('Split', ((68, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (9, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'transferArch___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (68, ('Number', (0, 1))), (ProofNode ('Restr', (9, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (68, ('Offset', (0, 3))), (ProofNode ('Restr', (9, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 55 related to visits to 29
    with equalities
      ((Mem) ('mem')) (@ addr 55)
      = ((Mem) ('Mem')) (@ addr 29)
    and with invariants
      ((Word32) ('r4')) (@ addr 55)
      ((Word32) ('r8')) (@ addr 55)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 55)
      ((Word32) ('r5')) (@ addr 55)
      ((Word32) ('r0')) (@ addr 55)
      ((Word32) ('r9')) (@ addr 55)
      ((Word32) ('ret')) (@ addr 55)
      ((Word32) ('r11')) (@ addr 55)
      ((Word32) ('r13')) (@ addr 55)
      ((Word32) ('r10')) (@ addr 55)
      ((Bool) (ROData('mem'))) (@ addr 55)
      ((Word32) ('r7')) (@ addr 55)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 55)
      ((Word32) ('transferArch___unsigned_long#v')) (@ addr 29)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 29)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 29)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 29)
      ((Word32) (('loop#25#count' + ((0 - '#seq-visits') * 1)))) (@ addr 29)
      ((Word32) ('transferInteger___unsigned_long#v')) (@ addr 29)
      ((Word32[50]) ('GhostAssertions')) (@ addr 29)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 55 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 29 is in {0 ..< 2}
    .. proven.
Step 4: 
  prove visits to 68 related to visits to 9
    with equalities
      ((Mem) ('mem')) (@ addr 68)
      = ((Mem) ('Mem')) (@ addr 9)
    and with invariants
      ((Word32) ('r4')) (@ addr 68)
      ((Word32) ('r8')) (@ addr 68)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 68)
      ((Word32) ('r5')) (@ addr 68)
      ((Word32) ('r0')) (@ addr 68)
      ((Word32) ('r9')) (@ addr 68)
      ((Word32) ('ret')) (@ addr 68)
      ((Word32) ('r11')) (@ addr 68)
      ((Word32) ('r13')) (@ addr 68)
      ((Word32) ('r10')) (@ addr 68)
      ((Bool) (ROData('mem'))) (@ addr 68)
      ((Word32) ('r7')) (@ addr 68)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 68)
      ((Word32) ('transferArch___unsigned_long#v')) (@ addr 9)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 9)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 9)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 9)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 9)
      ((Word32[50]) ('GhostAssertions')) (@ addr 9)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 68 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 9 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 68 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 9 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 55 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 29 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 68 related to visits to 9
    with equalities
      ((Mem) ('mem')) (@ addr 68)
      = ((Mem) ('Mem')) (@ addr 9)
    and with invariants
      ((Word32) ('r4')) (@ addr 68)
      ((Word32) ('r8')) (@ addr 68)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 68)
      ((Word32) ('r5')) (@ addr 68)
      ((Word32) ('r0')) (@ addr 68)
      ((Word32) ('r9')) (@ addr 68)
      ((Word32) ('ret')) (@ addr 68)
      ((Word32) ('r11')) (@ addr 68)
      ((Word32) ('r13')) (@ addr 68)
      ((Word32) ('r10')) (@ addr 68)
      ((Bool) (ROData('mem'))) (@ addr 68)
      ((Word32) ('r7')) (@ addr 68)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 68)
      ((Word32) ('transferArch___unsigned_long#v')) (@ addr 9)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 9)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 9)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 9)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 9)
      ((Word32[50]) ('GhostAssertions')) (@ addr 9)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 68 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 9 is in {0 ..< 1}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 68 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 9 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeTCB_CopyRegisters (ASM) <= Kernel_C.invokeTCB_CopyRegisters (C)), time taken: 479.64s
Testing Function pair Pairing (unbindNotification (ASM) <= Kernel_C.unbindNotification (C))
  (function pairing 60 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (unbindNotification (ASM) <= Kernel_C.unbindNotification (C)), time taken: 1.90s
Testing Function pair Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))
  (function pairing 61 of 282)
Aborting Problem (Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))), complex loop
Result ProblemAbort for pair Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C)), time taken: 0.62s
Testing Function pair Pairing (handleRecv (ASM) <= Kernel_C.handleRecv (C))
  (function pairing 62 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleRecv (ASM) <= Kernel_C.handleRecv (C)), time taken: 18.05s
Testing Function pair Pairing (handleInvocation (ASM) <= Kernel_C.handleInvocation (C))
  (function pairing 63 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleInvocation (ASM) <= Kernel_C.handleInvocation (C)), time taken: 31.44s
Testing Function pair Pairing (tcbSchedDequeue (ASM) <= Kernel_C.tcbSchedDequeue (C))
  (function pairing 64 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (tcbSchedDequeue (ASM) <= Kernel_C.tcbSchedDequeue (C)), time taken: 6.78s
Testing Function pair Pairing (loadHWASID (ASM) <= Kernel_C.loadHWASID (C))
  (function pairing 65 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (loadHWASID (ASM) <= Kernel_C.loadHWASID (C)), time taken: 0.32s
Testing Function pair Pairing (decodeSetMCPriority (ASM) <= Kernel_C.decodeSetMCPriority (C))
  (function pairing 66 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeSetMCPriority (ASM) <= Kernel_C.decodeSetMCPriority (C)), time taken: 10.64s
Testing Function pair Pairing (cteDeleteOne (ASM) <= Kernel_C.cteDeleteOne (C))
  (function pairing 67 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cteDeleteOne (ASM) <= Kernel_C.cteDeleteOne (C)), time taken: 5.61s
Testing Function pair Pairing (deletingIRQHandler (ASM) <= Kernel_C.deletingIRQHandler (C))
  (function pairing 68 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (deletingIRQHandler (ASM) <= Kernel_C.deletingIRQHandler (C)), time taken: 0.51s
Testing Function pair Pairing (invokeCNodeDelete (ASM) <= Kernel_C.invokeCNodeDelete (C))
  (function pairing 69 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeCNodeDelete (ASM) <= Kernel_C.invokeCNodeDelete (C)), time taken: 0.49s
Testing Function pair Pairing (possibleSwitchTo (ASM) <= Kernel_C.possibleSwitchTo (C))
  (function pairing 70 of 282)
 .. built problem, finding proof
Decided to case split at (20, 'ASM')
  (in problem)
Now doing proof search in true case (20 visited) in problem.
Now doing proof search in false case (20 not visited) in problem.
ProofNode ('CaseSplit', (20, 'ASM'), (ProofNode ('Restr', (20, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (20, ('Number', (0, 1))), (ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 20 is visited
Step 2: case in (1) where 20 is visited
  Prove the number of visits to 20 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 20 is not visited
  Prove the number of visits to 20 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (possibleSwitchTo (ASM) <= Kernel_C.possibleSwitchTo (C)), time taken: 3.97s
Testing Function pair Pairing (lockTLBEntryCritical (ASM) <= Kernel_C.lockTLBEntryCritical (C))
  (function pairing 71 of 282)
Skipping Pairing (lockTLBEntryCritical (ASM) <= Kernel_C.lockTLBEntryCritical (C)), underspecified C
Testing Function pair Pairing (invokeCNodeRevoke (ASM) <= Kernel_C.invokeCNodeRevoke (C))
  (function pairing 72 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeCNodeRevoke (ASM) <= Kernel_C.invokeCNodeRevoke (C)), time taken: 0.49s
Testing Function pair Pairing (decodeCNodeInvocation (ASM) <= Kernel_C.decodeCNodeInvocation (C))
  (function pairing 73 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeCNodeInvocation (ASM) <= Kernel_C.decodeCNodeInvocation (C)), time taken: 1629.53s
Testing Function pair Pairing (setDomain (ASM) <= Kernel_C.setDomain (C))
  (function pairing 74 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setDomain (ASM) <= Kernel_C.setDomain (C)), time taken: 5.35s
Testing Function pair Pairing (lookupIPCBuffer (ASM) <= Kernel_C.lookupIPCBuffer (C))
  (function pairing 75 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lookupIPCBuffer (ASM) <= Kernel_C.lookupIPCBuffer (C)), time taken: 2.69s
Testing Function pair Pairing (create_domain_cap (ASM) <= Kernel_C.create_domain_cap (C))
  (function pairing 76 of 282)
 .. built problem, finding proof
Discovered that points [10 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (10, ('Number', (0, 5))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 10 is in {0 ..< 5}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_domain_cap (ASM) <= Kernel_C.create_domain_cap (C)), time taken: 15.64s
Testing Function pair Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))
  (function pairing 77 of 282)
Aborting Problem (Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))), complex loop
Result ProblemAbort for pair Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C)), time taken: 29.20s
Testing Function pair Pairing (create_kernel_untypeds (ASM) <= Kernel_C.create_kernel_untypeds (C))
  (function pairing 78 of 282)
 .. built problem, finding proof
Discovered that points [66 (loop head)] can be bounded
  (in problem)
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1712, in build_proof_rec
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1756, in build_proof_rec_with_restrs
    kind, must_find = must_find)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1785, in get_proof_split_limit
    hints = [limit, limit + 1], use_rep = mk_graph_slice (p))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 113, in find_split_limit
    assert not 'split limit found'
AssertionError
Result ProofEXCEPT for pair Pairing (create_kernel_untypeds (ASM) <= Kernel_C.create_kernel_untypeds (C)), time taken: 39.44s
Testing Function pair Pairing (handleInterrupt (ASM) <= Kernel_C.handleInterrupt (C))
  (function pairing 79 of 282)
 .. built problem, finding proof
Decided to case split at (50, 'ASM')
  (in problem)
Now doing proof search in true case (50 visited) in problem.
Now doing proof search in false case (50 not visited) in problem.
Decided to case split at (45, 'ASM')
  (in false case (50 not visited) in problem)
Now doing proof search in true case (45 visited) in false case (50 not visited) in problem.
Now doing proof search in false case (45 not visited) in false case (50 not visited) in problem.
ProofNode ('CaseSplit', (50, 'ASM'), (ProofNode ('Restr', (50, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (50, ('Number', (0, 1))), (ProofNode ('Restr', (18, ('Number', (0, 1))), (ProofNode ('CaseSplit', (45, 'ASM'), (ProofNode ('Restr', (45, ('Number', (1, 2))), (ProofNode ('Restr', (36, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (45, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 50 is visited
Step 2: case in (1) where 50 is visited
  Prove the number of visits to 50 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 50 is not visited
  Prove the number of visits to 50 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 18 is in {0 ..< 1}
    .. proven.
Step 6: 
  case split on whether 45 is visited
Step 7: case in (6) where 45 is visited
  Prove the number of visits to 45 is in {1 ..< 2}
    .. proven.
Step 8: 
  Prove the number of visits to 36 is in {1 ..< 2}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (6) where 45 is not visited
  Prove the number of visits to 45 is in {0 ..< 1}
    .. proven.
Step 11: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleInterrupt (ASM) <= Kernel_C.handleInterrupt (C)), time taken: 41.22s
Testing Function pair Pairing (unbindMaybeNotification (ASM) <= Kernel_C.unbindMaybeNotification (C))
  (function pairing 80 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (unbindMaybeNotification (ASM) <= Kernel_C.unbindMaybeNotification (C)), time taken: 1.09s
Testing Function pair Pairing (handleVMFaultEvent (ASM) <= Kernel_C.handleVMFaultEvent (C))
  (function pairing 81 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleVMFaultEvent (ASM) <= Kernel_C.handleVMFaultEvent (C)), time taken: 1.05s
Testing Function pair Pairing (memset (ASM) <= Kernel_C.memset (C))
  (function pairing 82 of 282)
 .. built problem, finding proof
Decided to case split at (33, 'ASM')
  (in problem)
Now doing proof search in true case (33 visited) in problem.
Now doing proof search in false case (33 not visited) in problem.
Discovered a loop relation for split points [41, 12]
  (in false case (33 not visited) in problem)
Now doing proof search in 41 init case in false case (33 not visited) in problem.
Now doing proof search in 41 loop case in false case (33 not visited) in problem.
ProofNode ('CaseSplit', (33, 'ASM'), (ProofNode ('Restr', (33, ('Number', (1, 2))), (ProofNode ('Restr', (3, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (33, ('Number', (0, 1))), (ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Split', ((41, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (12, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#5#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 's___ptr_to_void#v'), Expr ('Var', Type ('Word', 32), name = 'c___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'p___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (41, ('Number', (0, 3))), (ProofNode ('Restr', (12, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (41, ('Offset', (0, 3))), (ProofNode ('Restr', (12, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 33 is visited
Step 2: case in (1) where 33 is visited
  Prove the number of visits to 33 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 3 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 33 is not visited
  Prove the number of visits to 33 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove visits to 41 related to visits to 12
    with equalities
      ((Mem) ('mem')) (@ addr 41)
      = ((Mem) ('Mem')) (@ addr 12)
    and with invariants
      ((Word32) ('r4')) (@ addr 41)
      ((Word32) ('r8')) (@ addr 41)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 41)
      ((Word32) ('r5')) (@ addr 41)
      ((Word32) ('r9')) (@ addr 41)
      ((Word32) ('ret')) (@ addr 41)
      ((Word32) ('r2')) (@ addr 41)
      ((Word32) ('r11')) (@ addr 41)
      ((Word32) ('r1')) (@ addr 41)
      ((Word32) ('r13')) (@ addr 41)
      ((Word32) ('r10')) (@ addr 41)
      ((Bool) (ROData('mem'))) (@ addr 41)
      ((Word32) ('r6')) (@ addr 41)
      ((Word32) ('r7')) (@ addr 41)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 41)
      ((Word32) (('loop#5#count' + ((0 - '#seq-visits') * 1)))) (@ addr 12)
      ((Word32) (('n___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 12)
      ((Word32) ('s___ptr_to_void#v')) (@ addr 12)
      ((Word32) ('c___unsigned_long#v')) (@ addr 12)
      ((Word32[50]) ('GhostAssertions')) (@ addr 12)
      ((Word32) (('p___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 12)
    .. proven.
Step 8: case in (7) where the length of the sequence < 2
  Prove the number of visits to 41 is in {0 ..< 3}
    .. proven.
Step 9: 
  Prove the number of visits to 12 is in {0 ..< 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where the length of the sequence is i + 2
  Prove the number of visits to 41 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 12 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (memset (ASM) <= Kernel_C.memset (C)), time taken: 51.95s
Testing Function pair Pairing (create_rootserver_objects (ASM) <= Kernel_C.create_rootserver_objects (C))
  (function pairing 83 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_rootserver_objects (ASM) <= Kernel_C.create_rootserver_objects (C)), time taken: 10.42s
Testing Function pair Pairing (setPriority (ASM) <= Kernel_C.setPriority (C))
  (function pairing 84 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setPriority (ASM) <= Kernel_C.setPriority (C)), time taken: 5.02s
Testing Function pair Pairing (reserve_region (ASM) <= Kernel_C.reserve_region (C))
  (function pairing 85 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [59, 52]
  (in problem)
Now doing proof search in 59 init case in problem.
Discovered a loop relation for split points [107, 27]
  (in 59 init case in problem)
Now doing proof search in 107 init case in 59 init case in problem.
Now doing proof search in 107 loop case in 59 init case in problem.
Now doing proof search in 59 loop case in problem.
Discovered a loop relation for split points [107, 27]
  (in 59 loop case in problem)
Now doing proof search in 107 init case in 59 loop case in problem.
Now doing proof search in 107 loop case in 59 loop case in problem.
ProofNode ('Split', ((59, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 8)])]), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (52, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.end_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.start_C'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#12#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (59, ('Number', (0, 3))), (ProofNode ('Restr', (52, ('Number', (0, 4))), (ProofNode ('Split', ((107, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967295)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967288)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (27, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.start_C'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'j___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (107, ('Number', (0, 3))), (ProofNode ('Restr', (27, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (107, ('Offset', (0, 3))), (ProofNode ('Restr', (27, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (59, ('Offset', (0, 3))), (ProofNode ('Restr', (52, ('Offset', (0, 3))), (ProofNode ('Split', ((107, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967295)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967288)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (27, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.start_C'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'j___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (107, ('Number', (0, 3))), (ProofNode ('Restr', (27, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (107, ('Offset', (0, 3))), (ProofNode ('Restr', (27, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 59 related to visits [2, 3, 4 ...] to 52
    with equalities
    and with invariants
      ((Word32) ('r4')) (@ addr 59)
      ((Word32) ('r13')) (@ addr 59)
      ((Word32) ('r10')) (@ addr 59)
      ((Word32) ('r12')) (@ addr 59)
      ((Word32) ('r9')) (@ addr 59)
      ((Word32) ('r7')) (@ addr 59)
      ((Word32) ('r8')) (@ addr 59)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 8)))) (@ addr 59)
      ((Word32) ('r14')) (@ addr 59)
      ((Word32) ('r11')) (@ addr 59)
      ((Word32) ('ret')) (@ addr 59)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 1)))) (@ addr 59)
      ((Mem) ('mem')) (@ addr 59)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 59)
      ((Word32) ('reg___struct_p_region_C#v.end_C')) (@ addr 52)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 52)
      ((Word32) ('reg___struct_p_region_C#v.start_C')) (@ addr 52)
      ((Mem) ('Mem')) (@ addr 52)
      ((Word32[50]) ('GhostAssertions')) (@ addr 52)
      ((Word32) (('loop#12#count' + ((0 - '#seq-visits') * 1)))) (@ addr 52)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 59 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 52 is in {0 ..< 4}
    .. proven.
Step 4: 
  prove visits to 107 related to visits to 27
    with equalities
      ((Mem) ('mem')) (@ addr 107)
      = ((Mem) ('Mem')) (@ addr 27)
    and with invariants
      ((Word32) ('r7')) (@ addr 107)
      ((Word32) ('r4')) (@ addr 107)
      ((Word32) ('r8')) (@ addr 107)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 4294967295)))) (@ addr 107)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4294967288)))) (@ addr 107)
      ((Word32) ('r12')) (@ addr 107)
      ((Word32) ('r9')) (@ addr 107)
      ((Word32) ('ret')) (@ addr 107)
      ((Word32) ('r11')) (@ addr 107)
      ((Word32) ('r13')) (@ addr 107)
      ((Word32) ('r10')) (@ addr 107)
      ((Bool) (ROData('mem'))) (@ addr 107)
      ((Word32) ('r6')) (@ addr 107)
      ((Word32) ('r2')) (@ addr 107)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 107)
      ((Word32) ('reg___struct_p_region_C#v.end_C')) (@ addr 27)
      ((Word32) ('i___unsigned_long#v')) (@ addr 27)
      ((Word32) ('reg___struct_p_region_C#v.start_C')) (@ addr 27)
      ((Word32[50]) ('GhostAssertions')) (@ addr 27)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 27)
      ((Word32) (('j___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 27)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 107 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 27 is in {0 ..< 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 107 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 27 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 59 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 52 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 107 related to visits to 27
    with equalities
      ((Mem) ('mem')) (@ addr 107)
      = ((Mem) ('Mem')) (@ addr 27)
    and with invariants
      ((Word32) ('r7')) (@ addr 107)
      ((Word32) ('r4')) (@ addr 107)
      ((Word32) ('r8')) (@ addr 107)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 4294967295)))) (@ addr 107)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4294967288)))) (@ addr 107)
      ((Word32) ('r12')) (@ addr 107)
      ((Word32) ('r9')) (@ addr 107)
      ((Word32) ('ret')) (@ addr 107)
      ((Word32) ('r11')) (@ addr 107)
      ((Word32) ('r13')) (@ addr 107)
      ((Word32) ('r10')) (@ addr 107)
      ((Bool) (ROData('mem'))) (@ addr 107)
      ((Word32) ('r6')) (@ addr 107)
      ((Word32) ('r2')) (@ addr 107)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 107)
      ((Word32) ('reg___struct_p_region_C#v.end_C')) (@ addr 27)
      ((Word32) ('i___unsigned_long#v')) (@ addr 27)
      ((Word32) ('reg___struct_p_region_C#v.start_C')) (@ addr 27)
      ((Word32[50]) ('GhostAssertions')) (@ addr 27)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 27)
      ((Word32) (('j___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 27)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 107 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 27 is in {0 ..< 3}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 107 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 27 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (reserve_region (ASM) <= Kernel_C.reserve_region (C)), time taken: 230.00s
Testing Function pair Pairing (sendFaultIPC (ASM) <= Kernel_C.sendFaultIPC (C))
  (function pairing 86 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (sendFaultIPC (ASM) <= Kernel_C.sendFaultIPC (C)), time taken: 10.64s
Testing Function pair Pairing (lookupSlotForCNodeOp (ASM) <= Kernel_C.lookupSlotForCNodeOp (C))
  (function pairing 87 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lookupSlotForCNodeOp (ASM) <= Kernel_C.lookupSlotForCNodeOp (C)), time taken: 8.77s
Testing Function pair Pairing (get_num_avail_p_regs (ASM) <= Kernel_C.get_num_avail_p_regs (C))
  (function pairing 88 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (get_num_avail_p_regs (ASM) <= Kernel_C.get_num_avail_p_regs (C)), time taken: 0.18s
Testing Function pair Pairing (Arch_activateIdleThread (ASM) <= Kernel_C.Arch_activateIdleThread (C))
  (function pairing 89 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_activateIdleThread (ASM) <= Kernel_C.Arch_activateIdleThread (C)), time taken: 0.17s
Testing Function pair Pairing (alloc_rootserver_obj (ASM) <= Kernel_C.alloc_rootserver_obj (C))
  (function pairing 90 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (alloc_rootserver_obj (ASM) <= Kernel_C.alloc_rootserver_obj (C)), time taken: 0.89s
Testing Function pair Pairing (get_avail_p_regs (ASM) <= Kernel_C.get_avail_p_regs (C))
  (function pairing 91 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (get_avail_p_regs (ASM) <= Kernel_C.get_avail_p_regs (C)), time taken: 0.15s
Testing Function pair Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))
  (function pairing 92 of 282)
Aborting Problem (Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))): underspecified instruction'vmrs_r3_fpexc_E0003B54
Result ProblemAbort for pair Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C)), time taken: 0.83s
Testing Function pair Pairing (emptySlot (ASM) <= Kernel_C.emptySlot (C))
  (function pairing 93 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (emptySlot (ASM) <= Kernel_C.emptySlot (C)), time taken: 7.55s
Testing Function pair Pairing (lookupSlot (ASM) <= Kernel_C.lookupSlot (C))
  (function pairing 94 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lookupSlot (ASM) <= Kernel_C.lookupSlot (C)), time taken: 8.11s
Testing Function pair Pairing (slotCapLongRunningDelete (ASM) <= Kernel_C.slotCapLongRunningDelete (C))
  (function pairing 95 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (slotCapLongRunningDelete (ASM) <= Kernel_C.slotCapLongRunningDelete (C)), time taken: 0.84s
Testing Function pair Pairing (tcbEPDequeue (ASM) <= Kernel_C.tcbEPDequeue (C))
  (function pairing 96 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (tcbEPDequeue (ASM) <= Kernel_C.tcbEPDequeue (C)), time taken: 6.06s
Testing Function pair Pairing (handleUserLevelFault (ASM) <= Kernel_C.handleUserLevelFault (C))
  (function pairing 97 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleUserLevelFault (ASM) <= Kernel_C.handleUserLevelFault (C)), time taken: 1.29s
Testing Function pair Pairing (setThreadState (ASM) <= Kernel_C.setThreadState (C))
  (function pairing 98 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setThreadState (ASM) <= Kernel_C.setThreadState (C)), time taken: 2.50s
Testing Function pair Pairing (lookupPivotSlot (ASM) <= Kernel_C.lookupPivotSlot (C))
  (function pairing 99 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lookupPivotSlot (ASM) <= Kernel_C.lookupPivotSlot (C)), time taken: 4.63s
Testing Function pair Pairing (setVMRootForFlush (ASM) <= Kernel_C.setVMRootForFlush (C))
  (function pairing 100 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setVMRootForFlush (ASM) <= Kernel_C.setVMRootForFlush (C)), time taken: 5.14s
Testing Function pair Pairing (cleanCacheRange_PoU (ASM) <= Kernel_C.cleanCacheRange_PoU (C))
  (function pairing 101 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [22, 9]
  (in problem)
Now doing proof search in 22 init case in problem.
Now doing proof search in 22 loop case in problem.
ProofNode ('Split', ((22, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r1')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (9, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (22, ('Number', (0, 3))), (ProofNode ('Restr', (9, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (22, ('Offset', (0, 3))), (ProofNode ('Restr', (9, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 22 related to visits to 9
    with equalities
      ((Mem) ('mem')) (@ addr 22)
      = ((Mem) ('Mem')) (@ addr 9)
    and with invariants
      ((Word32) ('r21')) (@ addr 22)
      ((Word32) ('r4')) (@ addr 22)
      ((Word32) ('r27')) (@ addr 22)
      ((Word32) ('r17')) (@ addr 22)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 22)
      ((Word32) ('r23')) (@ addr 22)
      ((Word32) ('r13')) (@ addr 22)
      ((Word32) ('r10')) (@ addr 22)
      ((Word32) ('r28')) (@ addr 22)
      ((Word32) ('r19')) (@ addr 22)
      ((Word32) ('r16')) (@ addr 22)
      ((Word64) ('clock')) (@ addr 22)
      ((Word32) ('r12')) (@ addr 22)
      ((Word32) ('r9')) (@ addr 22)
      ((Word32) ('r6')) (@ addr 22)
      ((Word32) ('r7')) (@ addr 22)
      ((Word32) ('r31')) (@ addr 22)
      ((Word32) ('r25')) (@ addr 22)
      ((Word32) ('r24')) (@ addr 22)
      ((Word32) ('r8')) (@ addr 22)
      ((Word32) ('r29')) (@ addr 22)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 22)
      ((Word32) ('r18')) (@ addr 22)
      ((Word32) ('r20')) (@ addr 22)
      ((Word32) ('r30')) (@ addr 22)
      ((Word32) ('r14')) (@ addr 22)
      ((Word32) ('r15')) (@ addr 22)
      ((Word32) ('mode')) (@ addr 22)
      ((Word32) ('r11')) (@ addr 22)
      ((Word32) ('r5')) (@ addr 22)
      ((Word32) ('ret')) (@ addr 22)
      ((Word32) ('r26')) (@ addr 22)
      ((Word32) ('r1')) (@ addr 22)
      ((Word32) ('r2')) (@ addr 22)
      ((Bool) (ROData('mem'))) (@ addr 22)
      ((Word32) ('r22')) (@ addr 22)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 22)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r1')), ((Word32) ('r0')))))) (@ addr 22)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r1')))))) (@ addr 22)
      ((Bool) ('c')) (@ addr 22)
      ((Bool) ('n')) (@ addr 22)
      ((Bool) ('v')) (@ addr 22)
      ((Bool) ('z')) (@ addr 22)
      ((Word32) ('end___unsigned_long#v')) (@ addr 9)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 9)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 9)
      ((Word32) ('start___unsigned_long#v')) (@ addr 9)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 9)
      ((Word32[50]) ('GhostAssertions')) (@ addr 9)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 22 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 9 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 22 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 9 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cleanCacheRange_PoU (ASM) <= Kernel_C.cleanCacheRange_PoU (C)), time taken: 69.11s
Testing Function pair Pairing (doReplyTransfer (ASM) <= Kernel_C.doReplyTransfer (C))
  (function pairing 102 of 282)
 .. built problem, finding proof
Decided to case split at (33, 'ASM')
  (in problem)
Now doing proof search in true case (33 visited) in problem.
Now doing proof search in false case (33 not visited) in problem.
ProofNode ('CaseSplit', (33, 'ASM'), (ProofNode ('Restr', (33, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (33, ('Number', (0, 1))), (ProofNode ('Restr', (7, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 33 is visited
Step 2: case in (1) where 33 is visited
  Prove the number of visits to 33 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 33 is not visited
  Prove the number of visits to 33 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 7 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (doReplyTransfer (ASM) <= Kernel_C.doReplyTransfer (C)), time taken: 14.20s
Testing Function pair Pairing (invokeCNodeCancelBadgedSends (ASM) <= Kernel_C.invokeCNodeCancelBadgedSends (C))
  (function pairing 103 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeCNodeCancelBadgedSends (ASM) <= Kernel_C.invokeCNodeCancelBadgedSends (C)), time taken: 1.03s
Testing Function pair Pairing (Arch_decodeInvocation (ASM) <= Kernel_C.Arch_decodeInvocation (C))
  (function pairing 104 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_decodeInvocation (ASM) <= Kernel_C.Arch_decodeInvocation (C)), time taken: 9.42s
Testing Function pair Pairing (createObject (ASM) <= Kernel_C.createObject (C))
  (function pairing 105 of 282)
 .. built problem, finding proof
Decided to case split at (53, 'ASM')
  (in problem)
Now doing proof search in true case (53 visited) in problem.
Now doing proof search in false case (53 not visited) in problem.
ProofNode ('CaseSplit', (53, 'ASM'), (ProofNode ('Restr', (53, ('Number', (1, 2))), (ProofNode ('Restr', (48, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (53, ('Number', (0, 1))), (ProofNode ('Restr', (48, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 53 is visited
Step 2: case in (1) where 53 is visited
  Prove the number of visits to 53 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 48 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 53 is not visited
  Prove the number of visits to 53 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 48 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (createObject (ASM) <= Kernel_C.createObject (C)), time taken: 9.81s
Testing Function pair Pairing (APFromVMRights (ASM) <= Kernel_C.APFromVMRights (C))
  (function pairing 106 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (APFromVMRights (ASM) <= Kernel_C.APFromVMRights (C)), time taken: 0.48s
Testing Function pair Pairing (create_it_address_space (ASM) <= Kernel_C.create_it_address_space (C))
  (function pairing 107 of 282)
 .. built problem, finding proof

**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [229, 24]
  (in problem)
Now doing proof search in 229 init case in problem.
Now doing proof search in 229 loop case in problem.
ProofNode ('Split', ((229, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1048576)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'ret_addr_input'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (24, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'it_v_reg___struct_v_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'slot_pos_before___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'pt_vptr___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Num', Type ('Word', 32), val = 8), Expr ('Num', Type ('Word', 32), val = 12)])])])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (229, ('Number', (0, 3))), (ProofNode ('Restr', (24, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (229, ('Offset', (0, 3))), (ProofNode ('Restr', (24, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 229 related to visits to 24
    with equalities
      ((Mem) ('mem')) (@ addr 229)
      = ((Mem) ('Mem')) (@ addr 24)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1048576)))) (@ addr 229)
      ((Word32) ('r13')) (@ addr 229)
      ((Word32) ('r10')) (@ addr 229)
      ((Word32) ('r9')) (@ addr 229)
      ((Word32) ('r6')) (@ addr 229)
      ((Word32) ('r7')) (@ addr 229)
      ((Word32) ('r8')) (@ addr 229)
      ((Word32) ('ret_addr_input')) (@ addr 229)
      ((Word32) ('r11')) (@ addr 229)
      ((Word32) ('r5')) (@ addr 229)
      ((Word32) ('ret')) (@ addr 229)
      ((Bool) (ROData('mem'))) (@ addr 229)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 229)
      ((Word32) ('it_v_reg___struct_v_region_C#v.end_C')) (@ addr 24)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 24)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.1')) (@ addr 24)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 24)
      ((Word32) ('slot_pos_before___unsigned_long#v')) (@ addr 24)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.0')) (@ addr 24)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 24)
      ((Word32) (('pt_vptr___unsigned_long#v' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast((8 + 12))))))) (@ addr 24)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 229 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 24 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 229 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 24 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_it_address_space (ASM) <= Kernel_C.create_it_address_space (C)), time taken: 490.54s
Testing Function pair Pairing (timerTick (ASM) <= Kernel_C.timerTick (C))
  (function pairing 108 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (timerTick (ASM) <= Kernel_C.timerTick (C)), time taken: 7.87s
Testing Function pair Pairing (flushSpace (ASM) <= Kernel_C.flushSpace (C))
  (function pairing 109 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (flushSpace (ASM) <= Kernel_C.flushSpace (C)), time taken: 1.21s
Testing Function pair Pairing (Arch_performTransfer (ASM) <= Kernel_C.Arch_performTransfer (C))
  (function pairing 110 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_performTransfer (ASM) <= Kernel_C.Arch_performTransfer (C)), time taken: 0.18s
Testing Function pair Pairing (handleDoubleFault (ASM) <= Kernel_C.handleDoubleFault (C))
  (function pairing 111 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleDoubleFault (ASM) <= Kernel_C.handleDoubleFault (C)), time taken: 0.52s
Testing Function pair Pairing (lockTLBEntry (ASM) <= Kernel_C.lockTLBEntry (C))
  (function pairing 112 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lockTLBEntry (ASM) <= Kernel_C.lockTLBEntry (C)), time taken: 0.79s
Testing Function pair Pairing (cteInsert (ASM) <= Kernel_C.cteInsert (C))
  (function pairing 113 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cteInsert (ASM) <= Kernel_C.cteInsert (C)), time taken: 8.84s
Testing Function pair Pairing (isFinalCapability (ASM) <= Kernel_C.isFinalCapability (C))
  (function pairing 114 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (isFinalCapability (ASM) <= Kernel_C.isFinalCapability (C)), time taken: 3.54s
Testing Function pair Pairing (findPDForASID (ASM) <= Kernel_C.findPDForASID (C))
  (function pairing 115 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (findPDForASID (ASM) <= Kernel_C.findPDForASID (C)), time taken: 0.62s
Testing Function pair Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))
  (function pairing 116 of 282)
Aborting Problem (Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (slowpath (ASM) <= Kernel_C.slowpath (C)), time taken: 0.00s
Testing Function pair Pairing (cleanCaches_PoU (ASM) <= Kernel_C.cleanCaches_PoU (C))
  (function pairing 117 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cleanCaches_PoU (ASM) <= Kernel_C.cleanCaches_PoU (C)), time taken: 1.29s
Testing Function pair Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C))
  (function pairing 118 of 282)
Skipping Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C)), underspecified C
Testing Function pair Pairing (scheduleChooseNewThread (ASM) <= Kernel_C.scheduleChooseNewThread (C))
  (function pairing 119 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (scheduleChooseNewThread (ASM) <= Kernel_C.scheduleChooseNewThread (C)), time taken: 7.00s
Testing Function pair Pairing (bindNotification (ASM) <= Kernel_C.bindNotification (C))
  (function pairing 120 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (bindNotification (ASM) <= Kernel_C.bindNotification (C)), time taken: 0.49s
Testing Function pair Pairing (strncmp (ASM) <= Kernel_C.strncmp (C))
  (function pairing 121 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [27, 4]
  (in problem)
Now doing proof search in 27 init case in problem.
Now doing proof search in 27 loop case in problem.
ProofNode ('Split', ((27, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (4, (1, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'n___int#v'), Expr ('Var', Type ('Word', 32), name = 's1___ptr_to_char#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('Word', 32), name = 's2___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (27, ('Number', (0, 3))), (ProofNode ('Restr', (4, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (27, ('Offset', (0, 3))), (ProofNode ('Restr', (4, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 27 related to visits [2, 3, 4 ...] to 4
    with equalities
    and with invariants
      ((Word32) ('r8')) (@ addr 27)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 1)))) (@ addr 27)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 27)
      ((Word32) ('r5')) (@ addr 27)
      ((Word32) ('r9')) (@ addr 27)
      ((Word32) ('ret')) (@ addr 27)
      ((Word32) ('r2')) (@ addr 27)
      ((Word32) ('r11')) (@ addr 27)
      ((Word32) ('r13')) (@ addr 27)
      ((Word32) ('r10')) (@ addr 27)
      ((Mem) ('mem')) (@ addr 27)
      ((Word32) ('r6')) (@ addr 27)
      ((Word32) ('r7')) (@ addr 27)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 27)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 4)
      ((Word32) ('n___int#v')) (@ addr 4)
      ((Word32) ('s1___ptr_to_char#v')) (@ addr 4)
      ((Mem) ('Mem')) (@ addr 4)
      ((Word32) ('s2___ptr_to_char#v')) (@ addr 4)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 27 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 4 is in {0 ..< 4}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 27 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 4 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (strncmp (ASM) <= Kernel_C.strncmp (C)), time taken: 69.26s
Testing Function pair Pairing (bi_finalise (ASM) <= Kernel_C.bi_finalise (C))
  (function pairing 122 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (bi_finalise (ASM) <= Kernel_C.bi_finalise (C)), time taken: 0.46s
Testing Function pair Pairing (setIRQTrigger (ASM) <= Kernel_C.setIRQTrigger (C))
  (function pairing 123 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setIRQTrigger (ASM) <= Kernel_C.setIRQTrigger (C)), time taken: 0.82s
Testing Function pair Pairing (ensureNoChildren (ASM) <= Kernel_C.ensureNoChildren (C))
  (function pairing 124 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (ensureNoChildren (ASM) <= Kernel_C.ensureNoChildren (C)), time taken: 0.80s
Testing Function pair Pairing (Arch_handleFaultReply (ASM) <= Kernel_C.Arch_handleFaultReply (C))
  (function pairing 125 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_handleFaultReply (ASM) <= Kernel_C.Arch_handleFaultReply (C)), time taken: 0.23s
Testing Function pair Pairing (Arch_maskCapRights (ASM) <= Kernel_C.Arch_maskCapRights (C))
  (function pairing 126 of 282)
 .. built problem, finding proof
Decided to case split at (45, 'ASM')
  (in problem)
Now doing proof search in true case (45 visited) in problem.
Now doing proof search in false case (45 not visited) in problem.
ProofNode ('CaseSplit', (45, 'ASM'), (ProofNode ('Restr', (45, ('Number', (1, 2))), (ProofNode ('Restr', (12, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (45, ('Number', (0, 1))), (ProofNode ('Restr', (12, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 45 is visited
Step 2: case in (1) where 45 is visited
  Prove the number of visits to 45 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 12 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 45 is not visited
  Prove the number of visits to 45 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 12 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_maskCapRights (ASM) <= Kernel_C.Arch_maskCapRights (C)), time taken: 10.57s
Testing Function pair Pairing (Arch_switchToIdleThread (ASM) <= Kernel_C.Arch_switchToIdleThread (C))
  (function pairing 127 of 282)
 .. built problem, finding proof
Discovered that points [5 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_switchToIdleThread (ASM) <= Kernel_C.Arch_switchToIdleThread (C)), time taken: 0.76s
Testing Function pair Pairing (handleVMFault (ASM) <= Kernel_C.handleVMFault (C))
  (function pairing 128 of 282)
 .. built problem, finding proof
Decided to case split at (28, 'ASM')
  (in problem)
Now doing proof search in true case (28 visited) in problem.
Now doing proof search in false case (28 not visited) in problem.
ProofNode ('CaseSplit', (28, 'ASM'), (ProofNode ('Restr', (28, ('Number', (1, 2))), (ProofNode ('Restr', (23, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),))))
 .. proof found.
Step 1: 
  case split on whether 28 is visited
Step 2: case in (1) where 28 is visited
  Prove the number of visits to 28 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 23 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 28 is not visited
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleVMFault (ASM) <= Kernel_C.handleVMFault (C)), time taken: 4.93s
Testing Function pair Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))
  (function pairing 129 of 282)
Aborting Problem (Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))), complex loop
Result ProblemAbort for pair Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C)), time taken: 3.01s
Testing Function pair Pairing (decodeIRQHandlerInvocation (ASM) <= Kernel_C.decodeIRQHandlerInvocation (C))
  (function pairing 130 of 282)
 .. built problem, finding proof
Decided to case split at (52, 'ASM')
  (in problem)
Now doing proof search in true case (52 visited) in problem.
Now doing proof search in false case (52 not visited) in problem.
ProofNode ('CaseSplit', (52, 'ASM'), (ProofNode ('Restr', (52, ('Number', (1, 2))), (ProofNode ('Restr', (35, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (52, ('Number', (0, 1))), (ProofNode ('Restr', (35, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 52 is visited
Step 2: case in (1) where 52 is visited
  Prove the number of visits to 52 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 35 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 52 is not visited
  Prove the number of visits to 52 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 35 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeIRQHandlerInvocation (ASM) <= Kernel_C.decodeIRQHandlerInvocation (C)), time taken: 21.46s
Testing Function pair Pairing (resolveAddressBits (ASM) <= Kernel_C.resolveAddressBits (C))
  (function pairing 131 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [94, 36]
  (in problem)
Now doing proof search in 94 init case in problem.
Now doing proof search in 94 loop case in problem.
ProofNode ('Split', ((94, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'ret_addr_input'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (36, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#5#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C'), Expr ('Var', Type ('Word', 32), name = 'capptr___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'ret___struct_resolveAddressBits_ret_C#v.slot_C'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'n_bits___unsigned_long#v')), (Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'nodeCap___struct_cap_C#v.words_C.0')), (Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'radixBits___unsigned_long#v')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'levelBits___unsigned_long#v'))], 2, 1), (ProofNode ('Restr', (94, ('Number', (0, 3))), (ProofNode ('Restr', (36, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (94, ('Offset', (0, 3))), (ProofNode ('Restr', (36, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 94 related to visits to 36
    with equalities
      ((Word32) ('r1')) (@ addr 94)
      = ((Word32) ('n_bits___unsigned_long#v')) (@ addr 36)
      ((Word32) ('r14')) (@ addr 94)
      = ((Word32) ('nodeCap___struct_cap_C#v.words_C.0')) (@ addr 36)
      ((Word32) ('r2')) (@ addr 94)
      = ((Word32) ('radixBits___unsigned_long#v')) (@ addr 36)
      ((Word32) ('r4')) (@ addr 94)
      = ((Word32) ('levelBits___unsigned_long#v')) (@ addr 36)
    and with invariants
      ((Word32) ('r0')) (@ addr 94)
      ((Word32) ('r13')) (@ addr 94)
      ((Word32) ('r10')) (@ addr 94)
      ((Word32) ('r9')) (@ addr 94)
      ((Word32) ('r3')) (@ addr 94)
      ((Word32) ('ret_addr_input')) (@ addr 94)
      ((Word32) ('r5')) (@ addr 94)
      ((Word32) ('ret')) (@ addr 94)
      ((Word32) ('r11')) (@ addr 94)
      ((Mem) ('mem')) (@ addr 94)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 94)
      ((Word32) (('loop#5#count' + ((0 - '#seq-visits') * 1)))) (@ addr 36)
      ((Word32) ('ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C')) (@ addr 36)
      ((Word32) ('capptr___unsigned_long#v')) (@ addr 36)
      ((Word32) ('ret___struct_resolveAddressBits_ret_C#v.slot_C')) (@ addr 36)
      ((Mem) ('Mem')) (@ addr 36)
      ((Word32[50]) ('GhostAssertions')) (@ addr 36)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 94 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 36 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 94 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 36 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (resolveAddressBits (ASM) <= Kernel_C.resolveAddressBits (C)), time taken: 443.71s
Testing Function pair Pairing (isIRQActive (ASM) <= Kernel_C.isIRQActive (C))
  (function pairing 132 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (isIRQActive (ASM) <= Kernel_C.isIRQActive (C)), time taken: 0.26s
Testing Function pair Pairing (cancelAllSignals (ASM) <= Kernel_C.cancelAllSignals (C))
  (function pairing 133 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [33, 10]
  (in problem)
Now doing proof search in 33 init case in problem.
Now doing proof search in 33 loop case in problem.
ProofNode ('Split', ((33, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (10, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'))], 2, 1), (ProofNode ('Restr', (33, ('Number', (0, 3))), (ProofNode ('Restr', (10, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (33, ('Offset', (0, 3))), (ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 33 related to visits to 10
    with equalities
      ((Mem) ('mem')) (@ addr 33)
      = ((Mem) ('Mem')) (@ addr 10)
      ((Word32) ('r0')) (@ addr 33)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 10)
      ((Word32) ('r4')) (@ addr 33)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 10)
    and with invariants
      ((Word32) ('r7')) (@ addr 33)
      ((Word32) ('r8')) (@ addr 33)
      ((Word32) ('r11')) (@ addr 33)
      ((Word32) ('r13')) (@ addr 33)
      ((Word32) ('r9')) (@ addr 33)
      ((Word32) ('ret')) (@ addr 33)
      ((Word32) ('r1')) (@ addr 33)
      ((Word32) ('r10')) (@ addr 33)
      ((Bool) (ROData('mem'))) (@ addr 33)
      ((Word32) ('r5')) (@ addr 33)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 33)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 10)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 33 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 10 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 33 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 10 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cancelAllSignals (ASM) <= Kernel_C.cancelAllSignals (C)), time taken: 112.70s
Testing Function pair Pairing (restart (ASM) <= Kernel_C.restart (C))
  (function pairing 134 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (restart (ASM) <= Kernel_C.restart (C)), time taken: 2.99s
Testing Function pair Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C))
  (function pairing 135 of 282)
 .. built problem, finding proof
Discovered that points [77 (loop head)] can be bounded
  (in problem)
Discovered that points [13 (loop head)] can be bounded
  (in problem)
Found a future induction at 4
Now doing proof search in problem.
Discovered a loop relation for split points [51, 9]
  (in problem)
Now doing proof search in 51 init case in problem.
Now doing proof search in 51 loop case in problem.
ProofNode ('Restr', (77, ('Number', (0, 5))), (ProofNode ('Restr', (13, ('Number', (0, 6))), (ProofNode ('SingleRevInduct', (4, ([Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'recvBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'sendBuf___ptr_to_unsigned_long#v'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])])], 1), (Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Num', Type ('Word', 32), val = 939528218)]), 4294967293)), (ProofNode ('Split', ((51, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (9, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'sendBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'recvBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (51, ('Number', (0, 3))), (ProofNode ('Restr', (9, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (51, ('Offset', (0, 3))), (ProofNode ('Restr', (9, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 77 is in {0 ..< 5}
    .. proven.
Step 2: 
  Prove the number of visits to 13 is in {0 ..< 6}
    .. proven.
Step 3: 
  Proving a predicate by future induction.
    proving these invariants by 1-induction
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('n___unsigned_long#v')) (@ addr 4)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 4)
      ((Word32) ('recvBuf___ptr_to_unsigned_long#v')) (@ addr 4)
      ((Word32[50]) ('GhostAssertions')) (@ addr 4)
      ((Word32) ('sendBuf___ptr_to_unsigned_long#v')) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))), ((Word32) ('i___unsigned_long#v'))), Less(((Word32) ((0 - WordCastSigned(1)))), ((Word32) ('i___unsigned_long#v')))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))), ((Word32) ('i___unsigned_long#v'))), Less(((Word32) ('i___unsigned_long#v')), ((Word32) ((0 - WordCastSigned(1)))))))) (@ addr 4)
    then establishing this predicate
      ((Bool) (Less(((Word32) ('n___unsigned_long#v')), ((Word32) (939528218))))) (@ addr 4)
    at large iterations (4294967293) and by back induction.
    .. proven.
Step 4: 
  prove visits to 51 related to visits to 9
    with equalities
      ((Mem) ('mem')) (@ addr 51)
      = ((Mem) ('Mem')) (@ addr 9)
    and with invariants
      ((Word32) ('r7')) (@ addr 51)
      ((Word32) ('r8')) (@ addr 51)
      ((Word32) ('r1')) (@ addr 51)
      ((Word32) ('r0')) (@ addr 51)
      ((Word32) ('r9')) (@ addr 51)
      ((Word32) ('ret')) (@ addr 51)
      ((Word32) ('r11')) (@ addr 51)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 4)))) (@ addr 51)
      ((Word32) ('r13')) (@ addr 51)
      ((Word32) ('r10')) (@ addr 51)
      ((Bool) (ROData('mem'))) (@ addr 51)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 4)))) (@ addr 51)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 51)
      ((Word32) ('sendBuf___ptr_to_unsigned_long#v')) (@ addr 9)
      ((Word32) ('n___unsigned_long#v')) (@ addr 9)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 9)
      ((Word32) ('recvBuf___ptr_to_unsigned_long#v')) (@ addr 9)
      ((Word32[50]) ('GhostAssertions')) (@ addr 9)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 9)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 51 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 9 is in {0 ..< 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is i + 2
  Prove the number of visits to 51 is in {i + 0 ..< i + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 9 is in {i + 0 ..< i + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C)), time taken: 228.07s
Testing Function pair Pairing (invokeCNodeMove (ASM) <= Kernel_C.invokeCNodeMove (C))
  (function pairing 136 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeCNodeMove (ASM) <= Kernel_C.invokeCNodeMove (C)), time taken: 0.55s
Testing Function pair Pairing (invalidateASIDEntry (ASM) <= Kernel_C.invalidateASIDEntry (C))
  (function pairing 137 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invalidateASIDEntry (ASM) <= Kernel_C.invalidateASIDEntry (C)), time taken: 6.69s
Testing Function pair Pairing (create_initial_thread (ASM) <= Kernel_C.create_initial_thread (C))
  (function pairing 138 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_initial_thread (ASM) <= Kernel_C.create_initial_thread (C)), time taken: 104.06s
Testing Function pair Pairing (memzero (ASM) <= Kernel_C.memzero (C))
  (function pairing 139 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [20, 10]
  (in problem)
Now doing proof search in 20 init case in problem.
Now doing proof search in 20 loop case in problem.
ProofNode ('Split', ((20, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967292)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (10, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'p___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (20, ('Number', (0, 3))), (ProofNode ('Restr', (10, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (20, ('Offset', (0, 3))), (ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 20 related to visits to 10
    with equalities
      ((Mem) ('mem')) (@ addr 20)
      = ((Mem) ('Mem')) (@ addr 10)
    and with invariants
      ((Word32) ('r7')) (@ addr 20)
      ((Word32) ('r4')) (@ addr 20)
      ((Word32) ('r8')) (@ addr 20)
      ((Word32) ('r14')) (@ addr 20)
      ((Word32) ('r3')) (@ addr 20)
      ((Word32) ('r5')) (@ addr 20)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 20)
      ((Word32) ('r9')) (@ addr 20)
      ((Word32) ('ret')) (@ addr 20)
      ((Word32) ('r11')) (@ addr 20)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4294967292)))) (@ addr 20)
      ((Word32) ('r13')) (@ addr 20)
      ((Word32) ('r10')) (@ addr 20)
      ((Bool) (ROData('mem'))) (@ addr 20)
      ((Word32) ('r6')) (@ addr 20)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 20)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 10)
      ((Word32) (('n___unsigned_long#v' - ((0 - '#seq-visits') * WordCast(4))))) (@ addr 10)
      ((Word32[50]) ('GhostAssertions')) (@ addr 10)
      ((Word32) (('p___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 4)))) (@ addr 10)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 20 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 10 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 20 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 10 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (memzero (ASM) <= Kernel_C.memzero (C)), time taken: 25.39s
Testing Function pair Pairing (isValidVTableRoot (ASM) <= Kernel_C.isValidVTableRoot (C))
  (function pairing 140 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (isValidVTableRoot (ASM) <= Kernel_C.isValidVTableRoot (C)), time taken: 1.05s
Testing Function pair Pairing (flushPage (ASM) <= Kernel_C.flushPage (C))
  (function pairing 141 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (flushPage (ASM) <= Kernel_C.flushPage (C)), time taken: 2.28s
Testing Function pair Pairing (maskCapRights (ASM) <= Kernel_C.maskCapRights (C))
  (function pairing 142 of 282)
 .. built problem, finding proof
Decided to case split at (73, 'ASM')
  (in problem)
Now doing proof search in true case (73 visited) in problem.
Now doing proof search in false case (73 not visited) in problem.
ProofNode ('CaseSplit', (73, 'ASM'), (ProofNode ('Restr', (73, ('Number', (1, 2))), (ProofNode ('Restr', (61, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (73, ('Number', (0, 1))), (ProofNode ('Restr', (61, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 73 is visited
Step 2: case in (1) where 73 is visited
  Prove the number of visits to 73 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 61 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 73 is not visited
  Prove the number of visits to 73 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 61 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (maskCapRights (ASM) <= Kernel_C.maskCapRights (C)), time taken: 12.89s
Testing Function pair Pairing (Arch_decodeTransfer (ASM) <= Kernel_C.Arch_decodeTransfer (C))
  (function pairing 143 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_decodeTransfer (ASM) <= Kernel_C.Arch_decodeTransfer (C)), time taken: 0.17s
Testing Function pair Pairing (decodeCopyRegisters (ASM) <= Kernel_C.decodeCopyRegisters (C))
  (function pairing 144 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeCopyRegisters (ASM) <= Kernel_C.decodeCopyRegisters (C)), time taken: 17.00s
Testing Function pair Pairing (decodeWriteRegisters (ASM) <= Kernel_C.decodeWriteRegisters (C))
  (function pairing 145 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeWriteRegisters (ASM) <= Kernel_C.decodeWriteRegisters (C)), time taken: 8.60s
Testing Function pair Pairing (performInvocation_Endpoint (ASM) <= Kernel_C.performInvocation_Endpoint (C))
  (function pairing 146 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (performInvocation_Endpoint (ASM) <= Kernel_C.performInvocation_Endpoint (C)), time taken: 0.98s
Testing Function pair Pairing (populate_bi_frame (ASM) <= Kernel_C.populate_bi_frame (C))
  (function pairing 147 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (populate_bi_frame (ASM) <= Kernel_C.populate_bi_frame (C)), time taken: 11.31s
Testing Function pair Pairing (performInvocation_Notification (ASM) <= Kernel_C.performInvocation_Notification (C))
  (function pairing 148 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (performInvocation_Notification (ASM) <= Kernel_C.performInvocation_Notification (C)), time taken: 0.50s
Testing Function pair Pairing (preemptionPoint (ASM) <= Kernel_C.preemptionPoint (C))
  (function pairing 149 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (preemptionPoint (ASM) <= Kernel_C.preemptionPoint (C)), time taken: 0.37s
Testing Function pair Pairing (invokeCNodeInsert (ASM) <= Kernel_C.invokeCNodeInsert (C))
  (function pairing 150 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeCNodeInsert (ASM) <= Kernel_C.invokeCNodeInsert (C)), time taken: 0.54s
Testing Function pair Pairing (lookupCap (ASM) <= Kernel_C.lookupCap (C))
  (function pairing 151 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lookupCap (ASM) <= Kernel_C.lookupCap (C)), time taken: 8.36s
Testing Function pair Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C))
  (function pairing 152 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [249, 193]
  (in problem)
Now doing proof search in 249 init case in problem.
Discovered a loop relation for split points [270, 187]
  (in 249 init case in problem)
Now doing proof search in 270 init case in 249 init case in problem.
Discovered that points [177 (loop head)] can be bounded
  (in 270 init case in 249 init case in problem)
Discovered that points [150 (loop head)] can be bounded
  (in 270 init case in 249 init case in problem)
Discovered that points [345 (loop head)] can be bounded
  (in 270 init case in 249 init case in problem)

**************************************
FATAL ERROR
Broken pipe

**************************************

Discovered a loop relation for split points [254, 146]
  (in 270 init case in 249 init case in problem)
Now doing proof search in 254 init case in 270 init case in 249 init case in problem.
Discovered that points [70 (loop head)] can be bounded
  (in 254 init case in 270 init case in 249 init case in problem)
Discovered that points [59 (loop head)] can be bounded
  (in 254 init case in 270 init case in 249 init case in problem)
Discovered that points [36 (loop head)] can be bounded
  (in 254 init case in 270 init case in 249 init case in problem)
Discovered that points [3 (loop head)] can be bounded
  (in 254 init case in 270 init case in 249 init case in problem)
Discovered that points [560 (loop head)] can be bounded
  (in 254 init case in 270 init case in 249 init case in problem)
Discovered that points [535 (loop head)] can be bounded
  (in 254 init case in 270 init case in 249 init case in problem)
Discovered that points [569 (loop head)] can be bounded
  (in 254 init case in 270 init case in 249 init case in problem)
Discovered that points [610 (loop head)] can be bounded
  (in 254 init case in 270 init case in 249 init case in problem)
Now doing proof search in 254 loop case in 270 init case in 249 init case in problem.
Discovered that points [70 (loop head)] can be bounded
  (in 254 loop case in 270 init case in 249 init case in problem)
Discovered that points [59 (loop head)] can be bounded
  (in 254 loop case in 270 init case in 249 init case in problem)
Discovered that points [36 (loop head)] can be bounded
  (in 254 loop case in 270 init case in 249 init case in problem)
Discovered that points [3 (loop head)] can be bounded
  (in 254 loop case in 270 init case in 249 init case in problem)
Discovered that points [560 (loop head)] can be bounded
  (in 254 loop case in 270 init case in 249 init case in problem)
Discovered that points [535 (loop head)] can be bounded
  (in 254 loop case in 270 init case in 249 init case in problem)
Discovered that points [569 (loop head)] can be bounded
  (in 254 loop case in 270 init case in 249 init case in problem)
Discovered that points [610 (loop head)] can be bounded
  (in 254 loop case in 270 init case in 249 init case in problem)
