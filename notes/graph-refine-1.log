this derivation will be built:
  /nix/store/jlxp4f13iigq23v6ajkqr6q1lqc30dh8-graph-refine-all.drv
building '/nix/store/jlxp4f13iigq23v6ajkqr6q1lqc30dh8-graph-refine-all.drv'...
Loading syntax from ./CFunctions.txt
Loaded 835 functions, 75 structs, 0 globals.
Loading syntax from ./ASMFunctions.txt
Missing nodes after calls to instruction'isb_sy_E0000938
  in ['fpsimd_HWCapTest']
Missing nodes after calls to restore_user_context
  in ['c_handle_data_fault', 'c_handle_undefined_instruction', 'c_handle_interrupt']
Missing nodes after calls to halt
  in ['handleReply', 'Arch_createObject', 'completeSignal', 'unmapPage', 'doFlush', 'maskCapRights', 'decodeInvocation', 'Arch_setMRs_fault', 'handleInterrupt', 'Arch_deriveCap', 'invokeCNodeSaveCaller', 'handleFaultReply', 'handleSyscall', 'arm_reset_exception', 'createObject', 'Arch_handleFaultReply', 'init_kernel']
Missing nodes after calls to idle_thread
  in ['halt']
Missing nodes after calls to instruction'ldr_pc_pc_20_e0010038_arm_vector_table_0x38_E001001C
  in ['arm_vector_table']
Warning: dead arc in c_handle_syscall: 19 -> 3758164032
  (follows Basic node!)
Warning: dead arc in c_handle_syscall: 21 -> 3758164032
  (follows Basic node!)
Warning: dead arc in arm_fiq_exception: 7 -> 3758162208
  (follows Basic node!)
Warning: dead arc in arm_fiq_exception: 9 -> 3758162208
  (follows Basic node!)
Warning: dead arc in c_handle_instruction_fault: 3758162396 -> 3758162400
  (follows Basic node!)
Warning: dead arc in _start: 3758096388 -> 3758096392
  (follows Basic node!)
Loaded 481 functions, 0 structs, 0 globals.
Pseudo-Compiling.
Doing stack/inst logic.
Warning: asm instruction name: formatting: "asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"
Warning: asm instruction name: formatting: "asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"
Function 'init_kernel' contains unhandled instructions:
  ["instruction'vmrs_r3_fpexc_E0003E9C", "instruction'vmsr_fpexc_r3_E0003EA4"]
Function 'Arch_switchToThread' contains unhandled instructions:
  ["instruction'strex_r0_r1_r3_E0011150"]
Function 'Kernel_C.fpsimd_HWCapTest' contains unhandled instructions:
  ["asm_instruction'.word_0xeef00a10__\\nmov_%0,_r0________\\n"]
Function 'arm_vector_table' contains unhandled instructions:
  ["instruction'ldr_pc_pc_24_e0010020_arm_vector_table_0x20_E0010000", "instruction'ldr_pc_pc_24_e001002c_arm_vector_table_0x2c_E001000C", "instruction'ldr_pc_pc_20_e0010038_arm_vector_table_0x38_E001001C", "instruction'ldr_pc_pc_24_e0010024_arm_vector_table_0x24_E0010004", "instruction'ldr_pc_pc_24_e0010030_arm_vector_table_0x30_E0010010", "instruction'ldr_pc_pc_24_e0010028_arm_vector_table_0x28_E0010008", "instruction'ldr_pc_pc_20_e0010034_arm_vector_table_0x34_E0010018", "instruction'ldr_pc_pc_4_e0010020_arm_vector_table_0x20_E0010014"]
Function 'arm_undefined_inst_exception' contains unhandled instructions:
  ["instruction'cps_19_E0010040", "instruction'srsia_sp_19_E001003C", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E0010044"]
Function 'arm_data_abort_exception' contains unhandled instructions:
  ["instruction'cps_19_E00100BC", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E00100C0", "instruction'srsia_sp_19_E00100B8"]
Function 'Kernel_C.supportsAsyncExceptions' contains unhandled instructions:
  ["asm_instruction'.fpu_vfp\\nvmsr_fpexc,_%0", "asm_instruction'.fpu_vfp\\nvmrs_%0,_fpexc"]
Function 'Kernel_C.clearEnFPEXC' contains unhandled instructions:
  ["asm_instruction'.fpu_vfp\\nvmsr_fpexc,_%0", "asm_instruction'.fpu_vfp\\nvmrs_%0,_fpexc"]
Function 'arm_irq_exception' contains unhandled instructions:
  ["instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E00100F4", "instruction'cps_19_E00100F0", "instruction'srsia_sp_19_E00100EC"]
Function 'fpsimd_HWCapTest' contains unhandled instructions:
  ["instruction'vmrs_r3_fpexc_E000094C", "instruction'vmrs_r3_fpexc_E0000958", "instruction'vmsr_fpexc_r3_E0000954"]
Function '_start' contains unhandled instructions:
  ["instruction'cps_23_E0000034", "instruction'cps_19_E000003C"]
Function 'arm_prefetch_abort_exception' contains unhandled instructions:
  ["instruction'cps_19_E001008C", "instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E0010090", "instruction'srsia_sp_19_E0010088"]
Function 'halt' contains unhandled instructions:
  ["instruction'cpsid_aif_E0010908"]
Checking.
Checking 282 function pair problems
Testing Function pair Pairing (emptySlot (ASM) <= Kernel_C.emptySlot (C))
  (function pairing 1 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (emptySlot (ASM) <= Kernel_C.emptySlot (C)), time taken: 136.01s
Testing Function pair Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))
  (function pairing 2 of 282)
Aborting Problem (Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (slowpath (ASM) <= Kernel_C.slowpath (C)), time taken: 0.00s
Testing Function pair Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C))
  (function pairing 3 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 692, in find_split_loop
    i_opts, j_opts, node_restrs = node_restrs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1233, in find_split
    res = split_search (head, knowledge)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1154, in split_search
    knowledge.eqs_add_model (eqs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 306, in eqs_add_model
    assert_progress = assert_progress)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 284, in hyps_add_model
    {}, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C)), time taken: 111.22s
Testing Function pair Pairing (getRestartPC (ASM) <= Kernel_C.getRestartPC (C))
  (function pairing 4 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (getRestartPC (ASM) <= Kernel_C.getRestartPC (C)), time taken: 0.17s
Testing Function pair Pairing (maskVMRights (ASM) <= Kernel_C.maskVMRights (C))
  (function pairing 5 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (maskVMRights (ASM) <= Kernel_C.maskVMRights (C)), time taken: 0.35s
Testing Function pair Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C))
  (function pairing 6 of 282)
Aborting Problem (Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C))), complex loop
Result ProblemAbort for pair Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C)), time taken: 17.16s
Testing Function pair Pairing (isMDBParentOf (ASM) <= Kernel_C.isMDBParentOf (C))
  (function pairing 7 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (isMDBParentOf (ASM) <= Kernel_C.isMDBParentOf (C)), time taken: 2.14s
Testing Function pair Pairing (lookupCapAndSlot (ASM) <= Kernel_C.lookupCapAndSlot (C))
  (function pairing 8 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lookupCapAndSlot (ASM) <= Kernel_C.lookupCapAndSlot (C)), time taken: 13.12s
Testing Function pair Pairing (deletedIRQHandler (ASM) <= Kernel_C.deletedIRQHandler (C))
  (function pairing 9 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (deletedIRQHandler (ASM) <= Kernel_C.deletedIRQHandler (C)), time taken: 0.46s
Testing Function pair Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C))
  (function pairing 10 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1801, in default_searcher
    res = init_proof_case_split (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 161, in init_proof_case_split
    ps = init_case_splits (p, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 148, in init_case_splits
    pc_ids = knowledge.classify_vs ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 227, in classify_vs
    self.hyps_add_model (hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 211, in hyps_add_model
    {}, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C)), time taken: 7.08s
Testing Function pair Pairing (Arch_sameRegionAs (ASM) <= Kernel_C.Arch_sameRegionAs (C))
  (function pairing 11 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_sameRegionAs (ASM) <= Kernel_C.Arch_sameRegionAs (C)), time taken: 11.69s
Testing Function pair Pairing (lookupSlot (ASM) <= Kernel_C.lookupSlot (C))
  (function pairing 12 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lookupSlot (ASM) <= Kernel_C.lookupSlot (C)), time taken: 9.36s
Testing Function pair Pairing (handleVMFault (ASM) <= Kernel_C.handleVMFault (C))
  (function pairing 13 of 282)
 .. built problem, finding proof
Decided to case split at (31, 'ASM')
  (in problem)
Now doing proof search in true case (31 visited) in problem.
Now doing proof search in false case (31 not visited) in problem.
ProofNode ('CaseSplit', (31, 'ASM'), (ProofNode ('Restr', (31, ('Number', (1, 2))), (ProofNode ('Restr', (23, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),))))
 .. proof found.
Step 1: 
  case split on whether 31 is visited
Step 2: case in (1) where 31 is visited
  Prove the number of visits to 31 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 23 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 31 is not visited
  Prove the number of visits to 31 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleVMFault (ASM) <= Kernel_C.handleVMFault (C)), time taken: 5.06s
Testing Function pair Pairing (initIRQController (ASM) <= Kernel_C.initIRQController (C))
  (function pairing 14 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (initIRQController (ASM) <= Kernel_C.initIRQController (C)), time taken: 0.45s
Testing Function pair Pairing (Arch_updateCapData (ASM) <= Kernel_C.Arch_updateCapData (C))
  (function pairing 15 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_updateCapData (ASM) <= Kernel_C.Arch_updateCapData (C)), time taken: 0.31s
Testing Function pair Pairing (decodeSetPriority (ASM) <= Kernel_C.decodeSetPriority (C))
  (function pairing 16 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeSetPriority (ASM) <= Kernel_C.decodeSetPriority (C)), time taken: 80.21s
Testing Function pair Pairing (scheduleTCB (ASM) <= Kernel_C.scheduleTCB (C))
  (function pairing 17 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (scheduleTCB (ASM) <= Kernel_C.scheduleTCB (C)), time taken: 0.98s
Testing Function pair Pairing (calculate_extra_bi_size_bits (ASM) <= Kernel_C.calculate_extra_bi_size_bits (C))
  (function pairing 18 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (calculate_extra_bi_size_bits (ASM) <= Kernel_C.calculate_extra_bi_size_bits (C)), time taken: 3.34s
Testing Function pair Pairing (getReceiveSlots (ASM) <= Kernel_C.getReceiveSlots (C))
  (function pairing 19 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (getReceiveSlots (ASM) <= Kernel_C.getReceiveSlots (C)), time taken: 16.86s
Testing Function pair Pairing (sameObjectAs (ASM) <= Kernel_C.sameObjectAs (C))
  (function pairing 20 of 282)
 .. built problem, finding proof
Decided to case split at (65, 'ASM')
  (in problem)
Now doing proof search in true case (65 visited) in problem.
Now doing proof search in false case (65 not visited) in problem.
ProofNode ('CaseSplit', (65, 'ASM'), (ProofNode ('Restr', (65, ('Number', (1, 2))), (ProofNode ('Restr', (7, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (65, ('Number', (0, 1))), (ProofNode ('Restr', (7, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 65 is visited
Step 2: case in (1) where 65 is visited
  Prove the number of visits to 65 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 7 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 65 is not visited
  Prove the number of visits to 65 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 7 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (sameObjectAs (ASM) <= Kernel_C.sameObjectAs (C)), time taken: 5.96s
Testing Function pair Pairing (Arch_decodeInvocation (ASM) <= Kernel_C.Arch_decodeInvocation (C))
  (function pairing 21 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_decodeInvocation (ASM) <= Kernel_C.Arch_decodeInvocation (C)), time taken: 7.53s
Testing Function pair Pairing (chooseThread (ASM) <= Kernel_C.chooseThread (C))
  (function pairing 22 of 282)
 .. built problem, finding proof
Decided to case split at (22, 'ASM')
  (in problem)
Now doing proof search in true case (22 visited) in problem.
Now doing proof search in false case (22 not visited) in problem.
ProofNode ('CaseSplit', (22, 'ASM'), (ProofNode ('Restr', (22, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (22, ('Number', (0, 1))), (ProofNode ('Restr', (10, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 22 is visited
Step 2: case in (1) where 22 is visited
  Prove the number of visits to 22 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 22 is not visited
  Prove the number of visits to 22 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 10 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (chooseThread (ASM) <= Kernel_C.chooseThread (C)), time taken: 32.04s
Testing Function pair Pairing (deleteCallerCap (ASM) <= Kernel_C.deleteCallerCap (C))
  (function pairing 23 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (deleteCallerCap (ASM) <= Kernel_C.deleteCallerCap (C)), time taken: 0.48s
Testing Function pair Pairing (completeSignal (ASM) <= Kernel_C.completeSignal (C))
  (function pairing 24 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (completeSignal (ASM) <= Kernel_C.completeSignal (C)), time taken: 1.94s
Testing Function pair Pairing (performInvocation_Notification (ASM) <= Kernel_C.performInvocation_Notification (C))
  (function pairing 25 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (performInvocation_Notification (ASM) <= Kernel_C.performInvocation_Notification (C)), time taken: 0.46s
Testing Function pair Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))
  (function pairing 26 of 282)
Aborting Problem (Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))), complex loop
Result ProblemAbort for pair Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C)), time taken: 1.15s
Testing Function pair Pairing (get_num_avail_p_regs (ASM) <= Kernel_C.get_num_avail_p_regs (C))
  (function pairing 27 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (get_num_avail_p_regs (ASM) <= Kernel_C.get_num_avail_p_regs (C)), time taken: 0.15s
Testing Function pair Pairing (write_it_asid_pool (ASM) <= Kernel_C.write_it_asid_pool (C))
  (function pairing 28 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (write_it_asid_pool (ASM) <= Kernel_C.write_it_asid_pool (C)), time taken: 12.27s
Testing Function pair Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C))
  (function pairing 29 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 678, in find_split_loop
    nec = get_necessary_split_opts (p, head, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 792, in get_necessary_split_opts
    for v in seq_eqs:
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 909, in <genexpr>
    for m in [get_model (n, offs)]
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 900, in get_model
    res = rep.test_hyp_whyps (eq, hyps + ex_hyps, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/rep_graph.py", line 1096, in test_hyp_whyps
    {}, model = model)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1326, in parallel_test_hyps
    (res, k) = self.parallel_check_hyps (hyps, env, model)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C)), time taken: 84.54s
Testing Function pair Pairing (bindNotification (ASM) <= Kernel_C.bindNotification (C))
  (function pairing 30 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (bindNotification (ASM) <= Kernel_C.bindNotification (C)), time taken: 0.48s
Testing Function pair Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C))
  (function pairing 31 of 282)
Skipping Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C)), underspecified C
Testing Function pair Pairing (idle_thread (ASM) <= Kernel_C.idle_thread (C))
  (function pairing 32 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [8, 3]
  (in problem)
Now doing proof search in 8 init case in problem.
Now doing proof search in 8 loop case in problem.
ProofNode ('Split', ((8, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (3, (0, 1), [Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (8, ('Offset', (0, 1))), (ProofNode ('Restr', (3, ('Offset', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 8 related to visits to 3
    with equalities
      ((Mem) ('mem')) (@ addr 8)
      = ((Mem) ('Mem')) (@ addr 3)
    and with invariants
      ((Word32) ('r21')) (@ addr 8)
      ((Word32) ('r4')) (@ addr 8)
      ((Bool) ('v')) (@ addr 8)
      ((Word32) ('r27')) (@ addr 8)
      ((Word32) ('r17')) (@ addr 8)
      ((Word32) ('r0')) (@ addr 8)
      ((Word32) ('r23')) (@ addr 8)
      ((Word32) ('r13')) (@ addr 8)
      ((Word32) ('r10')) (@ addr 8)
      ((Word32) ('r28')) (@ addr 8)
      ((Word32) ('r19')) (@ addr 8)
      ((Word32) ('r16')) (@ addr 8)
      ((Word64) ('clock')) (@ addr 8)
      ((Word32) ('r12')) (@ addr 8)
      ((Word32) ('r9')) (@ addr 8)
      ((Bool) ('z')) (@ addr 8)
      ((Word32) ('r6')) (@ addr 8)
      ((Word32) ('r7')) (@ addr 8)
      ((Word32) ('r31')) (@ addr 8)
      ((Word32) ('r25')) (@ addr 8)
      ((Word32) ('r24')) (@ addr 8)
      ((Word32) ('r8')) (@ addr 8)
      ((Word32) ('r29')) (@ addr 8)
      ((Word32) ('r3')) (@ addr 8)
      ((Bool) ('n')) (@ addr 8)
      ((Bool) ('c')) (@ addr 8)
      ((Word32) ('r18')) (@ addr 8)
      ((Word32) ('r20')) (@ addr 8)
      ((Word32) ('r30')) (@ addr 8)
      ((Word32) ('r14')) (@ addr 8)
      ((Word32) ('r15')) (@ addr 8)
      ((Word32) ('mode')) (@ addr 8)
      ((Word32) ('r11')) (@ addr 8)
      ((Word32) ('r5')) (@ addr 8)
      ((Word32) ('r26')) (@ addr 8)
      ((Word32) ('r1')) (@ addr 8)
      ((Word32) ('r2')) (@ addr 8)
      ((Bool) (ROData('mem'))) (@ addr 8)
      ((Word32) ('r22')) (@ addr 8)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 8)
      ((Word32[50]) ('GhostAssertions')) (@ addr 3)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 3)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 8 is in {i + 0 ..< i + 1}
    .. proven.
Step 6: 
  Prove the number of visits to 3 is in {i + 0 ..< i + 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (idle_thread (ASM) <= Kernel_C.idle_thread (C)), time taken: 9.27s
Testing Function pair Pairing (setIRQState (ASM) <= Kernel_C.setIRQState (C))
  (function pairing 33 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setIRQState (ASM) <= Kernel_C.setIRQState (C)), time taken: 0.55s
Testing Function pair Pairing (doIPCTransfer (ASM) <= Kernel_C.doIPCTransfer (C))
  (function pairing 34 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (doIPCTransfer (ASM) <= Kernel_C.doIPCTransfer (C)), time taken: 11.46s
Testing Function pair Pairing (initL2Cache (ASM) <= Kernel_C.initL2Cache (C))
  (function pairing 35 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [86, 46]
  (in problem)
Now doing proof search in 86 init case in problem.
Now doing proof search in 86 loop case in problem.
ProofNode ('Split', ((86, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (46, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#46#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (86, ('Number', (0, 1))), (ProofNode ('Restr', (46, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (86, ('Offset', (0, 1))), (ProofNode ('Restr', (46, ('Offset', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 86 related to visits to 46
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 86)
      ((Word32) ('r4')) (@ addr 86)
      ((Word32) ('r8')) (@ addr 86)
      ((Word32) ('r11')) (@ addr 86)
      ((Word32) ('r5')) (@ addr 86)
      ((Word32) ('r6')) (@ addr 86)
      ((Word32) ('r0')) (@ addr 86)
      ((Word32) ('r9')) (@ addr 86)
      ((Word32) ('ret')) (@ addr 86)
      ((Word32) ('r2')) (@ addr 86)
      ((Word32) ('r13')) (@ addr 86)
      ((Word32) ('r10')) (@ addr 86)
      ((Mem) ('mem')) (@ addr 86)
      ((Word32) ('r14')) (@ addr 86)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 86)
      ((Word32) (('loop#46#count' + ((0 - '#seq-visits') * 1)))) (@ addr 46)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 86 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 46 is in {0 ..< 1}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 86 is in {i + 0 ..< i + 1}
    .. proven.
Step 6: 
  Prove the number of visits to 46 is in {i + 0 ..< i + 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (initL2Cache (ASM) <= Kernel_C.initL2Cache (C)), time taken: 6.87s
Testing Function pair Pairing (decodeInvocation (ASM) <= Kernel_C.decodeInvocation (C))
  (function pairing 36 of 282)
 .. built problem, finding proof
Decided to case split at (308, 'ASM')
  (in problem)
Now doing proof search in true case (308 visited) in problem.
Now doing proof search in false case (308 not visited) in problem.
Decided to case split at (135, 'ASM')
  (in false case (308 not visited) in problem)
Now doing proof search in true case (135 visited) in false case (308 not visited) in problem.
Now doing proof search in false case (135 not visited) in false case (308 not visited) in problem.
Decided to case split at (141, 'ASM')
  (in false case (135 not visited) in false case (308 not visited) in problem)
Now doing proof search in true case (141 visited) in false case (135 not visited) in false case (308 not visited) in problem.
Now doing proof search in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem.
Decided to case split at (147, 'ASM')
  (in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem)
Now doing proof search in true case (147 visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem.
Now doing proof search in false case (147 not visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem.
Decided to case split at (159, 'ASM')
  (in false case (147 not visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem)
Now doing proof search in true case (159 visited) in false case (147 not visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem.
Now doing proof search in false case (159 not visited) in false case (147 not visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem.
Decided to case split at (153, 'ASM')
  (in false case (159 not visited) in false case (147 not visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem)
Now doing proof search in true case (153 visited) in false case (159 not visited) in false case (147 not visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem.
Now doing proof search in false case (153 not visited) in false case (159 not visited) in false case (147 not visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem.
Decided to case split at (129, 'ASM')
  (in false case (153 not visited) in false case (159 not visited) in false case (147 not visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem)
Now doing proof search in true case (129 visited) in false case (153 not visited) in false case (159 not visited) in false case (147 not visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem.
Now doing proof search in false case (129 not visited) in false case (153 not visited) in false case (159 not visited) in false case (147 not visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem.
Decided to case split at (165, 'ASM')
  (in false case (129 not visited) in false case (153 not visited) in false case (159 not visited) in false case (147 not visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem)
Now doing proof search in true case (165 visited) in false case (129 not visited) in false case (153 not visited) in false case (159 not visited) in false case (147 not visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem.
Now doing proof search in false case (165 not visited) in false case (129 not visited) in false case (153 not visited) in false case (159 not visited) in false case (147 not visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem.
Decided to case split at (213, 'ASM')
  (in false case (165 not visited) in false case (129 not visited) in false case (153 not visited) in false case (159 not visited) in false case (147 not visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem)
Now doing proof search in true case (213 visited) in false case (165 not visited) in false case (129 not visited) in false case (153 not visited) in false case (159 not visited) in false case (147 not visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem.
Now doing proof search in false case (213 not visited) in false case (165 not visited) in false case (129 not visited) in false case (153 not visited) in false case (159 not visited) in false case (147 not visited) in false case (141 not visited) in false case (135 not visited) in false case (308 not visited) in problem.
ProofNode ('CaseSplit', (308, 'ASM'), (ProofNode ('Restr', (308, ('Number', (1, 2))), (ProofNode ('Restr', (73, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (308, ('Number', (0, 1))), (ProofNode ('Restr', (73, ('Number', (0, 1))), (ProofNode ('CaseSplit', (135, 'ASM'), (ProofNode ('Restr', (135, ('Number', (1, 2))), (ProofNode ('Restr', (33, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (135, ('Number', (0, 1))), (ProofNode ('Restr', (33, ('Number', (0, 1))), (ProofNode ('CaseSplit', (141, 'ASM'), (ProofNode ('Restr', (141, ('Number', (1, 2))), (ProofNode ('Restr', (50, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (141, ('Number', (0, 1))), (ProofNode ('Restr', (50, ('Number', (0, 1))), (ProofNode ('CaseSplit', (147, 'ASM'), (ProofNode ('Restr', (147, ('Number', (1, 2))), (ProofNode ('Restr', (67, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (147, ('Number', (0, 1))), (ProofNode ('Restr', (67, ('Number', (0, 1))), (ProofNode ('CaseSplit', (159, 'ASM'), (ProofNode ('Restr', (159, ('Number', (1, 2))), (ProofNode ('Restr', (70, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (159, ('Number', (0, 1))), (ProofNode ('Restr', (70, ('Number', (0, 1))), (ProofNode ('CaseSplit', (153, 'ASM'), (ProofNode ('Restr', (153, ('Number', (1, 2))), (ProofNode ('Restr', (76, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (153, ('Number', (0, 1))), (ProofNode ('Restr', (76, ('Number', (0, 1))), (ProofNode ('CaseSplit', (129, 'ASM'), (ProofNode ('Restr', (129, ('Number', (1, 2))), (ProofNode ('Restr', (79, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (129, ('Number', (0, 1))), (ProofNode ('Restr', (79, ('Number', (0, 1))), (ProofNode ('CaseSplit', (165, 'ASM'), (ProofNode ('Restr', (165, ('Number', (1, 2))), (ProofNode ('Restr', (82, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (165, ('Number', (0, 1))), (ProofNode ('Restr', (82, ('Number', (0, 1))), (ProofNode ('CaseSplit', (213, 'ASM'), (ProofNode ('Restr', (213, ('Number', (1, 2))), (ProofNode ('Restr', (92, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (213, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)))),)),)))),)),)))),)),)))),)),)))),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 308 is visited
Step 2: case in (1) where 308 is visited
  Prove the number of visits to 308 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 73 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 308 is not visited
  Prove the number of visits to 308 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 73 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 135 is visited
Step 8: case in (7) where 135 is visited
  Prove the number of visits to 135 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 33 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 135 is not visited
  Prove the number of visits to 135 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 33 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 141 is visited
Step 14: case in (13) where 141 is visited
  Prove the number of visits to 141 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 50 is in {1 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where 141 is not visited
  Prove the number of visits to 141 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 50 is in {0 ..< 1}
    .. proven.
Step 19: 
  case split on whether 147 is visited
Step 20: case in (19) where 147 is visited
  Prove the number of visits to 147 is in {1 ..< 2}
    .. proven.
Step 21: 
  Prove the number of visits to 67 is in {1 ..< 2}
    .. proven.
Step 22: 
  prove all verification conditions
    .. proven.
Step 23: case in (19) where 147 is not visited
  Prove the number of visits to 147 is in {0 ..< 1}
    .. proven.
Step 24: 
  Prove the number of visits to 67 is in {0 ..< 1}
    .. proven.
Step 25: 
  case split on whether 159 is visited
Step 26: case in (25) where 159 is visited
  Prove the number of visits to 159 is in {1 ..< 2}
    .. proven.
Step 27: 
  Prove the number of visits to 70 is in {1 ..< 2}
    .. proven.
Step 28: 
  prove all verification conditions
    .. proven.
Step 29: case in (25) where 159 is not visited
  Prove the number of visits to 159 is in {0 ..< 1}
    .. proven.
Step 30: 
  Prove the number of visits to 70 is in {0 ..< 1}
    .. proven.
Step 31: 
  case split on whether 153 is visited
Step 32: case in (31) where 153 is visited
  Prove the number of visits to 153 is in {1 ..< 2}
    .. proven.
Step 33: 
  Prove the number of visits to 76 is in {1 ..< 2}
    .. proven.
Step 34: 
  prove all verification conditions
    .. proven.
Step 35: case in (31) where 153 is not visited
  Prove the number of visits to 153 is in {0 ..< 1}
    .. proven.
Step 36: 
  Prove the number of visits to 76 is in {0 ..< 1}
    .. proven.
Step 37: 
  case split on whether 129 is visited
Step 38: case in (37) where 129 is visited
  Prove the number of visits to 129 is in {1 ..< 2}
    .. proven.
Step 39: 
  Prove the number of visits to 79 is in {1 ..< 2}
    .. proven.
Step 40: 
  prove all verification conditions
    .. proven.
Step 41: case in (37) where 129 is not visited
  Prove the number of visits to 129 is in {0 ..< 1}
    .. proven.
Step 42: 
  Prove the number of visits to 79 is in {0 ..< 1}
    .. proven.
Step 43: 
  case split on whether 165 is visited
Step 44: case in (43) where 165 is visited
  Prove the number of visits to 165 is in {1 ..< 2}
    .. proven.
Step 45: 
  Prove the number of visits to 82 is in {1 ..< 2}
    .. proven.
Step 46: 
  prove all verification conditions
    .. proven.
Step 47: case in (43) where 165 is not visited
  Prove the number of visits to 165 is in {0 ..< 1}
    .. proven.
Step 48: 
  Prove the number of visits to 82 is in {0 ..< 1}
    .. proven.
Step 49: 
  case split on whether 213 is visited
Step 50: case in (49) where 213 is visited
  Prove the number of visits to 213 is in {1 ..< 2}
    .. proven.
Step 51: 
  Prove the number of visits to 92 is in {1 ..< 2}
    .. proven.
Step 52: 
  prove all verification conditions
    .. proven.
Step 53: case in (49) where 213 is not visited
  Prove the number of visits to 213 is in {0 ..< 1}
    .. proven.
Step 54: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeInvocation (ASM) <= Kernel_C.decodeInvocation (C)), time taken: 359.63s
Testing Function pair Pairing (create_idle_thread (ASM) <= Kernel_C.create_idle_thread (C))
  (function pairing 37 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_idle_thread (ASM) <= Kernel_C.create_idle_thread (C)), time taken: 0.63s
Testing Function pair Pairing (handleRecv (ASM) <= Kernel_C.handleRecv (C))
  (function pairing 38 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleRecv (ASM) <= Kernel_C.handleRecv (C)), time taken: 17.23s
Testing Function pair Pairing (unbindNotification (ASM) <= Kernel_C.unbindNotification (C))
  (function pairing 39 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (unbindNotification (ASM) <= Kernel_C.unbindNotification (C)), time taken: 1.81s
Testing Function pair Pairing (arm_errata (ASM) <= Kernel_C.arm_errata (C))
  (function pairing 40 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (arm_errata (ASM) <= Kernel_C.arm_errata (C)), time taken: 0.14s
Testing Function pair Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))
  (function pairing 41 of 282)
Aborting Problem (Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))): underspecified instruction'vmrs_r3_fpexc_E0003E9C
Result ProblemAbort for pair Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C)), time taken: 0.09s
Testing Function pair Pairing (invokeTCB_CopyRegisters (ASM) <= Kernel_C.invokeTCB_CopyRegisters (C))
  (function pairing 42 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [41, 29]
  (in problem)
Now doing proof search in 41 init case in problem.
Discovered a loop relation for split points [70, 14]
  (in 41 init case in problem)
Now doing proof search in 70 init case in 41 init case in problem.
Now doing proof search in 70 loop case in 41 init case in problem.
Now doing proof search in 41 loop case in problem.
Discovered a loop relation for split points [70, 14]
  (in 41 loop case in problem)
Now doing proof search in 70 init case in 41 loop case in problem.
Now doing proof search in 70 loop case in 41 loop case in problem.
ProofNode ('Split', ((41, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (29, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'transferArch___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#25#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'transferInteger___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (41, ('Number', (0, 1))), (ProofNode ('Restr', (29, ('Number', (0, 2))), (ProofNode ('Split', ((70, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (14, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'transferArch___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (70, ('Number', (0, 1))), (ProofNode ('Restr', (14, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (70, ('Offset', (0, 3))), (ProofNode ('Restr', (14, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (41, ('Offset', (0, 3))), (ProofNode ('Restr', (29, ('Offset', (0, 3))), (ProofNode ('Split', ((70, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (14, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'transferArch___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (70, ('Number', (0, 1))), (ProofNode ('Restr', (14, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (70, ('Offset', (0, 3))), (ProofNode ('Restr', (14, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 41 related to visits to 29
    with equalities
      ((Mem) ('mem')) (@ addr 41)
      = ((Mem) ('Mem')) (@ addr 29)
    and with invariants
      ((Word32) ('r4')) (@ addr 41)
      ((Word32) ('r8')) (@ addr 41)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 41)
      ((Word32) ('r5')) (@ addr 41)
      ((Word32) ('r0')) (@ addr 41)
      ((Word32) ('r9')) (@ addr 41)
      ((Word32) ('ret')) (@ addr 41)
      ((Word32) ('r11')) (@ addr 41)
      ((Word32) ('r7')) (@ addr 41)
      ((Word32) ('r13')) (@ addr 41)
      ((Word32) ('r10')) (@ addr 41)
      ((Bool) (ROData('mem'))) (@ addr 41)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 41)
      ((Word32) ('transferArch___unsigned_long#v')) (@ addr 29)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 29)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 29)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 29)
      ((Word32) (('loop#25#count' + ((0 - '#seq-visits') * 1)))) (@ addr 29)
      ((Word32) ('transferInteger___unsigned_long#v')) (@ addr 29)
      ((Word32[50]) ('GhostAssertions')) (@ addr 29)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 41 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 29 is in {0 ..< 2}
    .. proven.
Step 4: 
  prove visits to 70 related to visits to 14
    with equalities
      ((Mem) ('mem')) (@ addr 70)
      = ((Mem) ('Mem')) (@ addr 14)
    and with invariants
      ((Word32) ('r4')) (@ addr 70)
      ((Word32) ('r8')) (@ addr 70)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 70)
      ((Word32) ('r5')) (@ addr 70)
      ((Word32) ('r0')) (@ addr 70)
      ((Word32) ('r9')) (@ addr 70)
      ((Word32) ('ret')) (@ addr 70)
      ((Word32) ('r11')) (@ addr 70)
      ((Word32) ('r13')) (@ addr 70)
      ((Word32) ('r10')) (@ addr 70)
      ((Bool) (ROData('mem'))) (@ addr 70)
      ((Word32) ('r7')) (@ addr 70)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 70)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 14)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 14)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 14)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 14)
      ((Word32) ('transferArch___unsigned_long#v')) (@ addr 14)
      ((Word32[50]) ('GhostAssertions')) (@ addr 14)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 70 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 14 is in {0 ..< 2}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 70 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 14 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 41 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 29 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 70 related to visits to 14
    with equalities
      ((Mem) ('mem')) (@ addr 70)
      = ((Mem) ('Mem')) (@ addr 14)
    and with invariants
      ((Word32) ('r4')) (@ addr 70)
      ((Word32) ('r8')) (@ addr 70)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 70)
      ((Word32) ('r5')) (@ addr 70)
      ((Word32) ('r0')) (@ addr 70)
      ((Word32) ('r9')) (@ addr 70)
      ((Word32) ('ret')) (@ addr 70)
      ((Word32) ('r11')) (@ addr 70)
      ((Word32) ('r13')) (@ addr 70)
      ((Word32) ('r10')) (@ addr 70)
      ((Bool) (ROData('mem'))) (@ addr 70)
      ((Word32) ('r7')) (@ addr 70)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 70)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 14)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 14)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 14)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 14)
      ((Word32) ('transferArch___unsigned_long#v')) (@ addr 14)
      ((Word32[50]) ('GhostAssertions')) (@ addr 14)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 70 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 14 is in {0 ..< 1}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 70 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 14 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeTCB_CopyRegisters (ASM) <= Kernel_C.invokeTCB_CopyRegisters (C)), time taken: 3214.09s
Testing Function pair Pairing (invokeIRQControl (ASM) <= Kernel_C.invokeIRQControl (C))
  (function pairing 43 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeIRQControl (ASM) <= Kernel_C.invokeIRQControl (C)), time taken: 1.19s
Testing Function pair Pairing (flushSpace (ASM) <= Kernel_C.flushSpace (C))
  (function pairing 44 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (flushSpace (ASM) <= Kernel_C.flushSpace (C)), time taken: 1.14s
Testing Function pair Pairing (cleanCacheRange_RAM (ASM) <= Kernel_C.cleanCacheRange_RAM (C))
  (function pairing 45 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [60, 88]
  (in problem)
Now doing proof search in 60 init case in problem.
Discovered that points [70 (loop head)] can be bounded
  (in 60 init case in problem)
Discovered that points [112 (loop head)] can be bounded
  (in 60 init case in problem)
Discovered that points [34 (loop head)] can be bounded
  (in 60 init case in problem)
Discovered that points [50 (loop head)] can be bounded
  (in 60 init case in problem)
Now doing proof search in 60 loop case in problem.
Discovered a loop relation for split points [24, 76]
  (in 60 loop case in problem)
Now doing proof search in 24 init case in 60 loop case in problem.
Discovered that points [112 (loop head)] can be bounded
  (in 24 init case in 60 loop case in problem)
Discovered that points [50 (loop head)] can be bounded
  (in 24 init case in 60 loop case in problem)
Now doing proof search in 24 loop case in 60 loop case in problem.
Discovered that points [112 (loop head)] can be bounded
  (in 24 loop case in 60 loop case in problem)
Discovered that points [50 (loop head)] can be bounded
  (in 24 loop case in 60 loop case in problem)
ProofNode ('Split', ((60, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (88, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.3'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.2'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.2'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.3'))], 2, 1), (ProofNode ('Restr', (60, ('Number', (0, 3))), (ProofNode ('Restr', (88, ('Number', (0, 3))), (ProofNode ('Restr', (70, ('Number', (0, 5))), (ProofNode ('Restr', (112, ('Number', (0, 2))), (ProofNode ('Restr', (34, ('Number', (0, 4))), (ProofNode ('Restr', (50, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (60, ('Offset', (0, 3))), (ProofNode ('Restr', (88, ('Offset', (0, 3))), (ProofNode ('Split', ((24, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (76, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 5)])])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (24, ('Number', (0, 3))), (ProofNode ('Restr', (76, ('Number', (0, 3))), (ProofNode ('Restr', (112, ('Number', (0, 2))), (ProofNode ('Restr', (50, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (24, ('Offset', (0, 3))), (ProofNode ('Restr', (76, ('Offset', (0, 3))), (ProofNode ('Restr', (112, ('Number', (0, 2))), (ProofNode ('Restr', (50, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 60 related to visits to 88
    with equalities
      ((Mem) ('mem')) (@ addr 60)
      = ((Mem) ('Mem.3')) (@ addr 88)
    and with invariants
      ((Word32) ('r21')) (@ addr 60)
      ((Word32) ('r4')) (@ addr 60)
      ((Word32) ('r27')) (@ addr 60)
      ((Word32) ('r17')) (@ addr 60)
      ((Word32) ('r0')) (@ addr 60)
      ((Word32) ('r23')) (@ addr 60)
      ((Word32) ('r13')) (@ addr 60)
      ((Word32) ('r10')) (@ addr 60)
      ((Word32) ('r28')) (@ addr 60)
      ((Word32) ('r19')) (@ addr 60)
      ((Word32) ('r16')) (@ addr 60)
      ((Word64) ('clock')) (@ addr 60)
      ((Word32) ('r12')) (@ addr 60)
      ((Word32) ('r9')) (@ addr 60)
      ((Word32) ('r6')) (@ addr 60)
      ((Word32) ('r7')) (@ addr 60)
      ((Word32) ('r31')) (@ addr 60)
      ((Word32) ('r25')) (@ addr 60)
      ((Word32) ('r24')) (@ addr 60)
      ((Word32) ('r8')) (@ addr 60)
      ((Word32) ('r29')) (@ addr 60)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 60)
      ((Word32) ('r18')) (@ addr 60)
      ((Word32) ('r20')) (@ addr 60)
      ((Word32) ('r30')) (@ addr 60)
      ((Word32) ('r14')) (@ addr 60)
      ((Word32) ('r15')) (@ addr 60)
      ((Word32) ('mode')) (@ addr 60)
      ((Word32) ('r11')) (@ addr 60)
      ((Word32) ('r5')) (@ addr 60)
      ((Word32) ('ret')) (@ addr 60)
      ((Word32) ('r26')) (@ addr 60)
      ((Word32) ('r1')) (@ addr 60)
      ((Word32) ('r2')) (@ addr 60)
      ((Bool) (ROData('mem'))) (@ addr 60)
      ((Word32) ('r22')) (@ addr 60)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 60)
      ((Word32) ('end___unsigned_long#v')) (@ addr 88)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 88)
      ((Word32[50]) ('GhostAssertions.3')) (@ addr 88)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 88)
      ((Word32) ('end___unsigned_long#v.2')) (@ addr 88)
      ((Word32) ('start___unsigned_long#v.2')) (@ addr 88)
      ((Word32) ('start___unsigned_long#v')) (@ addr 88)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 88)
      ((Word32) ('pstart___unsigned_long#v.1')) (@ addr 88)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 60 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 88 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 70 is in {0 ..< 5}
    .. proven.
Step 5: 
  Prove the number of visits to 112 is in {0 ..< 2}
    .. proven.
Step 6: 
  Prove the number of visits to 34 is in {0 ..< 4}
    .. proven.
Step 7: 
  Prove the number of visits to 50 is in {0 ..< 2}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Step 9: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 60 is in {i + 0 ..< i + 3}
    .. proven.
Step 10: 
  Prove the number of visits to 88 is in {i + 0 ..< i + 3}
    .. proven.
Step 11: 
  prove visits to 24 related to visits to 76
    with equalities
      ((Mem) ('mem')) (@ addr 24)
      = ((Mem) ('Mem.1')) (@ addr 76)
    and with invariants
      ((Word32) ('r21')) (@ addr 24)
      ((Word32) ('r4')) (@ addr 24)
      ((Word32) ('r27')) (@ addr 24)
      ((Word32) ('r17')) (@ addr 24)
      ((Word32) ('r0')) (@ addr 24)
      ((Word32) ('r23')) (@ addr 24)
      ((Word32) ('r13')) (@ addr 24)
      ((Word32) ('r10')) (@ addr 24)
      ((Word32) ('r28')) (@ addr 24)
      ((Word32) ('r19')) (@ addr 24)
      ((Word32) ('r16')) (@ addr 24)
      ((Word64) ('clock')) (@ addr 24)
      ((Word32) ('r12')) (@ addr 24)
      ((Word32) ('r9')) (@ addr 24)
      ((Word32) ('r6')) (@ addr 24)
      ((Word32) ('r7')) (@ addr 24)
      ((Word32) ('r31')) (@ addr 24)
      ((Word32) ('r25')) (@ addr 24)
      ((Word32) ('r24')) (@ addr 24)
      ((Word32) ('r8')) (@ addr 24)
      ((Word32) ('r29')) (@ addr 24)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 24)
      ((Word32) ('r18')) (@ addr 24)
      ((Word32) ('r20')) (@ addr 24)
      ((Word32) ('r30')) (@ addr 24)
      ((Word32) ('r14')) (@ addr 24)
      ((Word32) ('r15')) (@ addr 24)
      ((Word32) ('mode')) (@ addr 24)
      ((Word32) ('r11')) (@ addr 24)
      ((Word32) ('r5')) (@ addr 24)
      ((Word32) ('ret')) (@ addr 24)
      ((Word32) ('r26')) (@ addr 24)
      ((Word32) ('r1')) (@ addr 24)
      ((Word32) ('r2')) (@ addr 24)
      ((Bool) (ROData('mem'))) (@ addr 24)
      ((Word32) ('r22')) (@ addr 24)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 24)
      ((Word32) ('end___unsigned_long#v.1')) (@ addr 76)
      ((Word32) (('start___unsigned_long#v.1' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast(5)))))) (@ addr 76)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 76)
      ((Word32[50]) ('GhostAssertions.1')) (@ addr 76)
    .. proven.
Step 12: case in (11) where the length of the sequence < 2
  Prove the number of visits to 24 is in {0 ..< 3}
    .. proven.
Step 13: 
  Prove the number of visits to 76 is in {0 ..< 3}
    .. proven.
Step 14: 
  Prove the number of visits to 112 is in {0 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 50 is in {0 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (11) where the length of the sequence is j + 2
  Prove the number of visits to 24 is in {j + 0 ..< j + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 76 is in {j + 0 ..< j + 3}
    .. proven.
Step 19: 
  Prove the number of visits to 112 is in {0 ..< 2}
    .. proven.
Step 20: 
  Prove the number of visits to 50 is in {0 ..< 2}
    .. proven.
Step 21: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cleanCacheRange_RAM (ASM) <= Kernel_C.cleanCacheRange_RAM (C)), time taken: 228.28s
Testing Function pair Pairing (invokeIRQHandler_AckIRQ (ASM) <= Kernel_C.invokeIRQHandler_AckIRQ (C))
  (function pairing 46 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeIRQHandler_AckIRQ (ASM) <= Kernel_C.invokeIRQHandler_AckIRQ (C)), time taken: 0.28s
Testing Function pair Pairing (handleInterrupt (ASM) <= Kernel_C.handleInterrupt (C))
  (function pairing 47 of 282)
 .. built problem, finding proof
Decided to case split at (55, 'ASM')
  (in problem)
Now doing proof search in true case (55 visited) in problem.
Now doing proof search in false case (55 not visited) in problem.
Decided to case split at (45, 'ASM')
  (in false case (55 not visited) in problem)
Now doing proof search in true case (45 visited) in false case (55 not visited) in problem.
Now doing proof search in false case (45 not visited) in false case (55 not visited) in problem.
ProofNode ('CaseSplit', (55, 'ASM'), (ProofNode ('Restr', (55, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (55, ('Number', (0, 1))), (ProofNode ('Restr', (18, ('Number', (0, 1))), (ProofNode ('CaseSplit', (45, 'ASM'), (ProofNode ('Restr', (45, ('Number', (1, 2))), (ProofNode ('Restr', (36, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (45, ('Number', (0, 1))), (ProofNode ('Restr', (36, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 55 is visited
Step 2: case in (1) where 55 is visited
  Prove the number of visits to 55 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 55 is not visited
  Prove the number of visits to 55 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 18 is in {0 ..< 1}
    .. proven.
Step 6: 
  case split on whether 45 is visited
Step 7: case in (6) where 45 is visited
  Prove the number of visits to 45 is in {1 ..< 2}
    .. proven.
Step 8: 
  Prove the number of visits to 36 is in {1 ..< 2}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (6) where 45 is not visited
  Prove the number of visits to 45 is in {0 ..< 1}
    .. proven.
Step 11: 
  Prove the number of visits to 36 is in {0 ..< 1}
    .. proven.
Step 12: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleInterrupt (ASM) <= Kernel_C.handleInterrupt (C)), time taken: 50.96s
Testing Function pair Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C))
  (function pairing 48 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [409, 193]
  (in problem)
Now doing proof search in 409 init case in problem.
Discovered a loop relation for split points [416, 187]
  (in 409 init case in problem)
Now doing proof search in 416 init case in 409 init case in problem.
Discovered that points [177 (loop head)] can be bounded
  (in 416 init case in 409 init case in problem)
Discovered that points [150 (loop head)] can be bounded
  (in 416 init case in 409 init case in problem)
Discovered that points [441 (loop head)] can be bounded
  (in 416 init case in 409 init case in problem)
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1738, in build_proof_rec
    p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1738, in build_proof_rec
    p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1712, in build_proof_rec
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1712, in build_proof_rec
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1712, in build_proof_rec
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 692, in find_split_loop
    i_opts, j_opts, node_restrs = node_restrs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1233, in find_split
    res = split_search (head, knowledge)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1154, in split_search
    knowledge.eqs_add_model (eqs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 306, in eqs_add_model
    assert_progress = assert_progress)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 284, in hyps_add_model
    {}, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C)), time taken: 5014.71s
Testing Function pair Pairing (decodeTCBInvocation (ASM) <= Kernel_C.decodeTCBInvocation (C))
  (function pairing 49 of 282)
 .. built problem, finding proof
Decided to case split at (121, 'ASM')
  (in problem)
Now doing proof search in true case (121 visited) in problem.
Now doing proof search in false case (121 not visited) in problem.
Decided to case split at (125, 'ASM')
  (in false case (121 not visited) in problem)
Now doing proof search in true case (125 visited) in false case (121 not visited) in problem.
Now doing proof search in false case (125 not visited) in false case (121 not visited) in problem.
Decided to case split at (107, 'ASM')
  (in false case (125 not visited) in false case (121 not visited) in problem)
Now doing proof search in true case (107 visited) in false case (125 not visited) in false case (121 not visited) in problem.
Now doing proof search in false case (107 not visited) in false case (125 not visited) in false case (121 not visited) in problem.
Decided to case split at (112, 'ASM')
  (in false case (107 not visited) in false case (125 not visited) in false case (121 not visited) in problem)
Now doing proof search in true case (112 visited) in false case (107 not visited) in false case (125 not visited) in false case (121 not visited) in problem.
Now doing proof search in false case (112 not visited) in false case (107 not visited) in false case (125 not visited) in false case (121 not visited) in problem.
Decided to case split at (116, 'ASM')
  (in false case (112 not visited) in false case (107 not visited) in false case (125 not visited) in false case (121 not visited) in problem)
Now doing proof search in true case (116 visited) in false case (112 not visited) in false case (107 not visited) in false case (125 not visited) in false case (121 not visited) in problem.
Now doing proof search in false case (116 not visited) in false case (112 not visited) in false case (107 not visited) in false case (125 not visited) in false case (121 not visited) in problem.
Decided to case split at (130, 'ASM')
  (in false case (116 not visited) in false case (112 not visited) in false case (107 not visited) in false case (125 not visited) in false case (121 not visited) in problem)
Now doing proof search in true case (130 visited) in false case (116 not visited) in false case (112 not visited) in false case (107 not visited) in false case (125 not visited) in false case (121 not visited) in problem.
Now doing proof search in false case (130 not visited) in false case (116 not visited) in false case (112 not visited) in false case (107 not visited) in false case (125 not visited) in false case (121 not visited) in problem.
Decided to case split at (134, 'ASM')
  (in false case (130 not visited) in false case (116 not visited) in false case (112 not visited) in false case (107 not visited) in false case (125 not visited) in false case (121 not visited) in problem)
Now doing proof search in true case (134 visited) in false case (130 not visited) in false case (116 not visited) in false case (112 not visited) in false case (107 not visited) in false case (125 not visited) in false case (121 not visited) in problem.
Now doing proof search in false case (134 not visited) in false case (130 not visited) in false case (116 not visited) in false case (112 not visited) in false case (107 not visited) in false case (125 not visited) in false case (121 not visited) in problem.
Decided to case split at (103, 'ASM')
  (in false case (134 not visited) in false case (130 not visited) in false case (116 not visited) in false case (112 not visited) in false case (107 not visited) in false case (125 not visited) in false case (121 not visited) in problem)
Now doing proof search in true case (103 visited) in false case (134 not visited) in false case (130 not visited) in false case (116 not visited) in false case (112 not visited) in false case (107 not visited) in false case (125 not visited) in false case (121 not visited) in problem.
Now doing proof search in false case (103 not visited) in false case (134 not visited) in false case (130 not visited) in false case (116 not visited) in false case (112 not visited) in false case (107 not visited) in false case (125 not visited) in false case (121 not visited) in problem.
ProofNode ('CaseSplit', (121, 'ASM'), (ProofNode ('Restr', (121, ('Number', (1, 2))), (ProofNode ('Restr', (18, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (121, ('Number', (0, 1))), (ProofNode ('Restr', (18, ('Number', (0, 1))), (ProofNode ('CaseSplit', (125, 'ASM'), (ProofNode ('Restr', (125, ('Number', (1, 2))), (ProofNode ('Restr', (25, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (125, ('Number', (0, 1))), (ProofNode ('Restr', (25, ('Number', (0, 1))), (ProofNode ('CaseSplit', (107, 'ASM'), (ProofNode ('Restr', (107, ('Number', (1, 2))), (ProofNode ('Restr', (37, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (107, ('Number', (0, 1))), (ProofNode ('Restr', (37, ('Number', (0, 1))), (ProofNode ('CaseSplit', (112, 'ASM'), (ProofNode ('Restr', (112, ('Number', (1, 2))), (ProofNode ('Restr', (40, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (112, ('Number', (0, 1))), (ProofNode ('Restr', (40, ('Number', (0, 1))), (ProofNode ('CaseSplit', (116, 'ASM'), (ProofNode ('Restr', (116, ('Number', (1, 2))), (ProofNode ('Restr', (43, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (116, ('Number', (0, 1))), (ProofNode ('Restr', (43, ('Number', (0, 1))), (ProofNode ('CaseSplit', (130, 'ASM'), (ProofNode ('Restr', (130, ('Number', (1, 2))), (ProofNode ('Restr', (46, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (130, ('Number', (0, 1))), (ProofNode ('Restr', (46, ('Number', (0, 1))), (ProofNode ('CaseSplit', (134, 'ASM'), (ProofNode ('Restr', (134, ('Number', (1, 2))), (ProofNode ('Restr', (49, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (134, ('Number', (0, 1))), (ProofNode ('Restr', (49, ('Number', (0, 1))), (ProofNode ('CaseSplit', (103, 'ASM'), (ProofNode ('Restr', (103, ('Number', (1, 2))), (ProofNode ('Restr', (34, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (103, ('Number', (0, 1))), (ProofNode ('Restr', (34, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)))),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 121 is visited
Step 2: case in (1) where 121 is visited
  Prove the number of visits to 121 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 18 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 121 is not visited
  Prove the number of visits to 121 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 18 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 125 is visited
Step 8: case in (7) where 125 is visited
  Prove the number of visits to 125 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 25 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 125 is not visited
  Prove the number of visits to 125 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 25 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 107 is visited
Step 14: case in (13) where 107 is visited
  Prove the number of visits to 107 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 37 is in {1 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where 107 is not visited
  Prove the number of visits to 107 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 37 is in {0 ..< 1}
    .. proven.
Step 19: 
  case split on whether 112 is visited
Step 20: case in (19) where 112 is visited
  Prove the number of visits to 112 is in {1 ..< 2}
    .. proven.
Step 21: 
  Prove the number of visits to 40 is in {1 ..< 2}
    .. proven.
Step 22: 
  prove all verification conditions
    .. proven.
Step 23: case in (19) where 112 is not visited
  Prove the number of visits to 112 is in {0 ..< 1}
    .. proven.
Step 24: 
  Prove the number of visits to 40 is in {0 ..< 1}
    .. proven.
Step 25: 
  case split on whether 116 is visited
Step 26: case in (25) where 116 is visited
  Prove the number of visits to 116 is in {1 ..< 2}
    .. proven.
Step 27: 
  Prove the number of visits to 43 is in {1 ..< 2}
    .. proven.
Step 28: 
  prove all verification conditions
    .. proven.
Step 29: case in (25) where 116 is not visited
  Prove the number of visits to 116 is in {0 ..< 1}
    .. proven.
Step 30: 
  Prove the number of visits to 43 is in {0 ..< 1}
    .. proven.
Step 31: 
  case split on whether 130 is visited
Step 32: case in (31) where 130 is visited
  Prove the number of visits to 130 is in {1 ..< 2}
    .. proven.
Step 33: 
  Prove the number of visits to 46 is in {1 ..< 2}
    .. proven.
Step 34: 
  prove all verification conditions
    .. proven.
Step 35: case in (31) where 130 is not visited
  Prove the number of visits to 130 is in {0 ..< 1}
    .. proven.
Step 36: 
  Prove the number of visits to 46 is in {0 ..< 1}
    .. proven.
Step 37: 
  case split on whether 134 is visited
Step 38: case in (37) where 134 is visited
  Prove the number of visits to 134 is in {1 ..< 2}
    .. proven.
Step 39: 
  Prove the number of visits to 49 is in {1 ..< 2}
    .. proven.
Step 40: 
  prove all verification conditions
    .. proven.
Step 41: case in (37) where 134 is not visited
  Prove the number of visits to 134 is in {0 ..< 1}
    .. proven.
Step 42: 
  Prove the number of visits to 49 is in {0 ..< 1}
    .. proven.
Step 43: 
  case split on whether 103 is visited
Step 44: case in (43) where 103 is visited
  Prove the number of visits to 103 is in {1 ..< 2}
    .. proven.
Step 45: 
  Prove the number of visits to 34 is in {1 ..< 2}
    .. proven.
Step 46: 
  prove all verification conditions
    .. proven.
Step 47: case in (43) where 103 is not visited
  Prove the number of visits to 103 is in {0 ..< 1}
    .. proven.
Step 48: 
  Prove the number of visits to 34 is in {0 ..< 1}
    .. proven.
Step 49: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeTCBInvocation (ASM) <= Kernel_C.decodeTCBInvocation (C)), time taken: 277.99s
Testing Function pair Pairing (map_kernel_devices (ASM) <= Kernel_C.map_kernel_devices (C))
  (function pairing 50 of 282)
 .. built problem, finding proof
Discovered that points [3 (loop head)] can be bounded
  (in problem)
Discovered that points [52 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (3, ('Number', (0, 5))), (ProofNode ('Restr', (52, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 3 is in {0 ..< 5}
    .. proven.
Step 2: 
  Prove the number of visits to 52 is in {0 ..< 4}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (map_kernel_devices (ASM) <= Kernel_C.map_kernel_devices (C)), time taken: 37.22s
Testing Function pair Pairing (Arch_deriveCap (ASM) <= Kernel_C.Arch_deriveCap (C))
  (function pairing 51 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_deriveCap (ASM) <= Kernel_C.Arch_deriveCap (C)), time taken: 4.83s
Testing Function pair Pairing (getExtraCPtr (ASM) <= Kernel_C.getExtraCPtr (C))
  (function pairing 52 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (getExtraCPtr (ASM) <= Kernel_C.getExtraCPtr (C)), time taken: 0.23s
Testing Function pair Pairing (deleteASID (ASM) <= Kernel_C.deleteASID (C))
  (function pairing 53 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (deleteASID (ASM) <= Kernel_C.deleteASID (C)), time taken: 10.23s
Testing Function pair Pairing (create_kernel_untypeds (ASM) <= Kernel_C.create_kernel_untypeds (C))
  (function pairing 54 of 282)
 .. built problem, finding proof
Discovered that points [40 (loop head)] can be bounded
  (in problem)
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1712, in build_proof_rec
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1756, in build_proof_rec_with_restrs
    kind, must_find = must_find)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1785, in get_proof_split_limit
    hints = [limit, limit + 1], use_rep = mk_graph_slice (p))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 113, in find_split_limit
    assert not 'split limit found'
AssertionError
Result ProofEXCEPT for pair Pairing (create_kernel_untypeds (ASM) <= Kernel_C.create_kernel_untypeds (C)), time taken: 52.63s
Testing Function pair Pairing (create_domain_cap (ASM) <= Kernel_C.create_domain_cap (C))
  (function pairing 55 of 282)
 .. built problem, finding proof
Discovered that points [10 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (10, ('Number', (0, 5))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 10 is in {0 ..< 5}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_domain_cap (ASM) <= Kernel_C.create_domain_cap (C)), time taken: 17.76s
Testing Function pair Pairing (invalidateTLBByASID (ASM) <= Kernel_C.invalidateTLBByASID (C))
  (function pairing 56 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invalidateTLBByASID (ASM) <= Kernel_C.invalidateTLBByASID (C)), time taken: 0.96s
Testing Function pair Pairing (schedule (ASM) <= Kernel_C.schedule (C))
  (function pairing 57 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (schedule (ASM) <= Kernel_C.schedule (C)), time taken: 17.12s
Testing Function pair Pairing (isIOSpaceFrameCap (ASM) <= Kernel_C.isIOSpaceFrameCap (C))
  (function pairing 58 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (isIOSpaceFrameCap (ASM) <= Kernel_C.isIOSpaceFrameCap (C)), time taken: 0.21s
Testing Function pair Pairing (decodeCNodeInvocation (ASM) <= Kernel_C.decodeCNodeInvocation (C))
  (function pairing 59 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeCNodeInvocation (ASM) <= Kernel_C.decodeCNodeInvocation (C)), time taken: 5728.36s
Testing Function pair Pairing (lookupExtraCaps (ASM) <= Kernel_C.lookupExtraCaps (C))
  (function pairing 60 of 282)
 .. built problem, finding proof
Discovered that points [9 (loop head)] can be bounded
  (in problem)
Discovered that points [35 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (9, ('Number', (0, 5))), (ProofNode ('Restr', (35, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 9 is in {0 ..< 5}
    .. proven.
Step 2: 
  Prove the number of visits to 35 is in {0 ..< 4}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lookupExtraCaps (ASM) <= Kernel_C.lookupExtraCaps (C)), time taken: 251.60s
Testing Function pair Pairing (memset (ASM) <= Kernel_C.memset (C))
  (function pairing 61 of 282)
 .. built problem, finding proof
Decided to case split at (25, 'ASM')
  (in problem)
Now doing proof search in true case (25 visited) in problem.
Now doing proof search in false case (25 not visited) in problem.
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1738, in build_proof_rec
    p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 692, in find_split_loop
    i_opts, j_opts, node_restrs = node_restrs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1233, in find_split
    res = split_search (head, knowledge)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1154, in split_search
    knowledge.eqs_add_model (eqs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 306, in eqs_add_model
    assert_progress = assert_progress)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 284, in hyps_add_model
    {}, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (memset (ASM) <= Kernel_C.memset (C)), time taken: 5.16s
Testing Function pair Pairing (l_impl'wfi (ASM) <= r_impl'wfi (C))
  (function pairing 62 of 282)
Skipping Pairing (l_impl'wfi (ASM) <= r_impl'wfi (C)), underspecified C
Testing Function pair Pairing (invalidateASIDEntry (ASM) <= Kernel_C.invalidateASIDEntry (C))
  (function pairing 63 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invalidateASIDEntry (ASM) <= Kernel_C.invalidateASIDEntry (C)), time taken: 7.41s
Testing Function pair Pairing (switchToIdleThread (ASM) <= Kernel_C.switchToIdleThread (C))
  (function pairing 64 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (switchToIdleThread (ASM) <= Kernel_C.switchToIdleThread (C)), time taken: 0.53s
Testing Function pair Pairing (arch_clean_invalidate_caches (ASM) <= Kernel_C.arch_clean_invalidate_caches (C))
  (function pairing 65 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [12, 88]
  (in problem)
Now doing proof search in 12 init case in problem.
Discovered that points [121 (loop head)] can be bounded
  (in 12 init case in problem)
Discovered that points [80 (loop head)] can be bounded
  (in 12 init case in problem)
Discovered that points [109 (loop head)] can be bounded
  (in 12 init case in problem)
Discovered that points [10 (loop head)] can be bounded
  (in 12 init case in problem)
Discovered that points [37 (loop head)] can be bounded
  (in 12 init case in problem)
Discovered that points [54 (loop head)] can be bounded
  (in 12 init case in problem)
Now doing proof search in 12 loop case in problem.
Discovered that points [121 (loop head)] can be bounded
  (in 12 loop case in problem)
Discovered that points [80 (loop head)] can be bounded
  (in 12 loop case in problem)
Discovered that points [109 (loop head)] can be bounded
  (in 12 loop case in problem)
Discovered that points [10 (loop head)] can be bounded
  (in 12 loop case in problem)
Discovered that points [37 (loop head)] can be bounded
  (in 12 loop case in problem)
Discovered that points [54 (loop head)] can be bounded
  (in 12 loop case in problem)
ProofNode ('Split', ((12, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (88, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#12#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (12, ('Number', (0, 1))), (ProofNode ('Restr', (88, ('Number', (0, 1))), (ProofNode ('Restr', (121, ('Number', (0, 1))), (ProofNode ('Restr', (80, ('Number', (0, 1))), (ProofNode ('Restr', (109, ('Number', (0, 1))), (ProofNode ('Restr', (10, ('Number', (0, 1))), (ProofNode ('Restr', (37, ('Number', (0, 1))), (ProofNode ('Restr', (54, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)), ProofNode ('Restr', (12, ('Offset', (0, 1))), (ProofNode ('Restr', (88, ('Offset', (0, 1))), (ProofNode ('Restr', (121, ('Number', (0, 1))), (ProofNode ('Restr', (80, ('Number', (0, 1))), (ProofNode ('Restr', (109, ('Number', (0, 1))), (ProofNode ('Restr', (10, ('Number', (0, 1))), (ProofNode ('Restr', (37, ('Number', (0, 1))), (ProofNode ('Restr', (54, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),))))
 .. proof found.
Step 1: 
  prove visits to 12 related to visits to 88
    with equalities
    and with invariants
      ((Word32) ('r21')) (@ addr 12)
      ((Word32) ('r4')) (@ addr 12)
      ((Word32) ('r27')) (@ addr 12)
      ((Word32) ('r17')) (@ addr 12)
      ((Word32) ('r0')) (@ addr 12)
      ((Word32) ('r11')) (@ addr 12)
      ((Word32) ('r23')) (@ addr 12)
      ((Word32) ('r13')) (@ addr 12)
      ((Word32) ('r10')) (@ addr 12)
      ((Word32) ('r28')) (@ addr 12)
      ((Word32) ('r19')) (@ addr 12)
      ((Word32) ('r16')) (@ addr 12)
      ((Word64) ('clock')) (@ addr 12)
      ((Word32) ('r12')) (@ addr 12)
      ((Word32) ('r9')) (@ addr 12)
      ((Word32) ('r6')) (@ addr 12)
      ((Word32) ('r7')) (@ addr 12)
      ((Word32) ('r31')) (@ addr 12)
      ((Word32) ('r25')) (@ addr 12)
      ((Word32) ('r24')) (@ addr 12)
      ((Word32) ('r8')) (@ addr 12)
      ((Word32) ('r29')) (@ addr 12)
      ((Word32) ('r3')) (@ addr 12)
      ((Word32) ('r18')) (@ addr 12)
      ((Word32) ('r20')) (@ addr 12)
      ((Word32) ('r30')) (@ addr 12)
      ((Word32) ('r14')) (@ addr 12)
      ((Word32) ('r15')) (@ addr 12)
      ((Word32) ('mode')) (@ addr 12)
      ((Word32) ('r5')) (@ addr 12)
      ((Word32) ('ret')) (@ addr 12)
      ((Word32) ('r26')) (@ addr 12)
      ((Word32) ('r1')) (@ addr 12)
      ((Mem) ('mem')) (@ addr 12)
      ((Word32) ('r22')) (@ addr 12)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 12)
      ((Word32) (('loop#12#count' + ((0 - '#seq-visits') * 1)))) (@ addr 88)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 12 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 88 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 121 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 80 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 109 is in {0 ..< 1}
    .. proven.
Step 7: 
  Prove the number of visits to 10 is in {0 ..< 1}
    .. proven.
Step 8: 
  Prove the number of visits to 37 is in {0 ..< 1}
    .. proven.
Step 9: 
  Prove the number of visits to 54 is in {0 ..< 1}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 12 is in {i + 0 ..< i + 1}
    .. proven.
Step 12: 
  Prove the number of visits to 88 is in {i + 0 ..< i + 1}
    .. proven.
Step 13: 
  Prove the number of visits to 121 is in {0 ..< 1}
    .. proven.
Step 14: 
  Prove the number of visits to 80 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 109 is in {0 ..< 1}
    .. proven.
Step 16: 
  Prove the number of visits to 10 is in {0 ..< 1}
    .. proven.
Step 17: 
  Prove the number of visits to 37 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 54 is in {0 ..< 1}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (arch_clean_invalidate_caches (ASM) <= Kernel_C.arch_clean_invalidate_caches (C)), time taken: 14.74s
Testing Function pair Pairing (maybe_alloc_extra_bi (ASM) <= Kernel_C.maybe_alloc_extra_bi (C))
  (function pairing 66 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (maybe_alloc_extra_bi (ASM) <= Kernel_C.maybe_alloc_extra_bi (C)), time taken: 0.75s
Testing Function pair Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C))
  (function pairing 67 of 282)
 .. built problem, finding proof
Decided to case split at (72, 'ASM')
  (in problem)
Now doing proof search in true case (72 visited) in problem.
Now doing proof search in false case (72 not visited) in problem.
Decided to case split at (81, 'ASM')
  (in false case (72 not visited) in problem)
Now doing proof search in true case (81 visited) in false case (72 not visited) in problem.
Now doing proof search in false case (81 not visited) in false case (72 not visited) in problem.
Decided to case split at (83, 'ASM')
  (in false case (81 not visited) in false case (72 not visited) in problem)
Now doing proof search in true case (83 visited) in false case (81 not visited) in false case (72 not visited) in problem.
Now doing proof search in false case (83 not visited) in false case (81 not visited) in false case (72 not visited) in problem.
Decided to case split at (74, 'ASM')
  (in false case (83 not visited) in false case (81 not visited) in false case (72 not visited) in problem)
Now doing proof search in true case (74 visited) in false case (83 not visited) in false case (81 not visited) in false case (72 not visited) in problem.
Now doing proof search in false case (74 not visited) in false case (83 not visited) in false case (81 not visited) in false case (72 not visited) in problem.
ProofNode ('CaseSplit', (72, 'ASM'), (ProofNode ('Restr', (72, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (72, ('Number', (0, 1))), (ProofNode ('Restr', (17, ('Number', (0, 1))), (ProofNode ('CaseSplit', (81, 'ASM'), (ProofNode ('Restr', (81, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (81, ('Number', (0, 1))), (ProofNode ('Restr', (24, ('Number', (0, 1))), (ProofNode ('CaseSplit', (83, 'ASM'), (ProofNode ('Restr', (83, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (83, ('Number', (0, 1))), (ProofNode ('CaseSplit', (74, 'ASM'), (ProofNode ('Restr', (74, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (74, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)))),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 72 is visited
Step 2: case in (1) where 72 is visited
  Prove the number of visits to 72 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 72 is not visited
  Prove the number of visits to 72 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 17 is in {0 ..< 1}
    .. proven.
Step 6: 
  case split on whether 81 is visited
Step 7: case in (6) where 81 is visited
  Prove the number of visits to 81 is in {1 ..< 2}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Step 9: case in (6) where 81 is not visited
  Prove the number of visits to 81 is in {0 ..< 1}
    .. proven.
Step 10: 
  Prove the number of visits to 24 is in {0 ..< 1}
    .. proven.
Step 11: 
  case split on whether 83 is visited
Step 12: case in (11) where 83 is visited
  Prove the number of visits to 83 is in {1 ..< 2}
    .. proven.
Step 13: 
  prove all verification conditions
    .. proven.
Step 14: case in (11) where 83 is not visited
  Prove the number of visits to 83 is in {0 ..< 1}
    .. proven.
Step 15: 
  case split on whether 74 is visited
Step 16: case in (15) where 74 is visited
  Prove the number of visits to 74 is in {1 ..< 2}
    .. proven.
Step 17: 
  prove all verification conditions
    .. proven.
Step 18: case in (15) where 74 is not visited
  Prove the number of visits to 74 is in {0 ..< 1}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C)), time taken: 186.06s
Testing Function pair Pairing (lookupPDSlot (ASM) <= Kernel_C.lookupPDSlot (C))
  (function pairing 68 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lookupPDSlot (ASM) <= Kernel_C.lookupPDSlot (C)), time taken: 0.20s
Testing Function pair Pairing (cleanInvalidateCacheRange_RAM (ASM) <= Kernel_C.cleanInvalidateCacheRange_RAM (C))
  (function pairing 69 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [52, 135]
  (in problem)
Now doing proof search in 52 init case in problem.
Discovered that points [114 (loop head)] can be bounded
  (in 52 init case in problem)
Discovered that points [175 (loop head)] can be bounded
  (in 52 init case in problem)
Discovered that points [4 (loop head)] can be bounded
  (in 52 init case in problem)
Discovered that points [81 (loop head)] can be bounded
  (in 52 init case in problem)
Discovered that points [83 (loop head)] can be bounded
  (in 52 init case in problem)
Discovered that points [29 (loop head)] can be bounded
  (in 52 init case in problem)
Now doing proof search in 52 loop case in problem.
Discovered a loop relation for split points [41, 120]
  (in 52 loop case in problem)
Now doing proof search in 41 init case in 52 loop case in problem.
Discovered that points [175 (loop head)] can be bounded
  (in 41 init case in 52 loop case in problem)
Discovered that points [83 (loop head)] can be bounded
  (in 41 init case in 52 loop case in problem)
Discovered a loop relation for split points [65, 3]
  (in 41 init case in 52 loop case in problem)
Now doing proof search in 65 init case in 41 init case in 52 loop case in problem.
Now doing proof search in 65 loop case in 41 init case in 52 loop case in problem.
Now doing proof search in 41 loop case in 52 loop case in problem.
Discovered that points [175 (loop head)] can be bounded
  (in 41 loop case in 52 loop case in problem)
Discovered that points [83 (loop head)] can be bounded
  (in 41 loop case in 52 loop case in problem)
Discovered a loop relation for split points [65, 3]
  (in 41 loop case in 52 loop case in problem)
Now doing proof search in 65 init case in 41 loop case in 52 loop case in problem.
Now doing proof search in 65 loop case in 41 loop case in 52 loop case in problem.
ProofNode ('Split', ((52, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (135, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.2'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.2'), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.5'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v.1'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.5'))], 2, 1), (ProofNode ('Restr', (52, ('Number', (0, 3))), (ProofNode ('Restr', (135, ('Number', (0, 3))), (ProofNode ('Restr', (114, ('Number', (0, 5))), (ProofNode ('Restr', (175, ('Number', (0, 2))), (ProofNode ('Restr', (4, ('Number', (0, 4))), (ProofNode ('Restr', (81, ('Number', (0, 4))), (ProofNode ('Restr', (83, ('Number', (0, 2))), (ProofNode ('Restr', (29, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)), ProofNode ('Restr', (52, ('Offset', (0, 3))), (ProofNode ('Restr', (135, ('Offset', (0, 3))), (ProofNode ('Split', ((41, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (120, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.3'), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.1'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 5)])])])]), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.3'))], 2, 1), (ProofNode ('Restr', (41, ('Number', (0, 3))), (ProofNode ('Restr', (120, ('Number', (0, 3))), (ProofNode ('Restr', (175, ('Number', (0, 2))), (ProofNode ('Restr', (83, ('Number', (0, 2))), (ProofNode ('Split', ((65, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (3, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (65, ('Number', (0, 3))), (ProofNode ('Restr', (3, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (65, ('Offset', (0, 3))), (ProofNode ('Restr', (3, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)), ProofNode ('Restr', (41, ('Offset', (0, 3))), (ProofNode ('Restr', (120, ('Offset', (0, 3))), (ProofNode ('Restr', (175, ('Number', (0, 2))), (ProofNode ('Restr', (83, ('Number', (0, 2))), (ProofNode ('Split', ((65, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (3, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (65, ('Number', (0, 3))), (ProofNode ('Restr', (3, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (65, ('Offset', (0, 3))), (ProofNode ('Restr', (3, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 52 related to visits to 135
    with equalities
      ((Mem) ('mem')) (@ addr 52)
      = ((Mem) ('Mem.5')) (@ addr 135)
    and with invariants
      ((Word32) ('r21')) (@ addr 52)
      ((Word32) ('r4')) (@ addr 52)
      ((Word32) ('r27')) (@ addr 52)
      ((Word32) ('r17')) (@ addr 52)
      ((Word32) ('r0')) (@ addr 52)
      ((Word32) ('r11')) (@ addr 52)
      ((Word32) ('r23')) (@ addr 52)
      ((Word32) ('r13')) (@ addr 52)
      ((Word32) ('r10')) (@ addr 52)
      ((Word32) ('r28')) (@ addr 52)
      ((Word32) ('r19')) (@ addr 52)
      ((Word32) ('r16')) (@ addr 52)
      ((Word64) ('clock')) (@ addr 52)
      ((Word32) ('r12')) (@ addr 52)
      ((Word32) ('r9')) (@ addr 52)
      ((Word32) ('r6')) (@ addr 52)
      ((Word32) ('r7')) (@ addr 52)
      ((Word32) ('r31')) (@ addr 52)
      ((Word32) ('r25')) (@ addr 52)
      ((Word32) ('r24')) (@ addr 52)
      ((Word32) ('r8')) (@ addr 52)
      ((Word32) ('r29')) (@ addr 52)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 52)
      ((Word32) ('r18')) (@ addr 52)
      ((Word32) ('r20')) (@ addr 52)
      ((Word32) ('r30')) (@ addr 52)
      ((Word32) ('r14')) (@ addr 52)
      ((Word32) ('r15')) (@ addr 52)
      ((Word32) ('mode')) (@ addr 52)
      ((Word32) ('r5')) (@ addr 52)
      ((Word32) ('ret')) (@ addr 52)
      ((Word32) ('r26')) (@ addr 52)
      ((Word32) ('r1')) (@ addr 52)
      ((Word32) ('r2')) (@ addr 52)
      ((Bool) (ROData('mem'))) (@ addr 52)
      ((Word32) ('r22')) (@ addr 52)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 52)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 135)
      ((Word32) ('end___unsigned_long#v.2')) (@ addr 135)
      ((Word32) ('start___unsigned_long#v.2')) (@ addr 135)
      ((Word32) ('end___unsigned_long#v')) (@ addr 135)
      ((Word32[50]) ('GhostAssertions.5')) (@ addr 135)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 135)
      ((Word32) ('pstart___unsigned_long#v.1')) (@ addr 135)
      ((Word32) ('start___unsigned_long#v')) (@ addr 135)
      ((Word32) (('index___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 135)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 52 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 135 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 114 is in {0 ..< 5}
    .. proven.
Step 5: 
  Prove the number of visits to 175 is in {0 ..< 2}
    .. proven.
Step 6: 
  Prove the number of visits to 4 is in {0 ..< 4}
    .. proven.
Step 7: 
  Prove the number of visits to 81 is in {0 ..< 4}
    .. proven.
Step 8: 
  Prove the number of visits to 83 is in {0 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 29 is in {0 ..< 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 52 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 135 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 41 related to visits to 120
    with equalities
      ((Mem) ('mem')) (@ addr 41)
      = ((Mem) ('Mem.3')) (@ addr 120)
    and with invariants
      ((Word32) ('r21')) (@ addr 41)
      ((Word32) ('r4')) (@ addr 41)
      ((Word32) ('r27')) (@ addr 41)
      ((Word32) ('r17')) (@ addr 41)
      ((Word32) ('r0')) (@ addr 41)
      ((Word32) ('r11')) (@ addr 41)
      ((Word32) ('r23')) (@ addr 41)
      ((Word32) ('r13')) (@ addr 41)
      ((Word32) ('r10')) (@ addr 41)
      ((Word32) ('r28')) (@ addr 41)
      ((Word32) ('r19')) (@ addr 41)
      ((Word32) ('r16')) (@ addr 41)
      ((Word64) ('clock')) (@ addr 41)
      ((Word32) ('r12')) (@ addr 41)
      ((Word32) ('r9')) (@ addr 41)
      ((Word32) ('r6')) (@ addr 41)
      ((Word32) ('r7')) (@ addr 41)
      ((Word32) ('r31')) (@ addr 41)
      ((Word32) ('r25')) (@ addr 41)
      ((Word32) ('r24')) (@ addr 41)
      ((Word32) ('r8')) (@ addr 41)
      ((Word32) ('r29')) (@ addr 41)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 41)
      ((Word32) ('r18')) (@ addr 41)
      ((Word32) ('r20')) (@ addr 41)
      ((Word32) ('r30')) (@ addr 41)
      ((Word32) ('r14')) (@ addr 41)
      ((Word32) ('r15')) (@ addr 41)
      ((Word32) ('mode')) (@ addr 41)
      ((Word32) ('r5')) (@ addr 41)
      ((Word32) ('ret')) (@ addr 41)
      ((Word32) ('r26')) (@ addr 41)
      ((Word32) ('r1')) (@ addr 41)
      ((Word32) ('r2')) (@ addr 41)
      ((Bool) (ROData('mem'))) (@ addr 41)
      ((Word32) ('r22')) (@ addr 41)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 41)
      ((Word32) ('end___unsigned_long#v')) (@ addr 120)
      ((Word32[50]) ('GhostAssertions.3')) (@ addr 120)
      ((Word32) ('end___unsigned_long#v.1')) (@ addr 120)
      ((Word32) ('start___unsigned_long#v')) (@ addr 120)
      ((Word32) (('loop#3#count.1' + ((0 - '#seq-visits') * 1)))) (@ addr 120)
      ((Word32) (('start___unsigned_long#v.1' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast(5)))))) (@ addr 120)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 120)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 41 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 120 is in {0 ..< 3}
    .. proven.
Step 16: 
  Prove the number of visits to 175 is in {0 ..< 2}
    .. proven.
Step 17: 
  Prove the number of visits to 83 is in {0 ..< 2}
    .. proven.
Step 18: 
  prove visits to 65 related to visits to 3
    with equalities
      ((Mem) ('mem')) (@ addr 65)
      = ((Mem) ('Mem')) (@ addr 3)
    and with invariants
      ((Word32) ('r21')) (@ addr 65)
      ((Word32) ('r4')) (@ addr 65)
      ((Word32) ('r27')) (@ addr 65)
      ((Word32) ('r17')) (@ addr 65)
      ((Word32) ('r0')) (@ addr 65)
      ((Word32) ('r11')) (@ addr 65)
      ((Word32) ('r23')) (@ addr 65)
      ((Word32) ('r13')) (@ addr 65)
      ((Word32) ('r10')) (@ addr 65)
      ((Word32) ('r28')) (@ addr 65)
      ((Word32) ('r19')) (@ addr 65)
      ((Word32) ('r16')) (@ addr 65)
      ((Word64) ('clock')) (@ addr 65)
      ((Word32) ('r12')) (@ addr 65)
      ((Word32) ('r9')) (@ addr 65)
      ((Word32) ('r6')) (@ addr 65)
      ((Word32) ('r7')) (@ addr 65)
      ((Word32) ('r31')) (@ addr 65)
      ((Word32) ('r25')) (@ addr 65)
      ((Word32) ('r24')) (@ addr 65)
      ((Word32) ('r8')) (@ addr 65)
      ((Word32) ('r29')) (@ addr 65)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 65)
      ((Word32) ('r18')) (@ addr 65)
      ((Word32) ('r20')) (@ addr 65)
      ((Word32) ('r30')) (@ addr 65)
      ((Word32) ('r14')) (@ addr 65)
      ((Word32) ('r15')) (@ addr 65)
      ((Word32) ('mode')) (@ addr 65)
      ((Word32) ('r5')) (@ addr 65)
      ((Word32) ('ret')) (@ addr 65)
      ((Word32) ('r26')) (@ addr 65)
      ((Word32) ('r1')) (@ addr 65)
      ((Word32) ('r2')) (@ addr 65)
      ((Bool) (ROData('mem'))) (@ addr 65)
      ((Word32) ('r22')) (@ addr 65)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 65)
      ((Word32) ('end___unsigned_long#v')) (@ addr 3)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 3)
      ((Word32) ('start___unsigned_long#v')) (@ addr 3)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 3)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 3)
      ((Word32[50]) ('GhostAssertions')) (@ addr 3)
    .. proven.
Step 19: case in (18) where the length of the sequence < 2
  Prove the number of visits to 65 is in {0 ..< 3}
    .. proven.
Step 20: 
  Prove the number of visits to 3 is in {0 ..< 3}
    .. proven.
Step 21: 
  prove all verification conditions
    .. proven.
Step 22: case in (18) where the length of the sequence is k + 2
  Prove the number of visits to 65 is in {k + 0 ..< k + 3}
    .. proven.
Step 23: 
  Prove the number of visits to 3 is in {k + 0 ..< k + 3}
    .. proven.
Step 24: 
  prove all verification conditions
    .. proven.
Step 25: case in (13) where the length of the sequence is j + 2
  Prove the number of visits to 41 is in {j + 0 ..< j + 3}
    .. proven.
Step 26: 
  Prove the number of visits to 120 is in {j + 0 ..< j + 3}
    .. proven.
Step 27: 
  Prove the number of visits to 175 is in {0 ..< 2}
    .. proven.
Step 28: 
  Prove the number of visits to 83 is in {0 ..< 2}
    .. proven.
Step 29: 
  prove visits to 65 related to visits to 3
    with equalities
      ((Mem) ('mem')) (@ addr 65)
      = ((Mem) ('Mem')) (@ addr 3)
    and with invariants
      ((Word32) ('r21')) (@ addr 65)
      ((Word32) ('r4')) (@ addr 65)
      ((Word32) ('r27')) (@ addr 65)
      ((Word32) ('r17')) (@ addr 65)
      ((Word32) ('r0')) (@ addr 65)
      ((Word32) ('r11')) (@ addr 65)
      ((Word32) ('r23')) (@ addr 65)
      ((Word32) ('r13')) (@ addr 65)
      ((Word32) ('r10')) (@ addr 65)
      ((Word32) ('r28')) (@ addr 65)
      ((Word32) ('r19')) (@ addr 65)
      ((Word32) ('r16')) (@ addr 65)
      ((Word64) ('clock')) (@ addr 65)
      ((Word32) ('r12')) (@ addr 65)
      ((Word32) ('r9')) (@ addr 65)
      ((Word32) ('r6')) (@ addr 65)
      ((Word32) ('r7')) (@ addr 65)
      ((Word32) ('r31')) (@ addr 65)
      ((Word32) ('r25')) (@ addr 65)
      ((Word32) ('r24')) (@ addr 65)
      ((Word32) ('r8')) (@ addr 65)
      ((Word32) ('r29')) (@ addr 65)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 65)
      ((Word32) ('r18')) (@ addr 65)
      ((Word32) ('r20')) (@ addr 65)
      ((Word32) ('r30')) (@ addr 65)
      ((Word32) ('r14')) (@ addr 65)
      ((Word32) ('r15')) (@ addr 65)
      ((Word32) ('mode')) (@ addr 65)
      ((Word32) ('r5')) (@ addr 65)
      ((Word32) ('ret')) (@ addr 65)
      ((Word32) ('r26')) (@ addr 65)
      ((Word32) ('r1')) (@ addr 65)
      ((Word32) ('r2')) (@ addr 65)
      ((Bool) (ROData('mem'))) (@ addr 65)
      ((Word32) ('r22')) (@ addr 65)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 65)
      ((Word32) ('end___unsigned_long#v')) (@ addr 3)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 3)
      ((Word32) ('start___unsigned_long#v')) (@ addr 3)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 3)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 3)
      ((Word32[50]) ('GhostAssertions')) (@ addr 3)
    .. proven.
Step 30: case in (29) where the length of the sequence < 2
  Prove the number of visits to 65 is in {0 ..< 3}
    .. proven.
Step 31: 
  Prove the number of visits to 3 is in {0 ..< 3}
    .. proven.
Step 32: 
  prove all verification conditions
    .. proven.
Step 33: case in (29) where the length of the sequence is a + 2
  Prove the number of visits to 65 is in {a + 0 ..< a + 3}
    .. proven.
Step 34: 
  Prove the number of visits to 3 is in {a + 0 ..< a + 3}
    .. proven.
Step 35: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cleanInvalidateCacheRange_RAM (ASM) <= Kernel_C.cleanInvalidateCacheRange_RAM (C)), time taken: 977.61s
Testing Function pair Pairing (invokeCNodeSaveCaller (ASM) <= Kernel_C.invokeCNodeSaveCaller (C))
  (function pairing 70 of 282)
 .. built problem, finding proof
Decided to case split at (39, 'ASM')
  (in problem)
Now doing proof search in true case (39 visited) in problem.
Now doing proof search in false case (39 not visited) in problem.
ProofNode ('CaseSplit', (39, 'ASM'), (ProofNode ('Restr', (39, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (39, ('Number', (0, 1))), (ProofNode ('Restr', (21, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 39 is visited
Step 2: case in (1) where 39 is visited
  Prove the number of visits to 39 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 39 is not visited
  Prove the number of visits to 39 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 21 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeCNodeSaveCaller (ASM) <= Kernel_C.invokeCNodeSaveCaller (C)), time taken: 4.77s
Testing Function pair Pairing (activateThread (ASM) <= Kernel_C.activateThread (C))
  (function pairing 71 of 282)
 .. built problem, finding proof
Decided to case split at (29, 'ASM')
  (in problem)
Now doing proof search in true case (29 visited) in problem.
Now doing proof search in false case (29 not visited) in problem.
ProofNode ('CaseSplit', (29, 'ASM'), (ProofNode ('Restr', (29, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (29, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),))))
 .. proof found.
Step 1: 
  case split on whether 29 is visited
Step 2: case in (1) where 29 is visited
  Prove the number of visits to 29 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 29 is not visited
  Prove the number of visits to 29 is in {0 ..< 1}
    .. proven.
Step 5: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (activateThread (ASM) <= Kernel_C.activateThread (C)), time taken: 6.57s
Testing Function pair Pairing (cleanCaches_PoU (ASM) <= Kernel_C.cleanCaches_PoU (C))
  (function pairing 72 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cleanCaches_PoU (ASM) <= Kernel_C.cleanCaches_PoU (C)), time taken: 1.26s
Testing Function pair Pairing (Arch_activateIdleThread (ASM) <= Kernel_C.Arch_activateIdleThread (C))
  (function pairing 73 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_activateIdleThread (ASM) <= Kernel_C.Arch_activateIdleThread (C)), time taken: 0.16s
Testing Function pair Pairing (tcbSchedEnqueue (ASM) <= Kernel_C.tcbSchedEnqueue (C))
  (function pairing 74 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (tcbSchedEnqueue (ASM) <= Kernel_C.tcbSchedEnqueue (C)), time taken: 29.44s
Testing Function pair Pairing (getObjectSize (ASM) <= Kernel_C.getObjectSize (C))
  (function pairing 75 of 282)
 .. built problem, finding proof
Decided to case split at (24, 'ASM')
  (in problem)
Now doing proof search in true case (24 visited) in problem.
Now doing proof search in false case (24 not visited) in problem.
ProofNode ('CaseSplit', (24, 'ASM'), (ProofNode ('Restr', (24, ('Number', (1, 2))), (ProofNode ('Restr', (5, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (24, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 24 is visited
Step 2: case in (1) where 24 is visited
  Prove the number of visits to 24 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 5 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 24 is not visited
  Prove the number of visits to 24 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (getObjectSize (ASM) <= Kernel_C.getObjectSize (C)), time taken: 3.66s
Testing Function pair Pairing (tcbEPAppend (ASM) <= Kernel_C.tcbEPAppend (C))
  (function pairing 76 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (tcbEPAppend (ASM) <= Kernel_C.tcbEPAppend (C)), time taken: 9.74s
Testing Function pair Pairing (Arch_decodeIRQControlInvocation (ASM) <= Kernel_C.Arch_decodeIRQControlInvocation (C))
  (function pairing 77 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_decodeIRQControlInvocation (ASM) <= Kernel_C.Arch_decodeIRQControlInvocation (C)), time taken: 51.97s
Testing Function pair Pairing (setExtraBadge (ASM) <= Kernel_C.setExtraBadge (C))
  (function pairing 78 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setExtraBadge (ASM) <= Kernel_C.setExtraBadge (C)), time taken: 0.41s
Testing Function pair Pairing (activate_global_pd (ASM) <= Kernel_C.activate_global_pd (C))
  (function pairing 79 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (activate_global_pd (ASM) <= Kernel_C.activate_global_pd (C)), time taken: 2.73s
Testing Function pair Pairing (decodeSetMCPriority (ASM) <= Kernel_C.decodeSetMCPriority (C))
  (function pairing 80 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeSetMCPriority (ASM) <= Kernel_C.decodeSetMCPriority (C)), time taken: 87.30s
Testing Function pair Pairing (handleDoubleFault (ASM) <= Kernel_C.handleDoubleFault (C))
  (function pairing 81 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleDoubleFault (ASM) <= Kernel_C.handleDoubleFault (C)), time taken: 0.50s
Testing Function pair Pairing (decodeTCBConfigure (ASM) <= Kernel_C.decodeTCBConfigure (C))
  (function pairing 82 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeTCBConfigure (ASM) <= Kernel_C.decodeTCBConfigure (C)), time taken: 761.19s
Testing Function pair Pairing (create_ipcbuf_frame_cap (ASM) <= Kernel_C.create_ipcbuf_frame_cap (C))
  (function pairing 83 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_ipcbuf_frame_cap (ASM) <= Kernel_C.create_ipcbuf_frame_cap (C)), time taken: 31.39s
Testing Function pair Pairing (arch_clean_invalidate_L1_caches (ASM) <= Kernel_C.arch_clean_invalidate_L1_caches (C))
  (function pairing 84 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (arch_clean_invalidate_L1_caches (ASM) <= Kernel_C.arch_clean_invalidate_L1_caches (C)), time taken: 1.59s
Testing Function pair Pairing (isFinalCapability (ASM) <= Kernel_C.isFinalCapability (C))
  (function pairing 85 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (isFinalCapability (ASM) <= Kernel_C.isFinalCapability (C)), time taken: 8.23s
Testing Function pair Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))
  (function pairing 86 of 282)
Aborting Problem (Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))), complex loop
Result ProblemAbort for pair Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C)), time taken: 17.61s
Testing Function pair Pairing (map_kernel_frame (ASM) <= Kernel_C.map_kernel_frame (C))
  (function pairing 87 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (map_kernel_frame (ASM) <= Kernel_C.map_kernel_frame (C)), time taken: 1.41s
Testing Function pair Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C))
  (function pairing 88 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1801, in default_searcher
    res = init_proof_case_split (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 161, in init_proof_case_split
    ps = init_case_splits (p, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 148, in init_case_splits
    pc_ids = knowledge.classify_vs ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 227, in classify_vs
    self.hyps_add_model (hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 211, in hyps_add_model
    {}, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C)), time taken: 3097.52s
Testing Function pair Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C))
  (function pairing 89 of 282)
Skipping Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C)), underspecified ASM
Testing Function pair Pairing (setMCPriority (ASM) <= Kernel_C.setMCPriority (C))
  (function pairing 90 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setMCPriority (ASM) <= Kernel_C.setMCPriority (C)), time taken: 0.41s
Testing Function pair Pairing (Arch_maskCapRights (ASM) <= Kernel_C.Arch_maskCapRights (C))
  (function pairing 91 of 282)
 .. built problem, finding proof
Decided to case split at (45, 'ASM')
  (in problem)
Now doing proof search in true case (45 visited) in problem.
Now doing proof search in false case (45 not visited) in problem.
ProofNode ('CaseSplit', (45, 'ASM'), (ProofNode ('Restr', (45, ('Number', (1, 2))), (ProofNode ('Restr', (12, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (45, ('Number', (0, 1))), (ProofNode ('Restr', (12, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 45 is visited
Step 2: case in (1) where 45 is visited
  Prove the number of visits to 45 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 12 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 45 is not visited
  Prove the number of visits to 45 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 12 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_maskCapRights (ASM) <= Kernel_C.Arch_maskCapRights (C)), time taken: 11.64s
Testing Function pair Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C))
  (function pairing 92 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 692, in find_split_loop
    i_opts, j_opts, node_restrs = node_restrs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1233, in find_split
    res = split_search (head, knowledge)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1154, in split_search
    knowledge.eqs_add_model (eqs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 306, in eqs_add_model
    assert_progress = assert_progress)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 284, in hyps_add_model
    {}, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C)), time taken: 1471.18s
Testing Function pair Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C))
  (function pairing 93 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 692, in find_split_loop
    i_opts, j_opts, node_restrs = node_restrs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1233, in find_split
    res = split_search (head, knowledge)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1154, in split_search
    knowledge.eqs_add_model (eqs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 306, in eqs_add_model
    assert_progress = assert_progress)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 284, in hyps_add_model
    {}, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C)), time taken: 154.10s
Testing Function pair Pairing (invokeTCB_Resume (ASM) <= Kernel_C.invokeTCB_Resume (C))
  (function pairing 94 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeTCB_Resume (ASM) <= Kernel_C.invokeTCB_Resume (C)), time taken: 0.50s
Testing Function pair Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C))
  (function pairing 95 of 282)
Aborting Problem (Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C)), time taken: 0.00s
Testing Function pair Pairing (create_rootserver_objects (ASM) <= Kernel_C.create_rootserver_objects (C))
  (function pairing 96 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_rootserver_objects (ASM) <= Kernel_C.create_rootserver_objects (C)), time taken: 37.57s
Testing Function pair Pairing (lookupIPCBuffer (ASM) <= Kernel_C.lookupIPCBuffer (C))
  (function pairing 97 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lookupIPCBuffer (ASM) <= Kernel_C.lookupIPCBuffer (C)), time taken: 2.71s
Testing Function pair Pairing (findPDForASID (ASM) <= Kernel_C.findPDForASID (C))
  (function pairing 98 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (findPDForASID (ASM) <= Kernel_C.findPDForASID (C)), time taken: 0.62s
Testing Function pair Pairing (hasCancelSendRights (ASM) <= Kernel_C.hasCancelSendRights (C))
  (function pairing 99 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (hasCancelSendRights (ASM) <= Kernel_C.hasCancelSendRights (C)), time taken: 0.52s
Testing Function pair Pairing (lookupPivotSlot (ASM) <= Kernel_C.lookupPivotSlot (C))
  (function pairing 100 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lookupPivotSlot (ASM) <= Kernel_C.lookupPivotSlot (C)), time taken: 5.59s
Testing Function pair Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C))
  (function pairing 101 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1801, in default_searcher
    res = init_proof_case_split (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 161, in init_proof_case_split
    ps = init_case_splits (p, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 148, in init_case_splits
    pc_ids = knowledge.classify_vs ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 227, in classify_vs
    self.hyps_add_model (hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 211, in hyps_add_model
    {}, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C)), time taken: 20.14s
Testing Function pair Pairing (lookupTargetSlot (ASM) <= Kernel_C.lookupTargetSlot (C))
  (function pairing 102 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lookupTargetSlot (ASM) <= Kernel_C.lookupTargetSlot (C)), time taken: 3.80s
Testing Function pair Pairing (alloc_rootserver_obj (ASM) <= Kernel_C.alloc_rootserver_obj (C))
  (function pairing 103 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (alloc_rootserver_obj (ASM) <= Kernel_C.alloc_rootserver_obj (C)), time taken: 0.89s
Testing Function pair Pairing (performInvocation_Endpoint (ASM) <= Kernel_C.performInvocation_Endpoint (C))
  (function pairing 104 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (performInvocation_Endpoint (ASM) <= Kernel_C.performInvocation_Endpoint (C)), time taken: 0.96s
Testing Function pair Pairing (unbindMaybeNotification (ASM) <= Kernel_C.unbindMaybeNotification (C))
  (function pairing 105 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (unbindMaybeNotification (ASM) <= Kernel_C.unbindMaybeNotification (C)), time taken: 1.09s
Testing Function pair Pairing (ensureEmptySlot (ASM) <= Kernel_C.ensureEmptySlot (C))
  (function pairing 106 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (ensureEmptySlot (ASM) <= Kernel_C.ensureEmptySlot (C)), time taken: 0.80s
Testing Function pair Pairing (lookupCap (ASM) <= Kernel_C.lookupCap (C))
  (function pairing 107 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lookupCap (ASM) <= Kernel_C.lookupCap (C)), time taken: 4.19s
Testing Function pair Pairing (pageTableMapped (ASM) <= Kernel_C.pageTableMapped (C))
  (function pairing 108 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (pageTableMapped (ASM) <= Kernel_C.pageTableMapped (C)), time taken: 1.25s
Testing Function pair Pairing (restore_user_context (ASM) <= Kernel_C.restore_user_context (C))
  (function pairing 109 of 282)
Skipping Pairing (restore_user_context (ASM) <= Kernel_C.restore_user_context (C)), underspecified C
Testing Function pair Pairing (strlcat (ASM) <= Kernel_C.strlcat (C))
  (function pairing 110 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 678, in find_split_loop
    nec = get_necessary_split_opts (p, head, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 792, in get_necessary_split_opts
    for v in seq_eqs:
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 909, in <genexpr>
    for m in [get_model (n, offs)]
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 900, in get_model
    res = rep.test_hyp_whyps (eq, hyps + ex_hyps, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/rep_graph.py", line 1096, in test_hyp_whyps
    {}, model = model)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1326, in parallel_test_hyps
    (res, k) = self.parallel_check_hyps (hyps, env, model)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (strlcat (ASM) <= Kernel_C.strlcat (C)), time taken: 2.47s
Testing Function pair Pairing (rescheduleRequired (ASM) <= Kernel_C.rescheduleRequired (C))
  (function pairing 111 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (rescheduleRequired (ASM) <= Kernel_C.rescheduleRequired (C)), time taken: 0.71s
Testing Function pair Pairing (capSwapForDelete (ASM) <= Kernel_C.capSwapForDelete (C))
  (function pairing 112 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (capSwapForDelete (ASM) <= Kernel_C.capSwapForDelete (C)), time taken: 1.66s
Testing Function pair Pairing (invokeCNodeMove (ASM) <= Kernel_C.invokeCNodeMove (C))
  (function pairing 113 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeCNodeMove (ASM) <= Kernel_C.invokeCNodeMove (C)), time taken: 0.56s
Testing Function pair Pairing (setIRQTrigger (ASM) <= Kernel_C.setIRQTrigger (C))
  (function pairing 114 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setIRQTrigger (ASM) <= Kernel_C.setIRQTrigger (C)), time taken: 0.84s
Testing Function pair Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))
  (function pairing 115 of 282)
Aborting Problem (Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))): underspecified Kernel_C.clearExMonitor
Result ProblemAbort for pair Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C)), time taken: 0.00s
Testing Function pair Pairing (maskCapRights (ASM) <= Kernel_C.maskCapRights (C))
  (function pairing 116 of 282)
 .. built problem, finding proof
Decided to case split at (79, 'ASM')
  (in problem)
Now doing proof search in true case (79 visited) in problem.
Now doing proof search in false case (79 not visited) in problem.
ProofNode ('CaseSplit', (79, 'ASM'), (ProofNode ('Restr', (79, ('Number', (1, 2))), (ProofNode ('Restr', (58, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (79, ('Number', (0, 1))), (ProofNode ('Restr', (58, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 79 is visited
Step 2: case in (1) where 79 is visited
  Prove the number of visits to 79 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 58 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 79 is not visited
  Prove the number of visits to 79 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 58 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (maskCapRights (ASM) <= Kernel_C.maskCapRights (C)), time taken: 15.83s
Testing Function pair Pairing (cteDeleteOne (ASM) <= Kernel_C.cteDeleteOne (C))
  (function pairing 117 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cteDeleteOne (ASM) <= Kernel_C.cteDeleteOne (C)), time taken: 11.27s
Testing Function pair Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C))
  (function pairing 118 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 678, in find_split_loop
    nec = get_necessary_split_opts (p, head, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 792, in get_necessary_split_opts
    for v in seq_eqs:
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 909, in <genexpr>
    for m in [get_model (n, offs)]
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 900, in get_model
    res = rep.test_hyp_whyps (eq, hyps + ex_hyps, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/rep_graph.py", line 1096, in test_hyp_whyps
    {}, model = model)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1326, in parallel_test_hyps
    (res, k) = self.parallel_check_hyps (hyps, env, model)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C)), time taken: 31.74s
Testing Function pair Pairing (doNormalTransfer (ASM) <= Kernel_C.doNormalTransfer (C))
  (function pairing 119 of 282)
 .. built problem, finding proof
Discovered that points [255 (loop head)] can be bounded
  (in problem)
Discovered that points [55 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (255, ('Number', (0, 5))), (ProofNode ('Restr', (55, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 255 is in {0 ..< 5}
    .. proven.
Step 2: 
  Prove the number of visits to 55 is in {0 ..< 4}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (doNormalTransfer (ASM) <= Kernel_C.doNormalTransfer (C)), time taken: 1764.77s
Testing Function pair Pairing (invokeCNodeRotate (ASM) <= Kernel_C.invokeCNodeRotate (C))
  (function pairing 120 of 282)
 .. built problem, finding proof
Decided to case split at (18, 'ASM')
  (in problem)
Now doing proof search in true case (18 visited) in problem.
Now doing proof search in false case (18 not visited) in problem.
ProofNode ('CaseSplit', (18, 'ASM'), (ProofNode ('Restr', (18, ('Number', (1, 2))), (ProofNode ('Restr', (3, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (18, ('Number', (0, 1))), (ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 18 is visited
Step 2: case in (1) where 18 is visited
  Prove the number of visits to 18 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 3 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 18 is not visited
  Prove the number of visits to 18 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeCNodeRotate (ASM) <= Kernel_C.invokeCNodeRotate (C)), time taken: 10.94s
Testing Function pair Pairing (lookupSourceSlot (ASM) <= Kernel_C.lookupSourceSlot (C))
  (function pairing 121 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lookupSourceSlot (ASM) <= Kernel_C.lookupSourceSlot (C)), time taken: 5.74s
Testing Function pair Pairing (invokeTCB_Suspend (ASM) <= Kernel_C.invokeTCB_Suspend (C))
  (function pairing 122 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeTCB_Suspend (ASM) <= Kernel_C.invokeTCB_Suspend (C)), time taken: 0.50s
Testing Function pair Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C))
  (function pairing 123 of 282)
 .. built problem, finding proof
Discovered that points [172 (loop head)] can be bounded
  (in problem)
Discovered that points [44 (loop head)] can be bounded
  (in problem)
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1712, in build_proof_rec
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1712, in build_proof_rec
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 678, in find_split_loop
    nec = get_necessary_split_opts (p, head, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 792, in get_necessary_split_opts
    for v in seq_eqs:
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 909, in <genexpr>
    for m in [get_model (n, offs)]
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 902, in get_model
    necessary_split_opts_trace.append ((n, kind, 'NoModel'))
NameError: global name 'kind' is not defined
Result ProofEXCEPT for pair Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C)), time taken: 6082.94s
Testing Function pair Pairing (sameRegionAs (ASM) <= Kernel_C.sameRegionAs (C))
  (function pairing 124 of 282)
 .. built problem, finding proof
Decided to case split at (564, 'ASM')
  (in problem)
Now doing proof search in true case (564 visited) in problem.
Now doing proof search in false case (564 not visited) in problem.
ProofNode ('CaseSplit', (564, 'ASM'), (ProofNode ('Restr', (564, ('Number', (1, 2))), (ProofNode ('Restr', (20, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (564, ('Number', (0, 1))), (ProofNode ('Restr', (20, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 564 is visited
Step 2: case in (1) where 564 is visited
  Prove the number of visits to 564 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 20 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 564 is not visited
  Prove the number of visits to 564 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 20 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (sameRegionAs (ASM) <= Kernel_C.sameRegionAs (C)), time taken: 97.30s
Testing Function pair Pairing (invokeTCB_ThreadControl (ASM) <= Kernel_C.invokeTCB_ThreadControl (C))
  (function pairing 125 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeTCB_ThreadControl (ASM) <= Kernel_C.invokeTCB_ThreadControl (C)), time taken: 3214.98s
Testing Function pair Pairing (replyFromKernel_error (ASM) <= Kernel_C.replyFromKernel_error (C))
  (function pairing 126 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (replyFromKernel_error (ASM) <= Kernel_C.replyFromKernel_error (C)), time taken: 4.26s
Testing Function pair Pairing (lockTLBEntryCritical (ASM) <= Kernel_C.lockTLBEntryCritical (C))
  (function pairing 127 of 282)
Skipping Pairing (lockTLBEntryCritical (ASM) <= Kernel_C.lockTLBEntryCritical (C)), underspecified C
Testing Function pair Pairing (Arch_sameObjectAs (ASM) <= Kernel_C.Arch_sameObjectAs (C))
  (function pairing 128 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_sameObjectAs (ASM) <= Kernel_C.Arch_sameObjectAs (C)), time taken: 3.76s
Testing Function pair Pairing (slotCapLongRunningDelete (ASM) <= Kernel_C.slotCapLongRunningDelete (C))
  (function pairing 129 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (slotCapLongRunningDelete (ASM) <= Kernel_C.slotCapLongRunningDelete (C)), time taken: 1.00s
Testing Function pair Pairing (restart (ASM) <= Kernel_C.restart (C))
  (function pairing 130 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (restart (ASM) <= Kernel_C.restart (C)), time taken: 2.83s
Testing Function pair Pairing (decodeUnbindNotification (ASM) <= Kernel_C.decodeUnbindNotification (C))
  (function pairing 131 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeUnbindNotification (ASM) <= Kernel_C.decodeUnbindNotification (C)), time taken: 1.37s
Testing Function pair Pairing (create_mapped_it_frame_cap (ASM) <= Kernel_C.create_mapped_it_frame_cap (C))
  (function pairing 132 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_mapped_it_frame_cap (ASM) <= Kernel_C.create_mapped_it_frame_cap (C)), time taken: 12.38s
Testing Function pair Pairing (possibleSwitchTo (ASM) <= Kernel_C.possibleSwitchTo (C))
  (function pairing 133 of 282)
 .. built problem, finding proof
Decided to case split at (20, 'ASM')
  (in problem)
Now doing proof search in true case (20 visited) in problem.
Now doing proof search in false case (20 not visited) in problem.
ProofNode ('CaseSplit', (20, 'ASM'), (ProofNode ('Restr', (20, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (20, ('Number', (0, 1))), (ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 20 is visited
Step 2: case in (1) where 20 is visited
  Prove the number of visits to 20 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 20 is not visited
  Prove the number of visits to 20 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (possibleSwitchTo (ASM) <= Kernel_C.possibleSwitchTo (C)), time taken: 4.17s
Testing Function pair Pairing (handleInvocation (ASM) <= Kernel_C.handleInvocation (C))
  (function pairing 134 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleInvocation (ASM) <= Kernel_C.handleInvocation (C)), time taken: 203.45s
Testing Function pair Pairing (memcpy (ASM) <= Kernel_C.memcpy (C))
  (function pairing 135 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 692, in find_split_loop
    i_opts, j_opts, node_restrs = node_restrs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1233, in find_split
    res = split_search (head, knowledge)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1154, in split_search
    knowledge.eqs_add_model (eqs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 306, in eqs_add_model
    assert_progress = assert_progress)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 284, in hyps_add_model
    {}, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (memcpy (ASM) <= Kernel_C.memcpy (C)), time taken: 5.92s
Testing Function pair Pairing (setVMRootForFlush (ASM) <= Kernel_C.setVMRootForFlush (C))
  (function pairing 136 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setVMRootForFlush (ASM) <= Kernel_C.setVMRootForFlush (C)), time taken: 4.89s
Testing Function pair Pairing (unmapPageTable (ASM) <= Kernel_C.unmapPageTable (C))
  (function pairing 137 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (unmapPageTable (ASM) <= Kernel_C.unmapPageTable (C)), time taken: 3.60s
Testing Function pair Pairing (Arch_isFrameType (ASM) <= Kernel_C.Arch_isFrameType (C))
  (function pairing 138 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_isFrameType (ASM) <= Kernel_C.Arch_isFrameType (C)), time taken: 0.25s
Testing Function pair Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C))
  (function pairing 139 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1801, in default_searcher
    res = init_proof_case_split (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 161, in init_proof_case_split
    ps = init_case_splits (p, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 148, in init_case_splits
    pc_ids = knowledge.classify_vs ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 227, in classify_vs
    self.hyps_add_model (hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 211, in hyps_add_model
    {}, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C)), time taken: 3.61s
Testing Function pair Pairing (isValidVTableRoot (ASM) <= Kernel_C.isValidVTableRoot (C))
  (function pairing 140 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (isValidVTableRoot (ASM) <= Kernel_C.isValidVTableRoot (C)), time taken: 0.33s
Testing Function pair Pairing (c_handle_interrupt (ASM) <= Kernel_C.c_handle_interrupt (C))
  (function pairing 141 of 282)
 .. built problem, finding proof
Discovered that points [6 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (6, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 6 is in {0 ..< 2}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (c_handle_interrupt (ASM) <= Kernel_C.c_handle_interrupt (C)), time taken: 0.92s
Testing Function pair Pairing (doFaultTransfer (ASM) <= Kernel_C.doFaultTransfer (C))
  (function pairing 142 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (doFaultTransfer (ASM) <= Kernel_C.doFaultTransfer (C)), time taken: 3.08s
Testing Function pair Pairing (flushTable (ASM) <= Kernel_C.flushTable (C))
  (function pairing 143 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (flushTable (ASM) <= Kernel_C.flushTable (C)), time taken: 2.17s
Testing Function pair Pairing (arch_get_n_paging (ASM) <= Kernel_C.arch_get_n_paging (C))
  (function pairing 144 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (arch_get_n_paging (ASM) <= Kernel_C.arch_get_n_paging (C)), time taken: 0.30s
Testing Function pair Pairing (Arch_getObjectSize (ASM) <= Kernel_C.Arch_getObjectSize (C))
  (function pairing 145 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_getObjectSize (ASM) <= Kernel_C.Arch_getObjectSize (C)), time taken: 0.53s
Testing Function pair Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C))
  (function pairing 146 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1801, in default_searcher
    res = init_proof_case_split (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 161, in init_proof_case_split
    ps = init_case_splits (p, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 148, in init_case_splits
    pc_ids = knowledge.classify_vs ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 227, in classify_vs
    self.hyps_add_model (hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 211, in hyps_add_model
    {}, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C)), time taken: 1.80s
Testing Function pair Pairing (l_impl'dsb (ASM) <= r_impl'dsb (C))
  (function pairing 147 of 282)
Skipping Pairing (l_impl'dsb (ASM) <= r_impl'dsb (C)), underspecified C
Testing Function pair Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C))
  (function pairing 148 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C)), time taken: 22.03s
Testing Function pair Pairing (initTimer (ASM) <= Kernel_C.initTimer (C))
  (function pairing 149 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (initTimer (ASM) <= Kernel_C.initTimer (C)), time taken: 0.36s
Testing Function pair Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C))
  (function pairing 150 of 282)
Skipping Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C)), underspecified C
Testing Function pair Pairing (create_bi_frame_cap (ASM) <= Kernel_C.create_bi_frame_cap (C))
  (function pairing 151 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_bi_frame_cap (ASM) <= Kernel_C.create_bi_frame_cap (C)), time taken: 16.29s
Testing Function pair Pairing (tcbSchedDequeue (ASM) <= Kernel_C.tcbSchedDequeue (C))
  (function pairing 152 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (tcbSchedDequeue (ASM) <= Kernel_C.tcbSchedDequeue (C)), time taken: 73.86s
Testing Function pair Pairing (setPriority (ASM) <= Kernel_C.setPriority (C))
  (function pairing 153 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setPriority (ASM) <= Kernel_C.setPriority (C)), time taken: 5.11s
Testing Function pair Pairing (handleFault (ASM) <= Kernel_C.handleFault (C))
  (function pairing 154 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleFault (ASM) <= Kernel_C.handleFault (C)), time taken: 0.81s
Testing Function pair Pairing (Arch_configureIdleThread (ASM) <= Kernel_C.Arch_configureIdleThread (C))
  (function pairing 155 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_configureIdleThread (ASM) <= Kernel_C.Arch_configureIdleThread (C)), time taken: 0.43s
Testing Function pair Pairing (Arch_finaliseCap (ASM) <= Kernel_C.Arch_finaliseCap (C))
  (function pairing 156 of 282)
 .. built problem, finding proof
Decided to case split at (80, 'ASM')
  (in problem)
Now doing proof search in true case (80 visited) in problem.
Now doing proof search in false case (80 not visited) in problem.
Decided to case split at (98, 'ASM')
  (in false case (80 not visited) in problem)
Now doing proof search in true case (98 visited) in false case (80 not visited) in problem.
Now doing proof search in false case (98 not visited) in false case (80 not visited) in problem.
Decided to case split at (92, 'ASM')
  (in false case (98 not visited) in false case (80 not visited) in problem)
Now doing proof search in true case (92 visited) in false case (98 not visited) in false case (80 not visited) in problem.
Now doing proof search in false case (92 not visited) in false case (98 not visited) in false case (80 not visited) in problem.
ProofNode ('CaseSplit', (80, 'ASM'), (ProofNode ('Restr', (80, ('Number', (1, 2))), (ProofNode ('Restr', (48, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (80, ('Number', (0, 1))), (ProofNode ('Restr', (48, ('Number', (0, 1))), (ProofNode ('CaseSplit', (98, 'ASM'), (ProofNode ('Restr', (98, ('Number', (1, 2))), (ProofNode ('Restr', (38, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (98, ('Number', (0, 1))), (ProofNode ('Restr', (38, ('Number', (0, 1))), (ProofNode ('CaseSplit', (92, 'ASM'), (ProofNode ('Restr', (92, ('Number', (1, 2))), (ProofNode ('Restr', (14, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (92, ('Number', (0, 1))), (ProofNode ('Restr', (14, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 80 is visited
Step 2: case in (1) where 80 is visited
  Prove the number of visits to 80 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 48 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 80 is not visited
  Prove the number of visits to 80 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 48 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 98 is visited
Step 8: case in (7) where 98 is visited
  Prove the number of visits to 98 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 38 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 98 is not visited
  Prove the number of visits to 98 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 38 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 92 is visited
Step 14: case in (13) where 92 is visited
  Prove the number of visits to 92 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 14 is in {1 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where 92 is not visited
  Prove the number of visits to 92 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 14 is in {0 ..< 1}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_finaliseCap (ASM) <= Kernel_C.Arch_finaliseCap (C)), time taken: 121.20s
Testing Function pair Pairing (switchToThread (ASM) <= Kernel_C.switchToThread (C))
  (function pairing 157 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (switchToThread (ASM) <= Kernel_C.switchToThread (C)), time taken: 0.68s
Testing Function pair Pairing (resolveAddressBits (ASM) <= Kernel_C.resolveAddressBits (C))
  (function pairing 158 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [94, 36]
  (in problem)
Now doing proof search in 94 init case in problem.
Now doing proof search in 94 loop case in problem.
ProofNode ('Split', ((94, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'ret_addr_input'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (36, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#5#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C'), Expr ('Var', Type ('Word', 32), name = 'capptr___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'ret___struct_resolveAddressBits_ret_C#v.slot_C'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'nodeCap___struct_cap_C#v.words_C.0')), (Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'n_bits___unsigned_long#v')), (Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'levelBits___unsigned_long#v')), (Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'radixBits___unsigned_long#v'))], 2, 1), (ProofNode ('Restr', (94, ('Number', (0, 3))), (ProofNode ('Restr', (36, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (94, ('Offset', (0, 3))), (ProofNode ('Restr', (36, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 94 related to visits to 36
    with equalities
      ((Word32) ('r14')) (@ addr 94)
      = ((Word32) ('nodeCap___struct_cap_C#v.words_C.0')) (@ addr 36)
      ((Word32) ('r2')) (@ addr 94)
      = ((Word32) ('n_bits___unsigned_long#v')) (@ addr 36)
      ((Word32) ('r6')) (@ addr 94)
      = ((Word32) ('levelBits___unsigned_long#v')) (@ addr 36)
      ((Word32) ('r8')) (@ addr 94)
      = ((Word32) ('radixBits___unsigned_long#v')) (@ addr 36)
    and with invariants
      ((Word32) ('r0')) (@ addr 94)
      ((Word32) ('r13')) (@ addr 94)
      ((Word32) ('r10')) (@ addr 94)
      ((Word32) ('r9')) (@ addr 94)
      ((Word32) ('r3')) (@ addr 94)
      ((Word32) ('ret_addr_input')) (@ addr 94)
      ((Word32) ('r11')) (@ addr 94)
      ((Word32) ('r7')) (@ addr 94)
      ((Word32) ('ret')) (@ addr 94)
      ((Mem) ('mem')) (@ addr 94)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 94)
      ((Word32) (('loop#5#count' + ((0 - '#seq-visits') * 1)))) (@ addr 36)
      ((Word32) ('ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C')) (@ addr 36)
      ((Word32) ('capptr___unsigned_long#v')) (@ addr 36)
      ((Word32) ('ret___struct_resolveAddressBits_ret_C#v.slot_C')) (@ addr 36)
      ((Mem) ('Mem')) (@ addr 36)
      ((Word32[50]) ('GhostAssertions')) (@ addr 36)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 94 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 36 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 94 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 36 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (resolveAddressBits (ASM) <= Kernel_C.resolveAddressBits (C)), time taken: 426.19s
Testing Function pair Pairing (create_it_asid_pool (ASM) <= Kernel_C.create_it_asid_pool (C))
  (function pairing 159 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_it_asid_pool (ASM) <= Kernel_C.create_it_asid_pool (C)), time taken: 26.73s
Testing Function pair Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C))
  (function pairing 160 of 282)
 .. built problem, finding proof
Discovered that points [45 (loop head)] can be bounded
  (in problem)
Discovered that points [13 (loop head)] can be bounded
  (in problem)
Found a future induction at 4
Now doing proof search in problem.
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1712, in build_proof_rec
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1712, in build_proof_rec
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1738, in build_proof_rec
    p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 692, in find_split_loop
    i_opts, j_opts, node_restrs = node_restrs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1233, in find_split
    res = split_search (head, knowledge)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1154, in split_search
    knowledge.eqs_add_model (eqs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 306, in eqs_add_model
    assert_progress = assert_progress)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 284, in hyps_add_model
    {}, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C)), time taken: 415.68s
Testing Function pair Pairing (halt (ASM) <= Kernel_C.halt (C))
  (function pairing 161 of 282)
Skipping Pairing (halt (ASM) <= Kernel_C.halt (C)), underspecified C
Testing Function pair Pairing (sendIPC (ASM) <= Kernel_C.sendIPC (C))
  (function pairing 162 of 282)
 .. built problem, finding proof
Decided to case split at (54, 'ASM')
  (in problem)
Now doing proof search in true case (54 visited) in problem.
Now doing proof search in false case (54 not visited) in problem.
ProofNode ('CaseSplit', (54, 'ASM'), (ProofNode ('Restr', (54, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (54, ('Number', (0, 1))), (ProofNode ('Restr', (21, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 54 is visited
Step 2: case in (1) where 54 is visited
  Prove the number of visits to 54 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 54 is not visited
  Prove the number of visits to 54 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 21 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (sendIPC (ASM) <= Kernel_C.sendIPC (C)), time taken: 258.74s
Testing Function pair Pairing (tcbEPDequeue (ASM) <= Kernel_C.tcbEPDequeue (C))
  (function pairing 163 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (tcbEPDequeue (ASM) <= Kernel_C.tcbEPDequeue (C)), time taken: 12.36s
Testing Function pair Pairing (init_core_state (ASM) <= Kernel_C.init_core_state (C))
  (function pairing 164 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (init_core_state (ASM) <= Kernel_C.init_core_state (C)), time taken: 0.31s
Testing Function pair Pairing (cleanInvalidateL1Caches (ASM) <= Kernel_C.cleanInvalidateL1Caches (C))
  (function pairing 165 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cleanInvalidateL1Caches (ASM) <= Kernel_C.cleanInvalidateL1Caches (C)), time taken: 1.28s
Testing Function pair Pairing (decodeCopyRegisters (ASM) <= Kernel_C.decodeCopyRegisters (C))
  (function pairing 166 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeCopyRegisters (ASM) <= Kernel_C.decodeCopyRegisters (C)), time taken: 14.76s
Testing Function pair Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C))
  (function pairing 167 of 282)
 .. built problem, finding proof
Decided to case split at (76, 'ASM')
  (in problem)
Now doing proof search in true case (76 visited) in problem.
Now doing proof search in false case (76 not visited) in problem.
Decided to case split at (71, 'ASM')
  (in false case (76 not visited) in problem)
Now doing proof search in true case (71 visited) in false case (76 not visited) in problem.
Now doing proof search in false case (71 not visited) in false case (76 not visited) in problem.
ProofNode ('CaseSplit', (76, 'ASM'), (ProofNode ('Restr', (76, ('Number', (1, 2))), (ProofNode ('Restr', (12, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (76, ('Number', (0, 1))), (ProofNode ('Restr', (12, ('Number', (0, 1))), (ProofNode ('CaseSplit', (71, 'ASM'), (ProofNode ('Restr', (71, ('Number', (1, 2))), (ProofNode ('Restr', (20, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (71, ('Number', (0, 1))), (ProofNode ('Restr', (20, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 76 is visited
Step 2: case in (1) where 76 is visited
  Prove the number of visits to 76 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 12 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. failed to prove this.
      (failure kind: 'sat')
Result False for pair Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C)), time taken: 16.08s
Testing Function pair Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C))
  (function pairing 168 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1801, in default_searcher
    res = init_proof_case_split (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 161, in init_proof_case_split
    ps = init_case_splits (p, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 148, in init_case_splits
    pc_ids = knowledge.classify_vs ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 227, in classify_vs
    self.hyps_add_model (hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 211, in hyps_add_model
    {}, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C)), time taken: 13.53s
Testing Function pair Pairing (decodeWriteRegisters (ASM) <= Kernel_C.decodeWriteRegisters (C))
  (function pairing 169 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeWriteRegisters (ASM) <= Kernel_C.decodeWriteRegisters (C)), time taken: 8.48s
Testing Function pair Pairing (decodeSetSpace (ASM) <= Kernel_C.decodeSetSpace (C))
  (function pairing 170 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeSetSpace (ASM) <= Kernel_C.decodeSetSpace (C)), time taken: 419.21s
Testing Function pair Pairing (write_slot (ASM) <= Kernel_C.write_slot (C))
  (function pairing 171 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (write_slot (ASM) <= Kernel_C.write_slot (C)), time taken: 3.73s
Testing Function pair Pairing (plat_cleanCache (ASM) <= Kernel_C.plat_cleanCache (C))
  (function pairing 172 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [12, 3]
  (in problem)
Now doing proof search in 12 init case in problem.
Discovered that points [48 (loop head)] can be bounded
  (in 12 init case in problem)
Discovered that points [34 (loop head)] can be bounded
  (in 12 init case in problem)
Now doing proof search in 12 loop case in problem.
Discovered that points [48 (loop head)] can be bounded
  (in 12 loop case in problem)
Discovered that points [34 (loop head)] can be bounded
  (in 12 loop case in problem)
ProofNode ('Split', ((12, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (3, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (12, ('Number', (0, 1))), (ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Restr', (48, ('Number', (0, 1))), (ProofNode ('Restr', (34, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (12, ('Offset', (0, 1))), (ProofNode ('Restr', (3, ('Offset', (0, 1))), (ProofNode ('Restr', (48, ('Number', (0, 1))), (ProofNode ('Restr', (34, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),))))
 .. proof found.
Step 1: 
  prove visits to 12 related to visits to 3
    with equalities
    and with invariants
      ((Word32) ('r21')) (@ addr 12)
      ((Word32) ('r4')) (@ addr 12)
      ((Word32) ('r27')) (@ addr 12)
      ((Word32) ('r17')) (@ addr 12)
      ((Word32) ('r0')) (@ addr 12)
      ((Word32) ('r23')) (@ addr 12)
      ((Word32) ('r13')) (@ addr 12)
      ((Word32) ('r10')) (@ addr 12)
      ((Word32) ('r28')) (@ addr 12)
      ((Word32) ('r19')) (@ addr 12)
      ((Word32) ('r16')) (@ addr 12)
      ((Word64) ('clock')) (@ addr 12)
      ((Word32) ('r12')) (@ addr 12)
      ((Word32) ('r9')) (@ addr 12)
      ((Word32) ('r6')) (@ addr 12)
      ((Word32) ('r7')) (@ addr 12)
      ((Word32) ('r31')) (@ addr 12)
      ((Word32) ('r25')) (@ addr 12)
      ((Word32) ('r24')) (@ addr 12)
      ((Word32) ('r8')) (@ addr 12)
      ((Word32) ('r29')) (@ addr 12)
      ((Word32) ('r18')) (@ addr 12)
      ((Word32) ('r20')) (@ addr 12)
      ((Word32) ('r30')) (@ addr 12)
      ((Word32) ('r14')) (@ addr 12)
      ((Word32) ('r15')) (@ addr 12)
      ((Word32) ('mode')) (@ addr 12)
      ((Word32) ('r11')) (@ addr 12)
      ((Word32) ('r5')) (@ addr 12)
      ((Word32) ('ret')) (@ addr 12)
      ((Word32) ('r26')) (@ addr 12)
      ((Word32) ('r1')) (@ addr 12)
      ((Word32) ('r2')) (@ addr 12)
      ((Mem) ('mem')) (@ addr 12)
      ((Word32) ('r22')) (@ addr 12)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 12)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 3)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 12 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 48 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 34 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Step 7: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 12 is in {i + 0 ..< i + 1}
    .. proven.
Step 8: 
  Prove the number of visits to 3 is in {i + 0 ..< i + 1}
    .. proven.
Step 9: 
  Prove the number of visits to 48 is in {0 ..< 1}
    .. proven.
Step 10: 
  Prove the number of visits to 34 is in {0 ..< 1}
    .. proven.
Step 11: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (plat_cleanCache (ASM) <= Kernel_C.plat_cleanCache (C)), time taken: 8.60s
Testing Function pair Pairing (lockTLBEntry (ASM) <= Kernel_C.lockTLBEntry (C))
  (function pairing 173 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lockTLBEntry (ASM) <= Kernel_C.lockTLBEntry (C)), time taken: 0.68s
Testing Function pair Pairing (invalidateCacheRange_RAM (ASM) <= Kernel_C.invalidateCacheRange_RAM (C))
  (function pairing 174 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [40, 130]
  (in problem)
Now doing proof search in 40 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 40 init case in problem)
Discovered that points [50 (loop head)] can be bounded
  (in 40 init case in problem)
Discovered a loop relation for split points [82, 3]
  (in 40 init case in problem)
Now doing proof search in 82 init case in 40 init case in problem.
Now doing proof search in 82 loop case in 40 init case in problem.
Now doing proof search in 40 loop case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 40 loop case in problem)
Discovered that points [50 (loop head)] can be bounded
  (in 40 loop case in problem)
Discovered a loop relation for split points [82, 3]
  (in 40 loop case in problem)
Now doing proof search in 82 init case in 40 loop case in problem.
Now doing proof search in 82 loop case in 40 loop case in problem.
ProofNode ('Split', ((40, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (130, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.3'), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.1'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 5)])])])]), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.3'))], 2, 1), (ProofNode ('Restr', (40, ('Number', (0, 3))), (ProofNode ('Restr', (130, ('Number', (0, 3))), (ProofNode ('Restr', (155, ('Number', (0, 2))), (ProofNode ('Restr', (50, ('Number', (0, 2))), (ProofNode ('Split', ((82, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (3, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (82, ('Number', (0, 3))), (ProofNode ('Restr', (3, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (82, ('Offset', (0, 3))), (ProofNode ('Restr', (3, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)), ProofNode ('Restr', (40, ('Offset', (0, 3))), (ProofNode ('Restr', (130, ('Offset', (0, 3))), (ProofNode ('Restr', (155, ('Number', (0, 2))), (ProofNode ('Restr', (50, ('Number', (0, 2))), (ProofNode ('Split', ((82, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (3, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (82, ('Number', (0, 3))), (ProofNode ('Restr', (3, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (82, ('Offset', (0, 3))), (ProofNode ('Restr', (3, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),))))
 .. proof found.
Step 1: 
  prove visits to 40 related to visits to 130
    with equalities
      ((Mem) ('mem')) (@ addr 40)
      = ((Mem) ('Mem.3')) (@ addr 130)
    and with invariants
      ((Word32) ('r21')) (@ addr 40)
      ((Word32) ('r4')) (@ addr 40)
      ((Word32) ('r27')) (@ addr 40)
      ((Word32) ('r17')) (@ addr 40)
      ((Word32) ('r0')) (@ addr 40)
      ((Word32) ('r11')) (@ addr 40)
      ((Word32) ('r23')) (@ addr 40)
      ((Word32) ('r13')) (@ addr 40)
      ((Word32) ('r10')) (@ addr 40)
      ((Word32) ('r28')) (@ addr 40)
      ((Word32) ('r24')) (@ addr 40)
      ((Word32) ('r19')) (@ addr 40)
      ((Word32) ('r16')) (@ addr 40)
      ((Word64) ('clock')) (@ addr 40)
      ((Word32) ('r12')) (@ addr 40)
      ((Word32) ('r9')) (@ addr 40)
      ((Word32) ('r6')) (@ addr 40)
      ((Word32) ('r7')) (@ addr 40)
      ((Word32) ('r31')) (@ addr 40)
      ((Word32) ('r25')) (@ addr 40)
      ((Word32) ('r8')) (@ addr 40)
      ((Word32) ('r29')) (@ addr 40)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 40)
      ((Word32) ('r18')) (@ addr 40)
      ((Word32) ('r20')) (@ addr 40)
      ((Word32) ('r30')) (@ addr 40)
      ((Word32) ('r14')) (@ addr 40)
      ((Word32) ('r15')) (@ addr 40)
      ((Word32) ('mode')) (@ addr 40)
      ((Word32) ('r5')) (@ addr 40)
      ((Word32) ('ret')) (@ addr 40)
      ((Word32) ('r26')) (@ addr 40)
      ((Word32) ('r1')) (@ addr 40)
      ((Word32) ('r2')) (@ addr 40)
      ((Bool) (ROData('mem'))) (@ addr 40)
      ((Word32) ('r22')) (@ addr 40)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 40)
      ((Word32) ('end___unsigned_long#v')) (@ addr 130)
      ((Word32[50]) ('GhostAssertions.3')) (@ addr 130)
      ((Word32) ('end___unsigned_long#v.1')) (@ addr 130)
      ((Word32) ('start___unsigned_long#v')) (@ addr 130)
      ((Word32) (('loop#3#count.1' + ((0 - '#seq-visits') * 1)))) (@ addr 130)
      ((Word32) (('start___unsigned_long#v.1' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast(5)))))) (@ addr 130)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 130)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 40 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 130 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 155 is in {0 ..< 2}
    .. proven.
Step 5: 
  Prove the number of visits to 50 is in {0 ..< 2}
    .. proven.
Step 6: 
  prove visits to 82 related to visits to 3
    with equalities
      ((Mem) ('mem')) (@ addr 82)
      = ((Mem) ('Mem')) (@ addr 3)
    and with invariants
      ((Word32) ('r21')) (@ addr 82)
      ((Word32) ('r4')) (@ addr 82)
      ((Word32) ('r27')) (@ addr 82)
      ((Word32) ('r17')) (@ addr 82)
      ((Word32) ('r0')) (@ addr 82)
      ((Word32) ('r23')) (@ addr 82)
      ((Word32) ('r13')) (@ addr 82)
      ((Word32) ('r10')) (@ addr 82)
      ((Word32) ('r28')) (@ addr 82)
      ((Word32) ('r19')) (@ addr 82)
      ((Word32) ('r16')) (@ addr 82)
      ((Word64) ('clock')) (@ addr 82)
      ((Word32) ('r12')) (@ addr 82)
      ((Word32) ('r9')) (@ addr 82)
      ((Word32) ('r6')) (@ addr 82)
      ((Word32) ('r31')) (@ addr 82)
      ((Word32) ('r25')) (@ addr 82)
      ((Word32) ('r24')) (@ addr 82)
      ((Word32) ('r8')) (@ addr 82)
      ((Word32) ('r29')) (@ addr 82)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 82)
      ((Word32) ('r1')) (@ addr 82)
      ((Word32) ('r18')) (@ addr 82)
      ((Word32) ('r20')) (@ addr 82)
      ((Word32) ('r30')) (@ addr 82)
      ((Word32) ('r14')) (@ addr 82)
      ((Word32) ('r15')) (@ addr 82)
      ((Word32) ('mode')) (@ addr 82)
      ((Word32) ('r5')) (@ addr 82)
      ((Word32) ('r7')) (@ addr 82)
      ((Word32) ('ret')) (@ addr 82)
      ((Word32) ('r26')) (@ addr 82)
      ((Word32) ('r11')) (@ addr 82)
      ((Word32) ('r2')) (@ addr 82)
      ((Bool) (ROData('mem'))) (@ addr 82)
      ((Word32) ('r22')) (@ addr 82)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 82)
      ((Word32) ('end___unsigned_long#v')) (@ addr 3)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 3)
      ((Word32) ('start___unsigned_long#v')) (@ addr 3)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 3)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 3)
      ((Word32[50]) ('GhostAssertions')) (@ addr 3)
    .. proven.
Step 7: case in (6) where the length of the sequence < 2
  Prove the number of visits to 82 is in {0 ..< 3}
    .. proven.
Step 8: 
  Prove the number of visits to 3 is in {0 ..< 3}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (6) where the length of the sequence is j + 2
  Prove the number of visits to 82 is in {j + 0 ..< j + 3}
    .. proven.
Step 11: 
  Prove the number of visits to 3 is in {j + 0 ..< j + 3}
    .. proven.
Step 12: 
  prove all verification conditions
    .. proven.
Step 13: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 40 is in {i + 0 ..< i + 3}
    .. proven.
Step 14: 
  Prove the number of visits to 130 is in {i + 0 ..< i + 3}
    .. proven.
Step 15: 
  Prove the number of visits to 155 is in {0 ..< 2}
    .. proven.
Step 16: 
  Prove the number of visits to 50 is in {0 ..< 2}
    .. proven.
Step 17: 
  prove visits to 82 related to visits to 3
    with equalities
      ((Mem) ('mem')) (@ addr 82)
      = ((Mem) ('Mem')) (@ addr 3)
    and with invariants
      ((Word32) ('r21')) (@ addr 82)
      ((Word32) ('r4')) (@ addr 82)
      ((Word32) ('r27')) (@ addr 82)
      ((Word32) ('r17')) (@ addr 82)
      ((Word32) ('r0')) (@ addr 82)
      ((Word32) ('r23')) (@ addr 82)
      ((Word32) ('r13')) (@ addr 82)
      ((Word32) ('r10')) (@ addr 82)
      ((Word32) ('r28')) (@ addr 82)
      ((Word32) ('r19')) (@ addr 82)
      ((Word32) ('r16')) (@ addr 82)
      ((Word64) ('clock')) (@ addr 82)
      ((Word32) ('r12')) (@ addr 82)
      ((Word32) ('r9')) (@ addr 82)
      ((Word32) ('r6')) (@ addr 82)
      ((Word32) ('r31')) (@ addr 82)
      ((Word32) ('r25')) (@ addr 82)
      ((Word32) ('r24')) (@ addr 82)
      ((Word32) ('r8')) (@ addr 82)
      ((Word32) ('r29')) (@ addr 82)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 82)
      ((Word32) ('r1')) (@ addr 82)
      ((Word32) ('r18')) (@ addr 82)
      ((Word32) ('r20')) (@ addr 82)
      ((Word32) ('r30')) (@ addr 82)
      ((Word32) ('r14')) (@ addr 82)
      ((Word32) ('r15')) (@ addr 82)
      ((Word32) ('mode')) (@ addr 82)
      ((Word32) ('r5')) (@ addr 82)
      ((Word32) ('r7')) (@ addr 82)
      ((Word32) ('ret')) (@ addr 82)
      ((Word32) ('r26')) (@ addr 82)
      ((Word32) ('r11')) (@ addr 82)
      ((Word32) ('r2')) (@ addr 82)
      ((Bool) (ROData('mem'))) (@ addr 82)
      ((Word32) ('r22')) (@ addr 82)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 82)
      ((Word32) ('end___unsigned_long#v')) (@ addr 3)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 3)
      ((Word32) ('start___unsigned_long#v')) (@ addr 3)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 3)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 3)
      ((Word32[50]) ('GhostAssertions')) (@ addr 3)
    .. proven.
Step 18: case in (17) where the length of the sequence < 2
  Prove the number of visits to 82 is in {0 ..< 3}
    .. proven.
Step 19: 
  Prove the number of visits to 3 is in {0 ..< 3}
    .. proven.
Step 20: 
  prove all verification conditions
    .. proven.
Step 21: case in (17) where the length of the sequence is k + 2
  Prove the number of visits to 82 is in {k + 0 ..< k + 3}
    .. proven.
Step 22: 
  Prove the number of visits to 3 is in {k + 0 ..< k + 3}
    .. proven.
Step 23: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invalidateCacheRange_RAM (ASM) <= Kernel_C.invalidateCacheRange_RAM (C)), time taken: 506.55s
Testing Function pair Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))
  (function pairing 175 of 282)
Aborting Problem (Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C)), time taken: 0.00s
Testing Function pair Pairing (APFromVMRights (ASM) <= Kernel_C.APFromVMRights (C))
  (function pairing 176 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (APFromVMRights (ASM) <= Kernel_C.APFromVMRights (C)), time taken: 0.44s
Testing Function pair Pairing (handleReply (ASM) <= Kernel_C.handleReply (C))
  (function pairing 177 of 282)
 .. built problem, finding proof
Decided to case split at (46, 'ASM')
  (in problem)
Now doing proof search in true case (46 visited) in problem.
Now doing proof search in false case (46 not visited) in problem.
ProofNode ('CaseSplit', (46, 'ASM'), (ProofNode ('Restr', (46, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (46, ('Number', (0, 1))), (ProofNode ('Restr', (11, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 46 is visited
Step 2: case in (1) where 46 is visited
  Prove the number of visits to 46 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 46 is not visited
  Prove the number of visits to 46 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 11 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleReply (ASM) <= Kernel_C.handleReply (C)), time taken: 4.83s
Testing Function pair Pairing (finaliseCap (ASM) <= Kernel_C.finaliseCap (C))
  (function pairing 178 of 282)
 .. built problem, finding proof
Decided to case split at (122, 'ASM')
  (in problem)
Now doing proof search in true case (122 visited) in problem.
Now doing proof search in false case (122 not visited) in problem.
Decided to case split at (160, 'ASM')
  (in false case (122 not visited) in problem)
Now doing proof search in true case (160 visited) in false case (122 not visited) in problem.
Now doing proof search in false case (160 not visited) in false case (122 not visited) in problem.
Decided to case split at (151, 'ASM')
  (in false case (160 not visited) in false case (122 not visited) in problem)
Now doing proof search in true case (151 visited) in false case (160 not visited) in false case (122 not visited) in problem.
Now doing proof search in false case (151 not visited) in false case (160 not visited) in false case (122 not visited) in problem.
ProofNode ('CaseSplit', (122, 'ASM'), (ProofNode ('Restr', (122, ('Number', (1, 2))), (ProofNode ('Restr', (106, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (122, ('Number', (0, 1))), (ProofNode ('Restr', (106, ('Number', (0, 1))), (ProofNode ('CaseSplit', (160, 'ASM'), (ProofNode ('Restr', (160, ('Number', (1, 2))), (ProofNode ('Restr', (90, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (160, ('Number', (0, 1))), (ProofNode ('Restr', (90, ('Number', (0, 1))), (ProofNode ('CaseSplit', (151, 'ASM'), (ProofNode ('Restr', (151, ('Number', (1, 2))), (ProofNode ('Restr', (77, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (151, ('Number', (0, 1))), (ProofNode ('Restr', (77, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 122 is visited
Step 2: case in (1) where 122 is visited
  Prove the number of visits to 122 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 106 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 122 is not visited
  Prove the number of visits to 122 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 106 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 160 is visited
Step 8: case in (7) where 160 is visited
  Prove the number of visits to 160 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 90 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 160 is not visited
  Prove the number of visits to 160 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 90 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 151 is visited
Step 14: case in (13) where 151 is visited
  Prove the number of visits to 151 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 77 is in {1 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where 151 is not visited
  Prove the number of visits to 151 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 77 is in {0 ..< 1}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (finaliseCap (ASM) <= Kernel_C.finaliseCap (C)), time taken: 168.88s
Testing Function pair Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C))
  (function pairing 179 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 692, in find_split_loop
    i_opts, j_opts, node_restrs = node_restrs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1233, in find_split
    res = split_search (head, knowledge)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1154, in split_search
    knowledge.eqs_add_model (eqs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 306, in eqs_add_model
    assert_progress = assert_progress)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 295, in hyps_add_model
    assert r == 'sat', r
AssertionError: timeout
Result ProofEXCEPT for pair Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C)), time taken: 6089.73s
Testing Function pair Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))
  (function pairing 180 of 282)
Aborting Problem (Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))): underspecified asm_instruction'.word_0xeef00a10__\nmov_%0,_r0________\n
Result ProblemAbort for pair Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C)), time taken: 0.00s
Testing Function pair Pairing (preemptionPoint (ASM) <= Kernel_C.preemptionPoint (C))
  (function pairing 181 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (preemptionPoint (ASM) <= Kernel_C.preemptionPoint (C)), time taken: 0.38s
Testing Function pair Pairing (checkValidIPCBuffer (ASM) <= Kernel_C.checkValidIPCBuffer (C))
  (function pairing 182 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (checkValidIPCBuffer (ASM) <= Kernel_C.checkValidIPCBuffer (C)), time taken: 3.26s
Testing Function pair Pairing (insert_region (ASM) <= Kernel_C.insert_region (C))
  (function pairing 183 of 282)
 .. built problem, finding proof
Discovered that points [4 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (4, ('Number', (0, 6))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 4 is in {0 ..< 6}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (insert_region (ASM) <= Kernel_C.insert_region (C)), time taken: 7.82s
Testing Function pair Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))
  (function pairing 184 of 282)
Aborting Problem (Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))), complex loop
Result ProblemAbort for pair Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C)), time taken: 2.91s
Testing Function pair Pairing (Arch_switchToIdleThread (ASM) <= Kernel_C.Arch_switchToIdleThread (C))
  (function pairing 185 of 282)
 .. built problem, finding proof
Discovered that points [5 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_switchToIdleThread (ASM) <= Kernel_C.Arch_switchToIdleThread (C)), time taken: 0.82s
Testing Function pair Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C))
  (function pairing 186 of 282)
Aborting Problem (Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C)), time taken: 0.00s
Testing Function pair Pairing (setupCallerCap (ASM) <= Kernel_C.setupCallerCap (C))
  (function pairing 187 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setupCallerCap (ASM) <= Kernel_C.setupCallerCap (C)), time taken: 1.56s
Testing Function pair Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C))
  (function pairing 188 of 282)
Aborting Problem (Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C))), complex loop
Result ProblemAbort for pair Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C)), time taken: 1.13s
Testing Function pair Pairing (lookupPTSlot (ASM) <= Kernel_C.lookupPTSlot (C))
  (function pairing 189 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lookupPTSlot (ASM) <= Kernel_C.lookupPTSlot (C)), time taken: 0.66s
Testing Function pair Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C))
  (function pairing 190 of 282)
Skipping Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C)), underspecified C
Testing Function pair Pairing (reserve_region (ASM) <= Kernel_C.reserve_region (C))
  (function pairing 191 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [76, 52]
  (in problem)
Now doing proof search in 76 init case in problem.
Discovered a loop relation for split points [98, 27]
  (in 76 init case in problem)
Now doing proof search in 98 init case in 76 init case in problem.
Now doing proof search in 98 loop case in 76 init case in problem.
Now doing proof search in 76 loop case in problem.
Discovered a loop relation for split points [98, 27]
  (in 76 loop case in problem)
Now doing proof search in 98 init case in 76 loop case in problem.
Now doing proof search in 98 loop case in 76 loop case in problem.
ProofNode ('Split', ((76, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (52, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.end_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.start_C'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#12#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (76, ('Number', (0, 3))), (ProofNode ('Restr', (52, ('Number', (0, 3))), (ProofNode ('Split', ((98, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967288)])]), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (27, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.start_C'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'j___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (98, ('Number', (0, 3))), (ProofNode ('Restr', (27, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (98, ('Offset', (0, 3))), (ProofNode ('Restr', (27, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (76, ('Offset', (0, 3))), (ProofNode ('Restr', (52, ('Offset', (0, 3))), (ProofNode ('Split', ((98, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967288)])]), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (27, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.start_C'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'j___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (98, ('Number', (0, 3))), (ProofNode ('Restr', (27, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (98, ('Offset', (0, 3))), (ProofNode ('Restr', (27, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 76 related to visits to 52
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 76)
      ((Word32) ('r4')) (@ addr 76)
      ((Word32) ('r8')) (@ addr 76)
      ((Word32) ('r14')) (@ addr 76)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 76)
      ((Word32) ('r13')) (@ addr 76)
      ((Word32) ('r12')) (@ addr 76)
      ((Word32) ('r9')) (@ addr 76)
      ((Word32) ('ret')) (@ addr 76)
      ((Word32) ('r11')) (@ addr 76)
      ((Word32) ('r1')) (@ addr 76)
      ((Word32) ('r10')) (@ addr 76)
      ((Mem) ('mem')) (@ addr 76)
      ((Word32) ('r6')) (@ addr 76)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 76)
      ((Word32) ('reg___struct_p_region_C#v.end_C')) (@ addr 52)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 52)
      ((Word32) ('reg___struct_p_region_C#v.start_C')) (@ addr 52)
      ((Mem) ('Mem')) (@ addr 52)
      ((Word32[50]) ('GhostAssertions')) (@ addr 52)
      ((Word32) (('loop#12#count' + ((0 - '#seq-visits') * 1)))) (@ addr 52)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 76 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 52 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove visits to 98 related to visits to 27
    with equalities
      ((Mem) ('mem')) (@ addr 98)
      = ((Mem) ('Mem')) (@ addr 27)
    and with invariants
      ((Word32) ('r4')) (@ addr 98)
      ((Word32) ('r8')) (@ addr 98)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 4294967288)))) (@ addr 98)
      ((Word32) ('r3')) (@ addr 98)
      ((Word32) ('r5')) (@ addr 98)
      ((Word32) ('r12')) (@ addr 98)
      ((Word32) ('r9')) (@ addr 98)
      ((Word32) ('ret')) (@ addr 98)
      ((Word32) ('r11')) (@ addr 98)
      ((Word32) ('r13')) (@ addr 98)
      ((Word32) ('r10')) (@ addr 98)
      ((Bool) (ROData('mem'))) (@ addr 98)
      ((Word32) ('r6')) (@ addr 98)
      ((Word32) ('r7')) (@ addr 98)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 98)
      ((Word32) ('reg___struct_p_region_C#v.end_C')) (@ addr 27)
      ((Word32) ('i___unsigned_long#v')) (@ addr 27)
      ((Word32) ('reg___struct_p_region_C#v.start_C')) (@ addr 27)
      ((Word32[50]) ('GhostAssertions')) (@ addr 27)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 27)
      ((Word32) (('j___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 27)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 98 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 27 is in {0 ..< 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 98 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 27 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 76 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 52 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 98 related to visits to 27
    with equalities
      ((Mem) ('mem')) (@ addr 98)
      = ((Mem) ('Mem')) (@ addr 27)
    and with invariants
      ((Word32) ('r4')) (@ addr 98)
      ((Word32) ('r8')) (@ addr 98)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 4294967288)))) (@ addr 98)
      ((Word32) ('r3')) (@ addr 98)
      ((Word32) ('r5')) (@ addr 98)
      ((Word32) ('r12')) (@ addr 98)
      ((Word32) ('r9')) (@ addr 98)
      ((Word32) ('ret')) (@ addr 98)
      ((Word32) ('r11')) (@ addr 98)
      ((Word32) ('r13')) (@ addr 98)
      ((Word32) ('r10')) (@ addr 98)
      ((Bool) (ROData('mem'))) (@ addr 98)
      ((Word32) ('r6')) (@ addr 98)
      ((Word32) ('r7')) (@ addr 98)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 98)
      ((Word32) ('reg___struct_p_region_C#v.end_C')) (@ addr 27)
      ((Word32) ('i___unsigned_long#v')) (@ addr 27)
      ((Word32) ('reg___struct_p_region_C#v.start_C')) (@ addr 27)
      ((Word32[50]) ('GhostAssertions')) (@ addr 27)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 27)
      ((Word32) (('j___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 27)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 98 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 27 is in {0 ..< 3}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 98 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 27 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (reserve_region (ASM) <= Kernel_C.reserve_region (C)), time taken: 368.21s
Testing Function pair Pairing (cancelAllSignals (ASM) <= Kernel_C.cancelAllSignals (C))
  (function pairing 192 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [33, 10]
  (in problem)
Now doing proof search in 33 init case in problem.
Now doing proof search in 33 loop case in problem.
ProofNode ('Split', ((33, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (10, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'))], 2, 1), (ProofNode ('Restr', (33, ('Number', (0, 3))), (ProofNode ('Restr', (10, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (33, ('Offset', (0, 3))), (ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 33 related to visits to 10
    with equalities
      ((Mem) ('mem')) (@ addr 33)
      = ((Mem) ('Mem')) (@ addr 10)
      ((Word32) ('r0')) (@ addr 33)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 10)
      ((Word32) ('r4')) (@ addr 33)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 10)
    and with invariants
      ((Word32) ('r7')) (@ addr 33)
      ((Word32) ('r8')) (@ addr 33)
      ((Word32) ('r11')) (@ addr 33)
      ((Word32) ('r13')) (@ addr 33)
      ((Word32) ('r9')) (@ addr 33)
      ((Word32) ('ret')) (@ addr 33)
      ((Word32) ('r1')) (@ addr 33)
      ((Word32) ('r10')) (@ addr 33)
      ((Bool) (ROData('mem'))) (@ addr 33)
      ((Word32) ('r5')) (@ addr 33)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 33)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 10)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 33 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 10 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 33 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 10 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cancelAllSignals (ASM) <= Kernel_C.cancelAllSignals (C)), time taken: 128.24s
Testing Function pair Pairing (decodeReadRegisters (ASM) <= Kernel_C.decodeReadRegisters (C))
  (function pairing 193 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeReadRegisters (ASM) <= Kernel_C.decodeReadRegisters (C)), time taken: 12.36s
Testing Function pair Pairing (handleInterruptEntry (ASM) <= Kernel_C.handleInterruptEntry (C))
  (function pairing 194 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. failed to prove this.
      (failure kind: 'sat')
Result False for pair Pairing (handleInterruptEntry (ASM) <= Kernel_C.handleInterruptEntry (C)), time taken: 1.60s
Testing Function pair Pairing (invokeTCB_NotificationControl (ASM) <= Kernel_C.invokeTCB_NotificationControl (C))
  (function pairing 195 of 282)
 .. built problem, finding proof
Decided to case split at (11, 'ASM')
  (in problem)
Now doing proof search in true case (11 visited) in problem.
Now doing proof search in false case (11 not visited) in problem.
ProofNode ('CaseSplit', (11, 'ASM'), (ProofNode ('Restr', (11, ('Number', (1, 2))), (ProofNode ('Restr', (3, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (11, ('Number', (0, 1))), (ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 11 is visited
Step 2: case in (1) where 11 is visited
  Prove the number of visits to 11 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 3 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 11 is not visited
  Prove the number of visits to 11 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeTCB_NotificationControl (ASM) <= Kernel_C.invokeTCB_NotificationControl (C)), time taken: 2.78s
Testing Function pair Pairing (createObject (ASM) <= Kernel_C.createObject (C))
  (function pairing 196 of 282)
 .. built problem, finding proof
Decided to case split at (54, 'ASM')
  (in problem)
Now doing proof search in true case (54 visited) in problem.
Now doing proof search in false case (54 not visited) in problem.
ProofNode ('CaseSplit', (54, 'ASM'), (ProofNode ('Restr', (54, ('Number', (1, 2))), (ProofNode ('Restr', (45, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (54, ('Number', (0, 1))), (ProofNode ('Restr', (45, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 54 is visited
Step 2: case in (1) where 54 is visited
  Prove the number of visits to 54 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 45 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 54 is not visited
  Prove the number of visits to 54 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 45 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (createObject (ASM) <= Kernel_C.createObject (C)), time taken: 13.25s
Testing Function pair Pairing (strnlen (ASM) <= Kernel_C.strnlen (C))
  (function pairing 197 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [22, 9]
  (in problem)
Now doing proof search in 22 init case in problem.
Now doing proof search in 22 loop case in problem.
ProofNode ('Split', ((22, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r1')])])]), (9, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 's___ptr_to_char#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'maxlen___unsigned_long#v')]), [], 2, 1), (ProofNode ('Restr', (22, ('Number', (0, 3))), (ProofNode ('Restr', (9, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (22, ('Offset', (0, 3))), (ProofNode ('Restr', (9, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 22 related to visits to 9
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 22)
      ((Word32) ('r4')) (@ addr 22)
      ((Word32) ('r8')) (@ addr 22)
      ((Word32) ('r14')) (@ addr 22)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 22)
      ((Word32) ('r5')) (@ addr 22)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 22)
      ((Word32) ('r9')) (@ addr 22)
      ((Word32) ('ret')) (@ addr 22)
      ((Word32) ('r11')) (@ addr 22)
      ((Word32) ('r1')) (@ addr 22)
      ((Word32) ('r13')) (@ addr 22)
      ((Word32) ('r10')) (@ addr 22)
      ((Mem) ('mem')) (@ addr 22)
      ((Word32) ('r6')) (@ addr 22)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 22)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r1')), ((Word32) ('r0')))))) (@ addr 22)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r1')))))) (@ addr 22)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 9)
      ((Word32) ('s___ptr_to_char#v')) (@ addr 9)
      ((Mem) ('Mem')) (@ addr 9)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 9)
      ((Word32) ('maxlen___unsigned_long#v')) (@ addr 9)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 22 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 9 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 22 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 9 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (strnlen (ASM) <= Kernel_C.strnlen (C)), time taken: 22.24s
Testing Function pair Pairing (copyGlobalMappings (ASM) <= Kernel_C.copyGlobalMappings (C))
  (function pairing 198 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [32, 10]
  (in problem)
Now doing proof search in 32 init case in problem.
Now doing proof search in 32 loop case in problem.
ProofNode ('Split', ((32, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (10, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'newPD___ptr_to_struct_pde_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'global_pd___ptr_to_struct_pde_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (32, ('Number', (0, 1))), (ProofNode ('Restr', (10, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (32, ('Offset', (0, 3))), (ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 32 related to visits to 10
    with equalities
      ((Mem) ('mem')) (@ addr 32)
      = ((Mem) ('Mem')) (@ addr 10)
    and with invariants
      ((Word32) ('r7')) (@ addr 32)
      ((Word32) ('r4')) (@ addr 32)
      ((Word32) ('r8')) (@ addr 32)
      ((Word32) ('r14')) (@ addr 32)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 32)
      ((Word32) ('r5')) (@ addr 32)
      ((Word32) ('r0')) (@ addr 32)
      ((Word32) ('r9')) (@ addr 32)
      ((Word32) ('ret')) (@ addr 32)
      ((Word32) ('r11')) (@ addr 32)
      ((Word32) ('r1')) (@ addr 32)
      ((Word32) ('r13')) (@ addr 32)
      ((Word32) ('r10')) (@ addr 32)
      ((Bool) (ROData('mem'))) (@ addr 32)
      ((Word32) ('r6')) (@ addr 32)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 32)
      ((Word32) ('newPD___ptr_to_struct_pde_C#v')) (@ addr 10)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 10)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 10)
      ((Word32) ('global_pd___ptr_to_struct_pde_C#v')) (@ addr 10)
      ((Word32[50]) ('GhostAssertions')) (@ addr 10)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 32 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 10 is in {0 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 32 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 10 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (copyGlobalMappings (ASM) <= Kernel_C.copyGlobalMappings (C)), time taken: 92.15s
Testing Function pair Pairing (invokeCNodeRevoke (ASM) <= Kernel_C.invokeCNodeRevoke (C))
  (function pairing 199 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeCNodeRevoke (ASM) <= Kernel_C.invokeCNodeRevoke (C)), time taken: 0.51s
Testing Function pair Pairing (cteRevoke (ASM) <= Kernel_C.cteRevoke (C))
  (function pairing 200 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [45, 23]
  (in problem)
Now doing proof search in 45 init case in problem.
Now doing proof search in 45 loop case in problem.
ProofNode ('Split', ((45, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'nextPtr___ptr_to_struct_cte_C#v'))], 2, 1), (ProofNode ('Restr', (45, ('Number', (0, 3))), (ProofNode ('Restr', (23, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (45, ('Offset', (0, 3))), (ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 45 related to visits to 23
    with equalities
      ((Mem) ('mem')) (@ addr 45)
      = ((Mem) ('Mem')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 45)
      = ((Word32) ('nextPtr___ptr_to_struct_cte_C#v')) (@ addr 23)
    and with invariants
      ((Word32) ('r8')) (@ addr 45)
      ((Word32) ('r5')) (@ addr 45)
      ((Word32) ('r9')) (@ addr 45)
      ((Word32) ('ret')) (@ addr 45)
      ((Word32) ('r11')) (@ addr 45)
      ((Word32) ('r13')) (@ addr 45)
      ((Word32) ('r10')) (@ addr 45)
      ((Bool) (ROData('mem'))) (@ addr 45)
      ((Word32) ('r6')) (@ addr 45)
      ((Word32) ('r7')) (@ addr 45)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 45)
      ((Word32) ('slot___ptr_to_struct_cte_C#v')) (@ addr 23)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 23)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 45 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 23 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 45 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 23 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cteRevoke (ASM) <= Kernel_C.cteRevoke (C)), time taken: 71.94s
Testing Function pair Pairing (Arch_prepareThreadDelete (ASM) <= Kernel_C.Arch_prepareThreadDelete (C))
  (function pairing 201 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_prepareThreadDelete (ASM) <= Kernel_C.Arch_prepareThreadDelete (C)), time taken: 0.19s
Testing Function pair Pairing (bi_finalise (ASM) <= Kernel_C.bi_finalise (C))
  (function pairing 202 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (bi_finalise (ASM) <= Kernel_C.bi_finalise (C)), time taken: 0.48s
Testing Function pair Pairing (cpu_initLocalIRQController (ASM) <= Kernel_C.cpu_initLocalIRQController (C))
  (function pairing 203 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cpu_initLocalIRQController (ASM) <= Kernel_C.cpu_initLocalIRQController (C)), time taken: 0.49s
Testing Function pair Pairing (configureIdleThread (ASM) <= Kernel_C.configureIdleThread (C))
  (function pairing 204 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (configureIdleThread (ASM) <= Kernel_C.configureIdleThread (C)), time taken: 4.67s
Testing Function pair Pairing (provide_cap (ASM) <= Kernel_C.provide_cap (C))
  (function pairing 205 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (provide_cap (ASM) <= Kernel_C.provide_cap (C)), time taken: 10.02s
Testing Function pair Pairing (invokeCNodeCancelBadgedSends (ASM) <= Kernel_C.invokeCNodeCancelBadgedSends (C))
  (function pairing 206 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeCNodeCancelBadgedSends (ASM) <= Kernel_C.invokeCNodeCancelBadgedSends (C)), time taken: 1.05s
Testing Function pair Pairing (ensureNoChildren (ASM) <= Kernel_C.ensureNoChildren (C))
  (function pairing 207 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (ensureNoChildren (ASM) <= Kernel_C.ensureNoChildren (C)), time taken: 1.76s
Testing Function pair Pairing (handleVMFaultEvent (ASM) <= Kernel_C.handleVMFaultEvent (C))
  (function pairing 208 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleVMFaultEvent (ASM) <= Kernel_C.handleVMFaultEvent (C)), time taken: 1.01s
Testing Function pair Pairing (cteSwap (ASM) <= Kernel_C.cteSwap (C))
  (function pairing 209 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cteSwap (ASM) <= Kernel_C.cteSwap (C)), time taken: 76.54s
Testing Function pair Pairing (create_initial_thread (ASM) <= Kernel_C.create_initial_thread (C))
  (function pairing 210 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_initial_thread (ASM) <= Kernel_C.create_initial_thread (C)), time taken: 508.74s
Testing Function pair Pairing (replyFromKernel_success_empty (ASM) <= Kernel_C.replyFromKernel_success_empty (C))
  (function pairing 211 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (replyFromKernel_success_empty (ASM) <= Kernel_C.replyFromKernel_success_empty (C)), time taken: 1.03s
Testing Function pair Pairing (insertNewCap (ASM) <= Kernel_C.insertNewCap (C))
  (function pairing 212 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (insertNewCap (ASM) <= Kernel_C.insertNewCap (C)), time taken: 7.97s
Testing Function pair Pairing (scheduleChooseNewThread (ASM) <= Kernel_C.scheduleChooseNewThread (C))
  (function pairing 213 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (scheduleChooseNewThread (ASM) <= Kernel_C.scheduleChooseNewThread (C)), time taken: 31.28s
Testing Function pair Pairing (armv_init_user_access (ASM) <= Kernel_C.armv_init_user_access (C))
  (function pairing 214 of 282)
 .. built problem, finding proof
Discovered that points [29 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (29, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 29 is in {0 ..< 2}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (armv_init_user_access (ASM) <= Kernel_C.armv_init_user_access (C)), time taken: 1.12s
Testing Function pair Pairing (l_impl'isb (ASM) <= r_impl'isb (C))
  (function pairing 215 of 282)
Skipping Pairing (l_impl'isb (ASM) <= r_impl'isb (C)), underspecified C
Testing Function pair Pairing (cancelAllIPC (ASM) <= Kernel_C.cancelAllIPC (C))
  (function pairing 216 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [25, 10]
  (in problem)
Now doing proof search in 25 init case in problem.
Now doing proof search in 25 loop case in problem.
ProofNode ('Split', ((25, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (10, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'))], 2, 1), (ProofNode ('Restr', (25, ('Number', (0, 3))), (ProofNode ('Restr', (10, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (25, ('Offset', (0, 3))), (ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 25 related to visits to 10
    with equalities
      ((Mem) ('mem')) (@ addr 25)
      = ((Mem) ('Mem')) (@ addr 10)
      ((Word32) ('r4')) (@ addr 25)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 10)
    and with invariants
      ((Word32) ('r8')) (@ addr 25)
      ((Word32) ('r11')) (@ addr 25)
      ((Word32) ('r5')) (@ addr 25)
      ((Word32) ('r9')) (@ addr 25)
      ((Word32) ('ret')) (@ addr 25)
      ((Word32) ('r13')) (@ addr 25)
      ((Word32) ('r10')) (@ addr 25)
      ((Bool) (ROData('mem'))) (@ addr 25)
      ((Word32) ('r7')) (@ addr 25)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 25)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 10)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 25 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 10 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 25 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 10 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cancelAllIPC (ASM) <= Kernel_C.cancelAllIPC (C)), time taken: 136.21s
Testing Function pair Pairing (dist_init (ASM) <= Kernel_C.dist_init (C))
  (function pairing 217 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [61, 51]
  (in problem)
Now doing proof search in 61 init case in problem.
Discovered a loop relation for split points [67, 42]
  (in 61 init case in problem)
Now doing proof search in 67 init case in 61 init case in problem.
Discovered a loop relation for split points [70, 197]
  (in 67 init case in 61 init case in problem)
Now doing proof search in 70 init case in 67 init case in 61 init case in problem.
Discovered a loop relation for split points [77, 28]
  (in 70 init case in 67 init case in 61 init case in problem)
Now doing proof search in 77 init case in 70 init case in 67 init case in 61 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 77 init case in 70 init case in 67 init case in 61 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 77 init case in 70 init case in 67 init case in 61 init case in problem)
Discovered that points [156 (loop head)] can be bounded
  (in 77 init case in 70 init case in 67 init case in 61 init case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 77 init case in 70 init case in 67 init case in 61 init case in problem)
Now doing proof search in 77 loop case in 70 init case in 67 init case in 61 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 77 loop case in 70 init case in 67 init case in 61 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 77 loop case in 70 init case in 67 init case in 61 init case in problem)
Discovered that points [156 (loop head)] can be bounded
  (in 77 loop case in 70 init case in 67 init case in 61 init case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 77 loop case in 70 init case in 67 init case in 61 init case in problem)
Now doing proof search in 70 loop case in 67 init case in 61 init case in problem.
Discovered a loop relation for split points [77, 28]
  (in 70 loop case in 67 init case in 61 init case in problem)
Now doing proof search in 77 init case in 70 loop case in 67 init case in 61 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 77 init case in 70 loop case in 67 init case in 61 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 77 init case in 70 loop case in 67 init case in 61 init case in problem)
Discovered that points [156 (loop head)] can be bounded
  (in 77 init case in 70 loop case in 67 init case in 61 init case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 77 init case in 70 loop case in 67 init case in 61 init case in problem)
Now doing proof search in 77 loop case in 70 loop case in 67 init case in 61 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 77 loop case in 70 loop case in 67 init case in 61 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 77 loop case in 70 loop case in 67 init case in 61 init case in problem)
Discovered that points [156 (loop head)] can be bounded
  (in 77 loop case in 70 loop case in 67 init case in 61 init case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 77 loop case in 70 loop case in 67 init case in 61 init case in problem)
Now doing proof search in 67 loop case in 61 init case in problem.
Discovered a loop relation for split points [70, 197]
  (in 67 loop case in 61 init case in problem)
Now doing proof search in 70 init case in 67 loop case in 61 init case in problem.
Discovered a loop relation for split points [77, 28]
  (in 70 init case in 67 loop case in 61 init case in problem)
Now doing proof search in 77 init case in 70 init case in 67 loop case in 61 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 77 init case in 70 init case in 67 loop case in 61 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 77 init case in 70 init case in 67 loop case in 61 init case in problem)
Discovered that points [156 (loop head)] can be bounded
  (in 77 init case in 70 init case in 67 loop case in 61 init case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 77 init case in 70 init case in 67 loop case in 61 init case in problem)
Now doing proof search in 77 loop case in 70 init case in 67 loop case in 61 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 77 loop case in 70 init case in 67 loop case in 61 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 77 loop case in 70 init case in 67 loop case in 61 init case in problem)
Discovered that points [156 (loop head)] can be bounded
  (in 77 loop case in 70 init case in 67 loop case in 61 init case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 77 loop case in 70 init case in 67 loop case in 61 init case in problem)
Now doing proof search in 70 loop case in 67 loop case in 61 init case in problem.
Discovered a loop relation for split points [77, 28]
  (in 70 loop case in 67 loop case in 61 init case in problem)
Now doing proof search in 77 init case in 70 loop case in 67 loop case in 61 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 77 init case in 70 loop case in 67 loop case in 61 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 77 init case in 70 loop case in 67 loop case in 61 init case in problem)
Discovered that points [156 (loop head)] can be bounded
  (in 77 init case in 70 loop case in 67 loop case in 61 init case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 77 init case in 70 loop case in 67 loop case in 61 init case in problem)
Now doing proof search in 77 loop case in 70 loop case in 67 loop case in 61 init case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 77 loop case in 70 loop case in 67 loop case in 61 init case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 77 loop case in 70 loop case in 67 loop case in 61 init case in problem)
Discovered that points [156 (loop head)] can be bounded
  (in 77 loop case in 70 loop case in 67 loop case in 61 init case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 77 loop case in 70 loop case in 67 loop case in 61 init case in problem)
Now doing proof search in 61 loop case in problem.
Discovered a loop relation for split points [67, 42]
  (in 61 loop case in problem)
Now doing proof search in 67 init case in 61 loop case in problem.
Discovered that points [193 (loop head)] can be bounded
  (in 67 init case in 61 loop case in problem)
Discovered that points [24 (loop head)] can be bounded
  (in 67 init case in 61 loop case in problem)
Discovered that points [16 (loop head)] can be bounded
  (in 67 init case in 61 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 67 init case in 61 loop case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 67 init case in 61 loop case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 67 init case in 61 loop case in problem)
Discovered that points [156 (loop head)] can be bounded
  (in 67 init case in 61 loop case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 67 init case in 61 loop case in problem)
Now doing proof search in 67 loop case in 61 loop case in problem.
Discovered a loop relation for split points [70, 197]
  (in 67 loop case in 61 loop case in problem)
Now doing proof search in 70 init case in 67 loop case in 61 loop case in problem.
Discovered a loop relation for split points [77, 28]
  (in 70 init case in 67 loop case in 61 loop case in problem)
Now doing proof search in 77 init case in 70 init case in 67 loop case in 61 loop case in problem.
Discovered that points [16 (loop head)] can be bounded
  (in 77 init case in 70 init case in 67 loop case in 61 loop case in problem)
Discovered that points [5 (loop head)] can be bounded
  (in 77 init case in 70 init case in 67 loop case in 61 loop case in problem)
Discovered that points [156 (loop head)] can be bounded
  (in 77 init case in 70 init case in 67 loop case in 61 loop case in problem)
Discovered that points [169 (loop head)] can be bounded
  (in 77 init case in 70 init case in 67 loop case in 61 loop case in problem)
Now doing proof search in 77 loop case in 70 init case in 67 loop case in 61 loop case in problem.
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1738, in build_proof_rec
    p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1738, in build_proof_rec
    p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1738, in build_proof_rec
    p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1738, in build_proof_rec
    p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1774, in build_proof_rec_with_restrs
    searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1745, in build_proof_rec_with_restrs
    return build_proof_rec (searcher, p, restrs, hyps, name = name)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 692, in find_split_loop
    i_opts, j_opts, node_restrs = node_restrs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1233, in find_split
    res = split_search (head, knowledge)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1154, in split_search
    knowledge.eqs_add_model (eqs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 306, in eqs_add_model
    assert_progress = assert_progress)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 284, in hyps_add_model
    {}, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (dist_init (ASM) <= Kernel_C.dist_init (C)), time taken: 1911.81s
Testing Function pair Pairing (sendFaultIPC (ASM) <= Kernel_C.sendFaultIPC (C))
  (function pairing 218 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (sendFaultIPC (ASM) <= Kernel_C.sendFaultIPC (C)), time taken: 101.16s
Testing Function pair Pairing (tcbSchedAppend (ASM) <= Kernel_C.tcbSchedAppend (C))
  (function pairing 219 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (tcbSchedAppend (ASM) <= Kernel_C.tcbSchedAppend (C)), time taken: 36.26s
Testing Function pair Pairing (handleUnknownSyscall (ASM) <= Kernel_C.handleUnknownSyscall (C))
  (function pairing 220 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleUnknownSyscall (ASM) <= Kernel_C.handleUnknownSyscall (C)), time taken: 1.23s
Testing Function pair Pairing (receiveSignal (ASM) <= Kernel_C.receiveSignal (C))
  (function pairing 221 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (receiveSignal (ASM) <= Kernel_C.receiveSignal (C)), time taken: 64.18s
Testing Function pair Pairing (isIRQActive (ASM) <= Kernel_C.isIRQActive (C))
  (function pairing 222 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (isIRQActive (ASM) <= Kernel_C.isIRQActive (C)), time taken: 0.27s
Testing Function pair Pairing (invokeIRQHandler_SetIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_SetIRQHandler (C))
  (function pairing 223 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeIRQHandler_SetIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_SetIRQHandler (C)), time taken: 1.49s
Testing Function pair Pairing (deriveCap (ASM) <= Kernel_C.deriveCap (C))
  (function pairing 224 of 282)
 .. built problem, finding proof
Decided to case split at (52, 'ASM')
  (in problem)
Now doing proof search in true case (52 visited) in problem.
Now doing proof search in false case (52 not visited) in problem.
ProofNode ('CaseSplit', (52, 'ASM'), (ProofNode ('Restr', (52, ('Number', (1, 2))), (ProofNode ('Restr', (31, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (52, ('Number', (0, 1))), (ProofNode ('Restr', (31, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 52 is visited
Step 2: case in (1) where 52 is visited
  Prove the number of visits to 52 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 31 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 52 is not visited
  Prove the number of visits to 52 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 31 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (deriveCap (ASM) <= Kernel_C.deriveCap (C)), time taken: 23.65s
Testing Function pair Pairing (cpu_iface_init (ASM) <= Kernel_C.cpu_iface_init (C))
  (function pairing 225 of 282)
 .. built problem, finding proof
Discovered that points [23 (loop head)] can be bounded
  (in problem)
Discovered a loop relation for split points [66, 11]
  (in problem)
Now doing proof search in 66 init case in problem.
Now doing proof search in 66 loop case in problem.
ProofNode ('Restr', (23, ('Number', (0, 6))), (ProofNode ('Split', ((66, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Var', Type ('Word', 32), name = 'r3')]), (11, (0, 1), [Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (66, ('Number', (0, 1))), (ProofNode ('Restr', (11, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (66, ('Offset', (0, 1))), (ProofNode ('Restr', (11, ('Offset', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),))
 .. proof found.
Step 1: 
  Prove the number of visits to 23 is in {0 ..< 6}
    .. proven.
Step 2: 
  prove visits to 66 related to visits to 11
    with equalities
      ((Mem) ('mem')) (@ addr 66)
      = ((Mem) ('Mem')) (@ addr 11)
    and with invariants
      ((Word32) ('r7')) (@ addr 66)
      ((Word32) ('r4')) (@ addr 66)
      ((Word32) ('r8')) (@ addr 66)
      ((Word32) ('r5')) (@ addr 66)
      ((Word32) ('r6')) (@ addr 66)
      ((Word32) ('r0')) (@ addr 66)
      ((Word32) ('r9')) (@ addr 66)
      ((Word32) ('ret')) (@ addr 66)
      ((Word32) ('r2')) (@ addr 66)
      ((Word32) ('r11')) (@ addr 66)
      ((Word32) ('r13')) (@ addr 66)
      ((Word32) ('r10')) (@ addr 66)
      ((Bool) (ROData('mem'))) (@ addr 66)
      ((Word32) ('r14')) (@ addr 66)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 66)
      ((Word32) ('r3')) (@ addr 66)
      ((Word32[50]) ('GhostAssertions')) (@ addr 11)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 11)
    .. proven.
Step 3: case in (2) where the length of the sequence < 2
  Prove the number of visits to 66 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 11 is in {0 ..< 1}
    .. proven.
Step 5: 
  prove all verification conditions
    .. proven.
Step 6: case in (2) where the length of the sequence is i + 2
  Prove the number of visits to 66 is in {i + 0 ..< i + 1}
    .. proven.
Step 7: 
  Prove the number of visits to 11 is in {i + 0 ..< i + 1}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cpu_iface_init (ASM) <= Kernel_C.cpu_iface_init (C)), time taken: 15.14s
Testing Function pair Pairing (create_device_untypeds (ASM) <= Kernel_C.create_device_untypeds (C))
  (function pairing 226 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [50, 28]
  (in problem)
Now doing proof search in 50 init case in problem.
Now doing proof search in 50 loop case in problem.
ProofNode ('Split', ((50, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 8)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 4)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (28, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#13#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'slot_pos_before___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'))], 2, 1), (ProofNode ('Restr', (50, ('Number', (0, 3))), (ProofNode ('Restr', (28, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (50, ('Offset', (0, 3))), (ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 50 related to visits to 28
    with equalities
      ((Mem) ('mem')) (@ addr 50)
      = ((Mem) ('Mem')) (@ addr 28)
      ((Word32) ('r3')) (@ addr 50)
      = ((Word32) ('start___unsigned_long#v')) (@ addr 28)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 8)))) (@ addr 50)
      ((Word32) ('r13')) (@ addr 50)
      ((Word32) ('r10')) (@ addr 50)
      ((Word32) ('r9')) (@ addr 50)
      ((Word32) ('r8')) (@ addr 50)
      ((Word32) ('r11')) (@ addr 50)
      ((Word32) (('r5' + ((0 - '#seq-visits') * 1)))) (@ addr 50)
      ((Word32) ('r7')) (@ addr 50)
      ((Word32) ('ret')) (@ addr 50)
      ((Bool) (ROData('mem'))) (@ addr 50)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 4))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 50)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 28)
      ((Word32) (('loop#13#count' + ((0 - '#seq-visits') * 1)))) (@ addr 28)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 28)
      ((Word32) ('slot_pos_before___unsigned_long#v')) (@ addr 28)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 28)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 50 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 28 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 50 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 28 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_device_untypeds (ASM) <= Kernel_C.create_device_untypeds (C)), time taken: 456.20s
Testing Function pair Pairing (performInvocation_Reply (ASM) <= Kernel_C.performInvocation_Reply (C))
  (function pairing 227 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (performInvocation_Reply (ASM) <= Kernel_C.performInvocation_Reply (C)), time taken: 0.55s
Testing Function pair Pairing (c_handle_fastpath_reply_recv (ASM) <= Kernel_C.c_handle_fastpath_reply_recv (C))
  (function pairing 228 of 282)
Skipping Pairing (c_handle_fastpath_reply_recv (ASM) <= Kernel_C.c_handle_fastpath_reply_recv (C)), underspecified ASM
Testing Function pair Pairing (updateCapData (ASM) <= Kernel_C.updateCapData (C))
  (function pairing 229 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (updateCapData (ASM) <= Kernel_C.updateCapData (C)), time taken: 2.97s
Testing Function pair Pairing (decodeBindNotification (ASM) <= Kernel_C.decodeBindNotification (C))
  (function pairing 230 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeBindNotification (ASM) <= Kernel_C.decodeBindNotification (C)), time taken: 10.75s
Testing Function pair Pairing (Arch_postModifyRegisters (ASM) <= Kernel_C.Arch_postModifyRegisters (C))
  (function pairing 231 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_postModifyRegisters (ASM) <= Kernel_C.Arch_postModifyRegisters (C)), time taken: 0.19s
Testing Function pair Pairing (loadHWASID (ASM) <= Kernel_C.loadHWASID (C))
  (function pairing 232 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (loadHWASID (ASM) <= Kernel_C.loadHWASID (C)), time taken: 0.35s
Testing Function pair Pairing (deleteASIDPool (ASM) <= Kernel_C.deleteASIDPool (C))
  (function pairing 233 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [36, 16]
  (in problem)
Now doing proof search in 36 init case in problem.
Now doing proof search in 36 loop case in problem.
ProofNode ('Split', ((36, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (16, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'asid_base___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'offset___unsigned#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'pool___ptr_to_struct_asid_pool_C#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (36, ('Number', (0, 3))), (ProofNode ('Restr', (16, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (36, ('Offset', (0, 3))), (ProofNode ('Restr', (16, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 36 related to visits to 16
    with equalities
      ((Mem) ('mem')) (@ addr 36)
      = ((Mem) ('Mem')) (@ addr 16)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 36)
      ((Word32) (('r5' + ((0 - '#seq-visits') * 4)))) (@ addr 36)
      ((Word32) ('r9')) (@ addr 36)
      ((Word32) ('ret')) (@ addr 36)
      ((Word32) ('r11')) (@ addr 36)
      ((Word32) ('r13')) (@ addr 36)
      ((Word32) ('r10')) (@ addr 36)
      ((Word32) ('r6')) (@ addr 36)
      ((Word32) ('r7')) (@ addr 36)
      ((Bool) (ROData('mem'))) (@ addr 36)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 36)
      ((Word32) ('asid_base___unsigned_long#v')) (@ addr 16)
      ((Word32) (('offset___unsigned#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 16)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 16)
      ((Word32) ('pool___ptr_to_struct_asid_pool_C#v')) (@ addr 16)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 36 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 16 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 36 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 16 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (deleteASIDPool (ASM) <= Kernel_C.deleteASIDPool (C)), time taken: 80.65s
Testing Function pair Pairing (create_root_cnode (ASM) <= Kernel_C.create_root_cnode (C))
  (function pairing 234 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_root_cnode (ASM) <= Kernel_C.create_root_cnode (C)), time taken: 3.10s
Testing Function pair Pairing (create_unmapped_it_frame_cap (ASM) <= Kernel_C.create_unmapped_it_frame_cap (C))
  (function pairing 235 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_unmapped_it_frame_cap (ASM) <= Kernel_C.create_unmapped_it_frame_cap (C)), time taken: 0.40s
Testing Function pair Pairing (cteMove (ASM) <= Kernel_C.cteMove (C))
  (function pairing 236 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cteMove (ASM) <= Kernel_C.cteMove (C)), time taken: 14.05s
Testing Function pair Pairing (strncmp (ASM) <= Kernel_C.strncmp (C))
  (function pairing 237 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [21, 15]
  (in problem)
Now doing proof search in 21 init case in problem.
Now doing proof search in 21 loop case in problem.
ProofNode ('Split', ((21, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (15, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'n___int#v'), Expr ('Var', Type ('Word', 32), name = 's1___ptr_to_char#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('Word', 32), name = 's2___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (21, ('Number', (0, 3))), (ProofNode ('Restr', (15, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (21, ('Offset', (0, 3))), (ProofNode ('Restr', (15, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 21 related to visits to 15
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 21)
      ((Word32) ('r4')) (@ addr 21)
      ((Word32) ('r8')) (@ addr 21)
      ((Word32) ('r14')) (@ addr 21)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 21)
      ((Word32) ('r5')) (@ addr 21)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 1)))) (@ addr 21)
      ((Word32) ('r9')) (@ addr 21)
      ((Word32) ('ret')) (@ addr 21)
      ((Word32) ('r11')) (@ addr 21)
      ((Word32) ('r13')) (@ addr 21)
      ((Word32) ('r10')) (@ addr 21)
      ((Mem) ('mem')) (@ addr 21)
      ((Word32) ('r6')) (@ addr 21)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 21)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 15)
      ((Word32) ('n___int#v')) (@ addr 15)
      ((Word32) ('s1___ptr_to_char#v')) (@ addr 15)
      ((Mem) ('Mem')) (@ addr 15)
      ((Word32) ('s2___ptr_to_char#v')) (@ addr 15)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 15)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 21 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 15 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 21 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 15 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (strncmp (ASM) <= Kernel_C.strncmp (C)), time taken: 65.62s
Testing Function pair Pairing (handleFaultReply (ASM) <= Kernel_C.handleFaultReply (C))
  (function pairing 238 of 282)
 .. built problem, finding proof
Decided to case split at (46, 'ASM')
  (in problem)
Now doing proof search in true case (46 visited) in problem.
Discovered that points [272 (loop head)] can be bounded
  (in true case (46 visited) in problem)
Discovered that points [256 (loop head)] can be bounded
  (in true case (46 visited) in problem)
Discovered that points [307 (loop head)] can be bounded
  (in true case (46 visited) in problem)
Discovered that points [291 (loop head)] can be bounded
  (in true case (46 visited) in problem)
Discovered that points [207 (loop head)] can be bounded
  (in true case (46 visited) in problem)
Discovered that points [228 (loop head)] can be bounded
  (in true case (46 visited) in problem)
Now doing proof search in false case (46 not visited) in problem.
Decided to case split at (55, 'ASM')
  (in false case (46 not visited) in problem)
Now doing proof search in true case (55 visited) in false case (46 not visited) in problem.
Discovered that points [272 (loop head)] can be bounded
  (in true case (55 visited) in false case (46 not visited) in problem)
Discovered that points [256 (loop head)] can be bounded
  (in true case (55 visited) in false case (46 not visited) in problem)
Discovered that points [307 (loop head)] can be bounded
  (in true case (55 visited) in false case (46 not visited) in problem)
Discovered that points [291 (loop head)] can be bounded
  (in true case (55 visited) in false case (46 not visited) in problem)
Now doing proof search in false case (55 not visited) in false case (46 not visited) in problem.
Decided to case split at (43, 'ASM')
  (in false case (55 not visited) in false case (46 not visited) in problem)
Now doing proof search in true case (43 visited) in false case (55 not visited) in false case (46 not visited) in problem.
Discovered that points [307 (loop head)] can be bounded
  (in true case (43 visited) in false case (55 not visited) in false case (46 not visited) in problem)
Discovered that points [291 (loop head)] can be bounded
  (in true case (43 visited) in false case (55 not visited) in false case (46 not visited) in problem)
Discovered that points [131 (loop head)] can be bounded
  (in true case (43 visited) in false case (55 not visited) in false case (46 not visited) in problem)
Discovered that points [272 (loop head)] can be bounded
  (in true case (43 visited) in false case (55 not visited) in false case (46 not visited) in problem)
Discovered a loop relation for split points [103, 264]
  (in true case (43 visited) in false case (55 not visited) in false case (46 not visited) in problem)
Now doing proof search in 103 init case in true case (43 visited) in false case (55 not visited) in false case (46 not visited) in problem.
Now doing proof search in 103 loop case in true case (43 visited) in false case (55 not visited) in false case (46 not visited) in problem.
Now doing proof search in false case (43 not visited) in false case (55 not visited) in false case (46 not visited) in problem.
Discovered that points [272 (loop head)] can be bounded
  (in false case (43 not visited) in false case (55 not visited) in false case (46 not visited) in problem)
Discovered that points [256 (loop head)] can be bounded
  (in false case (43 not visited) in false case (55 not visited) in false case (46 not visited) in problem)
Discovered that points [307 (loop head)] can be bounded
  (in false case (43 not visited) in false case (55 not visited) in false case (46 not visited) in problem)
Discovered that points [291 (loop head)] can be bounded
  (in false case (43 not visited) in false case (55 not visited) in false case (46 not visited) in problem)
Discovered that points [131 (loop head)] can be bounded
  (in false case (43 not visited) in false case (55 not visited) in false case (46 not visited) in problem)
Discovered that points [178 (loop head)] can be bounded
  (in false case (43 not visited) in false case (55 not visited) in false case (46 not visited) in problem)
Discovered that points [207 (loop head)] can be bounded
  (in false case (43 not visited) in false case (55 not visited) in false case (46 not visited) in problem)
Discovered that points [228 (loop head)] can be bounded
  (in false case (43 not visited) in false case (55 not visited) in false case (46 not visited) in problem)
ProofNode ('CaseSplit', (46, 'ASM'), (ProofNode ('Restr', (46, ('Number', (1, 2))), (ProofNode ('Restr', (272, ('Number', (0, 1))), (ProofNode ('Restr', (256, ('Number', (0, 1))), (ProofNode ('Restr', (307, ('Number', (0, 5))), (ProofNode ('Restr', (291, ('Number', (0, 1))), (ProofNode ('Restr', (207, ('Number', (0, 4))), (ProofNode ('Restr', (228, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)), ProofNode ('Restr', (46, ('Number', (0, 1))), (ProofNode ('Restr', (7, ('Number', (0, 1))), (ProofNode ('CaseSplit', (55, 'ASM'), (ProofNode ('Restr', (55, ('Number', (1, 2))), (ProofNode ('Restr', (272, ('Number', (0, 1))), (ProofNode ('Restr', (256, ('Number', (0, 1))), (ProofNode ('Restr', (307, ('Number', (0, 1))), (ProofNode ('Restr', (291, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (55, ('Number', (0, 1))), (ProofNode ('CaseSplit', (43, 'ASM'), (ProofNode ('Restr', (43, ('Number', (1, 2))), (ProofNode ('Restr', (307, ('Number', (0, 1))), (ProofNode ('Restr', (291, ('Number', (0, 1))), (ProofNode ('Restr', (131, ('Number', (0, 5))), (ProofNode ('Restr', (272, ('Number', (0, 6))), (ProofNode ('Split', ((103, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (264, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'receiver___ptr_to_struct_tcb_C#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'length___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'archInfo___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'label___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'sendBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.1'), Expr ('Var', Type ('Word', 32), name = 'id___anonymous_enum#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (103, ('Number', (0, 3))), (ProofNode ('Restr', (264, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (103, ('Offset', (0, 3))), (ProofNode ('Restr', (264, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)),)), ProofNode ('Restr', (43, ('Number', (0, 1))), (ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (272, ('Number', (0, 1))), (ProofNode ('Restr', (256, ('Number', (0, 1))), (ProofNode ('Restr', (307, ('Number', (0, 1))), (ProofNode ('Restr', (291, ('Number', (0, 1))), (ProofNode ('Restr', (131, ('Number', (0, 1))), (ProofNode ('Restr', (178, ('Number', (0, 1))), (ProofNode ('Restr', (207, ('Number', (0, 1))), (ProofNode ('Restr', (228, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)),)),)))),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 46 is visited
Step 2: case in (1) where 46 is visited
  Prove the number of visits to 46 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 272 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 256 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 307 is in {0 ..< 5}
    .. proven.
Step 6: 
  Prove the number of visits to 291 is in {0 ..< 1}
    .. proven.
Step 7: 
  Prove the number of visits to 207 is in {0 ..< 4}
    .. proven.
Step 8: 
  Prove the number of visits to 228 is in {0 ..< 1}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (1) where 46 is not visited
  Prove the number of visits to 46 is in {0 ..< 1}
    .. proven.
Step 11: 
  Prove the number of visits to 7 is in {0 ..< 1}
    .. proven.
Step 12: 
  case split on whether 55 is visited
Step 13: case in (12) where 55 is visited
  Prove the number of visits to 55 is in {1 ..< 2}
    .. proven.
Step 14: 
  Prove the number of visits to 272 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 256 is in {0 ..< 1}
    .. proven.
Step 16: 
  Prove the number of visits to 307 is in {0 ..< 1}
    .. proven.
Step 17: 
  Prove the number of visits to 291 is in {0 ..< 1}
    .. proven.
Step 18: 
  prove all verification conditions
    .. proven.
Step 19: case in (12) where 55 is not visited
  Prove the number of visits to 55 is in {0 ..< 1}
    .. proven.
Step 20: 
  case split on whether 43 is visited
Step 21: case in (20) where 43 is visited
  Prove the number of visits to 43 is in {1 ..< 2}
    .. proven.
Step 22: 
  Prove the number of visits to 307 is in {0 ..< 1}
    .. proven.
Step 23: 
  Prove the number of visits to 291 is in {0 ..< 1}
    .. proven.
Step 24: 
  Prove the number of visits to 131 is in {0 ..< 5}
    .. proven.
Step 25: 
  Prove the number of visits to 272 is in {0 ..< 6}
    .. proven.
Step 26: 
  prove visits to 103 related to visits to 264
    with equalities
      ((Mem) ('mem')) (@ addr 103)
      = ((Mem) ('Mem.1')) (@ addr 264)
    and with invariants
      ((Word32) ('r7')) (@ addr 103)
      ((Word32) ('r4')) (@ addr 103)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 103)
      ((Word32) ('r5')) (@ addr 103)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 4)))) (@ addr 103)
      ((Word32) ('r9')) (@ addr 103)
      ((Word32) ('ret')) (@ addr 103)
      ((Word32) ('r11')) (@ addr 103)
      ((Word32) ('r13')) (@ addr 103)
      ((Word32) ('r10')) (@ addr 103)
      ((Bool) (ROData('mem'))) (@ addr 103)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 103)
      ((Word32) ('receiver___ptr_to_struct_tcb_C#v.1')) (@ addr 264)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 264)
      ((Word32) ('length___unsigned_long#v.1')) (@ addr 264)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 264)
      ((Word32) ('archInfo___unsigned_long#v')) (@ addr 264)
      ((Word32) ('label___unsigned_long#v')) (@ addr 264)
      ((Word32) ('sendBuf___ptr_to_unsigned_long#v')) (@ addr 264)
      ((Word32[50]) ('GhostAssertions.1')) (@ addr 264)
      ((Word32) ('id___anonymous_enum#v')) (@ addr 264)
    .. proven.
Step 27: case in (26) where the length of the sequence < 2
  Prove the number of visits to 103 is in {0 ..< 3}
    .. proven.
Step 28: 
  Prove the number of visits to 264 is in {0 ..< 3}
    .. proven.
Step 29: 
  prove all verification conditions
    .. proven.
Step 30: case in (26) where the length of the sequence is i + 2
  Prove the number of visits to 103 is in {i + 0 ..< i + 3}
    .. proven.
Step 31: 
  Prove the number of visits to 264 is in {i + 0 ..< i + 3}
    .. proven.
Step 32: 
  prove all verification conditions
    .. proven.
Step 33: case in (20) where 43 is not visited
  Prove the number of visits to 43 is in {0 ..< 1}
    .. proven.
Step 34: 
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 35: 
  Prove the number of visits to 272 is in {0 ..< 1}
    .. proven.
Step 36: 
  Prove the number of visits to 256 is in {0 ..< 1}
    .. proven.
Step 37: 
  Prove the number of visits to 307 is in {0 ..< 1}
    .. proven.
Step 38: 
  Prove the number of visits to 291 is in {0 ..< 1}
    .. proven.
Step 39: 
  Prove the number of visits to 131 is in {0 ..< 1}
    .. proven.
Step 40: 
  Prove the number of visits to 178 is in {0 ..< 1}
    .. proven.
Step 41: 
  Prove the number of visits to 207 is in {0 ..< 1}
    .. proven.
Step 42: 
  Prove the number of visits to 228 is in {0 ..< 1}
    .. proven.
Step 43: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleFaultReply (ASM) <= Kernel_C.handleFaultReply (C)), time taken: 2798.99s
Testing Function pair Pairing (handleUserLevelFault (ASM) <= Kernel_C.handleUserLevelFault (C))
  (function pairing 239 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (handleUserLevelFault (ASM) <= Kernel_C.handleUserLevelFault (C)), time taken: 1.26s
Testing Function pair Pairing (lookupSlotForCNodeOp (ASM) <= Kernel_C.lookupSlotForCNodeOp (C))
  (function pairing 240 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (lookupSlotForCNodeOp (ASM) <= Kernel_C.lookupSlotForCNodeOp (C)), time taken: 44.48s
Testing Function pair Pairing (branchFlushRange (ASM) <= Kernel_C.branchFlushRange (C))
  (function pairing 241 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [17, 2]
  (in problem)
Now doing proof search in 17 init case in problem.
Now doing proof search in 17 loop case in problem.
ProofNode ('Split', ((17, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (2, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (17, ('Number', (0, 3))), (ProofNode ('Restr', (2, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (17, ('Offset', (0, 3))), (ProofNode ('Restr', (2, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 17 related to visits to 2
    with equalities
      ((Mem) ('mem')) (@ addr 17)
      = ((Mem) ('Mem')) (@ addr 2)
    and with invariants
      ((Word32) ('r21')) (@ addr 17)
      ((Word32) ('r4')) (@ addr 17)
      ((Word32) ('r27')) (@ addr 17)
      ((Word32) ('r17')) (@ addr 17)
      ((Word32) ('r0')) (@ addr 17)
      ((Word32) ('r23')) (@ addr 17)
      ((Word32) ('r13')) (@ addr 17)
      ((Word32) ('r10')) (@ addr 17)
      ((Word32) ('r28')) (@ addr 17)
      ((Word32) ('r19')) (@ addr 17)
      ((Word32) ('r16')) (@ addr 17)
      ((Word64) ('clock')) (@ addr 17)
      ((Word32) ('r12')) (@ addr 17)
      ((Word32) ('r9')) (@ addr 17)
      ((Word32) ('r6')) (@ addr 17)
      ((Word32) ('r7')) (@ addr 17)
      ((Word32) ('r31')) (@ addr 17)
      ((Word32) ('r25')) (@ addr 17)
      ((Word32) ('r24')) (@ addr 17)
      ((Word32) ('r8')) (@ addr 17)
      ((Word32) ('r29')) (@ addr 17)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 17)
      ((Word32) ('r18')) (@ addr 17)
      ((Word32) ('r20')) (@ addr 17)
      ((Word32) ('r30')) (@ addr 17)
      ((Word32) ('r14')) (@ addr 17)
      ((Word32) ('r15')) (@ addr 17)
      ((Word32) ('mode')) (@ addr 17)
      ((Word32) ('r11')) (@ addr 17)
      ((Word32) ('r5')) (@ addr 17)
      ((Word32) ('ret')) (@ addr 17)
      ((Word32) ('r26')) (@ addr 17)
      ((Word32) ('r1')) (@ addr 17)
      ((Word32) ('r2')) (@ addr 17)
      ((Bool) (ROData('mem'))) (@ addr 17)
      ((Word32) ('r22')) (@ addr 17)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 17)
      ((Word32) ('end___unsigned_long#v')) (@ addr 2)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 2)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 2)
      ((Word32) ('start___unsigned_long#v')) (@ addr 2)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 2)
      ((Word32[50]) ('GhostAssertions')) (@ addr 2)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 17 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 2 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 17 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 2 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (branchFlushRange (ASM) <= Kernel_C.branchFlushRange (C)), time taken: 33.78s
Testing Function pair Pairing (setDomain (ASM) <= Kernel_C.setDomain (C))
  (function pairing 242 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setDomain (ASM) <= Kernel_C.setDomain (C)), time taken: 5.20s
Testing Function pair Pairing (create_it_address_space (ASM) <= Kernel_C.create_it_address_space (C))
  (function pairing 243 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [300, 24]
  (in problem)
Now doing proof search in 300 init case in problem.
Now doing proof search in 300 loop case in problem.
ProofNode ('Split', ((300, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1048576)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'ret_addr_input'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (24, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'it_v_reg___struct_v_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'slot_pos_before___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'pt_vptr___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Num', Type ('Word', 32), val = 8), Expr ('Num', Type ('Word', 32), val = 12)])])])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (300, ('Number', (0, 3))), (ProofNode ('Restr', (24, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (300, ('Offset', (0, 3))), (ProofNode ('Restr', (24, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 300 related to visits to 24
    with equalities
      ((Mem) ('mem')) (@ addr 300)
      = ((Mem) ('Mem')) (@ addr 24)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1048576)))) (@ addr 300)
      ((Word32) ('r13')) (@ addr 300)
      ((Word32) ('r10')) (@ addr 300)
      ((Word32) ('r9')) (@ addr 300)
      ((Word32) ('r6')) (@ addr 300)
      ((Word32) ('r7')) (@ addr 300)
      ((Word32) ('r8')) (@ addr 300)
      ((Word32) ('ret_addr_input')) (@ addr 300)
      ((Word32) ('r11')) (@ addr 300)
      ((Word32) ('r5')) (@ addr 300)
      ((Word32) ('ret')) (@ addr 300)
      ((Bool) (ROData('mem'))) (@ addr 300)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 300)
      ((Word32) ('it_v_reg___struct_v_region_C#v.end_C')) (@ addr 24)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 24)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.1')) (@ addr 24)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 24)
      ((Word32) ('slot_pos_before___unsigned_long#v')) (@ addr 24)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.0')) (@ addr 24)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 24)
      ((Word32) (('pt_vptr___unsigned_long#v' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast((8 + 12))))))) (@ addr 24)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 300 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 24 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 300 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 24 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (create_it_address_space (ASM) <= Kernel_C.create_it_address_space (C)), time taken: 2230.48s
Testing Function pair Pairing (populate_bi_frame (ASM) <= Kernel_C.populate_bi_frame (C))
  (function pairing 244 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (populate_bi_frame (ASM) <= Kernel_C.populate_bi_frame (C)), time taken: 39.71s
Testing Function pair Pairing (doNBRecvFailedTransfer (ASM) <= Kernel_C.doNBRecvFailedTransfer (C))
  (function pairing 245 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (doNBRecvFailedTransfer (ASM) <= Kernel_C.doNBRecvFailedTransfer (C)), time taken: 0.46s
Testing Function pair Pairing (char_to_long (ASM) <= Kernel_C.char_to_long (C))
  (function pairing 246 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (char_to_long (ASM) <= Kernel_C.char_to_long (C)), time taken: 0.32s
Testing Function pair Pairing (invokeCNodeDelete (ASM) <= Kernel_C.invokeCNodeDelete (C))
  (function pairing 247 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeCNodeDelete (ASM) <= Kernel_C.invokeCNodeDelete (C)), time taken: 0.51s
Testing Function pair Pairing (doReplyTransfer (ASM) <= Kernel_C.doReplyTransfer (C))
  (function pairing 248 of 282)
 .. built problem, finding proof
Decided to case split at (31, 'ASM')
  (in problem)
Now doing proof search in true case (31 visited) in problem.
Now doing proof search in false case (31 not visited) in problem.
ProofNode ('CaseSplit', (31, 'ASM'), (ProofNode ('Restr', (31, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (31, ('Number', (0, 1))), (ProofNode ('Restr', (20, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 31 is visited
Step 2: case in (1) where 31 is visited
  Prove the number of visits to 31 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 31 is not visited
  Prove the number of visits to 31 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 20 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (doReplyTransfer (ASM) <= Kernel_C.doReplyTransfer (C)), time taken: 15.46s
Testing Function pair Pairing (str_to_long (ASM) <= Kernel_C.str_to_long (C))
  (function pairing 249 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [59, 11]
  (in problem)
Now doing proof search in 59 init case in problem.
Now doing proof search in 59 loop case in problem.
ProofNode ('Split', ((59, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (11, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'base___unsigned#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'str___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'res___long#v')), (Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'val___long#v'))], 2, 1), (ProofNode ('Restr', (59, ('Number', (0, 3))), (ProofNode ('Restr', (11, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (59, ('Offset', (0, 3))), (ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 59 related to visits to 11
    with equalities
      ((Word32) ('r0')) (@ addr 59)
      = ((Word32) ('res___long#v')) (@ addr 11)
      ((Word32) ('r5')) (@ addr 59)
      = ((Word32) ('val___long#v')) (@ addr 11)
    and with invariants
      ((Word32) ('r7')) (@ addr 59)
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 59)
      ((Word32) ('r8')) (@ addr 59)
      ((Word32) ('r9')) (@ addr 59)
      ((Word32) ('ret')) (@ addr 59)
      ((Word32) ('r11')) (@ addr 59)
      ((Word32) ('r13')) (@ addr 59)
      ((Word32) ('r10')) (@ addr 59)
      ((Mem) ('mem')) (@ addr 59)
      ((Word32) ('r6')) (@ addr 59)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 59)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 11)
      ((Word32) ('base___unsigned#v')) (@ addr 11)
      ((Mem) ('Mem')) (@ addr 11)
      ((Word32) (('str___ptr_to_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 11)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 59 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 11 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 59 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 11 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (str_to_long (ASM) <= Kernel_C.str_to_long (C)), time taken: 318.45s
Testing Function pair Pairing (getHWASID (ASM) <= Kernel_C.getHWASID (C))
  (function pairing 250 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (getHWASID (ASM) <= Kernel_C.getHWASID (C)), time taken: 2.80s
Testing Function pair Pairing (decodeIRQHandlerInvocation (ASM) <= Kernel_C.decodeIRQHandlerInvocation (C))
  (function pairing 251 of 282)
 .. built problem, finding proof
Decided to case split at (50, 'ASM')
  (in problem)
Now doing proof search in true case (50 visited) in problem.
Now doing proof search in false case (50 not visited) in problem.
ProofNode ('CaseSplit', (50, 'ASM'), (ProofNode ('Restr', (50, ('Number', (1, 2))), (ProofNode ('Restr', (35, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (50, ('Number', (0, 1))), (ProofNode ('Restr', (35, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 50 is visited
Step 2: case in (1) where 50 is visited
  Prove the number of visits to 50 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 35 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 50 is not visited
  Prove the number of visits to 50 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 35 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeIRQHandlerInvocation (ASM) <= Kernel_C.decodeIRQHandlerInvocation (C)), time taken: 20.12s
Testing Function pair Pairing (unmapPage (ASM) <= Kernel_C.unmapPage (C))
  (function pairing 252 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [211, 79]
  (in problem)
Now doing proof search in 211 init case in problem.
Discovered a loop relation for split points [180, 33]
  (in 211 init case in problem)
Now doing proof search in 180 init case in 211 init case in problem.
Now doing proof search in 180 loop case in 211 init case in problem.
Now doing proof search in 211 loop case in problem.
ProofNode ('Split', ((211, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (79, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#72#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'pd___ptr_to_struct_pde_C#v'), Expr ('Var', Type ('Word', 32), name = 'find_ret___struct_findPDForASID_ret_C#v.pd_C'), Expr ('Var', Type ('Word', 32), name = 'page_size___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'ret__struct_pde_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'vptr___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (211, ('Number', (0, 1))), (ProofNode ('Restr', (79, ('Number', (0, 1))), (ProofNode ('Split', ((180, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (33, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#26#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'ret__struct_pte_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'find_ret___struct_findPDForASID_ret_C#v.pd_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'page_size___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C'), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'vptr___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (180, ('Number', (0, 1))), (ProofNode ('Restr', (33, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (180, ('Offset', (0, 3))), (ProofNode ('Restr', (33, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (211, ('Offset', (0, 3))), (ProofNode ('Restr', (79, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 211 related to visits to 79
    with equalities
      ((Mem) ('mem')) (@ addr 211)
      = ((Mem) ('Mem')) (@ addr 79)
    and with invariants
      ((Word32) ('r4')) (@ addr 211)
      ((Word32) ('r0')) (@ addr 211)
      ((Word32) ('r13')) (@ addr 211)
      ((Word32) ('r10')) (@ addr 211)
      ((Word32) ('r9')) (@ addr 211)
      ((Word32) ('r6')) (@ addr 211)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 211)
      ((Word32) ('r11')) (@ addr 211)
      ((Word32) ('r5')) (@ addr 211)
      ((Word32) ('r7')) (@ addr 211)
      ((Word32) ('ret')) (@ addr 211)
      ((Word32) ('r1')) (@ addr 211)
      ((Word32) ('r2')) (@ addr 211)
      ((Bool) (ROData('mem'))) (@ addr 211)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 211)
      ((Word32) (('loop#72#count' + ((0 - '#seq-visits') * 1)))) (@ addr 79)
      ((Word32) ('pd___ptr_to_struct_pde_C#v')) (@ addr 79)
      ((Word32) ('find_ret___struct_findPDForASID_ret_C#v.pd_C')) (@ addr 79)
      ((Word32) ('page_size___unsigned_long#v')) (@ addr 79)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 79)
      ((Word32) ('asid___unsigned_long#v')) (@ addr 79)
      ((Word32[50]) ('GhostAssertions')) (@ addr 79)
      ((Word32) ('ret__struct_pde_C#v.words_C.0')) (@ addr 79)
      ((Word32) ('vptr___unsigned_long#v')) (@ addr 79)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 211 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 79 is in {0 ..< 1}
    .. proven.
Step 4: 
  prove visits to 180 related to visits to 33
    with equalities
      ((Mem) ('mem')) (@ addr 180)
      = ((Mem) ('Mem')) (@ addr 33)
    and with invariants
      ((Word32) ('r4')) (@ addr 180)
      ((Word32) ('r0')) (@ addr 180)
      ((Word32) ('r13')) (@ addr 180)
      ((Word32) ('r10')) (@ addr 180)
      ((Word32) ('r9')) (@ addr 180)
      ((Word32) ('r6')) (@ addr 180)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 180)
      ((Word32) ('r11')) (@ addr 180)
      ((Word32) ('r5')) (@ addr 180)
      ((Word32) ('r7')) (@ addr 180)
      ((Word32) ('ret')) (@ addr 180)
      ((Word32) ('r1')) (@ addr 180)
      ((Word32) ('r2')) (@ addr 180)
      ((Bool) (ROData('mem'))) (@ addr 180)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 180)
      ((Word32) (('loop#26#count' + ((0 - '#seq-visits') * 1)))) (@ addr 33)
      ((Word32) ('ret__struct_pte_C#v.words_C.0')) (@ addr 33)
      ((Word32) ('find_ret___struct_findPDForASID_ret_C#v.pd_C')) (@ addr 33)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 33)
      ((Word32) ('page_size___unsigned_long#v')) (@ addr 33)
      ((Word32) ('lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C')) (@ addr 33)
      ((Word32) ('asid___unsigned_long#v')) (@ addr 33)
      ((Word32[50]) ('GhostAssertions')) (@ addr 33)
      ((Word32) ('vptr___unsigned_long#v')) (@ addr 33)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 180 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 33 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 180 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 33 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 211 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 79 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (unmapPage (ASM) <= Kernel_C.unmapPage (C)), time taken: 563.62s
Testing Function pair Pairing (loadCapTransfer (ASM) <= Kernel_C.loadCapTransfer (C))
  (function pairing 253 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (loadCapTransfer (ASM) <= Kernel_C.loadCapTransfer (C)), time taken: 0.68s
Testing Function pair Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C))
  (function pairing 254 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 692, in find_split_loop
    i_opts, j_opts, node_restrs = node_restrs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1233, in find_split
    res = split_search (head, knowledge)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1154, in split_search
    knowledge.eqs_add_model (eqs)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 306, in eqs_add_model
    assert_progress = assert_progress)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 284, in hyps_add_model
    {}, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C)), time taken: 88.53s
Testing Function pair Pairing (cteInsert (ASM) <= Kernel_C.cteInsert (C))
  (function pairing 255 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cteInsert (ASM) <= Kernel_C.cteInsert (C)), time taken: 34.47s
Testing Function pair Pairing (memzero (ASM) <= Kernel_C.memzero (C))
  (function pairing 256 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [20, 10]
  (in problem)
Now doing proof search in 20 init case in problem.
Now doing proof search in 20 loop case in problem.
ProofNode ('Split', ((20, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (10, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'p___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (20, ('Number', (0, 3))), (ProofNode ('Restr', (10, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (20, ('Offset', (0, 3))), (ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 20 related to visits to 10
    with equalities
      ((Mem) ('mem')) (@ addr 20)
      = ((Mem) ('Mem')) (@ addr 10)
    and with invariants
      ((Word32) ('r7')) (@ addr 20)
      ((Word32) ('r4')) (@ addr 20)
      ((Word32) ('r8')) (@ addr 20)
      ((Word32) ('r14')) (@ addr 20)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 20)
      ((Word32) ('r5')) (@ addr 20)
      ((Word32) ('r0')) (@ addr 20)
      ((Word32) ('r9')) (@ addr 20)
      ((Word32) ('ret')) (@ addr 20)
      ((Word32) ('r2')) (@ addr 20)
      ((Word32) ('r11')) (@ addr 20)
      ((Word32) ('r1')) (@ addr 20)
      ((Word32) ('r13')) (@ addr 20)
      ((Word32) ('r10')) (@ addr 20)
      ((Bool) (ROData('mem'))) (@ addr 20)
      ((Word32) ('r6')) (@ addr 20)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 20)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 10)
      ((Word32) (('n___unsigned_long#v' - ((0 - '#seq-visits') * WordCast(4))))) (@ addr 10)
      ((Word32[50]) ('GhostAssertions')) (@ addr 10)
      ((Word32) (('p___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 4)))) (@ addr 10)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 20 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 10 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 20 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 10 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (memzero (ASM) <= Kernel_C.memzero (C)), time taken: 27.63s
Testing Function pair Pairing (deletingIRQHandler (ASM) <= Kernel_C.deletingIRQHandler (C))
  (function pairing 257 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (deletingIRQHandler (ASM) <= Kernel_C.deletingIRQHandler (C)), time taken: 0.53s
Testing Function pair Pairing (decodeSetIPCBuffer (ASM) <= Kernel_C.decodeSetIPCBuffer (C))
  (function pairing 258 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeSetIPCBuffer (ASM) <= Kernel_C.decodeSetIPCBuffer (C)), time taken: 132.03s
Testing Function pair Pairing (Arch_createObject (ASM) <= Kernel_C.Arch_createObject (C))
  (function pairing 259 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_createObject (ASM) <= Kernel_C.Arch_createObject (C)), time taken: 14.46s
Testing Function pair Pairing (timerTick (ASM) <= Kernel_C.timerTick (C))
  (function pairing 260 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (timerTick (ASM) <= Kernel_C.timerTick (C)), time taken: 7.78s
Testing Function pair Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C))
  (function pairing 261 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1840, in default_searcher
    (kind, split) = find_split_loop (p, n, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 678, in find_split_loop
    nec = get_necessary_split_opts (p, head, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 792, in get_necessary_split_opts
    for v in seq_eqs:
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 909, in <genexpr>
    for m in [get_model (n, offs)]
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 900, in get_model
    res = rep.test_hyp_whyps (eq, hyps + ex_hyps, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/rep_graph.py", line 1096, in test_hyp_whyps
    {}, model = model)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1326, in parallel_test_hyps
    (res, k) = self.parallel_check_hyps (hyps, env, model)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C)), time taken: 9.04s
Testing Function pair Pairing (setThreadState (ASM) <= Kernel_C.setThreadState (C))
  (function pairing 262 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setThreadState (ASM) <= Kernel_C.setThreadState (C)), time taken: 2.34s
Testing Function pair Pairing (invokeIRQHandler_ClearIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_ClearIRQHandler (C))
  (function pairing 263 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeIRQHandler_ClearIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_ClearIRQHandler (C)), time taken: 0.53s
Testing Function pair Pairing (invokeCNodeInsert (ASM) <= Kernel_C.invokeCNodeInsert (C))
  (function pairing 264 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeCNodeInsert (ASM) <= Kernel_C.invokeCNodeInsert (C)), time taken: 0.55s
Testing Function pair Pairing (invalidateCacheRange_I (ASM) <= Kernel_C.invalidateCacheRange_I (C))
  (function pairing 265 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [33, 2]
  (in problem)
Now doing proof search in 33 init case in problem.
Now doing proof search in 33 loop case in problem.
ProofNode ('Split', ((33, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (2, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (33, ('Number', (0, 3))), (ProofNode ('Restr', (2, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (33, ('Offset', (0, 3))), (ProofNode ('Restr', (2, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 33 related to visits to 2
    with equalities
      ((Mem) ('mem')) (@ addr 33)
      = ((Mem) ('Mem')) (@ addr 2)
    and with invariants
      ((Word32) ('r21')) (@ addr 33)
      ((Word32) ('r4')) (@ addr 33)
      ((Word32) ('r27')) (@ addr 33)
      ((Word32) ('r17')) (@ addr 33)
      ((Word32) ('r0')) (@ addr 33)
      ((Word32) ('r23')) (@ addr 33)
      ((Word32) ('r13')) (@ addr 33)
      ((Word32) ('r10')) (@ addr 33)
      ((Word32) ('r28')) (@ addr 33)
      ((Word32) ('r19')) (@ addr 33)
      ((Word32) ('r16')) (@ addr 33)
      ((Word64) ('clock')) (@ addr 33)
      ((Word32) ('r12')) (@ addr 33)
      ((Word32) ('r9')) (@ addr 33)
      ((Word32) ('r6')) (@ addr 33)
      ((Word32) ('r7')) (@ addr 33)
      ((Word32) ('r31')) (@ addr 33)
      ((Word32) ('r25')) (@ addr 33)
      ((Word32) ('r24')) (@ addr 33)
      ((Word32) ('r8')) (@ addr 33)
      ((Word32) ('r29')) (@ addr 33)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 33)
      ((Word32) ('r18')) (@ addr 33)
      ((Word32) ('r20')) (@ addr 33)
      ((Word32) ('r30')) (@ addr 33)
      ((Word32) ('r14')) (@ addr 33)
      ((Word32) ('r15')) (@ addr 33)
      ((Word32) ('mode')) (@ addr 33)
      ((Word32) ('r11')) (@ addr 33)
      ((Word32) ('r5')) (@ addr 33)
      ((Word32) ('ret')) (@ addr 33)
      ((Word32) ('r26')) (@ addr 33)
      ((Word32) ('r1')) (@ addr 33)
      ((Word32) ('r2')) (@ addr 33)
      ((Bool) (ROData('mem'))) (@ addr 33)
      ((Word32) ('r22')) (@ addr 33)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 33)
      ((Word32) ('end___unsigned_long#v')) (@ addr 2)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 2)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 2)
      ((Word32) ('start___unsigned_long#v')) (@ addr 2)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 2)
      ((Word32[50]) ('GhostAssertions')) (@ addr 2)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 33 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 2 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 33 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 2 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invalidateCacheRange_I (ASM) <= Kernel_C.invalidateCacheRange_I (C)), time taken: 48.26s
Testing Function pair Pairing (flushPage (ASM) <= Kernel_C.flushPage (C))
  (function pairing 266 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (flushPage (ASM) <= Kernel_C.flushPage (C)), time taken: 2.28s
Testing Function pair Pairing (decodeDomainInvocation (ASM) <= Kernel_C.decodeDomainInvocation (C))
  (function pairing 267 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeDomainInvocation (ASM) <= Kernel_C.decodeDomainInvocation (C)), time taken: 12.83s
Testing Function pair Pairing (findFreeHWASID (ASM) <= Kernel_C.findFreeHWASID (C))
  (function pairing 268 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [35, 23]
  (in problem)
Now doing proof search in 35 init case in problem.
Now doing proof search in 35 loop case in problem.
ProofNode ('Split', ((35, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (23, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'hw_asid_offset___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#17#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (35, ('Number', (0, 3))), (ProofNode ('Restr', (23, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (35, ('Offset', (0, 3))), (ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 35 related to visits to 23
    with equalities
    and with invariants
      ((Word32) ('r21')) (@ addr 35)
      ((Word32) ('r4')) (@ addr 35)
      ((Word32) ('r27')) (@ addr 35)
      ((Word32) ('r17')) (@ addr 35)
      ((Word32) ('r23')) (@ addr 35)
      ((Word32) ('r13')) (@ addr 35)
      ((Word32) ('r10')) (@ addr 35)
      ((Word32) ('r28')) (@ addr 35)
      ((Word32) ('r19')) (@ addr 35)
      ((Word32) ('r16')) (@ addr 35)
      ((Word64) ('clock')) (@ addr 35)
      ((Word32) ('r12')) (@ addr 35)
      ((Word32) ('r9')) (@ addr 35)
      ((Word32) ('r6')) (@ addr 35)
      ((Word32) ('r7')) (@ addr 35)
      ((Word32) ('r31')) (@ addr 35)
      ((Word32) ('r25')) (@ addr 35)
      ((Word32) ('r24')) (@ addr 35)
      ((Word32) ('r8')) (@ addr 35)
      ((Word32) ('r29')) (@ addr 35)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 35)
      ((Word32) ('r18')) (@ addr 35)
      ((Word32) ('r20')) (@ addr 35)
      ((Word32) ('r30')) (@ addr 35)
      ((Word32) ('r14')) (@ addr 35)
      ((Word32) ('r15')) (@ addr 35)
      ((Word32) ('mode')) (@ addr 35)
      ((Word32) ('r11')) (@ addr 35)
      ((Word32) ('r5')) (@ addr 35)
      ((Word32) ('ret')) (@ addr 35)
      ((Word32) ('r26')) (@ addr 35)
      ((Word32) ('r1')) (@ addr 35)
      ((Mem) ('mem')) (@ addr 35)
      ((Word32) ('r22')) (@ addr 35)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 35)
      ((Word32) (('hw_asid_offset___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 23)
      ((Mem) ('Mem')) (@ addr 23)
      ((Word32[50]) ('GhostAssertions')) (@ addr 23)
      ((Word32) (('loop#17#count' + ((0 - '#seq-visits') * 1)))) (@ addr 23)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 35 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 23 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 35 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 23 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (findFreeHWASID (ASM) <= Kernel_C.findFreeHWASID (C)), time taken: 33.04s
Testing Function pair Pairing (doFlush (ASM) <= Kernel_C.doFlush (C))
  (function pairing 269 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (doFlush (ASM) <= Kernel_C.doFlush (C)), time taken: 11.16s
Testing Function pair Pairing (invokeUntyped_Retype (ASM) <= Kernel_C.invokeUntyped_Retype (C))
  (function pairing 270 of 282)
 .. built problem, finding proof
Decided to case split at (40, 'ASM')
  (in problem)
Now doing proof search in true case (40 visited) in problem.
Discovered a loop relation for split points [138, 190]
  (in true case (40 visited) in problem)
Now doing proof search in 138 init case in true case (40 visited) in problem.
Now doing proof search in 138 loop case in true case (40 visited) in problem.
Now doing proof search in false case (40 not visited) in problem.
Decided to case split at (41, 'ASM')
  (in false case (40 not visited) in problem)
Now doing proof search in true case (41 visited) in false case (40 not visited) in problem.
Discovered that points [175 (loop head)] can be bounded
  (in true case (41 visited) in false case (40 not visited) in problem)
Now doing proof search in false case (41 not visited) in false case (40 not visited) in problem.
Discovered that points [175 (loop head)] can be bounded
  (in false case (41 not visited) in false case (40 not visited) in problem)
Discovered that points [138 (loop head)] can be bounded
  (in false case (41 not visited) in false case (40 not visited) in problem)
ProofNode ('CaseSplit', (40, 'ASM'), (ProofNode ('Restr', (40, ('Number', (1, 2))), (ProofNode ('Split', ((138, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967040)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967040)])]), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (190, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'userSize___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'chunk___int#v'), Expr ('Var', Type ('Word', 32), name = 'destSlots___struct_slot_range_C#v.offset_C'), Expr ('Var', Type ('Word', 32), name = 'prev_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'offset___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Var', Type ('Word', 32), name = 'chunk___int#v')])])])]), Expr ('Var', Type ('Word', 32), name = 'destSlots___struct_slot_range_C#v.length_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'newType___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'regionBase___ptr_to_void#v'), Expr ('Var', Type ('Word', 32), name = 'destSlots___struct_slot_range_C#v.cnode_C'), Expr ('Var', Type ('Word', 32), name = 'prev_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'regionBase___ptr_to_void#v.1'), Expr ('Var', Type ('Word', 32), name = 'retypeBase___ptr_to_void#v'), Expr ('Var', Type ('Word', 32), name = 'srcSlot___ptr_to_struct_cte_C#v'), Expr ('Var', Type ('Word', 32), name = 'srcSlot___ptr_to_struct_cte_C#v.1'), Expr ('Var', Type ('Word', 32), name = 'deviceMemory___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (138, ('Number', (0, 3))), (ProofNode ('Restr', (190, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (138, ('Offset', (0, 3))), (ProofNode ('Restr', (190, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)), ProofNode ('Restr', (40, ('Number', (0, 1))), (ProofNode ('Restr', (193, ('Number', (0, 1))), (ProofNode ('CaseSplit', (41, 'ASM'), (ProofNode ('Restr', (41, ('Number', (1, 2))), (ProofNode ('Restr', (175, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (41, ('Number', (0, 1))), (ProofNode ('Restr', (173, ('Number', (0, 1))), (ProofNode ('Restr', (175, ('Number', (0, 1))), (ProofNode ('Restr', (138, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 40 is visited
Step 2: case in (1) where 40 is visited
  Prove the number of visits to 40 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove visits to 138 related to visits to 190
    with equalities
      ((Mem) ('mem')) (@ addr 138)
      = ((Mem) ('Mem.1')) (@ addr 190)
    and with invariants
      ((Word32) ('r4')) (@ addr 138)
      ((Word32) ('r13')) (@ addr 138)
      ((Word32) ('r10')) (@ addr 138)
      ((Word32) ('r9')) (@ addr 138)
      ((Word32) (('r6' + ((0 - '#seq-visits') * 4294967040)))) (@ addr 138)
      ((Word32) (('r7' + ((0 - '#seq-visits') * 4294967040)))) (@ addr 138)
      ((Word32) ('r8')) (@ addr 138)
      ((Word32) ('r5')) (@ addr 138)
      ((Word32) ('ret')) (@ addr 138)
      ((Word32) ('r11')) (@ addr 138)
      ((Bool) (ROData('mem'))) (@ addr 138)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 138)
      ((Word32) ('userSize___unsigned_long#v')) (@ addr 190)
      ((Word32) ('chunk___int#v')) (@ addr 190)
      ((Word32) ('destSlots___struct_slot_range_C#v.offset_C')) (@ addr 190)
      ((Word32) ('prev_cap___struct_cap_C#v.words_C.1')) (@ addr 190)
      ((Word32) (('offset___unsigned_long#v' - ((0 - '#seq-visits') * ShiftLeft(1, WordCast('chunk___int#v')))))) (@ addr 190)
      ((Word32) ('destSlots___struct_slot_range_C#v.length_C')) (@ addr 190)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 190)
      ((Word32) ('newType___unsigned_long#v')) (@ addr 190)
      ((Word32) ('regionBase___ptr_to_void#v')) (@ addr 190)
      ((Word32) ('destSlots___struct_slot_range_C#v.cnode_C')) (@ addr 190)
      ((Word32) ('prev_cap___struct_cap_C#v.words_C.0')) (@ addr 190)
      ((Word32) ('regionBase___ptr_to_void#v.1')) (@ addr 190)
      ((Word32) ('retypeBase___ptr_to_void#v')) (@ addr 190)
      ((Word32) ('srcSlot___ptr_to_struct_cte_C#v')) (@ addr 190)
      ((Word32) ('srcSlot___ptr_to_struct_cte_C#v.1')) (@ addr 190)
      ((Word32) ('deviceMemory___unsigned_long#v')) (@ addr 190)
    .. proven.
Step 4: case in (3) where the length of the sequence < 2
  Prove the number of visits to 138 is in {0 ..< 3}
    .. proven.
Step 5: 
  Prove the number of visits to 190 is in {0 ..< 3}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Step 7: case in (3) where the length of the sequence is i + 2
  Prove the number of visits to 138 is in {i + 0 ..< i + 3}
    .. proven.
Step 8: 
  Prove the number of visits to 190 is in {i + 0 ..< i + 3}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (1) where 40 is not visited
  Prove the number of visits to 40 is in {0 ..< 1}
    .. proven.
Step 11: 
  Prove the number of visits to 193 is in {0 ..< 1}
    .. proven.
Step 12: 
  case split on whether 41 is visited
Step 13: case in (12) where 41 is visited
  Prove the number of visits to 41 is in {1 ..< 2}
    .. proven.
Step 14: 
  Prove the number of visits to 175 is in {0 ..< 1}
    .. proven.
Step 15: 
  prove all verification conditions
    .. proven.
Step 16: case in (12) where 41 is not visited
  Prove the number of visits to 41 is in {0 ..< 1}
    .. proven.
Step 17: 
  Prove the number of visits to 173 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 175 is in {0 ..< 1}
    .. proven.
Step 19: 
  Prove the number of visits to 138 is in {0 ..< 1}
    .. proven.
Step 20: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (invokeUntyped_Retype (ASM) <= Kernel_C.invokeUntyped_Retype (C)), time taken: 1126.47s
Testing Function pair Pairing (Arch_performTransfer (ASM) <= Kernel_C.Arch_performTransfer (C))
  (function pairing 271 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_performTransfer (ASM) <= Kernel_C.Arch_performTransfer (C)), time taken: 0.21s
Testing Function pair Pairing (Arch_decodeTransfer (ASM) <= Kernel_C.Arch_decodeTransfer (C))
  (function pairing 272 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_decodeTransfer (ASM) <= Kernel_C.Arch_decodeTransfer (C)), time taken: 0.20s
Testing Function pair Pairing (cancelSignal (ASM) <= Kernel_C.cancelSignal (C))
  (function pairing 273 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cancelSignal (ASM) <= Kernel_C.cancelSignal (C)), time taken: 11.78s
Testing Function pair Pairing (cleanCacheRange_PoU (ASM) <= Kernel_C.cleanCacheRange_PoU (C))
  (function pairing 274 of 282)
 .. built problem, finding proof
Discovered a loop relation for split points [17, 2]
  (in problem)
Now doing proof search in 17 init case in problem.
Now doing proof search in 17 loop case in problem.
ProofNode ('Split', ((17, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (2, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (17, ('Number', (0, 3))), (ProofNode ('Restr', (2, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (17, ('Offset', (0, 3))), (ProofNode ('Restr', (2, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 17 related to visits to 2
    with equalities
      ((Mem) ('mem')) (@ addr 17)
      = ((Mem) ('Mem')) (@ addr 2)
    and with invariants
      ((Word32) ('r21')) (@ addr 17)
      ((Word32) ('r4')) (@ addr 17)
      ((Word32) ('r27')) (@ addr 17)
      ((Word32) ('r17')) (@ addr 17)
      ((Word32) ('r0')) (@ addr 17)
      ((Word32) ('r23')) (@ addr 17)
      ((Word32) ('r13')) (@ addr 17)
      ((Word32) ('r10')) (@ addr 17)
      ((Word32) ('r28')) (@ addr 17)
      ((Word32) ('r19')) (@ addr 17)
      ((Word32) ('r16')) (@ addr 17)
      ((Word64) ('clock')) (@ addr 17)
      ((Word32) ('r12')) (@ addr 17)
      ((Word32) ('r9')) (@ addr 17)
      ((Word32) ('r6')) (@ addr 17)
      ((Word32) ('r7')) (@ addr 17)
      ((Word32) ('r31')) (@ addr 17)
      ((Word32) ('r25')) (@ addr 17)
      ((Word32) ('r24')) (@ addr 17)
      ((Word32) ('r8')) (@ addr 17)
      ((Word32) ('r29')) (@ addr 17)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 17)
      ((Word32) ('r18')) (@ addr 17)
      ((Word32) ('r20')) (@ addr 17)
      ((Word32) ('r30')) (@ addr 17)
      ((Word32) ('r14')) (@ addr 17)
      ((Word32) ('r15')) (@ addr 17)
      ((Word32) ('mode')) (@ addr 17)
      ((Word32) ('r11')) (@ addr 17)
      ((Word32) ('r5')) (@ addr 17)
      ((Word32) ('ret')) (@ addr 17)
      ((Word32) ('r26')) (@ addr 17)
      ((Word32) ('r1')) (@ addr 17)
      ((Word32) ('r2')) (@ addr 17)
      ((Bool) (ROData('mem'))) (@ addr 17)
      ((Word32) ('r22')) (@ addr 17)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 17)
      ((Word32) ('end___unsigned_long#v')) (@ addr 2)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 2)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 2)
      ((Word32) ('start___unsigned_long#v')) (@ addr 2)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 2)
      ((Word32[50]) ('GhostAssertions')) (@ addr 2)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 17 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 2 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 17 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 2 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (cleanCacheRange_PoU (ASM) <= Kernel_C.cleanCacheRange_PoU (C)), time taken: 58.85s
Testing Function pair Pairing (suspend (ASM) <= Kernel_C.suspend (C))
  (function pairing 275 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (suspend (ASM) <= Kernel_C.suspend (C)), time taken: 3.07s
Testing Function pair Pairing (makeUserPDE (ASM) <= Kernel_C.makeUserPDE (C))
  (function pairing 276 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (makeUserPDE (ASM) <= Kernel_C.makeUserPDE (C)), time taken: 4.70s
Testing Function pair Pairing (setupReplyMaster (ASM) <= Kernel_C.setupReplyMaster (C))
  (function pairing 277 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setupReplyMaster (ASM) <= Kernel_C.setupReplyMaster (C)), time taken: 1.03s
Testing Function pair Pairing (decodeSetSchedParams (ASM) <= Kernel_C.decodeSetSchedParams (C))
  (function pairing 278 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (decodeSetSchedParams (ASM) <= Kernel_C.decodeSetSchedParams (C)), time taken: 189.42s
Testing Function pair Pairing (Arch_handleFaultReply (ASM) <= Kernel_C.Arch_handleFaultReply (C))
  (function pairing 279 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (Arch_handleFaultReply (ASM) <= Kernel_C.Arch_handleFaultReply (C)), time taken: 0.25s
Testing Function pair Pairing (setNextPC (ASM) <= Kernel_C.setNextPC (C))
  (function pairing 280 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (setNextPC (ASM) <= Kernel_C.setNextPC (C)), time taken: 0.43s
Testing Function pair Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C))
  (function pairing 281 of 282)
 .. built problem, finding proof
Traceback (most recent call last):
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/graph-refine.py", line 69, in toplevel_check
    proof = search.build_proof (p)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 56, in build_proof
    proof = build_proof_rec (default_searcher, p, (), list (init_hyps))
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1701, in build_proof_rec
    (kind, details) = searcher (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 1801, in default_searcher
    res = init_proof_case_split (p, restrs, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 161, in init_proof_case_split
    ps = init_case_splits (p, hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 148, in init_case_splits
    pc_ids = knowledge.classify_vs ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 227, in classify_vs
    self.hyps_add_model (hyps)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/search.py", line 211, in hyps_add_model
    {}, model = m)
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1300, in parallel_check_hyps
    ((nm, strat, k), _, res) = self.wait_parallel_solver ()
  File "/nix/store/b1d0dhfk83ravfjf7hhzpp4kynmmkyh1-source/solver.py", line 1247, in wait_parallel_solver
    assert self.parallel_solvers
AssertionError
Result ProofEXCEPT for pair Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C)), time taken: 24.06s
Testing Function pair Pairing (get_avail_p_regs (ASM) <= Kernel_C.get_avail_p_regs (C))
  (function pairing 282 of 282)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Result True for pair Pairing (get_avail_p_regs (ASM) <= Kernel_C.get_avail_p_regs (C)), time taken: 0.18s
Results: [('Pairing (emptySlot (ASM) <= Kernel_C.emptySlot (C))', 'True'), ('Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))', 'ProblemAbort'), ('Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C))', 'ProofEXCEPT'), ('Pairing (getRestartPC (ASM) <= Kernel_C.getRestartPC (C))', 'True'), ('Pairing (maskVMRights (ASM) <= Kernel_C.maskVMRights (C))', 'True'), ('Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C))', 'ProblemAbort'), ('Pairing (isMDBParentOf (ASM) <= Kernel_C.isMDBParentOf (C))', 'True'), ('Pairing (lookupCapAndSlot (ASM) <= Kernel_C.lookupCapAndSlot (C))', 'True'), ('Pairing (deletedIRQHandler (ASM) <= Kernel_C.deletedIRQHandler (C))', 'True'), ('Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C))', 'ProofEXCEPT'), ('Pairing (Arch_sameRegionAs (ASM) <= Kernel_C.Arch_sameRegionAs (C))', 'True'), ('Pairing (lookupSlot (ASM) <= Kernel_C.lookupSlot (C))', 'True'), ('Pairing (handleVMFault (ASM) <= Kernel_C.handleVMFault (C))', 'True'), ('Pairing (initIRQController (ASM) <= Kernel_C.initIRQController (C))', 'True'), ('Pairing (Arch_updateCapData (ASM) <= Kernel_C.Arch_updateCapData (C))', 'True'), ('Pairing (decodeSetPriority (ASM) <= Kernel_C.decodeSetPriority (C))', 'True'), ('Pairing (scheduleTCB (ASM) <= Kernel_C.scheduleTCB (C))', 'True'), ('Pairing (calculate_extra_bi_size_bits (ASM) <= Kernel_C.calculate_extra_bi_size_bits (C))', 'True'), ('Pairing (getReceiveSlots (ASM) <= Kernel_C.getReceiveSlots (C))', 'True'), ('Pairing (sameObjectAs (ASM) <= Kernel_C.sameObjectAs (C))', 'True'), ('Pairing (Arch_decodeInvocation (ASM) <= Kernel_C.Arch_decodeInvocation (C))', 'True'), ('Pairing (chooseThread (ASM) <= Kernel_C.chooseThread (C))', 'True'), ('Pairing (deleteCallerCap (ASM) <= Kernel_C.deleteCallerCap (C))', 'True'), ('Pairing (completeSignal (ASM) <= Kernel_C.completeSignal (C))', 'True'), ('Pairing (performInvocation_Notification (ASM) <= Kernel_C.performInvocation_Notification (C))', 'True'), ('Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))', 'ProblemAbort'), ('Pairing (get_num_avail_p_regs (ASM) <= Kernel_C.get_num_avail_p_regs (C))', 'True'), ('Pairing (write_it_asid_pool (ASM) <= Kernel_C.write_it_asid_pool (C))', 'True'), ('Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C))', 'ProofEXCEPT'), ('Pairing (bindNotification (ASM) <= Kernel_C.bindNotification (C))', 'True'), ("Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C))", 'None'), ('Pairing (idle_thread (ASM) <= Kernel_C.idle_thread (C))', 'True'), ('Pairing (setIRQState (ASM) <= Kernel_C.setIRQState (C))', 'True'), ('Pairing (doIPCTransfer (ASM) <= Kernel_C.doIPCTransfer (C))', 'True'), ('Pairing (initL2Cache (ASM) <= Kernel_C.initL2Cache (C))', 'True'), ('Pairing (decodeInvocation (ASM) <= Kernel_C.decodeInvocation (C))', 'True'), ('Pairing (create_idle_thread (ASM) <= Kernel_C.create_idle_thread (C))', 'True'), ('Pairing (handleRecv (ASM) <= Kernel_C.handleRecv (C))', 'True'), ('Pairing (unbindNotification (ASM) <= Kernel_C.unbindNotification (C))', 'True'), ('Pairing (arm_errata (ASM) <= Kernel_C.arm_errata (C))', 'True'), ('Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))', 'ProblemAbort'), ('Pairing (invokeTCB_CopyRegisters (ASM) <= Kernel_C.invokeTCB_CopyRegisters (C))', 'True'), ('Pairing (invokeIRQControl (ASM) <= Kernel_C.invokeIRQControl (C))', 'True'), ('Pairing (flushSpace (ASM) <= Kernel_C.flushSpace (C))', 'True'), ('Pairing (cleanCacheRange_RAM (ASM) <= Kernel_C.cleanCacheRange_RAM (C))', 'True'), ('Pairing (invokeIRQHandler_AckIRQ (ASM) <= Kernel_C.invokeIRQHandler_AckIRQ (C))', 'True'), ('Pairing (handleInterrupt (ASM) <= Kernel_C.handleInterrupt (C))', 'True'), ('Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C))', 'ProofEXCEPT'), ('Pairing (decodeTCBInvocation (ASM) <= Kernel_C.decodeTCBInvocation (C))', 'True'), ('Pairing (map_kernel_devices (ASM) <= Kernel_C.map_kernel_devices (C))', 'True'), ('Pairing (Arch_deriveCap (ASM) <= Kernel_C.Arch_deriveCap (C))', 'True'), ('Pairing (getExtraCPtr (ASM) <= Kernel_C.getExtraCPtr (C))', 'True'), ('Pairing (deleteASID (ASM) <= Kernel_C.deleteASID (C))', 'True'), ('Pairing (create_kernel_untypeds (ASM) <= Kernel_C.create_kernel_untypeds (C))', 'ProofEXCEPT'), ('Pairing (create_domain_cap (ASM) <= Kernel_C.create_domain_cap (C))', 'True'), ('Pairing (invalidateTLBByASID (ASM) <= Kernel_C.invalidateTLBByASID (C))', 'True'), ('Pairing (schedule (ASM) <= Kernel_C.schedule (C))', 'True'), ('Pairing (isIOSpaceFrameCap (ASM) <= Kernel_C.isIOSpaceFrameCap (C))', 'True'), ('Pairing (decodeCNodeInvocation (ASM) <= Kernel_C.decodeCNodeInvocation (C))', 'True'), ('Pairing (lookupExtraCaps (ASM) <= Kernel_C.lookupExtraCaps (C))', 'True'), ('Pairing (memset (ASM) <= Kernel_C.memset (C))', 'ProofEXCEPT'), ("Pairing (l_impl'wfi (ASM) <= r_impl'wfi (C))", 'None'), ('Pairing (invalidateASIDEntry (ASM) <= Kernel_C.invalidateASIDEntry (C))', 'True'), ('Pairing (switchToIdleThread (ASM) <= Kernel_C.switchToIdleThread (C))', 'True'), ('Pairing (arch_clean_invalidate_caches (ASM) <= Kernel_C.arch_clean_invalidate_caches (C))', 'True'), ('Pairing (maybe_alloc_extra_bi (ASM) <= Kernel_C.maybe_alloc_extra_bi (C))', 'True'), ('Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C))', 'True'), ('Pairing (lookupPDSlot (ASM) <= Kernel_C.lookupPDSlot (C))', 'True'), ('Pairing (cleanInvalidateCacheRange_RAM (ASM) <= Kernel_C.cleanInvalidateCacheRange_RAM (C))', 'True'), ('Pairing (invokeCNodeSaveCaller (ASM) <= Kernel_C.invokeCNodeSaveCaller (C))', 'True'), ('Pairing (activateThread (ASM) <= Kernel_C.activateThread (C))', 'True'), ('Pairing (cleanCaches_PoU (ASM) <= Kernel_C.cleanCaches_PoU (C))', 'True'), ('Pairing (Arch_activateIdleThread (ASM) <= Kernel_C.Arch_activateIdleThread (C))', 'True'), ('Pairing (tcbSchedEnqueue (ASM) <= Kernel_C.tcbSchedEnqueue (C))', 'True'), ('Pairing (getObjectSize (ASM) <= Kernel_C.getObjectSize (C))', 'True'), ('Pairing (tcbEPAppend (ASM) <= Kernel_C.tcbEPAppend (C))', 'True'), ('Pairing (Arch_decodeIRQControlInvocation (ASM) <= Kernel_C.Arch_decodeIRQControlInvocation (C))', 'True'), ('Pairing (setExtraBadge (ASM) <= Kernel_C.setExtraBadge (C))', 'True'), ('Pairing (activate_global_pd (ASM) <= Kernel_C.activate_global_pd (C))', 'True'), ('Pairing (decodeSetMCPriority (ASM) <= Kernel_C.decodeSetMCPriority (C))', 'True'), ('Pairing (handleDoubleFault (ASM) <= Kernel_C.handleDoubleFault (C))', 'True'), ('Pairing (decodeTCBConfigure (ASM) <= Kernel_C.decodeTCBConfigure (C))', 'True'), ('Pairing (create_ipcbuf_frame_cap (ASM) <= Kernel_C.create_ipcbuf_frame_cap (C))', 'True'), ('Pairing (arch_clean_invalidate_L1_caches (ASM) <= Kernel_C.arch_clean_invalidate_L1_caches (C))', 'True'), ('Pairing (isFinalCapability (ASM) <= Kernel_C.isFinalCapability (C))', 'True'), ('Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))', 'ProblemAbort'), ('Pairing (map_kernel_frame (ASM) <= Kernel_C.map_kernel_frame (C))', 'True'), ('Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C))', 'ProofEXCEPT'), ('Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C))', 'None'), ('Pairing (setMCPriority (ASM) <= Kernel_C.setMCPriority (C))', 'True'), ('Pairing (Arch_maskCapRights (ASM) <= Kernel_C.Arch_maskCapRights (C))', 'True'), ('Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C))', 'ProofEXCEPT'), ('Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C))', 'ProofEXCEPT'), ('Pairing (invokeTCB_Resume (ASM) <= Kernel_C.invokeTCB_Resume (C))', 'True'), ('Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C))', 'ProblemAbort'), ('Pairing (create_rootserver_objects (ASM) <= Kernel_C.create_rootserver_objects (C))', 'True'), ('Pairing (lookupIPCBuffer (ASM) <= Kernel_C.lookupIPCBuffer (C))', 'True'), ('Pairing (findPDForASID (ASM) <= Kernel_C.findPDForASID (C))', 'True'), ('Pairing (hasCancelSendRights (ASM) <= Kernel_C.hasCancelSendRights (C))', 'True'), ('Pairing (lookupPivotSlot (ASM) <= Kernel_C.lookupPivotSlot (C))', 'True'), ('Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C))', 'ProofEXCEPT'), ('Pairing (lookupTargetSlot (ASM) <= Kernel_C.lookupTargetSlot (C))', 'True'), ('Pairing (alloc_rootserver_obj (ASM) <= Kernel_C.alloc_rootserver_obj (C))', 'True'), ('Pairing (performInvocation_Endpoint (ASM) <= Kernel_C.performInvocation_Endpoint (C))', 'True'), ('Pairing (unbindMaybeNotification (ASM) <= Kernel_C.unbindMaybeNotification (C))', 'True'), ('Pairing (ensureEmptySlot (ASM) <= Kernel_C.ensureEmptySlot (C))', 'True'), ('Pairing (lookupCap (ASM) <= Kernel_C.lookupCap (C))', 'True'), ('Pairing (pageTableMapped (ASM) <= Kernel_C.pageTableMapped (C))', 'True'), ('Pairing (restore_user_context (ASM) <= Kernel_C.restore_user_context (C))', 'None'), ('Pairing (strlcat (ASM) <= Kernel_C.strlcat (C))', 'ProofEXCEPT'), ('Pairing (rescheduleRequired (ASM) <= Kernel_C.rescheduleRequired (C))', 'True'), ('Pairing (capSwapForDelete (ASM) <= Kernel_C.capSwapForDelete (C))', 'True'), ('Pairing (invokeCNodeMove (ASM) <= Kernel_C.invokeCNodeMove (C))', 'True'), ('Pairing (setIRQTrigger (ASM) <= Kernel_C.setIRQTrigger (C))', 'True'), ('Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))', 'ProblemAbort'), ('Pairing (maskCapRights (ASM) <= Kernel_C.maskCapRights (C))', 'True'), ('Pairing (cteDeleteOne (ASM) <= Kernel_C.cteDeleteOne (C))', 'True'), ('Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C))', 'ProofEXCEPT'), ('Pairing (doNormalTransfer (ASM) <= Kernel_C.doNormalTransfer (C))', 'True'), ('Pairing (invokeCNodeRotate (ASM) <= Kernel_C.invokeCNodeRotate (C))', 'True'), ('Pairing (lookupSourceSlot (ASM) <= Kernel_C.lookupSourceSlot (C))', 'True'), ('Pairing (invokeTCB_Suspend (ASM) <= Kernel_C.invokeTCB_Suspend (C))', 'True'), ('Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C))', 'ProofEXCEPT'), ('Pairing (sameRegionAs (ASM) <= Kernel_C.sameRegionAs (C))', 'True'), ('Pairing (invokeTCB_ThreadControl (ASM) <= Kernel_C.invokeTCB_ThreadControl (C))', 'True'), ('Pairing (replyFromKernel_error (ASM) <= Kernel_C.replyFromKernel_error (C))', 'True'), ('Pairing (lockTLBEntryCritical (ASM) <= Kernel_C.lockTLBEntryCritical (C))', 'None'), ('Pairing (Arch_sameObjectAs (ASM) <= Kernel_C.Arch_sameObjectAs (C))', 'True'), ('Pairing (slotCapLongRunningDelete (ASM) <= Kernel_C.slotCapLongRunningDelete (C))', 'True'), ('Pairing (restart (ASM) <= Kernel_C.restart (C))', 'True'), ('Pairing (decodeUnbindNotification (ASM) <= Kernel_C.decodeUnbindNotification (C))', 'True'), ('Pairing (create_mapped_it_frame_cap (ASM) <= Kernel_C.create_mapped_it_frame_cap (C))', 'True'), ('Pairing (possibleSwitchTo (ASM) <= Kernel_C.possibleSwitchTo (C))', 'True'), ('Pairing (handleInvocation (ASM) <= Kernel_C.handleInvocation (C))', 'True'), ('Pairing (memcpy (ASM) <= Kernel_C.memcpy (C))', 'ProofEXCEPT'), ('Pairing (setVMRootForFlush (ASM) <= Kernel_C.setVMRootForFlush (C))', 'True'), ('Pairing (unmapPageTable (ASM) <= Kernel_C.unmapPageTable (C))', 'True'), ('Pairing (Arch_isFrameType (ASM) <= Kernel_C.Arch_isFrameType (C))', 'True'), ('Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C))', 'ProofEXCEPT'), ('Pairing (isValidVTableRoot (ASM) <= Kernel_C.isValidVTableRoot (C))', 'True'), ('Pairing (c_handle_interrupt (ASM) <= Kernel_C.c_handle_interrupt (C))', 'True'), ('Pairing (doFaultTransfer (ASM) <= Kernel_C.doFaultTransfer (C))', 'True'), ('Pairing (flushTable (ASM) <= Kernel_C.flushTable (C))', 'True'), ('Pairing (arch_get_n_paging (ASM) <= Kernel_C.arch_get_n_paging (C))', 'True'), ('Pairing (Arch_getObjectSize (ASM) <= Kernel_C.Arch_getObjectSize (C))', 'True'), ('Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C))', 'ProofEXCEPT'), ("Pairing (l_impl'dsb (ASM) <= r_impl'dsb (C))", 'None'), ('Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C))', 'True'), ('Pairing (initTimer (ASM) <= Kernel_C.initTimer (C))', 'True'), ("Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C))", 'None'), ('Pairing (create_bi_frame_cap (ASM) <= Kernel_C.create_bi_frame_cap (C))', 'True'), ('Pairing (tcbSchedDequeue (ASM) <= Kernel_C.tcbSchedDequeue (C))', 'True'), ('Pairing (setPriority (ASM) <= Kernel_C.setPriority (C))', 'True'), ('Pairing (handleFault (ASM) <= Kernel_C.handleFault (C))', 'True'), ('Pairing (Arch_configureIdleThread (ASM) <= Kernel_C.Arch_configureIdleThread (C))', 'True'), ('Pairing (Arch_finaliseCap (ASM) <= Kernel_C.Arch_finaliseCap (C))', 'True'), ('Pairing (switchToThread (ASM) <= Kernel_C.switchToThread (C))', 'True'), ('Pairing (resolveAddressBits (ASM) <= Kernel_C.resolveAddressBits (C))', 'True'), ('Pairing (create_it_asid_pool (ASM) <= Kernel_C.create_it_asid_pool (C))', 'True'), ('Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C))', 'ProofEXCEPT'), ('Pairing (halt (ASM) <= Kernel_C.halt (C))', 'None'), ('Pairing (sendIPC (ASM) <= Kernel_C.sendIPC (C))', 'True'), ('Pairing (tcbEPDequeue (ASM) <= Kernel_C.tcbEPDequeue (C))', 'True'), ('Pairing (init_core_state (ASM) <= Kernel_C.init_core_state (C))', 'True'), ('Pairing (cleanInvalidateL1Caches (ASM) <= Kernel_C.cleanInvalidateL1Caches (C))', 'True'), ('Pairing (decodeCopyRegisters (ASM) <= Kernel_C.decodeCopyRegisters (C))', 'True'), ('Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C))', 'False'), ('Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C))', 'ProofEXCEPT'), ('Pairing (decodeWriteRegisters (ASM) <= Kernel_C.decodeWriteRegisters (C))', 'True'), ('Pairing (decodeSetSpace (ASM) <= Kernel_C.decodeSetSpace (C))', 'True'), ('Pairing (write_slot (ASM) <= Kernel_C.write_slot (C))', 'True'), ('Pairing (plat_cleanCache (ASM) <= Kernel_C.plat_cleanCache (C))', 'True'), ('Pairing (lockTLBEntry (ASM) <= Kernel_C.lockTLBEntry (C))', 'True'), ('Pairing (invalidateCacheRange_RAM (ASM) <= Kernel_C.invalidateCacheRange_RAM (C))', 'True'), ('Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))', 'ProblemAbort'), ('Pairing (APFromVMRights (ASM) <= Kernel_C.APFromVMRights (C))', 'True'), ('Pairing (handleReply (ASM) <= Kernel_C.handleReply (C))', 'True'), ('Pairing (finaliseCap (ASM) <= Kernel_C.finaliseCap (C))', 'True'), ('Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C))', 'ProofEXCEPT'), ('Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))', 'ProblemAbort'), ('Pairing (preemptionPoint (ASM) <= Kernel_C.preemptionPoint (C))', 'True'), ('Pairing (checkValidIPCBuffer (ASM) <= Kernel_C.checkValidIPCBuffer (C))', 'True'), ('Pairing (insert_region (ASM) <= Kernel_C.insert_region (C))', 'True'), ('Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))', 'ProblemAbort'), ('Pairing (Arch_switchToIdleThread (ASM) <= Kernel_C.Arch_switchToIdleThread (C))', 'True'), ('Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C))', 'ProblemAbort'), ('Pairing (setupCallerCap (ASM) <= Kernel_C.setupCallerCap (C))', 'True'), ('Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C))', 'ProblemAbort'), ('Pairing (lookupPTSlot (ASM) <= Kernel_C.lookupPTSlot (C))', 'True'), ("Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C))", 'None'), ('Pairing (reserve_region (ASM) <= Kernel_C.reserve_region (C))', 'True'), ('Pairing (cancelAllSignals (ASM) <= Kernel_C.cancelAllSignals (C))', 'True'), ('Pairing (decodeReadRegisters (ASM) <= Kernel_C.decodeReadRegisters (C))', 'True'), ('Pairing (handleInterruptEntry (ASM) <= Kernel_C.handleInterruptEntry (C))', 'False'), ('Pairing (invokeTCB_NotificationControl (ASM) <= Kernel_C.invokeTCB_NotificationControl (C))', 'True'), ('Pairing (createObject (ASM) <= Kernel_C.createObject (C))', 'True'), ('Pairing (strnlen (ASM) <= Kernel_C.strnlen (C))', 'True'), ('Pairing (copyGlobalMappings (ASM) <= Kernel_C.copyGlobalMappings (C))', 'True'), ('Pairing (invokeCNodeRevoke (ASM) <= Kernel_C.invokeCNodeRevoke (C))', 'True'), ('Pairing (cteRevoke (ASM) <= Kernel_C.cteRevoke (C))', 'True'), ('Pairing (Arch_prepareThreadDelete (ASM) <= Kernel_C.Arch_prepareThreadDelete (C))', 'True'), ('Pairing (bi_finalise (ASM) <= Kernel_C.bi_finalise (C))', 'True'), ('Pairing (cpu_initLocalIRQController (ASM) <= Kernel_C.cpu_initLocalIRQController (C))', 'True'), ('Pairing (configureIdleThread (ASM) <= Kernel_C.configureIdleThread (C))', 'True'), ('Pairing (provide_cap (ASM) <= Kernel_C.provide_cap (C))', 'True'), ('Pairing (invokeCNodeCancelBadgedSends (ASM) <= Kernel_C.invokeCNodeCancelBadgedSends (C))', 'True'), ('Pairing (ensureNoChildren (ASM) <= Kernel_C.ensureNoChildren (C))', 'True'), ('Pairing (handleVMFaultEvent (ASM) <= Kernel_C.handleVMFaultEvent (C))', 'True'), ('Pairing (cteSwap (ASM) <= Kernel_C.cteSwap (C))', 'True'), ('Pairing (create_initial_thread (ASM) <= Kernel_C.create_initial_thread (C))', 'True'), ('Pairing (replyFromKernel_success_empty (ASM) <= Kernel_C.replyFromKernel_success_empty (C))', 'True'), ('Pairing (insertNewCap (ASM) <= Kernel_C.insertNewCap (C))', 'True'), ('Pairing (scheduleChooseNewThread (ASM) <= Kernel_C.scheduleChooseNewThread (C))', 'True'), ('Pairing (armv_init_user_access (ASM) <= Kernel_C.armv_init_user_access (C))', 'True'), ("Pairing (l_impl'isb (ASM) <= r_impl'isb (C))", 'None'), ('Pairing (cancelAllIPC (ASM) <= Kernel_C.cancelAllIPC (C))', 'True'), ('Pairing (dist_init (ASM) <= Kernel_C.dist_init (C))', 'ProofEXCEPT'), ('Pairing (sendFaultIPC (ASM) <= Kernel_C.sendFaultIPC (C))', 'True'), ('Pairing (tcbSchedAppend (ASM) <= Kernel_C.tcbSchedAppend (C))', 'True'), ('Pairing (handleUnknownSyscall (ASM) <= Kernel_C.handleUnknownSyscall (C))', 'True'), ('Pairing (receiveSignal (ASM) <= Kernel_C.receiveSignal (C))', 'True'), ('Pairing (isIRQActive (ASM) <= Kernel_C.isIRQActive (C))', 'True'), ('Pairing (invokeIRQHandler_SetIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_SetIRQHandler (C))', 'True'), ('Pairing (deriveCap (ASM) <= Kernel_C.deriveCap (C))', 'True'), ('Pairing (cpu_iface_init (ASM) <= Kernel_C.cpu_iface_init (C))', 'True'), ('Pairing (create_device_untypeds (ASM) <= Kernel_C.create_device_untypeds (C))', 'True'), ('Pairing (performInvocation_Reply (ASM) <= Kernel_C.performInvocation_Reply (C))', 'True'), ('Pairing (c_handle_fastpath_reply_recv (ASM) <= Kernel_C.c_handle_fastpath_reply_recv (C))', 'None'), ('Pairing (updateCapData (ASM) <= Kernel_C.updateCapData (C))', 'True'), ('Pairing (decodeBindNotification (ASM) <= Kernel_C.decodeBindNotification (C))', 'True'), ('Pairing (Arch_postModifyRegisters (ASM) <= Kernel_C.Arch_postModifyRegisters (C))', 'True'), ('Pairing (loadHWASID (ASM) <= Kernel_C.loadHWASID (C))', 'True'), ('Pairing (deleteASIDPool (ASM) <= Kernel_C.deleteASIDPool (C))', 'True'), ('Pairing (create_root_cnode (ASM) <= Kernel_C.create_root_cnode (C))', 'True'), ('Pairing (create_unmapped_it_frame_cap (ASM) <= Kernel_C.create_unmapped_it_frame_cap (C))', 'True'), ('Pairing (cteMove (ASM) <= Kernel_C.cteMove (C))', 'True'), ('Pairing (strncmp (ASM) <= Kernel_C.strncmp (C))', 'True'), ('Pairing (handleFaultReply (ASM) <= Kernel_C.handleFaultReply (C))', 'True'), ('Pairing (handleUserLevelFault (ASM) <= Kernel_C.handleUserLevelFault (C))', 'True'), ('Pairing (lookupSlotForCNodeOp (ASM) <= Kernel_C.lookupSlotForCNodeOp (C))', 'True'), ('Pairing (branchFlushRange (ASM) <= Kernel_C.branchFlushRange (C))', 'True'), ('Pairing (setDomain (ASM) <= Kernel_C.setDomain (C))', 'True'), ('Pairing (create_it_address_space (ASM) <= Kernel_C.create_it_address_space (C))', 'True'), ('Pairing (populate_bi_frame (ASM) <= Kernel_C.populate_bi_frame (C))', 'True'), ('Pairing (doNBRecvFailedTransfer (ASM) <= Kernel_C.doNBRecvFailedTransfer (C))', 'True'), ('Pairing (char_to_long (ASM) <= Kernel_C.char_to_long (C))', 'True'), ('Pairing (invokeCNodeDelete (ASM) <= Kernel_C.invokeCNodeDelete (C))', 'True'), ('Pairing (doReplyTransfer (ASM) <= Kernel_C.doReplyTransfer (C))', 'True'), ('Pairing (str_to_long (ASM) <= Kernel_C.str_to_long (C))', 'True'), ('Pairing (getHWASID (ASM) <= Kernel_C.getHWASID (C))', 'True'), ('Pairing (decodeIRQHandlerInvocation (ASM) <= Kernel_C.decodeIRQHandlerInvocation (C))', 'True'), ('Pairing (unmapPage (ASM) <= Kernel_C.unmapPage (C))', 'True'), ('Pairing (loadCapTransfer (ASM) <= Kernel_C.loadCapTransfer (C))', 'True'), ('Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C))', 'ProofEXCEPT'), ('Pairing (cteInsert (ASM) <= Kernel_C.cteInsert (C))', 'True'), ('Pairing (memzero (ASM) <= Kernel_C.memzero (C))', 'True'), ('Pairing (deletingIRQHandler (ASM) <= Kernel_C.deletingIRQHandler (C))', 'True'), ('Pairing (decodeSetIPCBuffer (ASM) <= Kernel_C.decodeSetIPCBuffer (C))', 'True'), ('Pairing (Arch_createObject (ASM) <= Kernel_C.Arch_createObject (C))', 'True'), ('Pairing (timerTick (ASM) <= Kernel_C.timerTick (C))', 'True'), ('Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C))', 'ProofEXCEPT'), ('Pairing (setThreadState (ASM) <= Kernel_C.setThreadState (C))', 'True'), ('Pairing (invokeIRQHandler_ClearIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_ClearIRQHandler (C))', 'True'), ('Pairing (invokeCNodeInsert (ASM) <= Kernel_C.invokeCNodeInsert (C))', 'True'), ('Pairing (invalidateCacheRange_I (ASM) <= Kernel_C.invalidateCacheRange_I (C))', 'True'), ('Pairing (flushPage (ASM) <= Kernel_C.flushPage (C))', 'True'), ('Pairing (decodeDomainInvocation (ASM) <= Kernel_C.decodeDomainInvocation (C))', 'True'), ('Pairing (findFreeHWASID (ASM) <= Kernel_C.findFreeHWASID (C))', 'True'), ('Pairing (doFlush (ASM) <= Kernel_C.doFlush (C))', 'True'), ('Pairing (invokeUntyped_Retype (ASM) <= Kernel_C.invokeUntyped_Retype (C))', 'True'), ('Pairing (Arch_performTransfer (ASM) <= Kernel_C.Arch_performTransfer (C))', 'True'), ('Pairing (Arch_decodeTransfer (ASM) <= Kernel_C.Arch_decodeTransfer (C))', 'True'), ('Pairing (cancelSignal (ASM) <= Kernel_C.cancelSignal (C))', 'True'), ('Pairing (cleanCacheRange_PoU (ASM) <= Kernel_C.cleanCacheRange_PoU (C))', 'True'), ('Pairing (suspend (ASM) <= Kernel_C.suspend (C))', 'True'), ('Pairing (makeUserPDE (ASM) <= Kernel_C.makeUserPDE (C))', 'True'), ('Pairing (setupReplyMaster (ASM) <= Kernel_C.setupReplyMaster (C))', 'True'), ('Pairing (decodeSetSchedParams (ASM) <= Kernel_C.decodeSetSchedParams (C))', 'True'), ('Pairing (Arch_handleFaultReply (ASM) <= Kernel_C.Arch_handleFaultReply (C))', 'True'), ('Pairing (setNextPC (ASM) <= Kernel_C.setNextPC (C))', 'True'), ('Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C))', 'ProofEXCEPT'), ('Pairing (get_avail_p_regs (ASM) <= Kernel_C.get_avail_p_regs (C))', 'True')]
Result summary:
  - 234 proofs checked
  - 23 proofs skipped
  - failures: ['Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C))', 'Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C))', 'Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C))', 'Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C))', 'Pairing (create_kernel_untypeds (ASM) <= Kernel_C.create_kernel_untypeds (C))', 'Pairing (memset (ASM) <= Kernel_C.memset (C))', 'Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C))', 'Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C))', 'Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C))', 'Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C))', 'Pairing (strlcat (ASM) <= Kernel_C.strlcat (C))', 'Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C))', 'Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C))', 'Pairing (memcpy (ASM) <= Kernel_C.memcpy (C))', 'Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C))', 'Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C))', 'Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C))', 'Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C))', 'Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C))', 'Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C))', 'Pairing (handleInterruptEntry (ASM) <= Kernel_C.handleInterruptEntry (C))', 'Pairing (dist_init (ASM) <= Kernel_C.dist_init (C))', 'Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C))', 'Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C))', 'Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C))']

real    921m26.512s
user    2674m50.593s
sys     22m0.677s
warning: you did not specify '--add-root'; the result might be removed by the garbage collector
/nix/store/zlqpg13nb85r8k2lcj24q2la2077w06s-graph-refine-all
