Saving Kernel_C.pdeCheckIfMapped
Saving instruction'dsb_sy_E0011198
Saving Kernel_C.lookupTargetSlot
Saving Kernel_C.fastpath_reply_cap_check
Saving Kernel_C.clean_D_PoU
Saving Kernel_C.reduceZombie
Saving Kernel_C.branchFlush
Saving instruction'dsb_sy_E001112C
Saving instruction'vmsr_fpexc_r3_E000055C
Saving deletedIRQHandler
Saving suspend
Saving Kernel_C.readTPIDRPRW
Saving setMRs_fault
Saving Kernel_C.invalidateTLBByASID
Saving instruction'isb_sy_E00111B8
Saving instruction'isb_sy_E0012A04
Saving write_slot
Saving Kernel_C.get_n_paging
Saving Kernel_C.cap_small_frame_cap_get_capFIsDevice
Saving instruction'mcr_15_0_lr_cr7_cr10_1_E0012000
Saving setNextPC
Saving Kernel_C.setACTLR
Saving Kernel_C.decodeUnbindNotification
Saving Kernel_C.populate_bi_frame
Saving Arch_activateIdleThread
Saving Kernel_C.seL4_Fault_VMFault_get_instructionFault
Saving Kernel_C.cap_notification_cap_new
Saving idle_thread
Saving Kernel_C.handleYield
Saving Kernel_C.removeFromBitmap
Saving isFinalCapability
Saving Kernel_C.invokeUntyped_Retype
Saving Kernel_C.Arch_isFrameType
Saving Kernel_C.fastpath_call
Saving bindNotification
Saving instruction'mcr_15_0_r1_cr7_cr10_2_E0011D78
Saving handleReply
Saving asm_instruction'mrc__p15,_0,_%0,_c0,_c0,_0
Saving Kernel_C.c_handle_vm_fault
Saving Kernel_C.plat_cleanL2Range
Saving Kernel_C.replyFromKernel_success_empty
Saving map_kernel_devices
Saving Kernel_C.ctz64
Saving decodeInvocation
Saving Kernel_C.seL4_Fault_get_seL4_FaultType
Saving Kernel_C.endpoint_ptr_get_epQueue_tail
Saving instruction'mcr_15_0_r3_cr8_cr7_0_E00005A0
Saving Kernel_C.create_it_pd_pts
Saving instruction'mrc_15_2_r2_cr0_cr0_0_E0011EB8
Saving instruction'isb_sy_E0012928
Saving Kernel_C.cap_notification_cap_get_capNtfnCanSend
Saving Kernel_C.mdb_node_get_mdbRevocable
Saving Kernel_C.handleInvocation
Saving Kernel_C.lookupPivotSlot
Saving Kernel_C.doReplyTransfer
Saving Kernel_C.dsb
Saving instruction'dmb_sy_E0012160
Saving Kernel_C.cap_untyped_cap_ptr_set_capFreeIndex
Saving Kernel_C.doNBRecvFailedTransfer
Saving decodeBindNotification
Saving Kernel_C.cap_cnode_cap_get_capCNodeGuardSize
Saving unbindMaybeNotification
Saving Kernel_C.getAIFSR
Saving instruction'dsb_sy_E0002230
Saving Kernel_C.infer_cpu_gic_id
Saving asm_instruction'mrc_p15,_0,_%0,_c0,_c0,_5
Saving Kernel_C.decodeBindNotification
Saving Kernel_C.invokeIRQControl
Saving lookupCap
Saving Kernel_C.Arch_handleFaultReply
Saving Kernel_C.scheduleTCB
Saving decodeARMMMUInvocation
Saving Kernel_C.lookupSlot
Saving instruction'mcr_15_0_r3_cr7_cr11_1_E001215C
Saving Kernel_C.copyMRs
Saving Kernel_C.invalidateTranslationSingleLocal
Saving cleanInvalidate_D_PoC
Saving mode_reserved_region
Saving instruction'isb_sy_E0012A0C
Saving Kernel_C.decodeSetSchedParams
Saving Kernel_C.invokeTCB_Resume
Saving instruction'mcr_15_0_r0_cr8_cr7_1_E0010880
Saving Kernel_C.capSwapForDelete
Saving arm_errata
Saving Kernel_C.create_initial_thread
Saving Kernel_C.wordFromVMRights
Saving instruction'dmb_sy_E001220C
Saving Arch_sameObjectAs
Saving Kernel_C.performPageTableInvocationMap
Saving findPDForASID
Saving resolveAddressBits
Saving Kernel_C.cap_zombie_cap_get_capZombiePtr
Saving Kernel_C.isArchCap
Saving Kernel_C.mdb_node_get_mdbNext
Saving invokeTCB_WriteRegisters
Saving Kernel_C.cap_irq_control_cap_new
Saving instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E0010068
Saving Kernel_C.mdb_node_new
Saving Kernel_C.lookup_fault_guard_mismatch_get_guardFound
Saving replyFromKernel_success_empty
Saving Kernel_C.vm_attributes_get_armParityEnabled
Saving calculate_extra_bi_size_bits
Saving doIPCTransfer
Saving Kernel_C.init_irqs
Saving strlcat
Saving Kernel_C.cap_page_directory_cap_get_capPDMappedASID
Saving instruction'mrc_15_0_r1_cr13_cr0_2_E0010858
Saving finaliseCap
Saving Kernel_C.performPDFlush
Saving Kernel_C.lookup_fault_guard_mismatch_get_bitsLeft
Saving Kernel_C.handleUserLevelFault
Saving Kernel_C.init_freemem
Saving schedule
Saving decodeSetIPCBuffer
Saving Kernel_C.lookup_fault_guard_mismatch_get_bitsFound
Saving Kernel_C.cancelSignal
Saving receiveIPC
Saving instruction'dsb_sy_E00126E8
Saving invalidateCacheRange_I
Saving Kernel_C.cap_cnode_cap_set_capCNodeGuard
Saving Kernel_C.cap_endpoint_cap_get_capCanReceive
Saving asm_instruction'dsb_ishst
Saving Kernel_C.dist_init
Saving flushTable
Saving Kernel_C.emptySlot
Saving Kernel_C.init_plat
Saving arch_clean_invalidate_caches
Saving cpu_initLocalIRQController
Saving cteDeleteOne
Saving Kernel_C.setIRQState
Saving Kernel_C.cap_small_frame_cap_get_capFMappedAddress
Saving l_impl'mcr
Saving lookupCapAndSlot
Saving create_frames_of_region
Saving Kernel_C.cap_zombie_cap_set_capZombieNumber
Saving Kernel_C.pte_ptr_get_pteType
Saving setExtraBadge
Saving activate_kernel_vspace
Saving Kernel_C.seL4_MessageInfo_set_length
Saving Kernel_C.fastpath_restore
Saving asm_instruction'mcr_p15,_0,_%0,_c13,_c0,_4
Saving asm_instruction'mcr_p15,_0,_%0,_c13,_c0,_2
Saving asm_instruction'mcr_p15,_0,_%0,_c13,_c0,_3
Saving Kernel_C.lookupIPCBuffer
Saving instruction'ldr_pc_pc_24_e0010030_arm_vector_table_0x30_E0010010
Saving Kernel_C.cap_endpoint_cap_set_capCanReceive
Saving Kernel_C.decodeSetPriority
Saving arm_prefetch_abort_exception
Saving Kernel_C.Arch_finaliseCap
Saving Kernel_C.Arch_sameRegionAs
Saving provide_cap
Saving Kernel_C.cteDelete
Saving Kernel_C.lockTLBEntry
Saving instruction'mcr_15_0_r1_cr10_cr0_1_E0010884
Saving Kernel_C.writeTPIDRURW
Saving Kernel_C.enableFpuInstInHyp
Saving Kernel_C.cteDeleteOne
Saving isIOSpaceFrameCap
Saving instruction'vmrs_r3_fpexc_E0000554
Saving Kernel_C.performASIDControlInvocation
Saving scheduleChooseNewThread
Saving cleanInvalidateCacheRange_RAM
Saving Kernel_C.char_to_long
Saving handleVMFault
Saving setupReplyMaster
Saving rescheduleRequired
Saving Kernel_C.isIOSpaceFrameCap
Saving Kernel_C.writeTPIDRURO
Saving instruction'dmb_sy_E00195E4
Saving Kernel_C.provide_untyped_cap
Saving instruction'mrc_15_0_r3_cr0_cr1_1_E0011FC4
Saving decodeReadRegisters
Saving Kernel_C.configureIdleThread
Saving Kernel_C.thread_state_get_tsType
Saving Kernel_C.ctz32
Saving instruction'mrc_15_0_sp_cr13_cr0_4_E0010054
Saving Kernel_C.completeSignal
Saving Kernel_C.capCyclicZombie
Saving Arch_maskCapRights
Saving Kernel_C.cap_endpoint_cap_get_capCanGrantReply
Saving setPriority
Saving Kernel_C.cpu_iface_init
Saving instruction'dsb_sy_E00005A4
Saving isCapRevocable
Saving invokeTCB_CopyRegisters
Saving _start
Saving Kernel_C.checkVPAlignment
Saving Kernel_C.loadCapTransfer
Saving r_impl'dsb
Saving Kernel_C.arch_clean_invalidate_caches
Saving Kernel_C.ntfn_ptr_get_queue
Saving instruction'isb_sy_E000223C
Saving arch_get_n_paging
Saving arm_undefined_inst_exception
Saving instruction'isb_sy_E0012598
Saving Kernel_C.invalidateTranslationASIDLocal
Saving Kernel_C.it_alloc_paging
Saving emptySlot
Saving instruction'mrc_15_0_r9_cr5_cr0_0_E00100E0
Saving Kernel_C.flushPage
Saving Kernel_C.addrFromKPPtr
Saving Kernel_C.setCurrentPD
Saving Kernel_C.decodeDomainInvocation
Saving Kernel_C.clzl
Saving lookupPTSlot
Saving Kernel_C.maskVMRights
Saving Kernel_C.cap_frame_cap_set_capFMappedASIDHigh
Saving Kernel_C.doFlush
Saving Kernel_C.receiveIPC
Saving instruction'dsb_sy_E00126B0
Saving setVMRootForFlush
Saving Kernel_C.cap_asid_pool_cap_get_capASIDBase
Saving setVMRoot
Saving halt
Saving Kernel_C.mdb_node_ptr_set_mdbPrev_np
Saving Kernel_C.Arch_invokeIRQControl
Saving Kernel_C.pde_pde_invalid_new
Saving instruction'mrc_15_2_r2_cr0_cr0_0_E0011F0C
Saving Kernel_C.clearIOPageDirectory
Saving Kernel_C.performPageInvocationMapPDE
Saving merge_regions
Saving Kernel_C.pte_pte_large_get_reserved
Saving Kernel_C.decodeCNodeInvocation
Saving Kernel_C.Arch_sameObjectAs
Saving Kernel_C.getProcessorID
Saving handleInterrupt
Saving instruction'mrc_15_1_r3_cr0_cr0_0_E0011F18
Saving Kernel_C.cap_small_frame_cap_get_capFMappedASID
Saving Kernel_C.Arch_getObjectSize
Saving instruction'isb_sy_E00129D8
Saving loadCapTransfer
Saving instruction'dsb_sy_E00120E0
Saving getExtraCPtr
Saving Arch_setMRs_fault
Saving Kernel_C.cap_page_directory_cap_get_capPDIsMapped
Saving Kernel_C.insert_region
Saving instruction'ldr_pc_pc_24_e001002c_arm_vector_table_0x2c_E001000C
Saving Kernel_C.readMPIDR
Saving Kernel_C.create_it_frame_cap
Saving Kernel_C.messageInfoFromWord
Saving Kernel_C.wfi
Saving Arch_deriveCap
Saving decodeSetMCPriority
Saving Kernel_C.ntfn_ptr_set_queue
Saving Kernel_C.setAIFSR
Saving instruction'mcr_15_2_r9_cr0_cr0_0_E0011EC0
Saving Kernel_C.switchToThread_fp
Saving Kernel_C.cap_notification_cap_get_capNtfnCanReceive
Saving Kernel_C.doUnbindNotification
Saving Kernel_C.writeContextIDAndPD
Saving Kernel_C.handleInterrupt
Saving Kernel_C.cap_zombie_cap_get_capZombieType
Saving Kernel_C.seL4_Fault_CapFault_get_address
Saving create_it_asid_pool
Saving cancelAllIPC
Saving Kernel_C.notification_ptr_set_ntfnMsgIdentifier
Saving Kernel_C.invokeIRQHandler_ClearIRQHandler
Saving unmapPage
Saving Kernel_C.write_it_pd_pts
Saving Kernel_C.notification_ptr_set_ntfnQueue_tail
Saving Kernel_C.notification_ptr_get_ntfnBoundTCB
Saving Kernel_C.doIPCTransfer
Saving instruction'mrc_15_0_r2_cr13_cr0_3_E0010138
Saving Kernel_C.lookupCapAndSlot
Saving Kernel_C.handleInterruptEntry
Saving setIRQTrigger
Saving Kernel_C.endpoint_ptr_mset_epQueue_tail_state
Saving Kernel_C.cteMove
Saving Kernel_C.seL4_MessageInfo_set_capsUnwrapped
Saving Kernel_C.thread_state_ptr_set_tcbQueued
Saving map_kernel_frame
Saving Kernel_C.arch_clean_invalidate_L1_caches
Saving Kernel_C.possibleSwitchTo
Saving cancelIPC
Saving instruction'mcr_15_0_r1_cr7_cr14_2_E0011F58
Saving Kernel_C.cap_frame_cap_set_capFMappedASIDLow
Saving Kernel_C.isIRQActive
Saving sameObjectAs
Saving Kernel_C.Arch_postModifyRegisters
Saving Kernel_C.performPageFlush
Saving Kernel_C.createSafeMappingEntries_PDE
Saving Kernel_C.cap_endpoint_cap_set_capCanGrantReply
Saving Kernel_C.flushTable
Saving instruction'mcr_15_0_r3_cr2_cr0_0_E0011140
Saving Kernel_C.cap_page_directory_cap_ptr_set_capPDIsMapped
Saving Arch_decodeTransfer
Saving init_freemem
Saving doNBRecvFailedTransfer
Saving instruction'vmsr_fpexc_r3_E0001DD4
Saving branchFlushRange
Saving Kernel_C.lookup_fault_depth_mismatch_get_bitsFound
Saving Kernel_C.Arch_setTLSRegister
Saving instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E0010044
Saving instruction'dmb_sy_E00122E0
Saving instruction'mcr_15_0_r3_cr2_cr0_0_E0000590
Saving setMRs_syscall_error
Saving isValidVTableRoot
Saving instruction'mcr_15_0_r3_cr2_cr0_0_E00111C4
Saving instruction'dmb_sy_E0012A8C
Saving Arch_getObjectSize
Saving Kernel_C.memcpy
Saving Kernel_C.check_reserved_memory
Saving Kernel_C.postCapDeletion
Saving instruction'dsb_sy_E001107C
Saving Kernel_C.seL4_CapRights_get_capAllowGrant
Saving Kernel_C.cap_page_table_cap_ptr_set_capPTIsMapped
Saving Kernel_C.cleanInvalByVA
Saving Kernel_C.pde_pde_coarse_new
Saving Kernel_C.ptrFromPAddr
Saving Kernel_C.sameRegionAs
Saving Kernel_C.invalidateByVA_I
Saving Kernel_C.seL4_CapRights_get_capAllowGrantReply
Saving Kernel_C.unmapPageTable
Saving Kernel_C.resetUntypedCap
Saving Kernel_C.thread_state_ptr_set_blockingIPCCanGrant
Saving Kernel_C.seL4_MessageInfo_new
Saving preemptionPoint
Saving get_p_reg_kernel_img
Saving instruction'mcr_15_0_r3_cr7_cr6_1_E001255C
Saving Kernel_C.cleanInvalidate_L1D
Saving Kernel_C.notification_ptr_get_state
Saving Kernel_C.physBase
Saving instruction'ldr_pc_pc_24_e0010024_arm_vector_table_0x24_E0010004
Saving asm_instruction'mrc___p15,_0,__%0,__c0,__c1,_1
Saving Kernel_C.lookup_fp
Saving Kernel_C.ctzl
Saving lookupIPCBuffer
Saving Kernel_C.invokeTCB_ThreadControl
Saving asm_instruction'mrc_p15,_2,_%0,_c0,_c0,_0
Saving Kernel_C.writeContextIDPL2
Saving Kernel_C.makeUserPTE
Saving Kernel_C.Arch_getSanitiseRegisterInfo
Saving asm_instruction'.fpu_vfp\nvmrs_%0,_fpexc
Saving Kernel_C.rootserver_max_size_bits
Saving Kernel_C.generic_frame_cap_get_capFMappedAddress
Saving instruction'dsb_sy_E001292C
Saving Kernel_C.thread_state_ptr_get_blockingObject
Saving Kernel_C.calculate_extra_bi_size_bits
Saving Kernel_C.pde_pde_invalid_get_stored_asid_valid
Saving Kernel_C.cap_notification_cap_get_capNtfnBadge
Saving Kernel_C.cap_get_capSizeBits
Saving Kernel_C.ep_ptr_get_queue
Saving invokeIRQHandler_AckIRQ
Saving Kernel_C.insertNewCap
Saving Kernel_C.handleReservedIRQ
Saving asm_instruction'mrc_p15,_0,_%0,_c5,_c0,_0
Saving Kernel_C.wordFromRights
Saving instruction'mrc_15_0_r2_cr13_cr0_3_E00101BC
Saving instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E0010090
Saving lookupExtraCaps
Saving Kernel_C.seL4_CapRights_get_capAllowWrite
Saving Kernel_C.cap_get_capIsPhysical
Saving instruction'isb_sy_E001128C
Saving Kernel_C.sanitiseRegister
Saving Kernel_C.cap_page_table_cap_get_capPTMappedASID
Saving Kernel_C.seL4_Fault_VMFault_new
Saving handleInterruptEntry
Saving instruction'dsb_sy_E00126B8
Saving APFromVMRights
Saving Kernel_C.setExtraBadge
Saving memcpy
Saving Kernel_C.receiveSignal
Saving tcbSchedEnqueue
Saving insertNewCap
Saving plat_cleanCache
Saving Kernel_C.decodeReadRegisters
Saving Kernel_C.updateCapData
Saving Kernel_C.endpoint_ptr_set_epQueue_head_np
Saving Kernel_C.invokeCNodeRotate
Saving Arch_prepareThreadDelete
Saving Kernel_C.unmapIOPage
Saving instruction'dmb_sy_E00129AC
Saving instruction'mcr_15_2_r2_cr0_cr0_0_E0011EC8
Saving instruction'ldr_pc_pc_20_e0010034_arm_vector_table_0x34_E0010018
Saving Kernel_C.messageInfoFromWord_raw
Saving deleteASIDPool
Saving Kernel_C.cap_zombie_cap_get_capZombieNumber
Saving Kernel_C.thread_state_get_tcbQueued
Saving handleSyscall
Saving Kernel_C.cap_page_table_cap_set_capPTMappedASID
Saving Kernel_C.init_core_state
Saving asm_instruction'mrc__p15,_0,_%0,_c1,_c0,_1
Saving Kernel_C.APFromVMRights
Saving Kernel_C.lookupPDSlot
Saving Kernel_C.c_handle_data_fault
Saving Kernel_C.isStopped
Saving handleVMFaultEvent
Saving deletingIRQHandler
Saving instruction'strex_r0_r1_r3_E0011208
Saving instruction'mcr_15_2_r2_cr0_cr0_0_E0011DEC
Saving Kernel_C.handleSpuriousIRQ
Saving Kernel_C.is_reg_empty
Saving instruction'mrc_15_0_r1_cr13_cr0_3_E0010860
Saving cleanCaches_PoU
Saving Kernel_C.handleFault
Saving Kernel_C.c_handle_undefined_instruction
Saving Kernel_C.pte_get_pteSize
Saving Kernel_C.decodeSetTLSBase
Saving findFreeHWASID
Saving Kernel_C.cpu_initLocalIRQController
Saving Kernel_C.c_handle_fastpath_reply_recv
Saving Kernel_C.clearExMonitor_fp
Saving Kernel_C.getActiveIRQ
Saving Kernel_C.createObject
Saving Kernel_C.cap_reply_cap_new
Saving Kernel_C.pde_get_pdeType
Saving instruction'dsb_sy_E00120A4
Saving Arch_postModifyRegisters
Saving Kernel_C.mdb_node_set_mdbRevocable
Saving instruction'dsb_sy_E0012914
Saving invokeIRQHandler_ClearIRQHandler
Saving Kernel_C.getNMRR
Saving Kernel_C.isMDBParentOf
Saving kernel_prefetch_fault
Saving Kernel_C.suspend
Saving Kernel_C.cap_page_table_cap_get_capPTMappedAddress
Saving Kernel_C.pde_pde_coarse_ptr_get_address
Saving Kernel_C.cap_reply_cap_get_capReplyCanGrant
Saving Kernel_C.arch_init_freemem
Saving copyMRs
Saving Kernel_C.cap_frame_cap_get_capFMappedASIDLow
Saving getObjectSize
Saving bi_finalise
Saving Kernel_C.invokeCNodeInsert
Saving Kernel_C.cancelAllSignals
Saving Kernel_C.cap_frame_cap_get_capFMappedASID
Saving Kernel_C.restart
Saving Kernel_C.sameObjectAs
Saving Kernel_C.flushSpace
Saving Kernel_C.invalidateCacheRange_I
Saving asm_instruction'.word_0xeef00a10__\nmov_%0,_r0________\n
Saving Kernel_C.check_export_pmu
Saving Kernel_C.setupReplyMaster
Saving Kernel_C.tcbEPDequeue
Saving decodeUnbindNotification
Saving strlcpy
Saving Kernel_C.rescheduleRequired
Saving Kernel_C.pptr_in_kernel_window
Saving Kernel_C.cap_small_frame_cap_get_capFBasePtr
Saving Kernel_C.c_handle_syscall
Saving instruction'cps_19_E0010040
Saving Kernel_C.Arch_isCapRevocable
Saving lockTLBEntryCritical
Saving instruction'dmb_sy_E0012118
Saving decodeTCBInvocation
Saving Kernel_C.c_handle_interrupt
Saving Kernel_C.strncmp
Saving Kernel_C.arm_save_thread_id
Saving Kernel_C.decodeCopyRegisters
Saving create_domain_cap
Saving Kernel_C.updateRestartPC
Saving sendFaultIPC
Saving Kernel_C.performPageInvocationUnmapIO
Saving Kernel_C.unmapPage
Saving Kernel_C.pageBitsForSize
Saving Kernel_C.doFaultTransfer
Saving Kernel_C.invalidateLocalTLB
Saving instruction'wfi_E00108A0
Saving Kernel_C.generic_frame_cap_get_capFMappedASID
Saving l_impl'isb
Saving Kernel_C.writeHTPIDR
Saving Kernel_C.Arch_updateCapData
Saving doNormalTransfer
Saving invokeCNodeDelete
Saving Kernel_C.setCurrentPDPL2
Saving Kernel_C.ackInterrupt
Saving instruction'mrc_15_0_r1_cr6_cr0_0_E0011324
Saving maybe_alloc_extra_bi
Saving Kernel_C.cap_notification_cap_get_capNtfnPtr
Saving invokeCNodeMove
Saving asm_instruction'mcr_p15,_0,_%0,_c7,_c5,_1
Saving asm_instruction'mcr_p15,_0,_%0,_c7,_c5,_0
Saving Kernel_C.fpsimd_HWCapTest
Saving asm_instruction'mcr_p15,_0,_%0,_c7,_c5,_7
Saving asm_instruction'mcr_p15,_0,_%0,_c7,_c5,_6
Saving Kernel_C.cap_get_archCapPtr
Saving Kernel_C.pte_pte_invalid_new
Saving instruction'mrc_15_0_r3_cr5_cr0_1_E0011350
Saving create_mapped_it_frame_cap
Saving lookupSlot
Saving asm_instruction'mcr_p15,_0,_%0,_c10,_c2,_0
Saving Kernel_C.Arch_switchToThread
Saving Kernel_C.decodeInvocation
Saving instruction'dmb_sy_E0012044
Saving instruction'ldr_pc_pc_24_e0010020_arm_vector_table_0x20_E0010000
Saving Kernel_C.cleanInvalidateL1Caches
Saving Kernel_C.sendIPC
Saving Kernel_C.seL4_Fault_UserException_get_number
Saving Kernel_C.flushBTAC
Saving instruction'dsb_sy_E00111D4
Saving Kernel_C.seL4_Fault_UnknownSyscall_new
Saving instruction'dsb_sy_E001267C
Saving r_impl'mrc
Saving asm_instruction'mcr_p15,_0,_%0,_c7,_c10,_1
Saving asm_instruction'mcr_p15,_0,_%0,_c7,_c10,_2
Saving Kernel_C.doNormalTransfer
Saving Kernel_C.invalidateTranslationAll
Saving Kernel_C.cap_frame_cap_set_capFMappedAddress
Saving r_impl'dmb
Saving invalidateCacheRange_RAM
Saving setIRQState
Saving Kernel_C.readTTBCR
Saving Kernel_C.switchToIdleThread
Saving instruction'cpsid_aif_E0010950
Saving Kernel_C.tcbEPAppend
Saving replyFromKernel_error
Saving slotCapLongRunningDelete
Saving invalidateASIDEntry
Saving instruction'mcr_15_0_r0_cr10_cr1_1_E0010888
Saving Kernel_C.invalidateTranslationAllLocal
Saving instruction'srsia_sp_19_E00100B8
Saving Kernel_C.setMRs_syscall_error
Saving Kernel_C.arch_c_entry_hook
Saving getReceiveSlots
Saving lookupPivotSlot
Saving Kernel_C.prio_to_l1index
Saving cleanInvalidateL1Caches
Saving Kernel_C.decodeSetMCPriority
Saving instruction'srsia_sp_19_E0010088
Saving Kernel_C.cap_page_directory_cap_ptr_set_capPDMappedASID
Saving Kernel_C.loadHWASID
Saving Arch_performTransfer
Saving Kernel_C.cleanCacheRange_RAM
Saving Kernel_C.cleanInvalidateCacheRange_RAM
Saving Kernel_C.memzero
Saving performInvocation_Notification
Saving Kernel_C.cap_asid_pool_cap_get_capASIDPool
Saving Kernel_C.cleanInvalidateByWSL
Saving Kernel_C.notification_ptr_get_ntfnMsgIdentifier
Saving instruction'dsb_sy_E0012A08
Saving instruction'dmb_sy_E0012960
Saving Kernel_C.Arch_configureIdleThread
Saving Kernel_C.decodeTCBInvocation
Saving Kernel_C.preemptionPoint
Saving Kernel_C.setThreadState
Saving Kernel_C.seL4_MessageInfo_set_extraCaps
Saving Kernel_C.bi_finalise
Saving instruction'dsb_sy_E0011084
Saving memset
Saving Kernel_C.handleDoubleFault
Saving makeUserPDE
Saving Kernel_C.thread_state_ptr_set_blockingObject
Saving restore_user_context
Saving create_idle_thread
Saving Kernel_C.cap_zombie_cap_set_capZombieID
Saving Kernel_C.lookupPTSlot
Saving updateCapData
Saving Arch_handleFaultReply
Saving Kernel_C.cap_small_frame_cap_set_capFMappedAddress
Saving Kernel_C.Arch_decodeTransfer
Saving instruction'isb_sy_E00111EC
Saving Kernel_C.scheduleChooseNewThread
Saving Kernel_C.activateThread
Saving Kernel_C.pde_pde_section_ptr_get_size
Saving Kernel_C.thread_state_ptr_set_blockingIPCIsCall
Saving Kernel_C.cap_frame_cap_get_capFVMRights
Saving Kernel_C.nextDomain
Saving Kernel_C.ensureEmptySlot
Saving Kernel_C.copyMRsFault
Saving Kernel_C.addressTranslateS1
Saving Kernel_C.cap_endpoint_cap_set_capCanGrant
Saving cancelBadgedSends
Saving Kernel_C.getObjectSize
Saving Kernel_C.invokeCNodeMove
Saving Kernel_C.getHWASID
Saving instruction'mrc_15_0_r2_cr13_cr0_2_E0010158
Saving Kernel_C.create_bi_frame_cap
Saving invokeIRQControl
Saving instruction'cps_19_E00100BC
Saving Kernel_C.cap_frame_cap_get_capFBasePtr
Saving Kernel_C.vmAttributesFromWord
Saving Kernel_C.invalidateLocalTLB_ASID
Saving Kernel_C.provide_cap
Saving instruction'mcr_15_0_r3_cr1_cr0_2_E000053C
Saving Kernel_C.cap_reply_cap_ptr_new_np
Saving Kernel_C.cap_frame_cap_get_capFIsDevice
Saving Kernel_C.getPRRR
Saving r_impl'wfi
Saving instruction'mcr_15_0_r3_cr8_cr7_1_E00113B0
Saving dist_init
Saving Kernel_C.endpoint_ptr_get_state
Saving Kernel_C.setDFSR
Saving instruction'mcr_15_0_r2_cr10_cr0_0_E0010898
Saving Kernel_C.seL4_MessageInfo_get_label
Saving Kernel_C.getFAR
Saving Kernel_C.deleteASIDPool
Saving isIRQActive
Saving maskVMRights
Saving instruction'isb_sy_E0000594
Saving instruction'mrc_15_0_r3_cr1_cr0_2_E0000534
Saving Kernel_C.deriveCap
Saving Kernel_C.cap_reply_cap_get_capTCBPtr
Saving Kernel_C.arch_get_n_paging
Saving Kernel_C.decodeUntypedInvocation
Saving Kernel_C.cap_untyped_cap_set_capFreeIndex
Saving Kernel_C.cap_frame_cap_get_capFMappedASIDHigh
Saving strnlen
Saving Kernel_C.cap_small_frame_cap_get_capFMappedASIDLow
Saving asm_instruction'mrc_p15,_0,_%0,_c6,_c0,_2
Saving asm_instruction'mcr_p15,_0,_%0,_c3,_c0,_0
Saving asm_instruction'mrc_p15,_0,_%0,_c6,_c0,_0
Saving Kernel_C.cap_endpoint_cap_set_capCanSend
Saving Kernel_C.tcbSchedAppend
Saving Kernel_C.checkPrio
Saving create_root_cnode
Saving Kernel_C.isRunnable
Saving memzero
Saving arm_fiq_exception
Saving Kernel_C.seL4_Fault_CapFault_new
Saving Arch_decodeInvocation
Saving Arch_decodeIRQControlInvocation
Saving Kernel_C.transferCaps
Saving Kernel_C.setMCPriority
Saving Kernel_C.performInvocation_Notification
Saving Kernel_C.cleanByWSL
Saving Kernel_C.decodeWriteRegisters
Saving Kernel_C.map_it_pt_cap
Saving avail_p_regs
Saving get_p_reg_kernel_img_boot
Saving Kernel_C.strlcpy
Saving Kernel_C.unbindNotification
Saving Kernel_C.cap_endpoint_cap_set_capEPBadge
Saving instruction'dsb_sy_E0011404
Saving instruction'mrc_15_2_r2_cr0_cr0_0_E0011DDC
Saving Kernel_C.decodeARMPageTableInvocation
Saving Kernel_C.setIRQTrigger
Saving Kernel_C.cap_endpoint_cap_get_capCanGrant
Saving instruction'mcr_15_0_r0_cr7_cr11_1_E00122DC
Saving Kernel_C.performPageGetAddress
Saving Kernel_C.cleanCacheRange_PoU
Saving Kernel_C.map_it_frame_cap
Saving handleDoubleFault
Saving asm_instruction'mrc_p15,_1,_%0,_c0,_c0,_0
Saving asm_instruction'mrc_p15,_1,_%0,_c0,_c0,_1
Saving Kernel_C.initTimer
Saving cleanInvalidate_L1D
Saving invokeIRQHandler_SetIRQHandler
Saving Kernel_C.getADFSR
Saving Kernel_C.cleanCacheRange_PoC
Saving Kernel_C.Arch_performTransfer
Saving Kernel_C.lookupExtraCaps
Saving Kernel_C.timerTick
Saving Kernel_C.bindNotification
Saving initIRQController
Saving Kernel_C.mdb_node_set_mdbPrev
Saving Kernel_C.setMRs_lookup_failure
Saving instruction'mrc_15_0_sp_cr13_cr0_4_E001006C
Saving Kernel_C.cleanInvalidate_D_by_level
Saving Kernel_C.endpoint_ptr_get_epQueue_head
Saving initL2Cache
Saving asm_instruction'mcr_p15,_0,_%0,_c6,_c0,_0
Saving Kernel_C.Arch_checkIRQ
Saving Kernel_C.performInvocation_Endpoint
Saving Kernel_C.pageTableMapped
Saving c_handle_instruction_fault
Saving Kernel_C.writeContextID
Saving performInvocation_Reply
Saving Kernel_C.pte_pte_small_ptr_get_address
Saving Kernel_C.sendSignal
Saving Kernel_C.generic_frame_cap_get_capFIsMapped
Saving Kernel_C.cap_irq_handler_cap_new
Saving Kernel_C.setNMRR
Saving Kernel_C.readHTPIDR
Saving instruction'dsb_sy_E0002238
Saving Kernel_C.setMR
Saving instruction'mrc_15_0_r9_cr5_cr0_1_E00100B0
Saving Kernel_C.cap_get_archCapIsPhysical
Saving asm_instruction'dmb
Saving decodeSetSpace
Saving Kernel_C.pageBase
Saving instruction'mcr_15_0_r3_cr7_cr5_0_E00126C0
Saving Kernel_C.invokeCNodeCancelBadgedSends
Saving invokeCNodeRotate
Saving Kernel_C.dmb
Saving getHWASID
Saving Kernel_C.mdb_node_ptr_mset_mdbNext_mdbRevocable_mdbFirstBadged
Saving Kernel_C.create_untypeds
Saving capSwapForDelete
Saving Kernel_C.fastpath_mi_check
Saving Kernel_C.invokeTCB_CopyRegisters
Saving Kernel_C.isFinalCapability
Saving decodeUntypedInvocation
Saving Kernel_C.create_it_asid_pool
Saving instruction'srsia_sp_19_E00100EC
Saving Kernel_C.getIFSR
Saving Kernel_C.create_iospace_caps
Saving instruction'mcr_15_0_r3_cr2_cr0_0_E00111AC
Saving instruction'mrc_15_1_r3_cr0_cr0_0_E0011DE8
Saving Kernel_C.decodeARMIOMapInvocation
Saving decodeCopyRegisters
Saving Arch_switchToIdleThread
Saving ensureNoChildren
Saving asm_instruction'mcr_p15,_0,_%0,_c6,_c0,_2
Saving Kernel_C.writeDACR
Saving Kernel_C.maybe_alloc_extra_bi
Saving Kernel_C.lockTLBEntryCritical
Saving Kernel_C.mdb_node_ptr_set_mdbRevocable
Saving instruction'srsia_sp_19_E001003C
Saving Kernel_C.setDFAR
Saving Kernel_C.tcbSchedDequeue
Saving Kernel_C.findPDForASID
Saving Kernel_C.Arch_decodeIRQControlInvocation
Saving create_it_address_space
Saving instruction'ldr_pc_pc_4_e0010020_arm_vector_table_0x20_E0010014
Saving instruction'dsb_sy_E001291C
Saving Kernel_C.Arch_initContext
Saving Kernel_C.cap_untyped_cap_get_capFreeIndex
Saving l_impl'wfi
Saving Kernel_C.cap_cnode_cap_get_capCNodeRadix
Saving create_untypeds_for_region
Saving Kernel_C.checkValidIPCBuffer
Saving Kernel_C.memset
Saving asm_instruction'mrc_p15,_0,_%0,_c2,_c0,_2
Saving asm_instruction'mrc_p15,_0,_%0,_c2,_c0,_1
Saving asm_instruction'mrc_p15,_0,_%0,_c2,_c0,_0
Saving Kernel_C.setHardwareASID
Saving Kernel_C.fastpath_reply_recv
Saving Kernel_C.invalidateTranslationSingle
Saving Kernel_C.notification_ptr_set_ntfnBoundTCB
Saving instruction'isb_sy_E00113B8
Saving Kernel_C.seL4_CNode_CapData_get_guardSize
Saving Kernel_C.deleteASID
Saving invokeCNodeCancelBadgedSends
Saving Kernel_C.lookupCap
Saving Kernel_C.pde_pde_section_get_size
Saving Kernel_C.cap_frame_cap_new
Saving restart
Saving invokeTCB_NotificationControl
Saving Kernel_C.readSystemControlRegister
Saving cancelSignal
Saving Kernel_C.isCapRevocable
Saving instruction'isb_sy_E0000540
Saving Kernel_C.Arch_activateIdleThread
Saving instruction'mrc_15_0_sl_cr6_cr0_0_E00100E4
Saving Kernel_C.generic_frame_cap_get_capFBasePtr
Saving instruction'isb_sy_E00126C4
Saving unmapPageTable
Saving Kernel_C.cap_notification_cap_set_capNtfnBadge
Saving instruction'dsb_sy_E0012018
Saving lookupSlotForCNodeOp
Saving Kernel_C.cap_page_directory_cap_get_capPDBasePtr
Saving arm_irq_exception
Saving Kernel_C.cap_untyped_cap_new
Saving Kernel_C.cap_get_archCapSizeBits
Saving Kernel_C.decodeSetSpace
Saving invokeCNodeInsert
Saving Kernel_C.setUntypedCapAsFull
Saving strncmp
Saving Kernel_C.lookupPTSlot_nofail
Saving deleteCallerCap
Saving Arch_finaliseCap
Saving Kernel_C.deleteCallerCap
Saving Kernel_C.cap_page_table_cap_set_capPTMappedAddress
Saving map_kernel_window
Saving Kernel_C.seL4_MessageInfo_get_capsUnwrapped
Saving Kernel_C.replyFromKernel_error
Saving Kernel_C.isHighestPrio
Saving handleUserLevelFault
Saving asm_instruction'mcr_p15,_0,_%0,_c5,_c1,_1
Saving asm_instruction'mcr_p15,_0,_%0,_c5,_c1,_0
Saving Kernel_C.endpoint_ptr_set_epQueue_tail
Saving sendIPC
Saving Kernel_C.dsb_ishst
Saving Kernel_C.setNextPC
Saving asm_instruction'mrc_p15,_0,_%0,_c10,_c2,_1
Saving asm_instruction'mrc_p15,_0,_%0,_c10,_c2,_0
Saving Kernel_C.alloc_rootserver_obj
Saving Kernel_C.create_mapped_it_frame_cap
Saving Kernel_C.armv_contextSwitch_HWASID
Saving instruction'mcr_15_2_r3_cr0_cr0_0_E0011F14
Saving Kernel_C.cap_small_frame_cap_set_capFMappedASIDLow
Saving handleInvocation
Saving Kernel_C.getReceiveSlots
Saving asm_instruction'mcr_p15,_0,_%0,_c7,_c11,_1
Saving instruction'mcr_15_0_r3_cr7_cr11_1_E00195E0
Saving asm_instruction'mrc_p15,_0,_%0,_c3,_c0,_0
Saving Kernel_C.invokeIRQHandler_SetIRQHandler
Saving instruction'isb_sy_E0011408
Saving Kernel_C.Arch_decodeInvocation
Saving Kernel_C.invalidateCacheRange_RAM
Saving invokeCNodeSaveCaller
Saving Kernel_C.vm_attributes_get_armPageCacheable
Saving Kernel_C.setADFSR
Saving Kernel_C.ctzll
Saving Kernel_C.addrFromPPtr
Saving instruction'dsb_sy_E00129E8
Saving instruction'dsb_sy_E00113F8
Saving instruction'mcr_15_0_r2_cr7_cr11_1_E0012208
Saving tcbSchedAppend
Saving arm_reset_exception
Saving instruction'mcr_15_0_r2_cr10_cr0_1_E001088C
Saving Kernel_C.seL4_Fault_UnknownSyscall_get_syscallNumber
Saving instruction'mcr_15_0_r3_cr13_cr0_4_E0001D64
Saving l_impl'dmb
Saving Kernel_C.copyMRsFaultReply
Saving Kernel_C.create_rootserver_objects
Saving Kernel_C.invalidateASIDEntry
Saving fpsimd_HWCapTest
Saving Kernel_C.plat_cleanCache
Saving switchToIdleThread
Saving cap_get_capSizeBits
Saving Kernel_C.copyGlobalMappings
Saving Kernel_C.mdb_node_ptr_set_mdbFirstBadged
Saving instruction'mcr_15_2_r9_cr0_cr0_0_E0011DE4
Saving instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E00100C0
Saving Kernel_C.tcbSchedEnqueue
Saving Kernel_C.invokeTCB_Suspend
Saving cteSwap
Saving instruction'srsia_sp_19_E001005C
Saving asm_instruction'mcr_p15,_0,_%0,_c2,_c0,_1
Saving Kernel_C.decodeTCBConfigure
Saving doFaultTransfer
Saving asm_instruction'mcr_p15,_0,_%0,_c2,_c0,_2
Saving Kernel_C.invalidateByVA
Saving cteRevoke
Saving Kernel_C.getIFAR
Saving lookupTargetSlot
Saving Kernel_C.maskCapRights
Saving Kernel_C.c_handle_fastpath_signal
Saving Kernel_C.plat_cleanInvalidateL2Range
Saving Kernel_C.getCIDR
Saving Kernel_C.invokeCNodeDelete
Saving l_impl'dsb
Saving instruction'dmb_sy_E0012058
Saving Kernel_C.cleanByVA_PoU
Saving Kernel_C.create_root_cnode
Saving Kernel_C.pde_pde_section_ptr_get_address
Saving Kernel_C.try_init_kernel
Saving Kernel_C.maskInterrupt
Saving Kernel_C.decodeIRQHandlerInvocation
Saving create_untypeds
Saving asm_instruction'mcr_p15,_0,_%0,_c13,_c0,_1
Saving Kernel_C.cap_reply_cap_set_capReplyCanGrant
Saving Kernel_C.cap_null_cap_new
Saving instruction'mrc_15_0_r2_cr13_cr0_3_E0010160
Saving Kernel_C.handleReply
Saving Kernel_C.cap_untyped_cap_get_capIsDevice
Saving Kernel_C.clz64
Saving instruction'mcr_15_0_r4_cr8_cr7_0_E0002234
Saving instruction'dsb_sy_E0012090
Saving Kernel_C.cancelAllIPC
Saving Kernel_C.pte_pte_large_ptr_get_reserved
Saving Kernel_C.performPageInvocationUnmap
Saving Kernel_C.Arch_setMRs_fault
Saving Kernel_C.alignUp
Saving Kernel_C.clearExMonitor
Saving decodeSetSchedParams
Saving populate_bi_frame
Saving Kernel_C.decodeARMMMUInvocation
Saving Kernel_C.dist_enable_set
Saving Kernel_C.writeTTBR0Ptr
Saving sendSignal
Saving invalidateTLBByASID
Saving unbindNotification
Saving Kernel_C.pde_ptr_get_pdeType
Saving instruction'mcr_15_0_r3_cr7_cr5_1_E0012594
Saving Kernel_C.invokeTCB_NotificationControl
Saving cap_get_capIsPhysical
Saving asm_instruction'mcr_p15,_2,_%0,_c0,_c0,_0
Saving Kernel_C.setVMRootForFlush
Saving Kernel_C.arm_load_thread_id
Saving Kernel_C.StrictC'__clzsi2
Saving instruction'mrc_15_1_r3_cr0_cr0_0_E0011EC4
Saving write_it_asid_pool
Saving copyGlobalMappings
Saving Kernel_C.strlcat
Saving Kernel_C.clearMemory_PT
Saving Kernel_C.performPageInvocationMapPTE
Saving invokeTCB_ThreadControl
Saving asm_instruction'mrc__p15,_0,_%0,_c1,_c0,_0
Saving Kernel_C.reserve_region
Saving Kernel_C.cap_cnode_cap_get_capCNodeGuard
Saving Kernel_C.performInvocation_Reply
Saving instruction'isb_sy_E0011490
Saving c_handle_fastpath_call
Saving Kernel_C.decodeARMPageDirectoryInvocation
Saving flushPage
Saving tcbEPAppend
Saving asm_instruction'mcr_p15,_0,_%0,_c1,_c0,_1
Saving Kernel_C.check_export_arch_timer
Saving asm_instruction'mcr_p15,_0,_%0,_c10,_c2,_1
Saving Kernel_C.getSyscallArg
Saving Kernel_C.StrictC'__builtin_unreachable
Saving Arch_switchToThread
Saving instruction'mcr_15_0_r3_cr2_cr0_0_E00111E8
Saving Kernel_C.thread_state_ptr_get_blockingIPCCanGrantReply
Saving deriveCap
Saving Kernel_C.decodeSetIPCBuffer
Saving asm_instruction'dsb
Saving instruction'mcr_15_2_r2_cr0_cr0_0_E0011F1C
Saving setMCPriority
Saving Kernel_C.create_unmapped_it_frame_cap
Saving Kernel_C.merge_regions
Saving Kernel_C.pde_pde_invalid_get_stored_hw_asid
Saving Arch_updateCapData
Saving Kernel_C.handleVMFault
Saving instruction'isb_sy_E00111C8
Saving Kernel_C.seL4_MessageInfo_get_extraCaps
Saving Kernel_C.invokeCNodeSaveCaller
Saving Kernel_C.fastpath_copy_mrs
Saving Kernel_C.handleSyscall
Saving Kernel_C.lookup_fault_missing_capability_get_bitsLeft
Saving Kernel_C.lookup_fault_missing_capability_new
Saving Kernel_C.getRegister
Saving Kernel_C.cap_cnode_cap_set_capCNodeGuardSize
Saving instruction'isb_sy_E0011088
Saving Kernel_C.activate_kernel_vspace
Saving Kernel_C.isBlocked
Saving instruction'vmrs_r3_fpexc_E0000560
Saving Kernel_C.seL4_Fault_CapFault_get_inReceivePhase
Saving cancelAllSignals
Saving Kernel_C.cap_thread_cap_new
Saving Kernel_C.generic_frame_cap_ptr_set_capFMappedAddress
Saving instruction'mcr_15_0_r0_cr8_cr7_2_E0011400
Saving Kernel_C.thread_state_ptr_set_blockingIPCCanGrantReply
Saving Kernel_C.lookup_fault_get_lufType
Saving Kernel_C.armv_init_user_access
Saving Kernel_C.seL4_CNode_CapData_get_guard
Saving setDomain
Saving Kernel_C.seL4_Fault_NullFault_new
Saving createObject
Saving c_handle_fastpath_reply_recv
Saving Kernel_C.supportsAsyncExceptions
Saving Kernel_C.cap_page_table_cap_get_capPTBasePtr
Saving Kernel_C.isIRQPending
Saving Kernel_C.invalidateLocalTLB_VAASID
Saving create_initial_thread
Saving Kernel_C.cap_notification_cap_set_capNtfnCanReceive
Saving receiveSignal
Saving Kernel_C.arch_c_exit_hook
Saving Kernel_C.cleanInvalidate_D_PoC
Saving asm_instruction'isb
Saving Kernel_C.branchFlushRange
Saving performInvocation_Endpoint
Saving Kernel_C.StrictC'__builtin_popcountl
Saving Kernel_C.vm_attributes_new
Saving asm_instruction'mcr_p15,_0,_%0,_c2,_c0,_0
Saving invokeTCB_Suspend
Saving Kernel_C.cap_small_frame_cap_set_capFMappedASID
Saving instruction'stmdb_sp_r0_r1_r2_r3_r4_r5_r6_r7_r8_r9_sl_fp_ip_sp_lr_E00100F4
Saving Kernel_C.invalidateHypTLB
Saving Kernel_C.setIFSR
Saving Kernel_C.pte_pte_large_new
Saving decodeWriteRegisters
Saving Kernel_C.cteSwap
Saving Kernel_C.resolveAddressBits
Saving instruction'mcr_15_0_r1_cr7_cr14_2_E0011E58
Saving Kernel_C.cap_endpoint_cap_get_capEPBadge
Saving Kernel_C.setPRRR
Saving Kernel_C.lookupSlotForCNodeOp
Saving Kernel_C.deletedIRQHandler
Saving Kernel_C.pde_pde_coarse_get_address
Saving instruction'mrc_15_0_sp_cr13_cr0_4_E0010108
Saving handleFault
Saving Kernel_C.createSafeMappingEntries_PTE
Saving Kernel_C.cap_zombie_cap_get_capZombieID
Saving Kernel_C.map_kernel_devices
Saving Kernel_C.mdb_node_ptr_set_mdbNext
Saving Kernel_C.setRegister
Saving Kernel_C.dist_enable_clr
Saving Arch_sameRegionAs
Saving maskCapRights
Saving Kernel_C.cap_untyped_cap_get_capPtr
Saving Kernel_C.decodeARMIOSpaceInvocation
Saving arm_vector_table
Saving Kernel_C.create_frames_of_region
Saving Arch_isFrameType
Saving Kernel_C.pteCheckIfMapped
Saving Kernel_C.handleRecv
Saving invokeUntyped_Retype
Saving instruction'mcr_15_0_r0_cr10_cr1_0_E0010894
Saving Kernel_C.resolveVAddr
Saving decodeIRQControlInvocation
Saving setThreadState
Saving slowpath
Saving Kernel_C.str_to_long
Saving Kernel_C.Arch_deriveCap
Saving isMDBParentOf
Saving setupCallerCap
Saving instruction'mcr_15_0_ip_cr8_cr7_2_E0011080
Saving Kernel_C.isValidVTableRoot
Saving Kernel_C.writeTTBCR
Saving decodeCNodeInvocation
Saving cap_get_capPtr
Saving Kernel_C.isValidVTableRoot_fp
Saving Kernel_C.invalidateASID
Saving Kernel_C.getRestartPC
Saving sameRegionAs
Saving scheduleTCB
Saving Kernel_C.thread_state_ptr_get_blockingIPCIsCall
Saving decodeSetPriority
Saving instruction'dmb_sy_E0012560
Saving Kernel_C.cap_cnode_cap_get_capCNodePtr
Saving Kernel_C.cap_endpoint_cap_new
Saving instruction'mrc_15_0_r3_cr0_cr1_2_E0011FC0
Saving instruction'mcr_15_0_r3_cr7_cr14_1_E001208C
Saving Kernel_C.trapFpuInstToHyp
Saving Kernel_C.cteRevoke
Saving Kernel_C.readTTBR1
Saving Kernel_C.readTTBR0
Saving Kernel_C.invokeSetTLSBase
Saving create_ipcbuf_frame_cap
Saving cteDelete
Saving Kernel_C.cap_page_table_cap_new
Saving Kernel_C.paddr_to_pptr_reg
Saving Kernel_C.seL4_Fault_UserException_new
Saving instruction'isb_sy_E00111B0
Saving Kernel_C.setIFAR
Saving Kernel_C.cap_small_frame_cap_get_capFVMRights
Saving Kernel_C.create_ipcbuf_frame_cap
Saving Kernel_C.clzll
Saving Kernel_C.handleFaultReply
Saving instruction'dsb_sy_E0012574
Saving Kernel_C.thread_state_ptr_set_blockingIPCBadge
Saving Kernel_C.write_slot
Saving hasCancelSendRights
Saving handleRecv
Saving Kernel_C.resetTimer
Saving Kernel_C.seL4_MessageInfo_get_length
Saving Kernel_C.StrictC'__ctzsi2
Saving Kernel_C.map_kernel_frame
Saving instruction'mcr_15_0_r3_cr7_cr5_0_E0012A00
Saving Kernel_C.ep_ptr_set_queue
Saving Kernel_C.notification_ptr_get_ntfnQueue_head
Saving pageTableMapped
Saving Kernel_C.Arch_createObject
Saving Kernel_C.ready_queues_index
Saving Kernel_C.lookup_fault_invalid_root_new
Saving Kernel_C.notification_ptr_get_ntfnQueue_tail
Saving instruction'mcr_15_0_r4_cr8_cr7_2_E00126F0
Saving asm_instruction'mcr_p15,_0,_%0,_c5,_c0,_0
Saving asm_instruction'mcr_p15,_0,_%0,_c5,_c0,_1
Saving chooseThread
Saving activateThread
Saving cpu_iface_init
Saving instruction'mcr_15_0_r2_cr7_cr11_1_E0011454
Saving Kernel_C.fpsimd_init
Saving instruction'isb_sy_E0011144
Saving instruction'mrc_15_0_sp_cr13_cr0_4_E00100A8
Saving Kernel_C.cap_zombie_cap_new
Saving Kernel_C.Arch_prepareThreadDelete
Saving decodeDomainInvocation
Saving Kernel_C.restore_user_context
Saving Kernel_C.cap_cnode_cap_new
Saving Kernel_C.pte_pte_small_new
Saving Kernel_C.cap_endpoint_cap_get_capCanSend
Saving Kernel_C.wordFromMessageInfo
Saving Kernel_C.ntfn_set_active
Saving cteInsert
Saving instruction'dmb_sy_E0011458
Saving Kernel_C.Zombie_new
Saving instruction'mrc_15_0_r2_cr13_cr0_2_E0010188
Saving Kernel_C.rightsFromWord
Saving Kernel_C.arm_errata
Saving doReplyTransfer
Saving Kernel_C.clz32
Saving ensureEmptySlot
Saving Kernel_C.cap_page_table_cap_get_capPTIsMapped
Saving Kernel_C.getHighestPrio
Saving Kernel_C.halt
Saving Kernel_C.init_cpu
Saving asm_instruction'mrc_p15,_0,_%0,_c5,_c1,_1
Saving Kernel_C.invokeIRQHandler_AckIRQ
Saving r_impl'mcr
Saving asm_instruction'mrc_p15,_0,_%0,_c1,_c0,_1
Saving Kernel_C.Arch_switchToIdleThread
Saving instruction'isb_sy_E00005A8
Saving Kernel_C.thread_state_ptr_get_blockingIPCCanGrant
Saving Kernel_C.getACTLR
Saving asm_instruction'mrc_p15,_0,_%0,_c5,_c1,_0
Saving initTimer
Saving cleanCacheRange_RAM
Saving Kernel_C.calculate_rootserver_size
Saving flushSpace
Saving instruction'mcr_15_0_r3_cr14_cr1_0_E0011FD4
Saving Kernel_C.lookupSourceSlot
Saving Kernel_C.switchToThread
Saving Kernel_C.seL4_Fault_VMFault_get_address
Saving decodeIRQHandlerInvocation
Saving Kernel_C.readCLID
Saving lockTLBEntry
Saving Kernel_C.cap_small_frame_cap_set_capFVMRights
Saving instruction'isb_sy_E0011284
Saving Kernel_C.setKernelStack
Saving Kernel_C.get_p_reg_kernel_img
Saving Kernel_C.cap_frame_cap_get_capFMappedAddress
Saving Kernel_C.handleVMFaultEvent
Saving Kernel_C.invert_l1index
Saving Kernel_C.generic_frame_cap_get_capFIsDevice
Saving Kernel_C.init_kernel
Saving Kernel_C.StrictC'__clzdi2
Saving Kernel_C.strnlen
Saving instruction'mcr_15_0_r0_cr2_cr0_0_E00112A0
Saving instruction'dmb_sy_E0012004
Saving asm_instruction'mcr__p15,_0,_%0,_c1,_c0,_0
Saving asm_instruction'mcr__p15,_0,_%0,_c1,_c0,_1
Saving deleteASID
Saving Kernel_C.mdb_node_set_mdbFirstBadged
Saving reserve_region
Saving Kernel_C.getDFAR
Saving Kernel_C.clearMemory
Saving l_impl'mrc
Saving Kernel_C.notification_ptr_set_state
Saving lookupPDSlot
Saving Kernel_C.performASIDPoolInvocation
Saving Kernel_C.seL4_Fault_UserException_get_code
Saving init_kernel
Saving alloc_rootserver_obj
Saving Kernel_C.map_kernel_window
Saving instruction'mrc_15_0_r2_cr13_cr0_2_E0010130
Saving Kernel_C.createNewObjects
Saving Kernel_C.cap_get_capType
Saving Kernel_C.cleanCaches_PoU
Saving possibleSwitchTo
Saving handleUnknownSyscall
Saving Kernel_C.writeAuxiliaryControlRegister
Saving Kernel_C.create_domain_cap
Saving armv_init_user_access
Saving instruction'isb_sy_E00112A4
Saving cteMove
Saving instruction'dsb_sy_E001148C
Saving instruction'dsb_sy_E00113B4
Saving Kernel_C.mdb_node_ptr_set_mdbPrev
Saving Kernel_C.unbindMaybeNotification
Saving Kernel_C.pde_pde_section_new
Saving Kernel_C.StrictC'__ctzdi2
Saving Kernel_C.makeUserPDE
Saving Kernel_C.getDFSR
Saving Kernel_C.readAuxiliaryControlRegister
Saving Kernel_C.pptr_to_paddr_reg
Saving instruction'dsb_sy_E00113A0
Saving Kernel_C.ceiling_kernel_window
Saving Kernel_C.invalidate_I_PoU
Saving str_to_long
Saving Kernel_C.initL2Cache
Saving instruction'dsb_sy_E0000598
Saving Kernel_C.cap_frame_cap_set_capFVMRights
Saving Kernel_C.cap_asid_control_cap_new
Saving init_core_state
Saving Kernel_C.vmRightsFromWord
Saving Kernel_C.getKernelStack
Saving asm_instruction'mrc_p15,_0,_%0,_c13,_c0,_4
Saving Kernel_C.cap_reply_cap_get_capReplyMaster
Saving Kernel_C.vm_attributes_get_armExecuteNever
Saving asm_instruction'mcr___p15,_0,__%0,_c14,__c1,_0
Saving asm_instruction'mrc_p15,_0,_%0,_c13,_c0,_1
Saving asm_instruction'mrc_p15,_0,_%0,_c13,_c0,_2
Saving asm_instruction'mrc_p15,_0,_%0,_c13,_c0,_3
Saving lookupSourceSlot
Saving instruction'dmb_sy_E00120CC
Saving Kernel_C.performPageTableInvocationUnmap
Saving instruction'mcr_15_0_r1_cr10_cr0_0_E0010890
Saving Kernel_C.handleUnknownSyscall
Saving Kernel_C.check_available_memory
Saving c_handle_undefined_instruction
Saving checkValidIPCBuffer
Saving Kernel_C.cap_notification_cap_set_capNtfnCanSend
Saving Kernel_C.deleteIOPageTable
Saving Kernel_C.create_it_page_table_cap
Saving Kernel_C.cap_zombie_cap_get_capZombieBits
Saving Kernel_C.cancelIPC
Saving Kernel_C.cap_irq_handler_cap_get_capIRQ
Saving Kernel_C.setVMRoot
Saving instruction'mrc_15_0_r2_cr13_cr0_3_E0010190
Saving Kernel_C.getExtraCPtr
Saving Kernel_C.cap_page_directory_cap_new
Saving Kernel_C.cap_small_frame_cap_set_capFMappedASIDHigh
Saving Kernel_C.lookup_fault_guard_mismatch_new
Saving Kernel_C.writeTTBR0
Saving Kernel_C.thread_state_ptr_set_tsType
Saving r_impl'isb
Saving asm_instruction'mcr_p15,_0,_%0,_c7,_c14,_1
Saving asm_instruction'mcr_p15,_0,_%0,_c7,_c14,_2
Saving Kernel_C.pte_get_pteType
Saving Kernel_C.plat_invalidateL2Range
Saving Kernel_C.l1index_to_prio
Saving asm_instruction'mrc_p15,_0,_%0,_c5,_c0,_1
Saving Kernel_C.c_handle_instruction_fault
Saving c_handle_interrupt
Saving instruction'mcr_15_0_r3_cr7_cr5_0_E0012924
Saving Kernel_C.popcountl
Saving tcbSchedDequeue
Saving Kernel_C.mdb_node_get_mdbFirstBadged
Saving Kernel_C.chooseThread
Saving Kernel_C.c_exit_hook
Saving Kernel_C.cap_capType_equals
Saving instruction'mcr_15_0_r3_cr7_cr5_7_E00125C8
Saving Kernel_C.generic_frame_cap_get_capFVMRights
Saving Kernel_C.invokeTCB_ReadRegisters
Saving c_handle_data_fault
Saving Kernel_C.c_handle_fastpath_call
Saving Kernel_C.seL4_Fault_VMFault_get_FSR
Saving Kernel_C.invokeTCB_WriteRegisters
Saving Kernel_C.lookup_fault_depth_mismatch_get_bitsLeft
Saving Kernel_C.VGICMaintenance
Saving Kernel_C.generic_frame_cap_set_capFMappedAddress
Saving arch_clean_invalidate_L1_caches
Saving instruction'ldr_pc_pc_24_e0010028_arm_vector_table_0x28_E0010008
Saving Kernel_C.create_it_address_space
Saving Kernel_C.cleanByVA
Saving Kernel_C.mdb_node_get_mdbPrev
Saving invokeTCB_ReadRegisters
Saving Kernel_C.invalidateTranslationASID
Saving Kernel_C.thread_state_ptr_get_tsType
Saving Kernel_C.sendFaultIPC
Saving asm_instruction'.fpu_vfp\nvmsr_fpexc,_%0
Saving handleFaultReply
Saving Kernel_C.cap_small_frame_cap_new
Saving Kernel_C.seL4_CapRights_get_capAllowRead
Saving asm_instruction'wfi
Saving Kernel_C.cap_small_frame_cap_get_capFMappedASIDHigh
Saving instruction'mrc_15_1_r3_cr0_cr0_1_E0011D48
Saving Kernel_C.slotCapLongRunningDelete
Saving Kernel_C.cap_frame_cap_get_capFSize
Saving Kernel_C.decodeARMIOPTInvocation
Saving Kernel_C.thread_state_ptr_get_blockingIPCBadge
Saving kernel_device_frames
Saving tcbEPDequeue
Saving Kernel_C.capTransferFromWords
Saving instruction'dsb_sy_E00126F4
Saving Kernel_C.finaliseCap
Saving instruction'dsb_sy_E00126C8
Saving completeSignal
Saving Kernel_C.isb
Saving Kernel_C.deletingIRQHandler
Saving Kernel_C.readTPIDRURO
Saving Kernel_C.setMRs_fault
Saving loadHWASID
Saving instruction'ldr_pc_pc_20_e0010038_arm_vector_table_0x38_E001001C
Saving Kernel_C.readTPIDRURW
Saving Kernel_C.armv_contextSwitch
Saving Kernel_C.decodeARMFrameInvocation
Saving cleanCacheRange_PoU
Saving Kernel_C.cap_untyped_cap_get_capBlockSize
Saving clean_D_PoU
Saving Kernel_C.writeTPIDRPRW
Saving Kernel_C.cap_endpoint_cap_get_capEPPtr
Saving invokeTCB_Resume
Saving Kernel_C.cap_page_table_cap_set_capPTIsMapped
Saving Kernel_C.readCacheSize
Saving Kernel_C.notification_ptr_set_ntfnQueue_head
Saving Kernel_C.Arch_maskCapRights
Saving instruction'isb_sy_E00126A0
Saving instruction'mrc_15_0_r3_cr5_cr0_0_E0011328
Saving create_bi_frame_cap
Saving Kernel_C.cap_asid_pool_cap_new
Saving asm_instruction'mrc___p15,_0,__%0,__c0,__c1,_2
Saving Kernel_C.plat_cleanInvalidateL2Cache
Saving instruction'mrc_15_1_fp_cr0_cr0_1_E0011E30
Saving Kernel_C.thread_state_ptr_set_tsType_np
Saving instruction'mrc_15_0_r2_cr13_cr0_2_E00101B4
Saving Kernel_C.slowpath
Saving Kernel_C.findFreeHWASID
Saving Kernel_C.cap_get_capPtr
Saving insert_region
Saving invokeCNodeRevoke
Saving Kernel_C.thread_state_ptr_mset_blockingObject_tsType
Saving Kernel_C.storeHWASID
Saving instruction'dsb_sy_E0012A18
Saving instruction'mrc_15_0_sp_cr13_cr0_4_E00100D8
Saving Kernel_C.decodeIRQControlInvocation
Saving doFlush
Saving decodeTCBConfigure
Saving Kernel_C.writeTTBR1
Saving switchToThread
Saving Kernel_C.get_p_reg_kernel_img_boot
Saving asm_instruction'mcr_p15,_0,_%0,_c8,_c7,_2
Saving Kernel_C.cancelBadgedSends
Saving Kernel_C.invokeCNodeRevoke
Saving instruction'mcr_15_0_r0_cr8_cr7_2_E0011488
Saving Arch_createObject
Saving Kernel_C.cap_thread_cap_get_capTCBPtr
Saving Kernel_C.generic_frame_cap_get_capFSize
Saving asm_instruction'mrc___p15,_0,__%0,__c1,__c0,_2
Saving arm_data_abort_exception
Saving Kernel_C.clearEnFPEXC
Saving Kernel_C.pte_pte_large_ptr_get_address
Saving instruction'dsb_sy_E000057C
Saving Kernel_C.finaliseSlot
Saving instruction'isb_sy_E00126F8
Saving instruction'mcr_15_0_r0_cr13_cr0_1_E00111B4
Saving instruction'dsb_sy_E001126C
Saving Arch_configureIdleThread
Saving char_to_long
Saving Kernel_C.hasCancelSendRights
Saving Kernel_C.setupCallerCap
Saving Kernel_C.capRemovable
Saving Kernel_C.write_it_asid_pool
Saving timerTick
Saving instruction'mcr_15_0_ip_cr7_cr10_1_E00120C8
Saving instruction'dmb_sy_E001251C
Saving instruction'mcr_15_0_r3_cr2_cr0_0_E0011280
Saving create_unmapped_it_frame_cap
Saving configureIdleThread
Saving Kernel_C.create_untypeds_for_region
Saving Kernel_C.endpoint_ptr_set_state
Saving kernel_data_fault
Saving Kernel_C.schedule
Saving Kernel_C.cap_frame_cap_set_capFMappedASID
Saving createNewObjects
Saving Kernel_C.setPriority
Saving asm_instruction'mcr_p15,_0,_%0,_c7,_c6,_1
Saving Kernel_C.idle_thread
Saving Kernel_C.pte_ptr_get_pteSize
Saving Kernel_C.Arch_postCapDeletion
Saving Kernel_C.L2_cacheSync
Saving instruction'cps_19_E001008C
Saving Kernel_C.cteInsert
Saving Kernel_C.initIRQController
Saving Kernel_C.setCIDR
Saving getRestartPC
Saving Kernel_C.addToBitmap
Saving Kernel_C.create_idle_thread
Saving instruction'vmrs_r3_fpexc_E0001DCC
Saving instruction'dsb_sy_E0011480
Saving asm_instruction'mcr___p15,_0,__%0,__c1,__c0,_2
Saving instruction'cps_19_E00100F0
Saving Kernel_C.cap_domain_cap_new
Saving Kernel_C.writeSystemControlRegister
Saving asm_instruction'mcr_p15,_0,_%0,_c8,_c7,_0
Saving asm_instruction'mcr_p15,_0,_%0,_c8,_c7,_1
Saving Kernel_C.c_entry_hook
Saving Kernel_C.setDomain
Saving Kernel_C.ensureNoChildren
Saving Kernel_C.endpoint_ptr_set_epQueue_head
Saving instruction'mcr_15_0_r0_cr13_cr0_1_E0011288
Saving Kernel_C.lookup_fault_depth_mismatch_new
Saving Kernel_C.readDACR
Saving Kernel_C.disableFpu
Saving Pairing (l_impl'isb (ASM) <= r_impl'isb (C))
Saving Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))
Saving Pairing (setupCallerCap (ASM) <= Kernel_C.setupCallerCap (C))
Saving Pairing (suspend (ASM) <= Kernel_C.suspend (C))
Saving Pairing (decodeSetSchedParams (ASM) <= Kernel_C.decodeSetSchedParams (C))
Saving Pairing (ensureNoChildren (ASM) <= Kernel_C.ensureNoChildren (C))
Saving Pairing (hasCancelSendRights (ASM) <= Kernel_C.hasCancelSendRights (C))
Saving Pairing (deriveCap (ASM) <= Kernel_C.deriveCap (C))
Saving Pairing (deletedIRQHandler (ASM) <= Kernel_C.deletedIRQHandler (C))
Saving Pairing (bi_finalise (ASM) <= Kernel_C.bi_finalise (C))
Saving Pairing (APFromVMRights (ASM) <= Kernel_C.APFromVMRights (C))
Saving Pairing (c_handle_fastpath_reply_recv (ASM) <= Kernel_C.c_handle_fastpath_reply_recv (C))
Saving Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C))
Saving Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))
Saving Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))
Saving Pairing (decodeSetPriority (ASM) <= Kernel_C.decodeSetPriority (C))
Saving Pairing (loadCapTransfer (ASM) <= Kernel_C.loadCapTransfer (C))
Saving Pairing (cpu_iface_init (ASM) <= Kernel_C.cpu_iface_init (C))
Saving Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C))
Saving Pairing (handleInterruptEntry (ASM) <= Kernel_C.handleInterruptEntry (C))
Saving Pairing (invokeCNodeRevoke (ASM) <= Kernel_C.invokeCNodeRevoke (C))
Saving Pairing (cteDeleteOne (ASM) <= Kernel_C.cteDeleteOne (C))
Saving Pairing (Arch_configureIdleThread (ASM) <= Kernel_C.Arch_configureIdleThread (C))
Saving Pairing (Arch_getObjectSize (ASM) <= Kernel_C.Arch_getObjectSize (C))
Saving Pairing (setThreadState (ASM) <= Kernel_C.setThreadState (C))
Saving Pairing (slotCapLongRunningDelete (ASM) <= Kernel_C.slotCapLongRunningDelete (C))
Saving Pairing (plat_cleanCache (ASM) <= Kernel_C.plat_cleanCache (C))
Saving Pairing (Arch_deriveCap (ASM) <= Kernel_C.Arch_deriveCap (C))
Saving Pairing (tcbSchedEnqueue (ASM) <= Kernel_C.tcbSchedEnqueue (C))
Saving Pairing (isValidVTableRoot (ASM) <= Kernel_C.isValidVTableRoot (C))
Saving Pairing (possibleSwitchTo (ASM) <= Kernel_C.possibleSwitchTo (C))
Saving Pairing (deleteASIDPool (ASM) <= Kernel_C.deleteASIDPool (C))
Saving Pairing (isCapRevocable (ASM) <= Kernel_C.isCapRevocable (C))
Saving Pairing (pageTableMapped (ASM) <= Kernel_C.pageTableMapped (C))
Saving Pairing (strnlen (ASM) <= Kernel_C.strnlen (C))
Saving Pairing (cancelAllIPC (ASM) <= Kernel_C.cancelAllIPC (C))
Saving Pairing (makeUserPDE (ASM) <= Kernel_C.makeUserPDE (C))
Saving Pairing (cap_get_capSizeBits (ASM) <= Kernel_C.cap_get_capSizeBits (C))
Saving Pairing (getHWASID (ASM) <= Kernel_C.getHWASID (C))
Saving Pairing (cpu_initLocalIRQController (ASM) <= Kernel_C.cpu_initLocalIRQController (C))
Saving Pairing (memset (ASM) <= Kernel_C.memset (C))
Saving Pairing (finaliseCap (ASM) <= Kernel_C.finaliseCap (C))
Saving Pairing (Arch_performTransfer (ASM) <= Kernel_C.Arch_performTransfer (C))
Saving Pairing (handleRecv (ASM) <= Kernel_C.handleRecv (C))
Saving Pairing (arch_clean_invalidate_caches (ASM) <= Kernel_C.arch_clean_invalidate_caches (C))
Saving Pairing (invokeCNodeInsert (ASM) <= Kernel_C.invokeCNodeInsert (C))
Saving Pairing (isIRQActive (ASM) <= Kernel_C.isIRQActive (C))
Saving Pairing (cleanInvalidateCacheRange_RAM (ASM) <= Kernel_C.cleanInvalidateCacheRange_RAM (C))
Saving Pairing (armv_init_user_access (ASM) <= Kernel_C.armv_init_user_access (C))
Saving Pairing (cteInsert (ASM) <= Kernel_C.cteInsert (C))
Saving Pairing (create_domain_cap (ASM) <= Kernel_C.create_domain_cap (C))
Saving Pairing (cancelSignal (ASM) <= Kernel_C.cancelSignal (C))
Saving Pairing (decodeCNodeInvocation (ASM) <= Kernel_C.decodeCNodeInvocation (C))
Saving Pairing (configureIdleThread (ASM) <= Kernel_C.configureIdleThread (C))
Saving Pairing (maybe_alloc_extra_bi (ASM) <= Kernel_C.maybe_alloc_extra_bi (C))
Saving Pairing (invokeTCB_Resume (ASM) <= Kernel_C.invokeTCB_Resume (C))
Saving Pairing (lookupPTSlot (ASM) <= Kernel_C.lookupPTSlot (C))
Saving Pairing (arch_clean_invalidate_L1_caches (ASM) <= Kernel_C.arch_clean_invalidate_L1_caches (C))
Saving Pairing (activate_kernel_vspace (ASM) <= Kernel_C.activate_kernel_vspace (C))
Saving Pairing (invokeUntyped_Retype (ASM) <= Kernel_C.invokeUntyped_Retype (C))
Saving Pairing (cleanInvalidateL1Caches (ASM) <= Kernel_C.cleanInvalidateL1Caches (C))
Saving Pairing (handleInvocation (ASM) <= Kernel_C.handleInvocation (C))
Saving Pairing (getObjectSize (ASM) <= Kernel_C.getObjectSize (C))
Saving Pairing (lookupIPCBuffer (ASM) <= Kernel_C.lookupIPCBuffer (C))
Saving Pairing (deleteASID (ASM) <= Kernel_C.deleteASID (C))
Saving Pairing (populate_bi_frame (ASM) <= Kernel_C.populate_bi_frame (C))
Saving Pairing (sameRegionAs (ASM) <= Kernel_C.sameRegionAs (C))
Saving Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C))
Saving Pairing (resolveAddressBits (ASM) <= Kernel_C.resolveAddressBits (C))
Saving Pairing (isFinalCapability (ASM) <= Kernel_C.isFinalCapability (C))
Saving Pairing (invokeIRQControl (ASM) <= Kernel_C.invokeIRQControl (C))
Saving Pairing (Arch_sameRegionAs (ASM) <= Kernel_C.Arch_sameRegionAs (C))
Saving Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C))
Saving Pairing (halt (ASM) <= Kernel_C.halt (C))
Saving Pairing (invokeCNodeRotate (ASM) <= Kernel_C.invokeCNodeRotate (C))
Saving Pairing (cteSwap (ASM) <= Kernel_C.cteSwap (C))
Saving Pairing (decodeSetMCPriority (ASM) <= Kernel_C.decodeSetMCPriority (C))
Saving Pairing (decodeSetIPCBuffer (ASM) <= Kernel_C.decodeSetIPCBuffer (C))
Saving Pairing (replyFromKernel_success_empty (ASM) <= Kernel_C.replyFromKernel_success_empty (C))
Saving Pairing (invokeCNodeDelete (ASM) <= Kernel_C.invokeCNodeDelete (C))
Saving Pairing (invokeIRQHandler_SetIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_SetIRQHandler (C))
Saving Pairing (deleteCallerCap (ASM) <= Kernel_C.deleteCallerCap (C))
Saving Pairing (getReceiveSlots (ASM) <= Kernel_C.getReceiveSlots (C))
Saving Pairing (doNBRecvFailedTransfer (ASM) <= Kernel_C.doNBRecvFailedTransfer (C))
Saving Pairing (schedule (ASM) <= Kernel_C.schedule (C))
Saving Pairing (Arch_updateCapData (ASM) <= Kernel_C.Arch_updateCapData (C))
Saving Pairing (handleReply (ASM) <= Kernel_C.handleReply (C))
Saving Pairing (cleanCacheRange_PoU (ASM) <= Kernel_C.cleanCacheRange_PoU (C))
Saving Pairing (calculate_extra_bi_size_bits (ASM) <= Kernel_C.calculate_extra_bi_size_bits (C))
Saving Pairing (doFlush (ASM) <= Kernel_C.doFlush (C))
Saving Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C))
Saving Pairing (invalidateASIDEntry (ASM) <= Kernel_C.invalidateASIDEntry (C))
Saving Pairing (Arch_decodeInvocation (ASM) <= Kernel_C.Arch_decodeInvocation (C))
Saving Pairing (Arch_finaliseCap (ASM) <= Kernel_C.Arch_finaliseCap (C))
Saving Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C))
Saving Pairing (getRestartPC (ASM) <= Kernel_C.getRestartPC (C))
Saving Pairing (create_untypeds (ASM) <= Kernel_C.create_untypeds (C))
Saving Pairing (unbindNotification (ASM) <= Kernel_C.unbindNotification (C))
Saving Pairing (invokeCNodeCancelBadgedSends (ASM) <= Kernel_C.invokeCNodeCancelBadgedSends (C))
Saving Pairing (performInvocation_Notification (ASM) <= Kernel_C.performInvocation_Notification (C))
Saving Pairing (Arch_sameObjectAs (ASM) <= Kernel_C.Arch_sameObjectAs (C))
Saving Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C))
Saving Pairing (unbindMaybeNotification (ASM) <= Kernel_C.unbindMaybeNotification (C))
Saving Pairing (cancelAllSignals (ASM) <= Kernel_C.cancelAllSignals (C))
Saving Pairing (provide_cap (ASM) <= Kernel_C.provide_cap (C))
Saving Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C))
Saving Pairing (lookupSlot (ASM) <= Kernel_C.lookupSlot (C))
Saving Pairing (l_impl'wfi (ASM) <= r_impl'wfi (C))
Saving Pairing (updateCapData (ASM) <= Kernel_C.updateCapData (C))
Saving Pairing (Arch_isFrameType (ASM) <= Kernel_C.Arch_isFrameType (C))
Saving Pairing (invalidateCacheRange_RAM (ASM) <= Kernel_C.invalidateCacheRange_RAM (C))
Saving Pairing (lookupSourceSlot (ASM) <= Kernel_C.lookupSourceSlot (C))
Saving Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))
Saving Pairing (idle_thread (ASM) <= Kernel_C.idle_thread (C))
Saving Pairing (handleUserLevelFault (ASM) <= Kernel_C.handleUserLevelFault (C))
Saving Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C))
Saving Pairing (Arch_maskCapRights (ASM) <= Kernel_C.Arch_maskCapRights (C))
Saving Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C))
Saving Pairing (lookupCapAndSlot (ASM) <= Kernel_C.lookupCapAndSlot (C))
Saving Pairing (isMDBParentOf (ASM) <= Kernel_C.isMDBParentOf (C))
Saving Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C))
Saving Pairing (invalidateCacheRange_I (ASM) <= Kernel_C.invalidateCacheRange_I (C))
Saving Pairing (cleanCaches_PoU (ASM) <= Kernel_C.cleanCaches_PoU (C))
Saving Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C))
Saving Pairing (lockTLBEntryCritical (ASM) <= Kernel_C.lockTLBEntryCritical (C))
Saving Pairing (invokeCNodeMove (ASM) <= Kernel_C.invokeCNodeMove (C))
Saving Pairing (findFreeHWASID (ASM) <= Kernel_C.findFreeHWASID (C))
Saving Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C))
Saving Pairing (decodeSetSpace (ASM) <= Kernel_C.decodeSetSpace (C))
Saving Pairing (create_initial_thread (ASM) <= Kernel_C.create_initial_thread (C))
Saving Pairing (create_it_address_space (ASM) <= Kernel_C.create_it_address_space (C))
Saving Pairing (invokeIRQHandler_ClearIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_ClearIRQHandler (C))
Saving Pairing (doNormalTransfer (ASM) <= Kernel_C.doNormalTransfer (C))
Saving Pairing (decodeCopyRegisters (ASM) <= Kernel_C.decodeCopyRegisters (C))
Saving Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C))
Saving Pairing (tcbEPDequeue (ASM) <= Kernel_C.tcbEPDequeue (C))
Saving Pairing (lockTLBEntry (ASM) <= Kernel_C.lockTLBEntry (C))
Saving Pairing (cteRevoke (ASM) <= Kernel_C.cteRevoke (C))
Saving Pairing (write_it_asid_pool (ASM) <= Kernel_C.write_it_asid_pool (C))
Saving Pairing (lookupCap (ASM) <= Kernel_C.lookupCap (C))
Saving Pairing (l_impl'dsb (ASM) <= r_impl'dsb (C))
Saving Pairing (copyGlobalMappings (ASM) <= Kernel_C.copyGlobalMappings (C))
Saving Pairing (create_ipcbuf_frame_cap (ASM) <= Kernel_C.create_ipcbuf_frame_cap (C))
Saving Pairing (replyFromKernel_error (ASM) <= Kernel_C.replyFromKernel_error (C))
Saving Pairing (doReplyTransfer (ASM) <= Kernel_C.doReplyTransfer (C))
Saving Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))
Saving Pairing (write_slot (ASM) <= Kernel_C.write_slot (C))
Saving Pairing (doFaultTransfer (ASM) <= Kernel_C.doFaultTransfer (C))
Saving Pairing (Arch_activateIdleThread (ASM) <= Kernel_C.Arch_activateIdleThread (C))
Saving Pairing (ensureEmptySlot (ASM) <= Kernel_C.ensureEmptySlot (C))
Saving Pairing (str_to_long (ASM) <= Kernel_C.str_to_long (C))
Saving Pairing (init_core_state (ASM) <= Kernel_C.init_core_state (C))
Saving Pairing (deletingIRQHandler (ASM) <= Kernel_C.deletingIRQHandler (C))
Saving Pairing (lookupExtraCaps (ASM) <= Kernel_C.lookupExtraCaps (C))
Saving Pairing (performInvocation_Endpoint (ASM) <= Kernel_C.performInvocation_Endpoint (C))
Saving Pairing (handleDoubleFault (ASM) <= Kernel_C.handleDoubleFault (C))
Saving Pairing (strncmp (ASM) <= Kernel_C.strncmp (C))
Saving Pairing (handleVMFaultEvent (ASM) <= Kernel_C.handleVMFaultEvent (C))
Saving Pairing (create_unmapped_it_frame_cap (ASM) <= Kernel_C.create_unmapped_it_frame_cap (C))
Saving Pairing (get_p_reg_kernel_img_boot (ASM) <= Kernel_C.get_p_reg_kernel_img_boot (C))
Saving Pairing (invokeTCB_NotificationControl (ASM) <= Kernel_C.invokeTCB_NotificationControl (C))
Saving Pairing (flushSpace (ASM) <= Kernel_C.flushSpace (C))
Saving Pairing (Arch_decodeIRQControlInvocation (ASM) <= Kernel_C.Arch_decodeIRQControlInvocation (C))
Saving Pairing (lookupSlotForCNodeOp (ASM) <= Kernel_C.lookupSlotForCNodeOp (C))
Saving Pairing (decodeBindNotification (ASM) <= Kernel_C.decodeBindNotification (C))
Saving Pairing (initL2Cache (ASM) <= Kernel_C.initL2Cache (C))
Saving Pairing (decodeTCBInvocation (ASM) <= Kernel_C.decodeTCBInvocation (C))
Saving Pairing (map_kernel_devices (ASM) <= Kernel_C.map_kernel_devices (C))
Saving Pairing (setDomain (ASM) <= Kernel_C.setDomain (C))
Saving Pairing (invokeTCB_CopyRegisters (ASM) <= Kernel_C.invokeTCB_CopyRegisters (C))
Saving Pairing (map_kernel_frame (ASM) <= Kernel_C.map_kernel_frame (C))
Saving Pairing (reserve_region (ASM) <= Kernel_C.reserve_region (C))
Saving Pairing (decodeIRQHandlerInvocation (ASM) <= Kernel_C.decodeIRQHandlerInvocation (C))
Saving Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C))
Saving Pairing (sameObjectAs (ASM) <= Kernel_C.sameObjectAs (C))
Saving Pairing (sendIPC (ASM) <= Kernel_C.sendIPC (C))
Saving Pairing (activateThread (ASM) <= Kernel_C.activateThread (C))
Saving Pairing (create_root_cnode (ASM) <= Kernel_C.create_root_cnode (C))
Saving Pairing (unmapPage (ASM) <= Kernel_C.unmapPage (C))
Saving Pairing (handleFaultReply (ASM) <= Kernel_C.handleFaultReply (C))
Saving Pairing (memzero (ASM) <= Kernel_C.memzero (C))
Saving Pairing (scheduleChooseNewThread (ASM) <= Kernel_C.scheduleChooseNewThread (C))
Saving Pairing (invokeTCB_ThreadControl (ASM) <= Kernel_C.invokeTCB_ThreadControl (C))
Saving Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C))
Saving Pairing (cleanCacheRange_RAM (ASM) <= Kernel_C.cleanCacheRange_RAM (C))
Saving Pairing (lookupPDSlot (ASM) <= Kernel_C.lookupPDSlot (C))
Saving Pairing (Arch_decodeTransfer (ASM) <= Kernel_C.Arch_decodeTransfer (C))
Saving Pairing (maskVMRights (ASM) <= Kernel_C.maskVMRights (C))
Saving Pairing (doIPCTransfer (ASM) <= Kernel_C.doIPCTransfer (C))
Saving Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C))
Saving Pairing (setNextPC (ASM) <= Kernel_C.setNextPC (C))
Saving Pairing (c_handle_interrupt (ASM) <= Kernel_C.c_handle_interrupt (C))
Saving Pairing (unmapPageTable (ASM) <= Kernel_C.unmapPageTable (C))
Saving Pairing (tcbEPAppend (ASM) <= Kernel_C.tcbEPAppend (C))
Saving Pairing (emptySlot (ASM) <= Kernel_C.emptySlot (C))
Saving Pairing (decodeDomainInvocation (ASM) <= Kernel_C.decodeDomainInvocation (C))
Saving Pairing (branchFlushRange (ASM) <= Kernel_C.branchFlushRange (C))
Saving Pairing (handleUnknownSyscall (ASM) <= Kernel_C.handleUnknownSyscall (C))
Saving Pairing (insert_region (ASM) <= Kernel_C.insert_region (C))
Saving Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C))
Saving Pairing (setIRQState (ASM) <= Kernel_C.setIRQState (C))
Saving Pairing (decodeUnbindNotification (ASM) <= Kernel_C.decodeUnbindNotification (C))
Saving Pairing (alloc_rootserver_obj (ASM) <= Kernel_C.alloc_rootserver_obj (C))
Saving Pairing (Arch_switchToIdleThread (ASM) <= Kernel_C.Arch_switchToIdleThread (C))
Saving Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C))
Saving Pairing (checkValidIPCBuffer (ASM) <= Kernel_C.checkValidIPCBuffer (C))
Saving Pairing (dist_init (ASM) <= Kernel_C.dist_init (C))
Saving Pairing (create_bi_frame_cap (ASM) <= Kernel_C.create_bi_frame_cap (C))
Saving Pairing (tcbSchedDequeue (ASM) <= Kernel_C.tcbSchedDequeue (C))
Saving Pairing (create_mapped_it_frame_cap (ASM) <= Kernel_C.create_mapped_it_frame_cap (C))
Saving Pairing (rescheduleRequired (ASM) <= Kernel_C.rescheduleRequired (C))
Saving Pairing (setPriority (ASM) <= Kernel_C.setPriority (C))
Saving Pairing (findPDForASID (ASM) <= Kernel_C.findPDForASID (C))
Saving Pairing (strlcat (ASM) <= Kernel_C.strlcat (C))
Saving Pairing (setupReplyMaster (ASM) <= Kernel_C.setupReplyMaster (C))
Saving Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))
Saving Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C))
Saving Pairing (decodeWriteRegisters (ASM) <= Kernel_C.decodeWriteRegisters (C))
Saving Pairing (invokeIRQHandler_AckIRQ (ASM) <= Kernel_C.invokeIRQHandler_AckIRQ (C))
Saving Pairing (setMCPriority (ASM) <= Kernel_C.setMCPriority (C))
Saving Pairing (invokeCNodeSaveCaller (ASM) <= Kernel_C.invokeCNodeSaveCaller (C))
Saving Pairing (maskCapRights (ASM) <= Kernel_C.maskCapRights (C))
Saving Pairing (flushTable (ASM) <= Kernel_C.flushTable (C))
Saving Pairing (isIOSpaceFrameCap (ASM) <= Kernel_C.isIOSpaceFrameCap (C))
Saving Pairing (initIRQController (ASM) <= Kernel_C.initIRQController (C))
Saving Pairing (arch_get_n_paging (ASM) <= Kernel_C.arch_get_n_paging (C))
Saving Pairing (lookupTargetSlot (ASM) <= Kernel_C.lookupTargetSlot (C))
Saving Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))
Saving Pairing (insertNewCap (ASM) <= Kernel_C.insertNewCap (C))
Saving Pairing (invalidateTLBByASID (ASM) <= Kernel_C.invalidateTLBByASID (C))
Saving Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C))
Saving Pairing (handleVMFault (ASM) <= Kernel_C.handleVMFault (C))
Saving Pairing (get_p_reg_kernel_img (ASM) <= Kernel_C.get_p_reg_kernel_img (C))
Saving Pairing (cap_get_capIsPhysical (ASM) <= Kernel_C.cap_get_capIsPhysical (C))
Saving Pairing (receiveSignal (ASM) <= Kernel_C.receiveSignal (C))
Saving Pairing (switchToIdleThread (ASM) <= Kernel_C.switchToIdleThread (C))
Saving Pairing (Arch_prepareThreadDelete (ASM) <= Kernel_C.Arch_prepareThreadDelete (C))
Saving Pairing (setIRQTrigger (ASM) <= Kernel_C.setIRQTrigger (C))
Saving Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C))
Saving Pairing (initTimer (ASM) <= Kernel_C.initTimer (C))
Saving Pairing (flushPage (ASM) <= Kernel_C.flushPage (C))
Saving Pairing (restore_user_context (ASM) <= Kernel_C.restore_user_context (C))
Saving Pairing (Arch_handleFaultReply (ASM) <= Kernel_C.Arch_handleFaultReply (C))
Saving Pairing (cap_get_capPtr (ASM) <= Kernel_C.cap_get_capPtr (C))
Saving Pairing (completeSignal (ASM) <= Kernel_C.completeSignal (C))
Saving Pairing (memcpy (ASM) <= Kernel_C.memcpy (C))
Saving Pairing (handleFault (ASM) <= Kernel_C.handleFault (C))
Saving Pairing (arm_errata (ASM) <= Kernel_C.arm_errata (C))
Saving Pairing (cteMove (ASM) <= Kernel_C.cteMove (C))
Saving Pairing (setExtraBadge (ASM) <= Kernel_C.setExtraBadge (C))
Saving Pairing (timerTick (ASM) <= Kernel_C.timerTick (C))
Saving Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C))
Saving Pairing (bindNotification (ASM) <= Kernel_C.bindNotification (C))
Saving Pairing (switchToThread (ASM) <= Kernel_C.switchToThread (C))
Saving Pairing (scheduleTCB (ASM) <= Kernel_C.scheduleTCB (C))
Saving Pairing (chooseThread (ASM) <= Kernel_C.chooseThread (C))
Saving Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C))
Saving Pairing (create_it_asid_pool (ASM) <= Kernel_C.create_it_asid_pool (C))
Saving Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C))
Saving Pairing (sendFaultIPC (ASM) <= Kernel_C.sendFaultIPC (C))
Saving Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C))
Saving Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))
Saving Pairing (getExtraCPtr (ASM) <= Kernel_C.getExtraCPtr (C))
Saving Pairing (handleInterrupt (ASM) <= Kernel_C.handleInterrupt (C))
Saving Pairing (capSwapForDelete (ASM) <= Kernel_C.capSwapForDelete (C))
Saving Pairing (loadHWASID (ASM) <= Kernel_C.loadHWASID (C))
Saving Pairing (decodeReadRegisters (ASM) <= Kernel_C.decodeReadRegisters (C))
Saving Pairing (tcbSchedAppend (ASM) <= Kernel_C.tcbSchedAppend (C))
Saving Pairing (invokeTCB_Suspend (ASM) <= Kernel_C.invokeTCB_Suspend (C))
Saving Pairing (preemptionPoint (ASM) <= Kernel_C.preemptionPoint (C))
Saving Pairing (char_to_long (ASM) <= Kernel_C.char_to_long (C))
Saving Pairing (restart (ASM) <= Kernel_C.restart (C))
Saving Pairing (decodeTCBConfigure (ASM) <= Kernel_C.decodeTCBConfigure (C))
Saving Pairing (decodeInvocation (ASM) <= Kernel_C.decodeInvocation (C))
Saving Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C))
Saving Pairing (setVMRootForFlush (ASM) <= Kernel_C.setVMRootForFlush (C))
Saving Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C))
Saving Pairing (Arch_postModifyRegisters (ASM) <= Kernel_C.Arch_postModifyRegisters (C))
Saving Pairing (Arch_createObject (ASM) <= Kernel_C.Arch_createObject (C))
Saving Pairing (createObject (ASM) <= Kernel_C.createObject (C))
Saving Pairing (lookupPivotSlot (ASM) <= Kernel_C.lookupPivotSlot (C))
Saving Pairing (performInvocation_Reply (ASM) <= Kernel_C.performInvocation_Reply (C))
Saving Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C))
Saving Pairing (create_idle_thread (ASM) <= Kernel_C.create_idle_thread (C))
Checking 284 function pair problems
Testing Function pair Pairing (handleReply (ASM) <= Kernel_C.handleReply (C))
  (function pairing 1 of 284)
 .. built problem, finding proof
Decided to case split at (14, 'ASM')
  (in problem)
Now doing proof search in true case (14 visited) in problem.
Now doing proof search in false case (14 not visited) in problem.
ProofNode ('CaseSplit', (14, 'ASM'), (ProofNode ('Restr', (14, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (14, ('Number', (0, 1))), (ProofNode ('Restr', (53, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 14 is visited
Step 2: case in (1) where 14 is visited
  Prove the number of visits to 14 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 14 is not visited
  Prove the number of visits to 14 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 53 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleReply (ASM) <= Kernel_C.handleReply (C)), time taken: 1.65s
Testing Function pair Pairing (tcbSchedAppend (ASM) <= Kernel_C.tcbSchedAppend (C))
  (function pairing 2 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (tcbSchedAppend (ASM) <= Kernel_C.tcbSchedAppend (C)), time taken: 0.42s
Testing Function pair Pairing (isIOSpaceFrameCap (ASM) <= Kernel_C.isIOSpaceFrameCap (C))
  (function pairing 3 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isIOSpaceFrameCap (ASM) <= Kernel_C.isIOSpaceFrameCap (C)), time taken: 0.05s
Testing Function pair Pairing (setPriority (ASM) <= Kernel_C.setPriority (C))
  (function pairing 4 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setPriority (ASM) <= Kernel_C.setPriority (C)), time taken: 0.76s
Testing Function pair Pairing (Arch_updateCapData (ASM) <= Kernel_C.Arch_updateCapData (C))
  (function pairing 5 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_updateCapData (ASM) <= Kernel_C.Arch_updateCapData (C)), time taken: 0.07s
Testing Function pair Pairing (idle_thread (ASM) <= Kernel_C.idle_thread (C))
  (function pairing 6 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [1, 7]
  (in problem)
Now doing proof search in 1 init case in problem.
Now doing proof search in 1 loop case in problem.
ProofNode ('Split', ((1, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (7, (0, 1), [Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (1, ('Number', (0, 1))), (ProofNode ('Restr', (7, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (1, ('Offset', (0, 1))), (ProofNode ('Restr', (7, ('Offset', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 1 related to visits to 7
    with equalities
      ((Mem) ('mem')) (@ addr 1)
      = ((Mem) ('Mem')) (@ addr 7)
    and with invariants
      ((Word32) ('r21')) (@ addr 1)
      ((Word32) ('r4')) (@ addr 1)
      ((Bool) ('v')) (@ addr 1)
      ((Word32) ('r27')) (@ addr 1)
      ((Word32) ('r17')) (@ addr 1)
      ((Word32) ('r0')) (@ addr 1)
      ((Word32) ('r23')) (@ addr 1)
      ((Word32) ('r13')) (@ addr 1)
      ((Word32) ('r10')) (@ addr 1)
      ((Word32) ('r28')) (@ addr 1)
      ((Word32) ('r19')) (@ addr 1)
      ((Word32) ('r16')) (@ addr 1)
      ((Word64) ('clock')) (@ addr 1)
      ((Word32) ('r12')) (@ addr 1)
      ((Word32) ('r9')) (@ addr 1)
      ((Bool) ('z')) (@ addr 1)
      ((Word32) ('r6')) (@ addr 1)
      ((Word32) ('r7')) (@ addr 1)
      ((Word32) ('r31')) (@ addr 1)
      ((Word32) ('r25')) (@ addr 1)
      ((Word32) ('r24')) (@ addr 1)
      ((Word32) ('r8')) (@ addr 1)
      ((Word32) ('r29')) (@ addr 1)
      ((Word32) ('r3')) (@ addr 1)
      ((Bool) ('n')) (@ addr 1)
      ((Bool) ('c')) (@ addr 1)
      ((Word32) ('r18')) (@ addr 1)
      ((Word32) ('r20')) (@ addr 1)
      ((Word32) ('r30')) (@ addr 1)
      ((Word32) ('r14')) (@ addr 1)
      ((Word32) ('r15')) (@ addr 1)
      ((Word32) ('mode')) (@ addr 1)
      ((Word32) ('r11')) (@ addr 1)
      ((Word32) ('r5')) (@ addr 1)
      ((Word32) ('r26')) (@ addr 1)
      ((Word32) ('r1')) (@ addr 1)
      ((Word32) ('r2')) (@ addr 1)
      ((Bool) (ROData('mem'))) (@ addr 1)
      ((Word32) ('r22')) (@ addr 1)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 1)
      ((Word32[50]) ('GhostAssertions')) (@ addr 7)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 7)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 1 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 7 is in {0 ..< 1}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 1 is in {i + 0 ..< i + 1}
    .. proven.
Step 6: 
  Prove the number of visits to 7 is in {i + 0 ..< i + 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (idle_thread (ASM) <= Kernel_C.idle_thread (C)), time taken: 3.62s
Testing Function pair Pairing (deleteASIDPool (ASM) <= Kernel_C.deleteASIDPool (C))
  (function pairing 7 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [8, 63]
  (in problem)
Now doing proof search in 8 init case in problem.
Now doing proof search in 8 loop case in problem.
ProofNode ('Split', ((8, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (63, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'asid_base___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'offset___unsigned#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'pool___ptr_to_struct_asid_pool_C#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (8, ('Number', (0, 3))), (ProofNode ('Restr', (63, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (8, ('Offset', (0, 3))), (ProofNode ('Restr', (63, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 8 related to visits to 63
    with equalities
      ((Mem) ('mem')) (@ addr 8)
      = ((Mem) ('Mem')) (@ addr 63)
    and with invariants
      ((Word32) ('r7')) (@ addr 8)
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 8)
      ((Word32) ('r11')) (@ addr 8)
      ((Word32) (('r5' + ((0 - '#seq-visits') * 4)))) (@ addr 8)
      ((Word32) ('r9')) (@ addr 8)
      ((Word32) ('ret')) (@ addr 8)
      ((Word32) ('r13')) (@ addr 8)
      ((Word32) ('r10')) (@ addr 8)
      ((Word32) ('r6')) (@ addr 8)
      ((Bool) (ROData('mem'))) (@ addr 8)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 8)
      ((Word32) ('asid_base___unsigned_long#v')) (@ addr 63)
      ((Word32) (('offset___unsigned#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 63)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 63)
      ((Word32) ('pool___ptr_to_struct_asid_pool_C#v')) (@ addr 63)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 8 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 63 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 8 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 63 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deleteASIDPool (ASM) <= Kernel_C.deleteASIDPool (C)), time taken: 13.03s
Testing Function pair Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C))
  (function pairing 8 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [71, 132]
  (in problem)
Now doing proof search in 71 init case in problem.
Now doing proof search in 71 loop case in problem.
ProofNode ('Split', ((71, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 4)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (132, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'badge___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'epptr___ptr_to_struct_endpoint_C#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'queue___struct_tcb_queue_C#v.head_C')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v')), (Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'queue___struct_tcb_queue_C#v.end_C'))], 2, 1), (ProofNode ('Restr', (71, ('Number', (0, 3))), (ProofNode ('Restr', (132, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (71, ('Offset', (0, 3))), (ProofNode ('Restr', (132, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 71 related to visits to 132
    with equalities
      ((Mem) ('mem')) (@ addr 71)
      = ((Mem) ('Mem')) (@ addr 132)
      ((Word32) ('r10')) (@ addr 71)
      = ((Word32) ('queue___struct_tcb_queue_C#v.head_C')) (@ addr 132)
      ((Word32) ('r4')) (@ addr 71)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 132)
      ((Word32) ('r8')) (@ addr 71)
      = ((Word32) ('queue___struct_tcb_queue_C#v.end_C')) (@ addr 132)
    and with invariants
      ((Word32) ('r13')) (@ addr 71)
      ((Word32) ('r9')) (@ addr 71)
      ((Word32) ('r6')) (@ addr 71)
      ((Word32) ('r7')) (@ addr 71)
      ((Word32) ('r11')) (@ addr 71)
      ((Word32) ('ret')) (@ addr 71)
      ((Bool) (ROData('mem'))) (@ addr 71)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 4))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 71)
      ((Word32) ('badge___unsigned_long#v')) (@ addr 132)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 132)
      ((Word32) ('epptr___ptr_to_struct_endpoint_C#v')) (@ addr 132)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 71 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 132 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 71 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 132 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C)), time taken: 155.34s
Testing Function pair Pairing (lookupPDSlot (ASM) <= Kernel_C.lookupPDSlot (C))
  (function pairing 9 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupPDSlot (ASM) <= Kernel_C.lookupPDSlot (C)), time taken: 0.07s
Testing Function pair Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C))
  (function pairing 10 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C)), time taken: 6.54s
Testing Function pair Pairing (create_idle_thread (ASM) <= Kernel_C.create_idle_thread (C))
  (function pairing 11 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_idle_thread (ASM) <= Kernel_C.create_idle_thread (C)), time taken: 0.12s
Testing Function pair Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C))
  (function pairing 12 of 284)
 .. built problem, finding proof
Discovered that points [39 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (39, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 39 is in {0 ..< 2}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C)), time taken: 0.48s
Testing Function pair Pairing (create_unmapped_it_frame_cap (ASM) <= Kernel_C.create_unmapped_it_frame_cap (C))
  (function pairing 13 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_unmapped_it_frame_cap (ASM) <= Kernel_C.create_unmapped_it_frame_cap (C)), time taken: 0.11s
Testing Function pair Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C))
  (function pairing 14 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C)), time taken: 13.39s
Testing Function pair Pairing (memset (ASM) <= Kernel_C.memset (C))
  (function pairing 15 of 284)
 .. built problem, finding proof
Decided to case split at (7, 'ASM')
  (in problem)
Now doing proof search in true case (7 visited) in problem.
Now doing proof search in false case (7 not visited) in problem.
Discovered a loop relation for split points [15, 52]
  (in false case (7 not visited) in problem)
Now doing proof search in 15 init case in false case (7 not visited) in problem.
Now doing proof search in 15 loop case in false case (7 not visited) in problem.
ProofNode ('CaseSplit', (7, 'ASM'), (ProofNode ('Restr', (7, ('Number', (1, 2))), (ProofNode ('Restr', (43, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (7, ('Number', (0, 1))), (ProofNode ('Restr', (43, ('Number', (0, 1))), (ProofNode ('Split', ((15, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (52, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#5#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 's___ptr_to_void#v'), Expr ('Var', Type ('Word', 32), name = 'c___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'p___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (15, ('Number', (0, 3))), (ProofNode ('Restr', (52, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (15, ('Offset', (0, 3))), (ProofNode ('Restr', (52, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 7 is visited
Step 2: case in (1) where 7 is visited
  Prove the number of visits to 7 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 43 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 7 is not visited
  Prove the number of visits to 7 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 43 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove visits to 15 related to visits to 52
    with equalities
      ((Mem) ('mem')) (@ addr 15)
      = ((Mem) ('Mem')) (@ addr 52)
    and with invariants
      ((Word32) ('r7')) (@ addr 15)
      ((Word32) ('r4')) (@ addr 15)
      ((Word32) ('r8')) (@ addr 15)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 15)
      ((Word32) ('r13')) (@ addr 15)
      ((Word32) ('r9')) (@ addr 15)
      ((Word32) ('ret')) (@ addr 15)
      ((Word32) ('r2')) (@ addr 15)
      ((Word32) ('r11')) (@ addr 15)
      ((Word32) ('r1')) (@ addr 15)
      ((Word32) ('r10')) (@ addr 15)
      ((Bool) (ROData('mem'))) (@ addr 15)
      ((Word32) ('r5')) (@ addr 15)
      ((Word32) ('r6')) (@ addr 15)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 15)
      ((Word32) (('loop#5#count' + ((0 - '#seq-visits') * 1)))) (@ addr 52)
      ((Word32) (('n___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 52)
      ((Word32) ('s___ptr_to_void#v')) (@ addr 52)
      ((Word32) ('c___unsigned_long#v')) (@ addr 52)
      ((Word32[50]) ('GhostAssertions')) (@ addr 52)
      ((Word32) (('p___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 52)
    .. proven.
Step 8: case in (7) where the length of the sequence < 2
  Prove the number of visits to 15 is in {0 ..< 3}
    .. proven.
Step 9: 
  Prove the number of visits to 52 is in {0 ..< 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where the length of the sequence is i + 2
  Prove the number of visits to 15 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 52 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (memset (ASM) <= Kernel_C.memset (C)), time taken: 7.43s
Testing Function pair Pairing (setNextPC (ASM) <= Kernel_C.setNextPC (C))
  (function pairing 16 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setNextPC (ASM) <= Kernel_C.setNextPC (C)), time taken: 0.07s
Testing Function pair Pairing (handleVMFaultEvent (ASM) <= Kernel_C.handleVMFaultEvent (C))
  (function pairing 17 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleVMFaultEvent (ASM) <= Kernel_C.handleVMFaultEvent (C)), time taken: 0.31s
Testing Function pair Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C))
  (function pairing 18 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [67, 155]
  (in problem)
Now doing proof search in 67 init case in problem.
Now doing proof search in 67 loop case in problem.
ProofNode ('Split', ((67, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (155, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'first_untyped_slot___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'device_memory___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'size_bits___unsigned#v')), (Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_region_C#v.start_C'))], 2, 1), (ProofNode ('Restr', (67, ('Number', (0, 3))), (ProofNode ('Restr', (155, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (67, ('Offset', (0, 3))), (ProofNode ('Restr', (155, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 67 related to visits to 155
    with equalities
      ((Mem) ('mem')) (@ addr 67)
      = ((Mem) ('Mem')) (@ addr 155)
      ((Word32) ('r4')) (@ addr 67)
      = ((Word32) ('size_bits___unsigned#v')) (@ addr 155)
      ((Word32) ('r5')) (@ addr 67)
      = ((Word32) ('reg___struct_region_C#v.start_C')) (@ addr 155)
    and with invariants
      ((Word32) ('r13')) (@ addr 67)
      ((Word32) ('r10')) (@ addr 67)
      ((Word32) ('r9')) (@ addr 67)
      ((Word32) ('r6')) (@ addr 67)
      ((Word32) ('r7')) (@ addr 67)
      ((Word32) ('r8')) (@ addr 67)
      ((Word32) ('r11')) (@ addr 67)
      ((Word32) ('ret')) (@ addr 67)
      ((Bool) (ROData('mem'))) (@ addr 67)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 67)
      ((Word32) ('first_untyped_slot___unsigned_long#v')) (@ addr 155)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 155)
      ((Word32) ('reg___struct_region_C#v.end_C')) (@ addr 155)
      ((Word32) ('device_memory___unsigned_long#v')) (@ addr 155)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 155)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 155)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 67 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 155 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 67 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 155 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C)), time taken: 384.48s
Testing Function pair Pairing (deletedIRQHandler (ASM) <= Kernel_C.deletedIRQHandler (C))
  (function pairing 19 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deletedIRQHandler (ASM) <= Kernel_C.deletedIRQHandler (C)), time taken: 0.09s
Testing Function pair Pairing (configureIdleThread (ASM) <= Kernel_C.configureIdleThread (C))
  (function pairing 20 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (configureIdleThread (ASM) <= Kernel_C.configureIdleThread (C)), time taken: 0.20s
Testing Function pair Pairing (handleInterruptEntry (ASM) <= Kernel_C.handleInterruptEntry (C))
  (function pairing 21 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleInterruptEntry (ASM) <= Kernel_C.handleInterruptEntry (C)), time taken: 0.56s
Testing Function pair Pairing (create_initial_thread (ASM) <= Kernel_C.create_initial_thread (C))
  (function pairing 22 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_initial_thread (ASM) <= Kernel_C.create_initial_thread (C)), time taken: 1979.07s
Testing Function pair Pairing (hasCancelSendRights (ASM) <= Kernel_C.hasCancelSendRights (C))
  (function pairing 23 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (hasCancelSendRights (ASM) <= Kernel_C.hasCancelSendRights (C)), time taken: 0.15s
Testing Function pair Pairing (decodeTCBInvocation (ASM) <= Kernel_C.decodeTCBInvocation (C))
  (function pairing 24 of 284)
 .. built problem, finding proof
Decided to case split at (30, 'ASM')
  (in problem)
Now doing proof search in true case (30 visited) in problem.
Now doing proof search in false case (30 not visited) in problem.
Decided to case split at (27, 'ASM')
  (in false case (30 not visited) in problem)
Now doing proof search in true case (27 visited) in false case (30 not visited) in problem.
Now doing proof search in false case (27 not visited) in false case (30 not visited) in problem.
Decided to case split at (33, 'ASM')
  (in false case (27 not visited) in false case (30 not visited) in problem)
Now doing proof search in true case (33 visited) in false case (27 not visited) in false case (30 not visited) in problem.
Now doing proof search in false case (33 not visited) in false case (27 not visited) in false case (30 not visited) in problem.
Decided to case split at (39, 'ASM')
  (in false case (33 not visited) in false case (27 not visited) in false case (30 not visited) in problem)
Now doing proof search in true case (39 visited) in false case (33 not visited) in false case (27 not visited) in false case (30 not visited) in problem.
Now doing proof search in false case (39 not visited) in false case (33 not visited) in false case (27 not visited) in false case (30 not visited) in problem.
Decided to case split at (42, 'ASM')
  (in false case (39 not visited) in false case (33 not visited) in false case (27 not visited) in false case (30 not visited) in problem)
Now doing proof search in true case (42 visited) in false case (39 not visited) in false case (33 not visited) in false case (27 not visited) in false case (30 not visited) in problem.
Now doing proof search in false case (42 not visited) in false case (39 not visited) in false case (33 not visited) in false case (27 not visited) in false case (30 not visited) in problem.
Decided to case split at (36, 'ASM')
  (in false case (42 not visited) in false case (39 not visited) in false case (33 not visited) in false case (27 not visited) in false case (30 not visited) in problem)
Now doing proof search in true case (36 visited) in false case (42 not visited) in false case (39 not visited) in false case (33 not visited) in false case (27 not visited) in false case (30 not visited) in problem.
Now doing proof search in false case (36 not visited) in false case (42 not visited) in false case (39 not visited) in false case (33 not visited) in false case (27 not visited) in false case (30 not visited) in problem.
ProofNode ('CaseSplit', (30, 'ASM'), (ProofNode ('Restr', (30, ('Number', (1, 2))), (ProofNode ('Restr', (276, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (30, ('Number', (0, 1))), (ProofNode ('Restr', (276, ('Number', (0, 1))), (ProofNode ('CaseSplit', (27, 'ASM'), (ProofNode ('Restr', (27, ('Number', (1, 2))), (ProofNode ('Restr', (273, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (27, ('Number', (0, 1))), (ProofNode ('Restr', (273, ('Number', (0, 1))), (ProofNode ('CaseSplit', (33, 'ASM'), (ProofNode ('Restr', (33, ('Number', (1, 2))), (ProofNode ('Restr', (251, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (33, ('Number', (0, 1))), (ProofNode ('Restr', (251, ('Number', (0, 1))), (ProofNode ('CaseSplit', (39, 'ASM'), (ProofNode ('Restr', (39, ('Number', (1, 2))), (ProofNode ('Restr', (279, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (39, ('Number', (0, 1))), (ProofNode ('Restr', (279, ('Number', (0, 1))), (ProofNode ('CaseSplit', (42, 'ASM'), (ProofNode ('Restr', (42, ('Number', (1, 2))), (ProofNode ('Restr', (282, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (42, ('Number', (0, 1))), (ProofNode ('Restr', (282, ('Number', (0, 1))), (ProofNode ('CaseSplit', (36, 'ASM'), (ProofNode ('Restr', (36, ('Number', (1, 2))), (ProofNode ('Restr', (258, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (36, ('Number', (0, 1))), (ProofNode ('Restr', (258, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 30 is visited
Step 2: case in (1) where 30 is visited
  Prove the number of visits to 30 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 276 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 30 is not visited
  Prove the number of visits to 30 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 276 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 27 is visited
Step 8: case in (7) where 27 is visited
  Prove the number of visits to 27 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 273 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 27 is not visited
  Prove the number of visits to 27 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 273 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 33 is visited
Step 14: case in (13) where 33 is visited
  Prove the number of visits to 33 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 251 is in {1 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where 33 is not visited
  Prove the number of visits to 33 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 251 is in {0 ..< 1}
    .. proven.
Step 19: 
  case split on whether 39 is visited
Step 20: case in (19) where 39 is visited
  Prove the number of visits to 39 is in {1 ..< 2}
    .. proven.
Step 21: 
  Prove the number of visits to 279 is in {1 ..< 2}
    .. proven.
Step 22: 
  prove all verification conditions
    .. proven.
Step 23: case in (19) where 39 is not visited
  Prove the number of visits to 39 is in {0 ..< 1}
    .. proven.
Step 24: 
  Prove the number of visits to 279 is in {0 ..< 1}
    .. proven.
Step 25: 
  case split on whether 42 is visited
Step 26: case in (25) where 42 is visited
  Prove the number of visits to 42 is in {1 ..< 2}
    .. proven.
Step 27: 
  Prove the number of visits to 282 is in {1 ..< 2}
    .. proven.
Step 28: 
  prove all verification conditions
    .. proven.
Step 29: case in (25) where 42 is not visited
  Prove the number of visits to 42 is in {0 ..< 1}
    .. proven.
Step 30: 
  Prove the number of visits to 282 is in {0 ..< 1}
    .. proven.
Step 31: 
  case split on whether 36 is visited
Step 32: case in (31) where 36 is visited
  Prove the number of visits to 36 is in {1 ..< 2}
    .. proven.
Step 33: 
  Prove the number of visits to 258 is in {1 ..< 2}
    .. proven.
Step 34: 
  prove all verification conditions
    .. proven.
Step 35: case in (31) where 36 is not visited
  Prove the number of visits to 36 is in {0 ..< 1}
    .. proven.
Step 36: 
  Prove the number of visits to 258 is in {0 ..< 1}
    .. proven.
Step 37: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeTCBInvocation (ASM) <= Kernel_C.decodeTCBInvocation (C)), time taken: 27.55s
Testing Function pair Pairing (calculate_extra_bi_size_bits (ASM) <= Kernel_C.calculate_extra_bi_size_bits (C))
  (function pairing 25 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (calculate_extra_bi_size_bits (ASM) <= Kernel_C.calculate_extra_bi_size_bits (C)), time taken: 0.09s
Testing Function pair Pairing (create_it_asid_pool (ASM) <= Kernel_C.create_it_asid_pool (C))
  (function pairing 26 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_it_asid_pool (ASM) <= Kernel_C.create_it_asid_pool (C)), time taken: 1.48s
Testing Function pair Pairing (performInvocation_Endpoint (ASM) <= Kernel_C.performInvocation_Endpoint (C))
  (function pairing 27 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (performInvocation_Endpoint (ASM) <= Kernel_C.performInvocation_Endpoint (C)), time taken: 0.47s
Testing Function pair Pairing (isCapRevocable (ASM) <= Kernel_C.isCapRevocable (C))
  (function pairing 28 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isCapRevocable (ASM) <= Kernel_C.isCapRevocable (C)), time taken: 0.33s
Testing Function pair Pairing (maybe_alloc_extra_bi (ASM) <= Kernel_C.maybe_alloc_extra_bi (C))
  (function pairing 29 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (maybe_alloc_extra_bi (ASM) <= Kernel_C.maybe_alloc_extra_bi (C)), time taken: 0.16s
Testing Function pair Pairing (char_to_long (ASM) <= Kernel_C.char_to_long (C))
  (function pairing 30 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (char_to_long (ASM) <= Kernel_C.char_to_long (C)), time taken: 0.09s
Testing Function pair Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C))
  (function pairing 31 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [6, 83]
  (in problem)
Now doing proof search in 6 init case in problem.
Discovered that points [70 (loop head)] can be bounded
  (in 6 init case in problem)
Discovered that points [58 (loop head)] can be bounded
  (in 6 init case in problem)
Now doing proof search in 6 loop case in problem.
Found a future induction at 70
Now doing proof search in 6 loop case in problem.
Discovered a loop relation for split points [23, 75]
  (in 6 loop case in problem)
Now doing proof search in 23 init case in 6 loop case in problem.
Now doing proof search in 23 loop case in 6 loop case in problem.
ProofNode ('Split', ((6, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (83, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'receiver___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#13#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'recvBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'sender___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'sendBuf___ptr_to_unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (6, ('Number', (0, 3))), (ProofNode ('Restr', (83, ('Number', (0, 3))), (ProofNode ('Restr', (70, ('Number', (0, 2))), (ProofNode ('Restr', (58, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (6, ('Offset', (0, 3))), (ProofNode ('Restr', (83, ('Offset', (0, 3))), (ProofNode ('SingleRevInduct', (70, ([Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'recvBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'sendBuf___ptr_to_unsigned_long#v'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])])], 1), (Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Num', Type ('Word', 32), val = 939526326)]), 4294967293)), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (75, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'sendBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'recvBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 3))), (ProofNode ('Restr', (75, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (75, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),))))
 .. proof found.
Step 1: 
  prove visits to 6 related to visits to 83
    with equalities
      ((Mem) ('mem')) (@ addr 6)
      = ((Mem) ('Mem')) (@ addr 83)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 4)))) (@ addr 6)
      ((Word32) ('r0')) (@ addr 6)
      ((Word32) ('r13')) (@ addr 6)
      ((Word32) ('r10')) (@ addr 6)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 1)))) (@ addr 6)
      ((Word32) ('r9')) (@ addr 6)
      ((Word32) ('r6')) (@ addr 6)
      ((Word32) ('r8')) (@ addr 6)
      ((Word32) ('r3')) (@ addr 6)
      ((Word32) ('r11')) (@ addr 6)
      ((Word32) ('r7')) (@ addr 6)
      ((Word32) ('ret')) (@ addr 6)
      ((Word32) ('r1')) (@ addr 6)
      ((Word32) ('r2')) (@ addr 6)
      ((Bool) (ROData('mem'))) (@ addr 6)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 6)
      ((Word32) ('receiver___ptr_to_struct_tcb_C#v')) (@ addr 83)
      ((Word32) (('loop#13#count' + ((0 - '#seq-visits') * 1)))) (@ addr 83)
      ((Word32) ('n___unsigned_long#v')) (@ addr 83)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 83)
      ((Word32) ('recvBuf___ptr_to_unsigned_long#v')) (@ addr 83)
      ((Word32) ('sender___ptr_to_struct_tcb_C#v')) (@ addr 83)
      ((Word32[50]) ('GhostAssertions')) (@ addr 83)
      ((Word32) ('sendBuf___ptr_to_unsigned_long#v')) (@ addr 83)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 6 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 83 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 70 is in {0 ..< 2}
    .. proven.
Step 5: 
  Prove the number of visits to 58 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Step 7: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 6 is in {i + 0 ..< i + 3}
    .. proven.
Step 8: 
  Prove the number of visits to 83 is in {i + 0 ..< i + 3}
    .. proven.
Step 9: 
  Proving a predicate by future induction.
    proving these invariants by 1-induction
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 70)
      ((Word32) ('n___unsigned_long#v')) (@ addr 70)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 70)
      ((Word32) ('recvBuf___ptr_to_unsigned_long#v')) (@ addr 70)
      ((Word32[50]) ('GhostAssertions')) (@ addr 70)
      ((Word32) ('sendBuf___ptr_to_unsigned_long#v')) (@ addr 70)
      ((Bool) (Equals(LessEquals(((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))), ((Word32) ('i___unsigned_long#v'))), Less(((Word32) ((0 - WordCastSigned(1)))), ((Word32) ('i___unsigned_long#v')))))) (@ addr 70)
      ((Bool) (Equals(LessEquals(((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))), ((Word32) ('i___unsigned_long#v'))), Less(((Word32) ('i___unsigned_long#v')), ((Word32) ((0 - WordCastSigned(1)))))))) (@ addr 70)
    then establishing this predicate
      ((Bool) (Less(((Word32) ('n___unsigned_long#v')), ((Word32) (939526326))))) (@ addr 70)
    at large iterations (4294967293) and by back induction.
    .. proven.
Step 10: 
  prove visits to 23 related to visits to 75
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 75)
    and with invariants
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r1')) (@ addr 23)
      ((Word32) ('r0')) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 4)))) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 4)))) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Word32) ('sendBuf___ptr_to_unsigned_long#v')) (@ addr 75)
      ((Word32) ('n___unsigned_long#v')) (@ addr 75)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 75)
      ((Word32) ('recvBuf___ptr_to_unsigned_long#v')) (@ addr 75)
      ((Word32[50]) ('GhostAssertions')) (@ addr 75)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 75)
    .. proven.
Step 11: case in (10) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 3}
    .. proven.
Step 12: 
  Prove the number of visits to 75 is in {0 ..< 3}
    .. proven.
Step 13: 
  prove all verification conditions
    .. proven.
Step 14: case in (10) where the length of the sequence is j + 2
  Prove the number of visits to 23 is in {j + 0 ..< j + 3}
    .. proven.
Step 15: 
  Prove the number of visits to 75 is in {j + 0 ..< j + 3}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C)), time taken: 47.25s
Testing Function pair Pairing (cteInsert (ASM) <= Kernel_C.cteInsert (C))
  (function pairing 32 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteInsert (ASM) <= Kernel_C.cteInsert (C)), time taken: 1.66s
Testing Function pair Pairing (bi_finalise (ASM) <= Kernel_C.bi_finalise (C))
  (function pairing 33 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (bi_finalise (ASM) <= Kernel_C.bi_finalise (C)), time taken: 0.08s
Testing Function pair Pairing (Arch_decodeTransfer (ASM) <= Kernel_C.Arch_decodeTransfer (C))
  (function pairing 34 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_decodeTransfer (ASM) <= Kernel_C.Arch_decodeTransfer (C)), time taken: 0.06s
Testing Function pair Pairing (tcbSchedDequeue (ASM) <= Kernel_C.tcbSchedDequeue (C))
  (function pairing 35 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (tcbSchedDequeue (ASM) <= Kernel_C.tcbSchedDequeue (C)), time taken: 0.65s
Testing Function pair Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))
  (function pairing 36 of 284)
Aborting Problem (Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))): underspecified instruction'strex_r0_r1_r3_E0011208
Result ProblemAbort for pair Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C)), time taken: 0.00s
Testing Function pair Pairing (sendIPC (ASM) <= Kernel_C.sendIPC (C))
  (function pairing 37 of 284)
 .. built problem, finding proof
Decided to case split at (5, 'ASM')
  (in problem)
Now doing proof search in true case (5 visited) in problem.
Now doing proof search in false case (5 not visited) in problem.
ProofNode ('CaseSplit', (5, 'ASM'), (ProofNode ('Restr', (5, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (229, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 5 is visited
Step 2: case in (1) where 5 is visited
  Prove the number of visits to 5 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 5 is not visited
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 229 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (sendIPC (ASM) <= Kernel_C.sendIPC (C)), time taken: 18.97s
Testing Function pair Pairing (Arch_maskCapRights (ASM) <= Kernel_C.Arch_maskCapRights (C))
  (function pairing 38 of 284)
 .. built problem, finding proof
Decided to case split at (10, 'ASM')
  (in problem)
Now doing proof search in true case (10 visited) in problem.
Now doing proof search in false case (10 not visited) in problem.
ProofNode ('CaseSplit', (10, 'ASM'), (ProofNode ('Restr', (10, ('Number', (1, 2))), (ProofNode ('Restr', (88, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (10, ('Number', (0, 1))), (ProofNode ('Restr', (88, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 10 is visited
Step 2: case in (1) where 10 is visited
  Prove the number of visits to 10 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 88 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 10 is not visited
  Prove the number of visits to 10 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 88 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_maskCapRights (ASM) <= Kernel_C.Arch_maskCapRights (C)), time taken: 1.96s
Testing Function pair Pairing (chooseThread (ASM) <= Kernel_C.chooseThread (C))
  (function pairing 39 of 284)
 .. built problem, finding proof
Decided to case split at (5, 'ASM')
  (in problem)
Now doing proof search in true case (5 visited) in problem.
Now doing proof search in false case (5 not visited) in problem.
ProofNode ('CaseSplit', (5, 'ASM'), (ProofNode ('Restr', (5, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (51, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 5 is visited
Step 2: case in (1) where 5 is visited
  Prove the number of visits to 5 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 5 is not visited
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 51 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (chooseThread (ASM) <= Kernel_C.chooseThread (C)), time taken: 1.81s
Testing Function pair Pairing (deriveCap (ASM) <= Kernel_C.deriveCap (C))
  (function pairing 40 of 284)
 .. built problem, finding proof
Decided to case split at (8, 'ASM')
  (in problem)
Now doing proof search in true case (8 visited) in problem.
Now doing proof search in false case (8 not visited) in problem.
ProofNode ('CaseSplit', (8, 'ASM'), (ProofNode ('Restr', (8, ('Number', (1, 2))), (ProofNode ('Restr', (110, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Restr', (110, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 8 is visited
Step 2: case in (1) where 8 is visited
  Prove the number of visits to 8 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 110 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 8 is not visited
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 110 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deriveCap (ASM) <= Kernel_C.deriveCap (C)), time taken: 2.37s
Testing Function pair Pairing (create_it_address_space (ASM) <= Kernel_C.create_it_address_space (C))
  (function pairing 41 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [21, 151]
  (in problem)
Now doing proof search in 21 init case in problem.
Now doing proof search in 21 loop case in problem.
ProofNode ('Split', ((21, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1048576)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'ret_addr_input'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (151, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'it_v_reg___struct_v_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'slot_pos_before___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'pt_vptr___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Num', Type ('Word', 32), val = 8), Expr ('Num', Type ('Word', 32), val = 12)])])])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (21, ('Number', (0, 3))), (ProofNode ('Restr', (151, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (21, ('Offset', (0, 3))), (ProofNode ('Restr', (151, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 21 related to visits to 151
    with equalities
      ((Mem) ('mem')) (@ addr 21)
      = ((Mem) ('Mem')) (@ addr 151)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1048576)))) (@ addr 21)
      ((Word32) ('r13')) (@ addr 21)
      ((Word32) ('r10')) (@ addr 21)
      ((Word32) ('r9')) (@ addr 21)
      ((Word32) ('r6')) (@ addr 21)
      ((Word32) ('r7')) (@ addr 21)
      ((Word32) ('r8')) (@ addr 21)
      ((Word32) ('ret_addr_input')) (@ addr 21)
      ((Word32) ('r11')) (@ addr 21)
      ((Word32) ('r5')) (@ addr 21)
      ((Word32) ('ret')) (@ addr 21)
      ((Bool) (ROData('mem'))) (@ addr 21)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 21)
      ((Word32) ('it_v_reg___struct_v_region_C#v.end_C')) (@ addr 151)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 151)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.1')) (@ addr 151)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 151)
      ((Word32) ('slot_pos_before___unsigned_long#v')) (@ addr 151)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.0')) (@ addr 151)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 151)
      ((Word32) (('pt_vptr___unsigned_long#v' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast((8 + 12))))))) (@ addr 151)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 21 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 151 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 21 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 151 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_it_address_space (ASM) <= Kernel_C.create_it_address_space (C)), time taken: 235.87s
Testing Function pair Pairing (invalidateCacheRange_RAM (ASM) <= Kernel_C.invalidateCacheRange_RAM (C))
  (function pairing 42 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [10, 136]
  (in problem)
Now doing proof search in 10 init case in problem.
Discovered that points [154 (loop head)] can be bounded
  (in 10 init case in problem)
Discovered that points [63 (loop head)] can be bounded
  (in 10 init case in problem)
Discovered a loop relation for split points [20, 89]
  (in 10 init case in problem)
Now doing proof search in 20 init case in 10 init case in problem.
Now doing proof search in 20 loop case in 10 init case in problem.
Now doing proof search in 10 loop case in problem.
Discovered that points [154 (loop head)] can be bounded
  (in 10 loop case in problem)
Discovered that points [63 (loop head)] can be bounded
  (in 10 loop case in problem)
Discovered a loop relation for split points [20, 89]
  (in 10 loop case in problem)
Now doing proof search in 20 init case in 10 loop case in problem.
Now doing proof search in 20 loop case in 10 loop case in problem.
ProofNode ('Split', ((10, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (136, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.3'), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.1'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 5)])])])]), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.3'))], 2, 1), (ProofNode ('Restr', (10, ('Number', (0, 3))), (ProofNode ('Restr', (136, ('Number', (0, 3))), (ProofNode ('Restr', (154, ('Number', (0, 2))), (ProofNode ('Restr', (63, ('Number', (0, 2))), (ProofNode ('Split', ((20, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r2')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (89, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (20, ('Number', (0, 3))), (ProofNode ('Restr', (89, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (20, ('Offset', (0, 3))), (ProofNode ('Restr', (89, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)), ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Restr', (136, ('Offset', (0, 3))), (ProofNode ('Restr', (154, ('Number', (0, 2))), (ProofNode ('Restr', (63, ('Number', (0, 2))), (ProofNode ('Split', ((20, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r2')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (89, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (20, ('Number', (0, 3))), (ProofNode ('Restr', (89, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (20, ('Offset', (0, 3))), (ProofNode ('Restr', (89, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),))))
 .. proof found.
Step 1: 
  prove visits to 10 related to visits to 136
    with equalities
      ((Mem) ('mem')) (@ addr 10)
      = ((Mem) ('Mem.3')) (@ addr 136)
    and with invariants
      ((Word32) ('r21')) (@ addr 10)
      ((Word32) ('r4')) (@ addr 10)
      ((Word32) ('r27')) (@ addr 10)
      ((Word32) ('r17')) (@ addr 10)
      ((Word32) ('r0')) (@ addr 10)
      ((Word32) ('r11')) (@ addr 10)
      ((Word32) ('r23')) (@ addr 10)
      ((Word32) ('r13')) (@ addr 10)
      ((Word32) ('r10')) (@ addr 10)
      ((Word32) ('r28')) (@ addr 10)
      ((Word32) ('r24')) (@ addr 10)
      ((Word32) ('r19')) (@ addr 10)
      ((Word32) ('r16')) (@ addr 10)
      ((Word64) ('clock')) (@ addr 10)
      ((Word32) ('r12')) (@ addr 10)
      ((Word32) ('r9')) (@ addr 10)
      ((Word32) ('r6')) (@ addr 10)
      ((Word32) ('r7')) (@ addr 10)
      ((Word32) ('r31')) (@ addr 10)
      ((Word32) ('r25')) (@ addr 10)
      ((Word32) ('r8')) (@ addr 10)
      ((Word32) ('r29')) (@ addr 10)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 10)
      ((Word32) ('r18')) (@ addr 10)
      ((Word32) ('r20')) (@ addr 10)
      ((Word32) ('r30')) (@ addr 10)
      ((Word32) ('r14')) (@ addr 10)
      ((Word32) ('r15')) (@ addr 10)
      ((Word32) ('mode')) (@ addr 10)
      ((Word32) ('r5')) (@ addr 10)
      ((Word32) ('ret')) (@ addr 10)
      ((Word32) ('r26')) (@ addr 10)
      ((Word32) ('r1')) (@ addr 10)
      ((Word32) ('r2')) (@ addr 10)
      ((Bool) (ROData('mem'))) (@ addr 10)
      ((Word32) ('r22')) (@ addr 10)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 10)
      ((Word32) ('end___unsigned_long#v')) (@ addr 136)
      ((Word32[50]) ('GhostAssertions.3')) (@ addr 136)
      ((Word32) ('end___unsigned_long#v.1')) (@ addr 136)
      ((Word32) ('start___unsigned_long#v')) (@ addr 136)
      ((Word32) (('loop#3#count.1' + ((0 - '#seq-visits') * 1)))) (@ addr 136)
      ((Word32) (('start___unsigned_long#v.1' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast(5)))))) (@ addr 136)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 136)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 10 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 136 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 154 is in {0 ..< 2}
    .. proven.
Step 5: 
  Prove the number of visits to 63 is in {0 ..< 2}
    .. proven.
Step 6: 
  prove visits to 20 related to visits to 89
    with equalities
      ((Mem) ('mem')) (@ addr 20)
      = ((Mem) ('Mem')) (@ addr 89)
    and with invariants
      ((Word32) ('r21')) (@ addr 20)
      ((Word32) ('r4')) (@ addr 20)
      ((Word32) ('r27')) (@ addr 20)
      ((Word32) ('r17')) (@ addr 20)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 20)
      ((Word32) ('r11')) (@ addr 20)
      ((Word32) ('r23')) (@ addr 20)
      ((Word32) ('r13')) (@ addr 20)
      ((Word32) ('r10')) (@ addr 20)
      ((Word32) ('r28')) (@ addr 20)
      ((Word32) ('r19')) (@ addr 20)
      ((Word32) ('r16')) (@ addr 20)
      ((Word64) ('clock')) (@ addr 20)
      ((Word32) ('r12')) (@ addr 20)
      ((Word32) ('r9')) (@ addr 20)
      ((Word32) ('r6')) (@ addr 20)
      ((Word32) ('r7')) (@ addr 20)
      ((Word32) ('r31')) (@ addr 20)
      ((Word32) ('r25')) (@ addr 20)
      ((Word32) ('r24')) (@ addr 20)
      ((Word32) ('r8')) (@ addr 20)
      ((Word32) ('r29')) (@ addr 20)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 20)
      ((Word32) ('r18')) (@ addr 20)
      ((Word32) ('r20')) (@ addr 20)
      ((Word32) ('r30')) (@ addr 20)
      ((Word32) ('r14')) (@ addr 20)
      ((Word32) ('r15')) (@ addr 20)
      ((Word32) ('mode')) (@ addr 20)
      ((Word32) ('r5')) (@ addr 20)
      ((Word32) ('ret')) (@ addr 20)
      ((Word32) ('r26')) (@ addr 20)
      ((Word32) ('r1')) (@ addr 20)
      ((Word32) ('r2')) (@ addr 20)
      ((Bool) (ROData('mem'))) (@ addr 20)
      ((Word32) ('r22')) (@ addr 20)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 20)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r2')), ((Word32) ('r0')))))) (@ addr 20)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r2')))))) (@ addr 20)
      ((Bool) ('c')) (@ addr 20)
      ((Bool) ('n')) (@ addr 20)
      ((Bool) ('v')) (@ addr 20)
      ((Bool) ('z')) (@ addr 20)
      ((Word32) ('end___unsigned_long#v')) (@ addr 89)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 89)
      ((Word32) ('start___unsigned_long#v')) (@ addr 89)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 89)
      ((Word32[50]) ('GhostAssertions')) (@ addr 89)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 89)
    .. proven.
Step 7: case in (6) where the length of the sequence < 2
  Prove the number of visits to 20 is in {0 ..< 3}
    .. proven.
Step 8: 
  Prove the number of visits to 89 is in {0 ..< 3}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (6) where the length of the sequence is j + 2
  Prove the number of visits to 20 is in {j + 0 ..< j + 3}
    .. proven.
Step 11: 
  Prove the number of visits to 89 is in {j + 0 ..< j + 3}
    .. proven.
Step 12: 
  prove all verification conditions
    .. proven.
Step 13: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 10 is in {i + 0 ..< i + 3}
    .. proven.
Step 14: 
  Prove the number of visits to 136 is in {i + 0 ..< i + 3}
    .. proven.
Step 15: 
  Prove the number of visits to 154 is in {0 ..< 2}
    .. proven.
Step 16: 
  Prove the number of visits to 63 is in {0 ..< 2}
    .. proven.
Step 17: 
  prove visits to 20 related to visits to 89
    with equalities
      ((Mem) ('mem')) (@ addr 20)
      = ((Mem) ('Mem')) (@ addr 89)
    and with invariants
      ((Word32) ('r21')) (@ addr 20)
      ((Word32) ('r4')) (@ addr 20)
      ((Word32) ('r27')) (@ addr 20)
      ((Word32) ('r17')) (@ addr 20)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 20)
      ((Word32) ('r11')) (@ addr 20)
      ((Word32) ('r23')) (@ addr 20)
      ((Word32) ('r13')) (@ addr 20)
      ((Word32) ('r10')) (@ addr 20)
      ((Word32) ('r28')) (@ addr 20)
      ((Word32) ('r19')) (@ addr 20)
      ((Word32) ('r16')) (@ addr 20)
      ((Word64) ('clock')) (@ addr 20)
      ((Word32) ('r12')) (@ addr 20)
      ((Word32) ('r9')) (@ addr 20)
      ((Word32) ('r6')) (@ addr 20)
      ((Word32) ('r7')) (@ addr 20)
      ((Word32) ('r31')) (@ addr 20)
      ((Word32) ('r25')) (@ addr 20)
      ((Word32) ('r24')) (@ addr 20)
      ((Word32) ('r8')) (@ addr 20)
      ((Word32) ('r29')) (@ addr 20)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 20)
      ((Word32) ('r18')) (@ addr 20)
      ((Word32) ('r20')) (@ addr 20)
      ((Word32) ('r30')) (@ addr 20)
      ((Word32) ('r14')) (@ addr 20)
      ((Word32) ('r15')) (@ addr 20)
      ((Word32) ('mode')) (@ addr 20)
      ((Word32) ('r5')) (@ addr 20)
      ((Word32) ('ret')) (@ addr 20)
      ((Word32) ('r26')) (@ addr 20)
      ((Word32) ('r1')) (@ addr 20)
      ((Word32) ('r2')) (@ addr 20)
      ((Bool) (ROData('mem'))) (@ addr 20)
      ((Word32) ('r22')) (@ addr 20)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 20)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r2')), ((Word32) ('r0')))))) (@ addr 20)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r2')))))) (@ addr 20)
      ((Bool) ('c')) (@ addr 20)
      ((Bool) ('n')) (@ addr 20)
      ((Bool) ('v')) (@ addr 20)
      ((Bool) ('z')) (@ addr 20)
      ((Word32) ('end___unsigned_long#v')) (@ addr 89)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 89)
      ((Word32) ('start___unsigned_long#v')) (@ addr 89)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 89)
      ((Word32[50]) ('GhostAssertions')) (@ addr 89)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 89)
    .. proven.
Step 18: case in (17) where the length of the sequence < 2
  Prove the number of visits to 20 is in {0 ..< 3}
    .. proven.
Step 19: 
  Prove the number of visits to 89 is in {0 ..< 3}
    .. proven.
Step 20: 
  prove all verification conditions
    .. proven.
Step 21: case in (17) where the length of the sequence is k + 2
  Prove the number of visits to 20 is in {k + 0 ..< k + 3}
    .. proven.
Step 22: 
  Prove the number of visits to 89 is in {k + 0 ..< k + 3}
    .. proven.
Step 23: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invalidateCacheRange_RAM (ASM) <= Kernel_C.invalidateCacheRange_RAM (C)), time taken: 138.75s
Testing Function pair Pairing (schedule (ASM) <= Kernel_C.schedule (C))
  (function pairing 43 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (schedule (ASM) <= Kernel_C.schedule (C)), time taken: 3.52s
Testing Function pair Pairing (map_kernel_devices (ASM) <= Kernel_C.map_kernel_devices (C))
  (function pairing 44 of 284)
 .. built problem, finding proof
Discovered that points [49 (loop head)] can be bounded
  (in problem)
Discovered that points [28 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (49, ('Number', (0, 2))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 49 is in {0 ..< 2}
    .. proven.
Step 2: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (map_kernel_devices (ASM) <= Kernel_C.map_kernel_devices (C)), time taken: 1.05s
Testing Function pair Pairing (Arch_handleFaultReply (ASM) <= Kernel_C.Arch_handleFaultReply (C))
  (function pairing 45 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_handleFaultReply (ASM) <= Kernel_C.Arch_handleFaultReply (C)), time taken: 0.08s
Testing Function pair Pairing (decodeDomainInvocation (ASM) <= Kernel_C.decodeDomainInvocation (C))
  (function pairing 46 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeDomainInvocation (ASM) <= Kernel_C.decodeDomainInvocation (C)), time taken: 0.68s
Testing Function pair Pairing (suspend (ASM) <= Kernel_C.suspend (C))
  (function pairing 47 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (suspend (ASM) <= Kernel_C.suspend (C)), time taken: 0.50s
Testing Function pair Pairing (tcbEPDequeue (ASM) <= Kernel_C.tcbEPDequeue (C))
  (function pairing 48 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (tcbEPDequeue (ASM) <= Kernel_C.tcbEPDequeue (C)), time taken: 0.22s
Testing Function pair Pairing (cteRevoke (ASM) <= Kernel_C.cteRevoke (C))
  (function pairing 49 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [11, 75]
  (in problem)
Now doing proof search in 11 init case in problem.
Now doing proof search in 11 loop case in problem.
ProofNode ('Split', ((11, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (75, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'nextPtr___ptr_to_struct_cte_C#v'))], 2, 1), (ProofNode ('Restr', (11, ('Number', (0, 3))), (ProofNode ('Restr', (75, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Restr', (75, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 11 related to visits to 75
    with equalities
      ((Mem) ('mem')) (@ addr 11)
      = ((Mem) ('Mem')) (@ addr 75)
      ((Word32) ('r4')) (@ addr 11)
      = ((Word32) ('nextPtr___ptr_to_struct_cte_C#v')) (@ addr 75)
    and with invariants
      ((Word32) ('r8')) (@ addr 11)
      ((Word32) ('r5')) (@ addr 11)
      ((Word32) ('r9')) (@ addr 11)
      ((Word32) ('ret')) (@ addr 11)
      ((Word32) ('r11')) (@ addr 11)
      ((Word32) ('r13')) (@ addr 11)
      ((Word32) ('r10')) (@ addr 11)
      ((Bool) (ROData('mem'))) (@ addr 11)
      ((Word32) ('r6')) (@ addr 11)
      ((Word32) ('r7')) (@ addr 11)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 11)
      ((Word32) ('slot___ptr_to_struct_cte_C#v')) (@ addr 75)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 75)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 11 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 75 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 11 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 75 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteRevoke (ASM) <= Kernel_C.cteRevoke (C)), time taken: 24.83s
Testing Function pair Pairing (memcpy (ASM) <= Kernel_C.memcpy (C))
  (function pairing 50 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [4, 32]
  (in problem)
Now doing proof search in 4 init case in problem.
Now doing proof search in 4 loop case in problem.
ProofNode ('Split', ((4, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (32, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'q___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'p___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'ptr_dst___ptr_to_void#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (4, ('Number', (0, 3))), (ProofNode ('Restr', (32, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (4, ('Offset', (0, 3))), (ProofNode ('Restr', (32, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 4 related to visits to 32
    with equalities
      ((Mem) ('mem')) (@ addr 4)
      = ((Mem) ('Mem')) (@ addr 32)
    and with invariants
      ((Word32) ('r7')) (@ addr 4)
      ((Word32) ('r4')) (@ addr 4)
      ((Word32) ('r8')) (@ addr 4)
      ((Word32) ('r14')) (@ addr 4)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('r5')) (@ addr 4)
      ((Word32) ('r0')) (@ addr 4)
      ((Word32) ('r9')) (@ addr 4)
      ((Word32) ('ret')) (@ addr 4)
      ((Word32) ('r2')) (@ addr 4)
      ((Word32) ('r11')) (@ addr 4)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('r13')) (@ addr 4)
      ((Word32) ('r10')) (@ addr 4)
      ((Bool) (ROData('mem'))) (@ addr 4)
      ((Word32) ('r6')) (@ addr 4)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 4)
      ((Word32) (('q___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 32)
      ((Word32) (('n___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 32)
      ((Word32) (('p___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 32)
      ((Word32) ('ptr_dst___ptr_to_void#v')) (@ addr 32)
      ((Word32[50]) ('GhostAssertions')) (@ addr 32)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 32)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 4 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 32 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 4 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 32 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (memcpy (ASM) <= Kernel_C.memcpy (C)), time taken: 13.09s
Testing Function pair Pairing (deleteCallerCap (ASM) <= Kernel_C.deleteCallerCap (C))
  (function pairing 51 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deleteCallerCap (ASM) <= Kernel_C.deleteCallerCap (C)), time taken: 0.10s
Testing Function pair Pairing (reserve_region (ASM) <= Kernel_C.reserve_region (C))
  (function pairing 52 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [27, 221]
  (in problem)
Now doing proof search in 27 init case in problem.
Discovered a loop relation for split points [38, 196]
  (in 27 init case in problem)
Now doing proof search in 38 init case in 27 init case in problem.
Now doing proof search in 38 loop case in 27 init case in problem.
Now doing proof search in 27 loop case in problem.
Discovered a loop relation for split points [38, 196]
  (in 27 loop case in problem)
Now doing proof search in 38 init case in 27 loop case in problem.
Now doing proof search in 38 loop case in 27 loop case in problem.
ProofNode ('Split', ((27, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 8)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (221, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.end_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.start_C'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#12#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (27, ('Number', (0, 3))), (ProofNode ('Restr', (221, ('Number', (0, 4))), (ProofNode ('Split', ((38, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967288)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967295)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (196, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.start_C'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'j___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (38, ('Number', (0, 3))), (ProofNode ('Restr', (196, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (38, ('Offset', (0, 3))), (ProofNode ('Restr', (196, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (27, ('Offset', (0, 3))), (ProofNode ('Restr', (221, ('Offset', (0, 3))), (ProofNode ('Split', ((38, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967288)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967295)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (196, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.start_C'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'j___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (38, ('Number', (0, 3))), (ProofNode ('Restr', (196, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (38, ('Offset', (0, 3))), (ProofNode ('Restr', (196, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 27 related to visits [2, 3, 4 ...] to 221
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 27)
      ((Word32) ('r4')) (@ addr 27)
      ((Word32) ('r8')) (@ addr 27)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 8)))) (@ addr 27)
      ((Word32) ('r12')) (@ addr 27)
      ((Word32) ('r9')) (@ addr 27)
      ((Word32) ('ret')) (@ addr 27)
      ((Word32) ('r11')) (@ addr 27)
      ((Word32) ('r13')) (@ addr 27)
      ((Word32) ('r10')) (@ addr 27)
      ((Mem) ('mem')) (@ addr 27)
      ((Word32) ('r14')) (@ addr 27)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 1)))) (@ addr 27)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 27)
      ((Word32) ('reg___struct_p_region_C#v.end_C')) (@ addr 221)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 221)
      ((Word32) ('reg___struct_p_region_C#v.start_C')) (@ addr 221)
      ((Mem) ('Mem')) (@ addr 221)
      ((Word32[50]) ('GhostAssertions')) (@ addr 221)
      ((Word32) (('loop#12#count' + ((0 - '#seq-visits') * 1)))) (@ addr 221)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 27 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 221 is in {0 ..< 4}
    .. proven.
Step 4: 
  prove visits to 38 related to visits to 196
    with equalities
      ((Mem) ('mem')) (@ addr 38)
      = ((Mem) ('Mem')) (@ addr 196)
    and with invariants
      ((Word32) ('r4')) (@ addr 38)
      ((Word32) ('r13')) (@ addr 38)
      ((Word32) ('r10')) (@ addr 38)
      ((Word32) ('r12')) (@ addr 38)
      ((Word32) ('r9')) (@ addr 38)
      ((Word32) ('r6')) (@ addr 38)
      ((Word32) ('r7')) (@ addr 38)
      ((Word32) ('r8')) (@ addr 38)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4294967288)))) (@ addr 38)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 4294967295)))) (@ addr 38)
      ((Word32) ('r11')) (@ addr 38)
      ((Word32) ('ret')) (@ addr 38)
      ((Word32) ('r2')) (@ addr 38)
      ((Bool) (ROData('mem'))) (@ addr 38)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 38)
      ((Word32) ('reg___struct_p_region_C#v.end_C')) (@ addr 196)
      ((Word32) ('i___unsigned_long#v')) (@ addr 196)
      ((Word32) ('reg___struct_p_region_C#v.start_C')) (@ addr 196)
      ((Word32[50]) ('GhostAssertions')) (@ addr 196)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 196)
      ((Word32) (('j___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 196)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 38 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 196 is in {0 ..< 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 38 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 196 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 27 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 221 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 38 related to visits to 196
    with equalities
      ((Mem) ('mem')) (@ addr 38)
      = ((Mem) ('Mem')) (@ addr 196)
    and with invariants
      ((Word32) ('r4')) (@ addr 38)
      ((Word32) ('r13')) (@ addr 38)
      ((Word32) ('r10')) (@ addr 38)
      ((Word32) ('r12')) (@ addr 38)
      ((Word32) ('r9')) (@ addr 38)
      ((Word32) ('r6')) (@ addr 38)
      ((Word32) ('r7')) (@ addr 38)
      ((Word32) ('r8')) (@ addr 38)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4294967288)))) (@ addr 38)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 4294967295)))) (@ addr 38)
      ((Word32) ('r11')) (@ addr 38)
      ((Word32) ('ret')) (@ addr 38)
      ((Word32) ('r2')) (@ addr 38)
      ((Bool) (ROData('mem'))) (@ addr 38)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 38)
      ((Word32) ('reg___struct_p_region_C#v.end_C')) (@ addr 196)
      ((Word32) ('i___unsigned_long#v')) (@ addr 196)
      ((Word32) ('reg___struct_p_region_C#v.start_C')) (@ addr 196)
      ((Word32[50]) ('GhostAssertions')) (@ addr 196)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 196)
      ((Word32) (('j___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 196)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 38 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 196 is in {0 ..< 3}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 38 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 196 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (reserve_region (ASM) <= Kernel_C.reserve_region (C)), time taken: 1292.62s
Testing Function pair Pairing (invokeTCB_NotificationControl (ASM) <= Kernel_C.invokeTCB_NotificationControl (C))
  (function pairing 53 of 284)
 .. built problem, finding proof
Decided to case split at (3, 'ASM')
  (in problem)
Now doing proof search in true case (3 visited) in problem.
Now doing proof search in false case (3 not visited) in problem.
ProofNode ('CaseSplit', (3, 'ASM'), (ProofNode ('Restr', (3, ('Number', (1, 2))), (ProofNode ('Restr', (18, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Restr', (18, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 3 is visited
Step 2: case in (1) where 3 is visited
  Prove the number of visits to 3 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 18 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 3 is not visited
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 18 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_NotificationControl (ASM) <= Kernel_C.invokeTCB_NotificationControl (C)), time taken: 1.19s
Testing Function pair Pairing (cleanInvalidateCacheRange_RAM (ASM) <= Kernel_C.cleanInvalidateCacheRange_RAM (C))
  (function pairing 54 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [4, 160]
  (in problem)
Now doing proof search in 4 init case in problem.
Discovered that points [131 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [178 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [84 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [54 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [67 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [73 (loop head)] can be bounded
  (in 4 init case in problem)
Now doing proof search in 4 loop case in problem.
Discovered a loop relation for split points [13, 137]
  (in 4 loop case in problem)
Now doing proof search in 13 init case in 4 loop case in problem.
Discovered that points [178 (loop head)] can be bounded
  (in 13 init case in 4 loop case in problem)
Discovered that points [67 (loop head)] can be bounded
  (in 13 init case in 4 loop case in problem)
Discovered a loop relation for split points [23, 90]
  (in 13 init case in 4 loop case in problem)
Now doing proof search in 23 init case in 13 init case in 4 loop case in problem.
Now doing proof search in 23 loop case in 13 init case in 4 loop case in problem.
Now doing proof search in 13 loop case in 4 loop case in problem.
Discovered that points [178 (loop head)] can be bounded
  (in 13 loop case in 4 loop case in problem)
Discovered that points [67 (loop head)] can be bounded
  (in 13 loop case in 4 loop case in problem)
Discovered a loop relation for split points [23, 90]
  (in 13 loop case in 4 loop case in problem)
Now doing proof search in 23 init case in 13 loop case in 4 loop case in problem.
Now doing proof search in 23 loop case in 13 loop case in 4 loop case in problem.
ProofNode ('Split', ((4, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r4')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r3')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (160, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.2'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.2'), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.5'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v.1'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.5'))], 2, 1), (ProofNode ('Restr', (4, ('Number', (0, 3))), (ProofNode ('Restr', (160, ('Number', (0, 3))), (ProofNode ('Restr', (131, ('Number', (0, 5))), (ProofNode ('Restr', (178, ('Number', (0, 2))), (ProofNode ('Restr', (84, ('Number', (0, 4))), (ProofNode ('Restr', (54, ('Number', (0, 4))), (ProofNode ('Restr', (67, ('Number', (0, 2))), (ProofNode ('Restr', (73, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)), ProofNode ('Restr', (4, ('Offset', (0, 3))), (ProofNode ('Restr', (160, ('Offset', (0, 3))), (ProofNode ('Split', ((13, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (137, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.3'), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.1'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 5)])])])]), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.3'))], 2, 1), (ProofNode ('Restr', (13, ('Number', (0, 3))), (ProofNode ('Restr', (137, ('Number', (0, 3))), (ProofNode ('Restr', (178, ('Number', (0, 2))), (ProofNode ('Restr', (67, ('Number', (0, 2))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r12')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r4')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r12')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r12')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (90, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 3))), (ProofNode ('Restr', (90, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (90, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)), ProofNode ('Restr', (13, ('Offset', (0, 3))), (ProofNode ('Restr', (137, ('Offset', (0, 3))), (ProofNode ('Restr', (178, ('Number', (0, 2))), (ProofNode ('Restr', (67, ('Number', (0, 2))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r12')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r4')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r12')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r12')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (90, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 3))), (ProofNode ('Restr', (90, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (90, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 4 related to visits to 160
    with equalities
      ((Mem) ('mem')) (@ addr 4)
      = ((Mem) ('Mem.5')) (@ addr 160)
    and with invariants
      ((Word32) ('r21')) (@ addr 4)
      ((Word32) ('r4')) (@ addr 4)
      ((Word32) ('r27')) (@ addr 4)
      ((Word32) ('r17')) (@ addr 4)
      ((Word32) ('r0')) (@ addr 4)
      ((Word32) ('r11')) (@ addr 4)
      ((Word32) ('r23')) (@ addr 4)
      ((Word32) ('r13')) (@ addr 4)
      ((Word32) ('r10')) (@ addr 4)
      ((Word32) ('r28')) (@ addr 4)
      ((Word32) ('r19')) (@ addr 4)
      ((Word32) ('r16')) (@ addr 4)
      ((Word64) ('clock')) (@ addr 4)
      ((Word32) ('r12')) (@ addr 4)
      ((Word32) ('r9')) (@ addr 4)
      ((Word32) ('r6')) (@ addr 4)
      ((Word32) ('r7')) (@ addr 4)
      ((Word32) ('r31')) (@ addr 4)
      ((Word32) ('r25')) (@ addr 4)
      ((Word32) ('r24')) (@ addr 4)
      ((Word32) ('r8')) (@ addr 4)
      ((Word32) ('r29')) (@ addr 4)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('r18')) (@ addr 4)
      ((Word32) ('r20')) (@ addr 4)
      ((Word32) ('r30')) (@ addr 4)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 32)))) (@ addr 4)
      ((Word32) ('r15')) (@ addr 4)
      ((Word32) ('mode')) (@ addr 4)
      ((Word32) ('r5')) (@ addr 4)
      ((Word32) ('ret')) (@ addr 4)
      ((Word32) ('r26')) (@ addr 4)
      ((Word32) ('r1')) (@ addr 4)
      ((Word32) ('r2')) (@ addr 4)
      ((Bool) (ROData('mem'))) (@ addr 4)
      ((Word32) ('r22')) (@ addr 4)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r3')), ((Word32) ('r4')))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r4')), ((Word32) ('r3')))))) (@ addr 4)
      ((Bool) ('c')) (@ addr 4)
      ((Bool) ('n')) (@ addr 4)
      ((Bool) ('v')) (@ addr 4)
      ((Bool) ('z')) (@ addr 4)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 160)
      ((Word32) ('end___unsigned_long#v.2')) (@ addr 160)
      ((Word32) ('start___unsigned_long#v.2')) (@ addr 160)
      ((Word32) ('end___unsigned_long#v')) (@ addr 160)
      ((Word32[50]) ('GhostAssertions.5')) (@ addr 160)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 160)
      ((Word32) ('pstart___unsigned_long#v.1')) (@ addr 160)
      ((Word32) ('start___unsigned_long#v')) (@ addr 160)
      ((Word32) (('index___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 160)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 4 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 160 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 131 is in {0 ..< 5}
    .. proven.
Step 5: 
  Prove the number of visits to 178 is in {0 ..< 2}
    .. proven.
Step 6: 
  Prove the number of visits to 84 is in {0 ..< 4}
    .. proven.
Step 7: 
  Prove the number of visits to 54 is in {0 ..< 4}
    .. proven.
Step 8: 
  Prove the number of visits to 67 is in {0 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 73 is in {0 ..< 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 4 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 160 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 13 related to visits to 137
    with equalities
      ((Mem) ('mem')) (@ addr 13)
      = ((Mem) ('Mem.3')) (@ addr 137)
    and with invariants
      ((Word32) ('r21')) (@ addr 13)
      ((Word32) ('r4')) (@ addr 13)
      ((Word32) ('r27')) (@ addr 13)
      ((Word32) ('r17')) (@ addr 13)
      ((Word32) ('r0')) (@ addr 13)
      ((Word32) ('r23')) (@ addr 13)
      ((Word32) ('r13')) (@ addr 13)
      ((Word32) ('r10')) (@ addr 13)
      ((Word32) ('r28')) (@ addr 13)
      ((Word32) ('r19')) (@ addr 13)
      ((Word32) ('r16')) (@ addr 13)
      ((Word64) ('clock')) (@ addr 13)
      ((Word32) ('r12')) (@ addr 13)
      ((Word32) ('r9')) (@ addr 13)
      ((Word32) ('r6')) (@ addr 13)
      ((Word32) ('r7')) (@ addr 13)
      ((Word32) ('r31')) (@ addr 13)
      ((Word32) ('r25')) (@ addr 13)
      ((Word32) ('r24')) (@ addr 13)
      ((Word32) ('r8')) (@ addr 13)
      ((Word32) ('r29')) (@ addr 13)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 13)
      ((Word32) ('r1')) (@ addr 13)
      ((Word32) ('r18')) (@ addr 13)
      ((Word32) ('r20')) (@ addr 13)
      ((Word32) ('r30')) (@ addr 13)
      ((Word32) ('r14')) (@ addr 13)
      ((Word32) ('r15')) (@ addr 13)
      ((Word32) ('mode')) (@ addr 13)
      ((Word32) ('r5')) (@ addr 13)
      ((Word32) ('ret')) (@ addr 13)
      ((Word32) ('r26')) (@ addr 13)
      ((Word32) ('r11')) (@ addr 13)
      ((Word32) ('r2')) (@ addr 13)
      ((Bool) (ROData('mem'))) (@ addr 13)
      ((Word32) ('r22')) (@ addr 13)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 13)
      ((Word32) ('end___unsigned_long#v')) (@ addr 137)
      ((Word32[50]) ('GhostAssertions.3')) (@ addr 137)
      ((Word32) ('end___unsigned_long#v.1')) (@ addr 137)
      ((Word32) ('start___unsigned_long#v')) (@ addr 137)
      ((Word32) (('loop#3#count.1' + ((0 - '#seq-visits') * 1)))) (@ addr 137)
      ((Word32) (('start___unsigned_long#v.1' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast(5)))))) (@ addr 137)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 137)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 13 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 137 is in {0 ..< 3}
    .. proven.
Step 16: 
  Prove the number of visits to 178 is in {0 ..< 2}
    .. proven.
Step 17: 
  Prove the number of visits to 67 is in {0 ..< 2}
    .. proven.
Step 18: 
  prove visits to 23 related to visits to 90
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 90)
    and with invariants
      ((Word32) ('r21')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r27')) (@ addr 23)
      ((Word32) ('r17')) (@ addr 23)
      ((Word32) ('r0')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r23')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Word32) ('r28')) (@ addr 23)
      ((Word32) ('r19')) (@ addr 23)
      ((Word32) ('r16')) (@ addr 23)
      ((Word64) ('clock')) (@ addr 23)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 1)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r31')) (@ addr 23)
      ((Word32) ('r25')) (@ addr 23)
      ((Word32) ('r24')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r29')) (@ addr 23)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 23)
      ((Word32) ('r18')) (@ addr 23)
      ((Word32) ('r20')) (@ addr 23)
      ((Word32) ('r30')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r15')) (@ addr 23)
      ((Word32) ('mode')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r26')) (@ addr 23)
      ((Word32) ('r1')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r22')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Bool) (Equals(LessEquals(((Word32) (('r12' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r12'))), Less(((Word32) ('r12')), ((Word32) ('r4')))))) (@ addr 23)
      ((Bool) (Equals(LessEquals(((Word32) (('r12' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r12'))), Less(((Word32) ('r4')), ((Word32) ('r12')))))) (@ addr 23)
      ((Bool) ('c')) (@ addr 23)
      ((Bool) ('n')) (@ addr 23)
      ((Bool) ('v')) (@ addr 23)
      ((Bool) ('z')) (@ addr 23)
      ((Word32) ('end___unsigned_long#v')) (@ addr 90)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 90)
      ((Word32) ('start___unsigned_long#v')) (@ addr 90)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 90)
      ((Word32[50]) ('GhostAssertions')) (@ addr 90)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 90)
    .. proven.
Step 19: case in (18) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 3}
    .. proven.
Step 20: 
  Prove the number of visits to 90 is in {0 ..< 3}
    .. proven.
Step 21: 
  prove all verification conditions
    .. proven.
Step 22: case in (18) where the length of the sequence is k + 2
  Prove the number of visits to 23 is in {k + 0 ..< k + 3}
    .. proven.
Step 23: 
  Prove the number of visits to 90 is in {k + 0 ..< k + 3}
    .. proven.
Step 24: 
  prove all verification conditions
    .. proven.
Step 25: case in (13) where the length of the sequence is j + 2
  Prove the number of visits to 13 is in {j + 0 ..< j + 3}
    .. proven.
Step 26: 
  Prove the number of visits to 137 is in {j + 0 ..< j + 3}
    .. proven.
Step 27: 
  Prove the number of visits to 178 is in {0 ..< 2}
    .. proven.
Step 28: 
  Prove the number of visits to 67 is in {0 ..< 2}
    .. proven.
Step 29: 
  prove visits to 23 related to visits to 90
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 90)
    and with invariants
      ((Word32) ('r21')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r27')) (@ addr 23)
      ((Word32) ('r17')) (@ addr 23)
      ((Word32) ('r0')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r23')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Word32) ('r28')) (@ addr 23)
      ((Word32) ('r19')) (@ addr 23)
      ((Word32) ('r16')) (@ addr 23)
      ((Word64) ('clock')) (@ addr 23)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 1)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r31')) (@ addr 23)
      ((Word32) ('r25')) (@ addr 23)
      ((Word32) ('r24')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r29')) (@ addr 23)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 23)
      ((Word32) ('r18')) (@ addr 23)
      ((Word32) ('r20')) (@ addr 23)
      ((Word32) ('r30')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r15')) (@ addr 23)
      ((Word32) ('mode')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r26')) (@ addr 23)
      ((Word32) ('r1')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r22')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Bool) (Equals(LessEquals(((Word32) (('r12' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r12'))), Less(((Word32) ('r12')), ((Word32) ('r4')))))) (@ addr 23)
      ((Bool) (Equals(LessEquals(((Word32) (('r12' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r12'))), Less(((Word32) ('r4')), ((Word32) ('r12')))))) (@ addr 23)
      ((Bool) ('c')) (@ addr 23)
      ((Bool) ('n')) (@ addr 23)
      ((Bool) ('v')) (@ addr 23)
      ((Bool) ('z')) (@ addr 23)
      ((Word32) ('end___unsigned_long#v')) (@ addr 90)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 90)
      ((Word32) ('start___unsigned_long#v')) (@ addr 90)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 90)
      ((Word32[50]) ('GhostAssertions')) (@ addr 90)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 90)
    .. proven.
Step 30: case in (29) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 3}
    .. proven.
Step 31: 
  Prove the number of visits to 90 is in {0 ..< 3}
    .. proven.
Step 32: 
  prove all verification conditions
    .. proven.
Step 33: case in (29) where the length of the sequence is a + 2
  Prove the number of visits to 23 is in {a + 0 ..< a + 3}
    .. proven.
Step 34: 
  Prove the number of visits to 90 is in {a + 0 ..< a + 3}
    .. proven.
Step 35: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cleanInvalidateCacheRange_RAM (ASM) <= Kernel_C.cleanInvalidateCacheRange_RAM (C)), time taken: 558.13s
Testing Function pair Pairing (doNormalTransfer (ASM) <= Kernel_C.doNormalTransfer (C))
  (function pairing 55 of 284)
 .. built problem, finding proof
Discovered that points [269 (loop head)] can be bounded
  (in problem)
Discovered that points [141 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (269, ('Number', (0, 5))), (ProofNode ('Restr', (141, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 269 is in {0 ..< 5}
    .. proven.
Step 2: 
  Prove the number of visits to 141 is in {0 ..< 4}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doNormalTransfer (ASM) <= Kernel_C.doNormalTransfer (C)), time taken: 193.36s
Testing Function pair Pairing (setIRQTrigger (ASM) <= Kernel_C.setIRQTrigger (C))
  (function pairing 56 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setIRQTrigger (ASM) <= Kernel_C.setIRQTrigger (C)), time taken: 0.10s
Testing Function pair Pairing (decodeSetMCPriority (ASM) <= Kernel_C.decodeSetMCPriority (C))
  (function pairing 57 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeSetMCPriority (ASM) <= Kernel_C.decodeSetMCPriority (C)), time taken: 7.21s
Testing Function pair Pairing (invokeCNodeRotate (ASM) <= Kernel_C.invokeCNodeRotate (C))
  (function pairing 58 of 284)
 .. built problem, finding proof
Decided to case split at (6, 'ASM')
  (in problem)
Now doing proof search in true case (6 visited) in problem.
Now doing proof search in false case (6 not visited) in problem.
ProofNode ('CaseSplit', (6, 'ASM'), (ProofNode ('Restr', (6, ('Number', (1, 2))), (ProofNode ('Restr', (55, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (6, ('Number', (0, 1))), (ProofNode ('Restr', (55, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 6 is visited
Step 2: case in (1) where 6 is visited
  Prove the number of visits to 6 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 55 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 6 is not visited
  Prove the number of visits to 6 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 55 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeRotate (ASM) <= Kernel_C.invokeCNodeRotate (C)), time taken: 4.27s
Testing Function pair Pairing (doNBRecvFailedTransfer (ASM) <= Kernel_C.doNBRecvFailedTransfer (C))
  (function pairing 59 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doNBRecvFailedTransfer (ASM) <= Kernel_C.doNBRecvFailedTransfer (C)), time taken: 0.08s
Testing Function pair Pairing (getObjectSize (ASM) <= Kernel_C.getObjectSize (C))
  (function pairing 60 of 284)
 .. built problem, finding proof
Decided to case split at (2, 'ASM')
  (in problem)
Now doing proof search in true case (2 visited) in problem.
Now doing proof search in false case (2 not visited) in problem.
ProofNode ('CaseSplit', (2, 'ASM'), (ProofNode ('Restr', (2, ('Number', (1, 2))), (ProofNode ('Restr', (49, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (2, ('Number', (0, 1))), (ProofNode ('Restr', (49, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 2 is visited
Step 2: case in (1) where 2 is visited
  Prove the number of visits to 2 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 49 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 2 is not visited
  Prove the number of visits to 2 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 49 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (getObjectSize (ASM) <= Kernel_C.getObjectSize (C)), time taken: 1.94s
Testing Function pair Pairing (restart (ASM) <= Kernel_C.restart (C))
  (function pairing 61 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (restart (ASM) <= Kernel_C.restart (C)), time taken: 1.09s
Testing Function pair Pairing (Arch_isFrameType (ASM) <= Kernel_C.Arch_isFrameType (C))
  (function pairing 62 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_isFrameType (ASM) <= Kernel_C.Arch_isFrameType (C)), time taken: 0.07s
Testing Function pair Pairing (getRestartPC (ASM) <= Kernel_C.getRestartPC (C))
  (function pairing 63 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (getRestartPC (ASM) <= Kernel_C.getRestartPC (C)), time taken: 0.08s
Testing Function pair Pairing (strncmp (ASM) <= Kernel_C.strncmp (C))
  (function pairing 64 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [13, 70]
  (in problem)
Now doing proof search in 13 init case in problem.
Now doing proof search in 13 loop case in problem.
ProofNode ('Split', ((13, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (70, (1, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'n___int#v'), Expr ('Var', Type ('Word', 32), name = 's1___ptr_to_char#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('Word', 32), name = 's2___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (13, ('Number', (0, 3))), (ProofNode ('Restr', (70, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (13, ('Offset', (0, 3))), (ProofNode ('Restr', (70, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 13 related to visits [2, 3, 4 ...] to 70
    with equalities
    and with invariants
      ((Word32) ('r8')) (@ addr 13)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
      ((Word32) ('r5')) (@ addr 13)
      ((Word32) ('r9')) (@ addr 13)
      ((Word32) ('ret')) (@ addr 13)
      ((Word32) ('r2')) (@ addr 13)
      ((Word32) ('r11')) (@ addr 13)
      ((Word32) ('r13')) (@ addr 13)
      ((Word32) ('r10')) (@ addr 13)
      ((Mem) ('mem')) (@ addr 13)
      ((Word32) ('r6')) (@ addr 13)
      ((Word32) ('r7')) (@ addr 13)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 13)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 70)
      ((Word32) ('n___int#v')) (@ addr 70)
      ((Word32) ('s1___ptr_to_char#v')) (@ addr 70)
      ((Mem) ('Mem')) (@ addr 70)
      ((Word32) ('s2___ptr_to_char#v')) (@ addr 70)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 70)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 13 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 70 is in {0 ..< 4}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 13 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 70 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (strncmp (ASM) <= Kernel_C.strncmp (C)), time taken: 14.57s
Testing Function pair Pairing (arm_errata (ASM) <= Kernel_C.arm_errata (C))
  (function pairing 65 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (arm_errata (ASM) <= Kernel_C.arm_errata (C)), time taken: 0.07s
Testing Function pair Pairing (flushSpace (ASM) <= Kernel_C.flushSpace (C))
  (function pairing 66 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (flushSpace (ASM) <= Kernel_C.flushSpace (C)), time taken: 0.84s
Testing Function pair Pairing (checkValidIPCBuffer (ASM) <= Kernel_C.checkValidIPCBuffer (C))
  (function pairing 67 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (checkValidIPCBuffer (ASM) <= Kernel_C.checkValidIPCBuffer (C)), time taken: 0.23s
Testing Function pair Pairing (arch_clean_invalidate_caches (ASM) <= Kernel_C.arch_clean_invalidate_caches (C))
  (function pairing 68 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [4, 96]
  (in problem)
Now doing proof search in 4 init case in problem.
Discovered that points [126 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [88 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [113 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [43 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [52 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [62 (loop head)] can be bounded
  (in 4 init case in problem)
Now doing proof search in 4 loop case in problem.
Discovered that points [126 (loop head)] can be bounded
  (in 4 loop case in problem)
Discovered that points [88 (loop head)] can be bounded
  (in 4 loop case in problem)
Discovered that points [113 (loop head)] can be bounded
  (in 4 loop case in problem)
Discovered that points [43 (loop head)] can be bounded
  (in 4 loop case in problem)
Discovered that points [52 (loop head)] can be bounded
  (in 4 loop case in problem)
Discovered that points [62 (loop head)] can be bounded
  (in 4 loop case in problem)
ProofNode ('Split', ((4, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (96, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#12#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (4, ('Number', (0, 1))), (ProofNode ('Restr', (96, ('Number', (0, 1))), (ProofNode ('Restr', (126, ('Number', (0, 1))), (ProofNode ('Restr', (88, ('Number', (0, 1))), (ProofNode ('Restr', (113, ('Number', (0, 1))), (ProofNode ('Restr', (43, ('Number', (0, 1))), (ProofNode ('Restr', (52, ('Number', (0, 1))), (ProofNode ('Restr', (62, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)), ProofNode ('Restr', (4, ('Offset', (0, 1))), (ProofNode ('Restr', (96, ('Offset', (0, 1))), (ProofNode ('Restr', (126, ('Number', (0, 1))), (ProofNode ('Restr', (88, ('Number', (0, 1))), (ProofNode ('Restr', (113, ('Number', (0, 1))), (ProofNode ('Restr', (43, ('Number', (0, 1))), (ProofNode ('Restr', (52, ('Number', (0, 1))), (ProofNode ('Restr', (62, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),))))
 .. proof found.
Step 1: 
  prove visits to 4 related to visits to 96
    with equalities
    and with invariants
      ((Word32) ('r21')) (@ addr 4)
      ((Word32) ('r4')) (@ addr 4)
      ((Word32) ('r27')) (@ addr 4)
      ((Word32) ('r17')) (@ addr 4)
      ((Word32) ('r0')) (@ addr 4)
      ((Word32) ('r11')) (@ addr 4)
      ((Word32) ('r23')) (@ addr 4)
      ((Word32) ('r13')) (@ addr 4)
      ((Word32) ('r10')) (@ addr 4)
      ((Word32) ('r28')) (@ addr 4)
      ((Word32) ('r19')) (@ addr 4)
      ((Word32) ('r16')) (@ addr 4)
      ((Word64) ('clock')) (@ addr 4)
      ((Word32) ('r12')) (@ addr 4)
      ((Word32) ('r9')) (@ addr 4)
      ((Word32) ('r6')) (@ addr 4)
      ((Word32) ('r7')) (@ addr 4)
      ((Word32) ('r31')) (@ addr 4)
      ((Word32) ('r25')) (@ addr 4)
      ((Word32) ('r24')) (@ addr 4)
      ((Word32) ('r8')) (@ addr 4)
      ((Word32) ('r29')) (@ addr 4)
      ((Word32) ('r18')) (@ addr 4)
      ((Word32) ('r20')) (@ addr 4)
      ((Word32) ('r30')) (@ addr 4)
      ((Word32) ('r14')) (@ addr 4)
      ((Word32) ('r15')) (@ addr 4)
      ((Word32) ('mode')) (@ addr 4)
      ((Word32) ('r5')) (@ addr 4)
      ((Word32) ('ret')) (@ addr 4)
      ((Word32) ('r26')) (@ addr 4)
      ((Word32) ('r1')) (@ addr 4)
      ((Word32) ('r2')) (@ addr 4)
      ((Mem) ('mem')) (@ addr 4)
      ((Word32) ('r22')) (@ addr 4)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 4)
      ((Word32) (('loop#12#count' + ((0 - '#seq-visits') * 1)))) (@ addr 96)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 4 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 96 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 126 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 88 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 113 is in {0 ..< 1}
    .. proven.
Step 7: 
  Prove the number of visits to 43 is in {0 ..< 1}
    .. proven.
Step 8: 
  Prove the number of visits to 52 is in {0 ..< 1}
    .. proven.
Step 9: 
  Prove the number of visits to 62 is in {0 ..< 1}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 4 is in {i + 0 ..< i + 1}
    .. proven.
Step 12: 
  Prove the number of visits to 96 is in {i + 0 ..< i + 1}
    .. proven.
Step 13: 
  Prove the number of visits to 126 is in {0 ..< 1}
    .. proven.
Step 14: 
  Prove the number of visits to 88 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 113 is in {0 ..< 1}
    .. proven.
Step 16: 
  Prove the number of visits to 43 is in {0 ..< 1}
    .. proven.
Step 17: 
  Prove the number of visits to 52 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 62 is in {0 ..< 1}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (arch_clean_invalidate_caches (ASM) <= Kernel_C.arch_clean_invalidate_caches (C)), time taken: 6.39s
Testing Function pair Pairing (cleanInvalidateL1Caches (ASM) <= Kernel_C.cleanInvalidateL1Caches (C))
  (function pairing 69 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cleanInvalidateL1Caches (ASM) <= Kernel_C.cleanInvalidateL1Caches (C)), time taken: 0.31s
Testing Function pair Pairing (createObject (ASM) <= Kernel_C.createObject (C))
  (function pairing 70 of 284)
 .. built problem, finding proof
Decided to case split at (3, 'ASM')
  (in problem)
Now doing proof search in true case (3 visited) in problem.
Now doing proof search in false case (3 not visited) in problem.
ProofNode ('CaseSplit', (3, 'ASM'), (ProofNode ('Restr', (3, ('Number', (1, 2))), (ProofNode ('Restr', (147, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Restr', (147, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 3 is visited
Step 2: case in (1) where 3 is visited
  Prove the number of visits to 3 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 147 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 3 is not visited
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 147 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (createObject (ASM) <= Kernel_C.createObject (C)), time taken: 2.53s
Testing Function pair Pairing (invokeUntyped_Retype (ASM) <= Kernel_C.invokeUntyped_Retype (C))
  (function pairing 71 of 284)
 .. built problem, finding proof
Decided to case split at (38, 'ASM')
  (in problem)
Now doing proof search in true case (38 visited) in problem.
Discovered a loop relation for split points [117, 192]
  (in true case (38 visited) in problem)
Now doing proof search in 117 init case in true case (38 visited) in problem.
Now doing proof search in 117 loop case in true case (38 visited) in problem.
Now doing proof search in false case (38 not visited) in problem.
Discovered that points [177 (loop head)] can be bounded
  (in false case (38 not visited) in problem)
Discovered that points [117 (loop head)] can be bounded
  (in false case (38 not visited) in problem)
ProofNode ('CaseSplit', (38, 'ASM'), (ProofNode ('Restr', (38, ('Number', (1, 2))), (ProofNode ('Split', ((117, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967040)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967040)])]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (192, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'userSize___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'chunk___int#v'), Expr ('Var', Type ('Word', 32), name = 'destOffset___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'destLength___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'prev_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'offset___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Var', Type ('Word', 32), name = 'chunk___int#v')])])])]), Expr ('Var', Type ('Word', 32), name = 'retypeBase___ptr_to_void#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'newType___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'regionBase___ptr_to_void#v'), Expr ('Var', Type ('Word', 32), name = 'deviceMemory___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'prev_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'regionBase___ptr_to_void#v.1'), Expr ('Var', Type ('Word', 32), name = 'destCNode___ptr_to_struct_cte_C#v'), Expr ('Var', Type ('Word', 32), name = 'srcSlot___ptr_to_struct_cte_C#v'), Expr ('Var', Type ('Word', 32), name = 'srcSlot___ptr_to_struct_cte_C#v.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (117, ('Number', (0, 3))), (ProofNode ('Restr', (192, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (117, ('Offset', (0, 3))), (ProofNode ('Restr', (192, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)), ProofNode ('Restr', (38, ('Number', (0, 1))), (ProofNode ('Restr', (195, ('Number', (0, 1))), (ProofNode ('Restr', (177, ('Number', (0, 1))), (ProofNode ('Restr', (117, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),))))
 .. proof found.
Step 1: 
  case split on whether 38 is visited
Step 2: case in (1) where 38 is visited
  Prove the number of visits to 38 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove visits to 117 related to visits to 192
    with equalities
      ((Mem) ('mem')) (@ addr 117)
      = ((Mem) ('Mem.1')) (@ addr 192)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 4294967040)))) (@ addr 117)
      ((Word32) ('r13')) (@ addr 117)
      ((Word32) ('r10')) (@ addr 117)
      ((Word32) ('r9')) (@ addr 117)
      ((Word32) ('r6')) (@ addr 117)
      ((Word32) ('r8')) (@ addr 117)
      ((Word32) (('r5' + ((0 - '#seq-visits') * 4294967040)))) (@ addr 117)
      ((Word32) ('r7')) (@ addr 117)
      ((Word32) ('ret')) (@ addr 117)
      ((Word32) ('r11')) (@ addr 117)
      ((Bool) (ROData('mem'))) (@ addr 117)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 117)
      ((Word32) ('userSize___unsigned_long#v')) (@ addr 192)
      ((Word32) ('chunk___int#v')) (@ addr 192)
      ((Word32) ('destOffset___unsigned_long#v')) (@ addr 192)
      ((Word32) ('destLength___unsigned_long#v')) (@ addr 192)
      ((Word32) ('prev_cap___struct_cap_C#v.words_C.1')) (@ addr 192)
      ((Word32) (('offset___unsigned_long#v' - ((0 - '#seq-visits') * ShiftLeft(1, WordCast('chunk___int#v')))))) (@ addr 192)
      ((Word32) ('retypeBase___ptr_to_void#v')) (@ addr 192)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 192)
      ((Word32) ('newType___unsigned_long#v')) (@ addr 192)
      ((Word32) ('regionBase___ptr_to_void#v')) (@ addr 192)
      ((Word32) ('deviceMemory___unsigned_long#v')) (@ addr 192)
      ((Word32) ('prev_cap___struct_cap_C#v.words_C.0')) (@ addr 192)
      ((Word32) ('regionBase___ptr_to_void#v.1')) (@ addr 192)
      ((Word32) ('destCNode___ptr_to_struct_cte_C#v')) (@ addr 192)
      ((Word32) ('srcSlot___ptr_to_struct_cte_C#v')) (@ addr 192)
      ((Word32) ('srcSlot___ptr_to_struct_cte_C#v.1')) (@ addr 192)
    .. proven.
Step 4: case in (3) where the length of the sequence < 2
  Prove the number of visits to 117 is in {0 ..< 3}
    .. proven.
Step 5: 
  Prove the number of visits to 192 is in {0 ..< 3}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Step 7: case in (3) where the length of the sequence is i + 2
  Prove the number of visits to 117 is in {i + 0 ..< i + 3}
    .. proven.
Step 8: 
  Prove the number of visits to 192 is in {i + 0 ..< i + 3}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (1) where 38 is not visited
  Prove the number of visits to 38 is in {0 ..< 1}
    .. proven.
Step 11: 
  Prove the number of visits to 195 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 177 is in {0 ..< 1}
    .. proven.
Step 13: 
  Prove the number of visits to 117 is in {0 ..< 1}
    .. proven.
Step 14: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeUntyped_Retype (ASM) <= Kernel_C.invokeUntyped_Retype (C)), time taken: 271.79s
Testing Function pair Pairing (str_to_long (ASM) <= Kernel_C.str_to_long (C))
  (function pairing 72 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [14, 70]
  (in problem)
Now doing proof search in 14 init case in problem.
Now doing proof search in 14 loop case in problem.
ProofNode ('Split', ((14, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (70, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'base___unsigned#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'str___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'res___long#v')), (Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'val___long#v'))], 2, 1), (ProofNode ('Restr', (14, ('Number', (0, 3))), (ProofNode ('Restr', (70, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (14, ('Offset', (0, 3))), (ProofNode ('Restr', (70, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 14 related to visits to 70
    with equalities
      ((Word32) ('r0')) (@ addr 14)
      = ((Word32) ('res___long#v')) (@ addr 70)
      ((Word32) ('r5')) (@ addr 14)
      = ((Word32) ('val___long#v')) (@ addr 70)
    and with invariants
      ((Word32) ('r7')) (@ addr 14)
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 14)
      ((Word32) ('r8')) (@ addr 14)
      ((Word32) ('r9')) (@ addr 14)
      ((Word32) ('ret')) (@ addr 14)
      ((Word32) ('r11')) (@ addr 14)
      ((Word32) ('r13')) (@ addr 14)
      ((Word32) ('r10')) (@ addr 14)
      ((Mem) ('mem')) (@ addr 14)
      ((Word32) ('r6')) (@ addr 14)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 14)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 70)
      ((Word32) ('base___unsigned#v')) (@ addr 70)
      ((Mem) ('Mem')) (@ addr 70)
      ((Word32) (('str___ptr_to_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 70)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 14 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 70 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 14 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 70 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (str_to_long (ASM) <= Kernel_C.str_to_long (C)), time taken: 74.86s
Testing Function pair Pairing (decodeCopyRegisters (ASM) <= Kernel_C.decodeCopyRegisters (C))
  (function pairing 73 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeCopyRegisters (ASM) <= Kernel_C.decodeCopyRegisters (C)), time taken: 1.14s
Testing Function pair Pairing (replyFromKernel_error (ASM) <= Kernel_C.replyFromKernel_error (C))
  (function pairing 74 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (replyFromKernel_error (ASM) <= Kernel_C.replyFromKernel_error (C)), time taken: 0.23s
Testing Function pair Pairing (decodeInvocation (ASM) <= Kernel_C.decodeInvocation (C))
  (function pairing 75 of 284)
 .. built problem, finding proof
Decided to case split at (102, 'ASM')
  (in problem)
Now doing proof search in true case (102 visited) in problem.
Now doing proof search in false case (102 not visited) in problem.
Decided to case split at (42, 'ASM')
  (in false case (102 not visited) in problem)
Now doing proof search in true case (42 visited) in false case (102 not visited) in problem.
Now doing proof search in false case (42 not visited) in false case (102 not visited) in problem.
Decided to case split at (48, 'ASM')
  (in false case (42 not visited) in false case (102 not visited) in problem)
Now doing proof search in true case (48 visited) in false case (42 not visited) in false case (102 not visited) in problem.
Now doing proof search in false case (48 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Decided to case split at (30, 'ASM')
  (in false case (48 not visited) in false case (42 not visited) in false case (102 not visited) in problem)
Now doing proof search in true case (30 visited) in false case (48 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Now doing proof search in false case (30 not visited) in false case (48 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Decided to case split at (196, 'ASM')
  (in false case (30 not visited) in false case (48 not visited) in false case (42 not visited) in false case (102 not visited) in problem)
Now doing proof search in true case (196 visited) in false case (30 not visited) in false case (48 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Now doing proof search in false case (196 not visited) in false case (30 not visited) in false case (48 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Decided to case split at (24, 'ASM')
  (in false case (196 not visited) in false case (30 not visited) in false case (48 not visited) in false case (42 not visited) in false case (102 not visited) in problem)
Now doing proof search in true case (24 visited) in false case (196 not visited) in false case (30 not visited) in false case (48 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Now doing proof search in false case (24 not visited) in false case (196 not visited) in false case (30 not visited) in false case (48 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Decided to case split at (54, 'ASM')
  (in false case (24 not visited) in false case (196 not visited) in false case (30 not visited) in false case (48 not visited) in false case (42 not visited) in false case (102 not visited) in problem)
Now doing proof search in true case (54 visited) in false case (24 not visited) in false case (196 not visited) in false case (30 not visited) in false case (48 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Now doing proof search in false case (54 not visited) in false case (24 not visited) in false case (196 not visited) in false case (30 not visited) in false case (48 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Decided to case split at (36, 'ASM')
  (in false case (54 not visited) in false case (24 not visited) in false case (196 not visited) in false case (30 not visited) in false case (48 not visited) in false case (42 not visited) in false case (102 not visited) in problem)
Now doing proof search in true case (36 visited) in false case (54 not visited) in false case (24 not visited) in false case (196 not visited) in false case (30 not visited) in false case (48 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Now doing proof search in false case (36 not visited) in false case (54 not visited) in false case (24 not visited) in false case (196 not visited) in false case (30 not visited) in false case (48 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
ProofNode ('CaseSplit', (102, 'ASM'), (ProofNode ('Restr', (102, ('Number', (1, 2))), (ProofNode ('Restr', (500, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (102, ('Number', (0, 1))), (ProofNode ('Restr', (500, ('Number', (0, 1))), (ProofNode ('CaseSplit', (42, 'ASM'), (ProofNode ('Restr', (42, ('Number', (1, 2))), (ProofNode ('Restr', (489, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (42, ('Number', (0, 1))), (ProofNode ('Restr', (489, ('Number', (0, 1))), (ProofNode ('CaseSplit', (48, 'ASM'), (ProofNode ('Restr', (48, ('Number', (1, 2))), (ProofNode ('Restr', (483, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (48, ('Number', (0, 1))), (ProofNode ('Restr', (483, ('Number', (0, 1))), (ProofNode ('CaseSplit', (30, 'ASM'), (ProofNode ('Restr', (30, ('Number', (1, 2))), (ProofNode ('Restr', (463, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (30, ('Number', (0, 1))), (ProofNode ('Restr', (463, ('Number', (0, 1))), (ProofNode ('CaseSplit', (196, 'ASM'), (ProofNode ('Restr', (196, ('Number', (1, 2))), (ProofNode ('Restr', (486, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (196, ('Number', (0, 1))), (ProofNode ('Restr', (486, ('Number', (0, 1))), (ProofNode ('CaseSplit', (24, 'ASM'), (ProofNode ('Restr', (24, ('Number', (1, 2))), (ProofNode ('Restr', (446, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (24, ('Number', (0, 1))), (ProofNode ('Restr', (446, ('Number', (0, 1))), (ProofNode ('CaseSplit', (54, 'ASM'), (ProofNode ('Restr', (54, ('Number', (1, 2))), (ProofNode ('Restr', (495, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (54, ('Number', (0, 1))), (ProofNode ('Restr', (495, ('Number', (0, 1))), (ProofNode ('CaseSplit', (36, 'ASM'), (ProofNode ('Restr', (36, ('Number', (1, 2))), (ProofNode ('Restr', (480, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (36, ('Number', (0, 1))), (ProofNode ('Restr', (480, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)))),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 102 is visited
Step 2: case in (1) where 102 is visited
  Prove the number of visits to 102 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 500 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 102 is not visited
  Prove the number of visits to 102 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 500 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 42 is visited
Step 8: case in (7) where 42 is visited
  Prove the number of visits to 42 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 489 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 42 is not visited
  Prove the number of visits to 42 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 489 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 48 is visited
Step 14: case in (13) where 48 is visited
  Prove the number of visits to 48 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 483 is in {1 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where 48 is not visited
  Prove the number of visits to 48 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 483 is in {0 ..< 1}
    .. proven.
Step 19: 
  case split on whether 30 is visited
Step 20: case in (19) where 30 is visited
  Prove the number of visits to 30 is in {1 ..< 2}
    .. proven.
Step 21: 
  Prove the number of visits to 463 is in {1 ..< 2}
    .. proven.
Step 22: 
  prove all verification conditions
    .. proven.
Step 23: case in (19) where 30 is not visited
  Prove the number of visits to 30 is in {0 ..< 1}
    .. proven.
Step 24: 
  Prove the number of visits to 463 is in {0 ..< 1}
    .. proven.
Step 25: 
  case split on whether 196 is visited
Step 26: case in (25) where 196 is visited
  Prove the number of visits to 196 is in {1 ..< 2}
    .. proven.
Step 27: 
  Prove the number of visits to 486 is in {1 ..< 2}
    .. proven.
Step 28: 
  prove all verification conditions
    .. proven.
Step 29: case in (25) where 196 is not visited
  Prove the number of visits to 196 is in {0 ..< 1}
    .. proven.
Step 30: 
  Prove the number of visits to 486 is in {0 ..< 1}
    .. proven.
Step 31: 
  case split on whether 24 is visited
Step 32: case in (31) where 24 is visited
  Prove the number of visits to 24 is in {1 ..< 2}
    .. proven.
Step 33: 
  Prove the number of visits to 446 is in {1 ..< 2}
    .. proven.
Step 34: 
  prove all verification conditions
    .. proven.
Step 35: case in (31) where 24 is not visited
  Prove the number of visits to 24 is in {0 ..< 1}
    .. proven.
Step 36: 
  Prove the number of visits to 446 is in {0 ..< 1}
    .. proven.
Step 37: 
  case split on whether 54 is visited
Step 38: case in (37) where 54 is visited
  Prove the number of visits to 54 is in {1 ..< 2}
    .. proven.
Step 39: 
  Prove the number of visits to 495 is in {1 ..< 2}
    .. proven.
Step 40: 
  prove all verification conditions
    .. proven.
Step 41: case in (37) where 54 is not visited
  Prove the number of visits to 54 is in {0 ..< 1}
    .. proven.
Step 42: 
  Prove the number of visits to 495 is in {0 ..< 1}
    .. proven.
Step 43: 
  case split on whether 36 is visited
Step 44: case in (43) where 36 is visited
  Prove the number of visits to 36 is in {1 ..< 2}
    .. proven.
Step 45: 
  Prove the number of visits to 480 is in {1 ..< 2}
    .. proven.
Step 46: 
  prove all verification conditions
    .. proven.
Step 47: case in (43) where 36 is not visited
  Prove the number of visits to 36 is in {0 ..< 1}
    .. proven.
Step 48: 
  Prove the number of visits to 480 is in {0 ..< 1}
    .. proven.
Step 49: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeInvocation (ASM) <= Kernel_C.decodeInvocation (C)), time taken: 42.73s
Testing Function pair Pairing (write_slot (ASM) <= Kernel_C.write_slot (C))
  (function pairing 76 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (write_slot (ASM) <= Kernel_C.write_slot (C)), time taken: 0.14s
Testing Function pair Pairing (cap_get_capPtr (ASM) <= Kernel_C.cap_get_capPtr (C))
  (function pairing 77 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cap_get_capPtr (ASM) <= Kernel_C.cap_get_capPtr (C)), time taken: 0.74s
Testing Function pair Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))
  (function pairing 78 of 284)
Aborting Problem (Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))), complex loop
Result ProblemAbort for pair Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C)), time taken: 1.32s
Testing Function pair Pairing (Arch_performTransfer (ASM) <= Kernel_C.Arch_performTransfer (C))
  (function pairing 79 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_performTransfer (ASM) <= Kernel_C.Arch_performTransfer (C)), time taken: 0.07s
Testing Function pair Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C))
  (function pairing 80 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C)), time taken: 1.14s
Testing Function pair Pairing (cteDeleteOne (ASM) <= Kernel_C.cteDeleteOne (C))
  (function pairing 81 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteDeleteOne (ASM) <= Kernel_C.cteDeleteOne (C)), time taken: 0.81s
Testing Function pair Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))
  (function pairing 82 of 284)
Aborting Problem (Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))), complex loop
Result ProblemAbort for pair Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C)), time taken: 0.85s
Testing Function pair Pairing (setIRQState (ASM) <= Kernel_C.setIRQState (C))
  (function pairing 83 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setIRQState (ASM) <= Kernel_C.setIRQState (C)), time taken: 0.11s
Testing Function pair Pairing (isMDBParentOf (ASM) <= Kernel_C.isMDBParentOf (C))
  (function pairing 84 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isMDBParentOf (ASM) <= Kernel_C.isMDBParentOf (C)), time taken: 0.58s
Testing Function pair Pairing (lookupSlot (ASM) <= Kernel_C.lookupSlot (C))
  (function pairing 85 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupSlot (ASM) <= Kernel_C.lookupSlot (C)), time taken: 0.76s
Testing Function pair Pairing (Arch_finaliseCap (ASM) <= Kernel_C.Arch_finaliseCap (C))
  (function pairing 86 of 284)
 .. built problem, finding proof
Decided to case split at (29, 'ASM')
  (in problem)
Now doing proof search in true case (29 visited) in problem.
Now doing proof search in false case (29 not visited) in problem.
Decided to case split at (23, 'ASM')
  (in false case (29 not visited) in problem)
Now doing proof search in true case (23 visited) in false case (29 not visited) in problem.
Now doing proof search in false case (23 not visited) in false case (29 not visited) in problem.
Decided to case split at (11, 'ASM')
  (in false case (23 not visited) in false case (29 not visited) in problem)
Now doing proof search in true case (11 visited) in false case (23 not visited) in false case (29 not visited) in problem.
Now doing proof search in false case (11 not visited) in false case (23 not visited) in false case (29 not visited) in problem.
ProofNode ('CaseSplit', (29, 'ASM'), (ProofNode ('Restr', (29, ('Number', (1, 2))), (ProofNode ('Restr', (170, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (29, ('Number', (0, 1))), (ProofNode ('Restr', (170, ('Number', (0, 1))), (ProofNode ('CaseSplit', (23, 'ASM'), (ProofNode ('Restr', (23, ('Number', (1, 2))), (ProofNode ('Restr', (146, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (23, ('Number', (0, 1))), (ProofNode ('Restr', (146, ('Number', (0, 1))), (ProofNode ('CaseSplit', (11, 'ASM'), (ProofNode ('Restr', (11, ('Number', (1, 2))), (ProofNode ('Restr', (180, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (11, ('Number', (0, 1))), (ProofNode ('Restr', (180, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 29 is visited
Step 2: case in (1) where 29 is visited
  Prove the number of visits to 29 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 170 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 29 is not visited
  Prove the number of visits to 29 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 170 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 23 is visited
Step 8: case in (7) where 23 is visited
  Prove the number of visits to 23 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 146 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 23 is not visited
  Prove the number of visits to 23 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 146 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 11 is visited
Step 14: case in (13) where 11 is visited
  Prove the number of visits to 11 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 180 is in {1 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where 11 is not visited
  Prove the number of visits to 11 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 180 is in {0 ..< 1}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_finaliseCap (ASM) <= Kernel_C.Arch_finaliseCap (C)), time taken: 13.76s
Testing Function pair Pairing (findPDForASID (ASM) <= Kernel_C.findPDForASID (C))
  (function pairing 87 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (findPDForASID (ASM) <= Kernel_C.findPDForASID (C)), time taken: 0.16s
Testing Function pair Pairing (strnlen (ASM) <= Kernel_C.strnlen (C))
  (function pairing 88 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [23, 42]
  (in problem)
Now doing proof search in 23 init case in problem.
Now doing proof search in 23 loop case in problem.
ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r1')])])]), (42, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 's___ptr_to_char#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'maxlen___unsigned_long#v')]), [], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 3))), (ProofNode ('Restr', (42, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (42, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 23 related to visits to 42
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r1')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Mem) ('mem')) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r1')), ((Word32) ('r0')))))) (@ addr 23)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r1')))))) (@ addr 23)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 42)
      ((Word32) ('s___ptr_to_char#v')) (@ addr 42)
      ((Mem) ('Mem')) (@ addr 42)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 42)
      ((Word32) ('maxlen___unsigned_long#v')) (@ addr 42)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 42 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 23 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 42 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (strnlen (ASM) <= Kernel_C.strnlen (C)), time taken: 8.23s
Testing Function pair Pairing (decodeTCBConfigure (ASM) <= Kernel_C.decodeTCBConfigure (C))
  (function pairing 89 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeTCBConfigure (ASM) <= Kernel_C.decodeTCBConfigure (C)), time taken: 2427.85s
Testing Function pair Pairing (flushTable (ASM) <= Kernel_C.flushTable (C))
  (function pairing 90 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (flushTable (ASM) <= Kernel_C.flushTable (C)), time taken: 0.66s
Testing Function pair Pairing (invokeTCB_CopyRegisters (ASM) <= Kernel_C.invokeTCB_CopyRegisters (C))
  (function pairing 91 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [9, 109]
  (in problem)
Now doing proof search in 9 init case in problem.
Discovered a loop relation for split points [19, 94]
  (in 9 init case in problem)
Now doing proof search in 19 init case in 9 init case in problem.
Now doing proof search in 19 loop case in 9 init case in problem.
Now doing proof search in 9 loop case in problem.
Discovered a loop relation for split points [19, 94]
  (in 9 loop case in problem)
Now doing proof search in 19 init case in 9 loop case in problem.
Now doing proof search in 19 loop case in 9 loop case in problem.
ProofNode ('Split', ((9, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (109, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'transferArch___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#25#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'transferInteger___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (9, ('Number', (0, 1))), (ProofNode ('Restr', (109, ('Number', (0, 2))), (ProofNode ('Split', ((19, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (94, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'transferArch___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (19, ('Number', (0, 1))), (ProofNode ('Restr', (94, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (19, ('Offset', (0, 3))), (ProofNode ('Restr', (94, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (9, ('Offset', (0, 3))), (ProofNode ('Restr', (109, ('Offset', (0, 3))), (ProofNode ('Split', ((19, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (94, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'transferArch___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (19, ('Number', (0, 1))), (ProofNode ('Restr', (94, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (19, ('Offset', (0, 3))), (ProofNode ('Restr', (94, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 9 related to visits to 109
    with equalities
      ((Mem) ('mem')) (@ addr 9)
      = ((Mem) ('Mem')) (@ addr 109)
    and with invariants
      ((Word32) ('r4')) (@ addr 9)
      ((Word32) ('r8')) (@ addr 9)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 9)
      ((Word32) ('r5')) (@ addr 9)
      ((Word32) ('r0')) (@ addr 9)
      ((Word32) ('r9')) (@ addr 9)
      ((Word32) ('ret')) (@ addr 9)
      ((Word32) ('r11')) (@ addr 9)
      ((Word32) ('r13')) (@ addr 9)
      ((Word32) ('r10')) (@ addr 9)
      ((Bool) (ROData('mem'))) (@ addr 9)
      ((Word32) ('r7')) (@ addr 9)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 9)
      ((Word32) ('transferArch___unsigned_long#v')) (@ addr 109)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 109)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 109)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 109)
      ((Word32) (('loop#25#count' + ((0 - '#seq-visits') * 1)))) (@ addr 109)
      ((Word32) ('transferInteger___unsigned_long#v')) (@ addr 109)
      ((Word32[50]) ('GhostAssertions')) (@ addr 109)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 9 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 109 is in {0 ..< 2}
    .. proven.
Step 4: 
  prove visits to 19 related to visits to 94
    with equalities
      ((Mem) ('mem')) (@ addr 19)
      = ((Mem) ('Mem')) (@ addr 94)
    and with invariants
      ((Word32) ('r4')) (@ addr 19)
      ((Word32) ('r8')) (@ addr 19)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 19)
      ((Word32) ('r5')) (@ addr 19)
      ((Word32) ('r0')) (@ addr 19)
      ((Word32) ('r9')) (@ addr 19)
      ((Word32) ('ret')) (@ addr 19)
      ((Word32) ('r11')) (@ addr 19)
      ((Word32) ('r13')) (@ addr 19)
      ((Word32) ('r10')) (@ addr 19)
      ((Bool) (ROData('mem'))) (@ addr 19)
      ((Word32) ('r7')) (@ addr 19)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 19)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 94)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 94)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 94)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 94)
      ((Word32) ('transferArch___unsigned_long#v')) (@ addr 94)
      ((Word32[50]) ('GhostAssertions')) (@ addr 94)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 19 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 94 is in {0 ..< 2}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 19 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 94 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 9 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 109 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 19 related to visits to 94
    with equalities
      ((Mem) ('mem')) (@ addr 19)
      = ((Mem) ('Mem')) (@ addr 94)
    and with invariants
      ((Word32) ('r4')) (@ addr 19)
      ((Word32) ('r8')) (@ addr 19)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 19)
      ((Word32) ('r5')) (@ addr 19)
      ((Word32) ('r0')) (@ addr 19)
      ((Word32) ('r9')) (@ addr 19)
      ((Word32) ('ret')) (@ addr 19)
      ((Word32) ('r11')) (@ addr 19)
      ((Word32) ('r13')) (@ addr 19)
      ((Word32) ('r10')) (@ addr 19)
      ((Bool) (ROData('mem'))) (@ addr 19)
      ((Word32) ('r7')) (@ addr 19)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 19)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 94)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 94)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 94)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 94)
      ((Word32) ('transferArch___unsigned_long#v')) (@ addr 94)
      ((Word32[50]) ('GhostAssertions')) (@ addr 94)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 19 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 94 is in {0 ..< 1}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 19 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 94 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_CopyRegisters (ASM) <= Kernel_C.invokeTCB_CopyRegisters (C)), time taken: 79.78s
Testing Function pair Pairing (decodeWriteRegisters (ASM) <= Kernel_C.decodeWriteRegisters (C))
  (function pairing 92 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeWriteRegisters (ASM) <= Kernel_C.decodeWriteRegisters (C)), time taken: 0.92s
Testing Function pair Pairing (handleDoubleFault (ASM) <= Kernel_C.handleDoubleFault (C))
  (function pairing 93 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleDoubleFault (ASM) <= Kernel_C.handleDoubleFault (C)), time taken: 0.11s
Testing Function pair Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C))
  (function pairing 94 of 284)
Skipping Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C)), underspecified C
Testing Function pair Pairing (cpu_iface_init (ASM) <= Kernel_C.cpu_iface_init (C))
  (function pairing 95 of 284)
 .. built problem, finding proof
Discovered that points [81 (loop head)] can be bounded
  (in problem)
Discovered a loop relation for split points [15, 69]
  (in problem)
Now doing proof search in 15 init case in problem.
Now doing proof search in 15 loop case in problem.
ProofNode ('Restr', (81, ('Number', (0, 6))), (ProofNode ('Split', ((15, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Var', Type ('Word', 32), name = 'r3')]), (69, (0, 1), [Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (15, ('Number', (0, 1))), (ProofNode ('Restr', (69, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (15, ('Offset', (0, 1))), (ProofNode ('Restr', (69, ('Offset', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),))
 .. proof found.
Step 1: 
  Prove the number of visits to 81 is in {0 ..< 6}
    .. proven.
Step 2: 
  prove visits to 15 related to visits to 69
    with equalities
      ((Mem) ('mem')) (@ addr 15)
      = ((Mem) ('Mem')) (@ addr 69)
    and with invariants
      ((Word32) ('r7')) (@ addr 15)
      ((Word32) ('r4')) (@ addr 15)
      ((Word32) ('r8')) (@ addr 15)
      ((Word32) ('r5')) (@ addr 15)
      ((Word32) ('r6')) (@ addr 15)
      ((Word32) ('r0')) (@ addr 15)
      ((Word32) ('r9')) (@ addr 15)
      ((Word32) ('ret')) (@ addr 15)
      ((Word32) ('r2')) (@ addr 15)
      ((Word32) ('r11')) (@ addr 15)
      ((Word32) ('r13')) (@ addr 15)
      ((Word32) ('r10')) (@ addr 15)
      ((Bool) (ROData('mem'))) (@ addr 15)
      ((Word32) ('r14')) (@ addr 15)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 15)
      ((Word32) ('r3')) (@ addr 15)
      ((Word32[50]) ('GhostAssertions')) (@ addr 69)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 69)
    .. proven.
Step 3: case in (2) where the length of the sequence < 2
  Prove the number of visits to 15 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 69 is in {0 ..< 1}
    .. proven.
Step 5: 
  prove all verification conditions
    .. proven.
Step 6: case in (2) where the length of the sequence is i + 2
  Prove the number of visits to 15 is in {i + 0 ..< i + 1}
    .. proven.
Step 7: 
  Prove the number of visits to 69 is in {i + 0 ..< i + 1}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cpu_iface_init (ASM) <= Kernel_C.cpu_iface_init (C)), time taken: 6.85s
Testing Function pair Pairing (setExtraBadge (ASM) <= Kernel_C.setExtraBadge (C))
  (function pairing 96 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setExtraBadge (ASM) <= Kernel_C.setExtraBadge (C)), time taken: 0.11s
Testing Function pair Pairing (performInvocation_Reply (ASM) <= Kernel_C.performInvocation_Reply (C))
  (function pairing 97 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (performInvocation_Reply (ASM) <= Kernel_C.performInvocation_Reply (C)), time taken: 0.11s
Testing Function pair Pairing (Arch_sameRegionAs (ASM) <= Kernel_C.Arch_sameRegionAs (C))
  (function pairing 98 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_sameRegionAs (ASM) <= Kernel_C.Arch_sameRegionAs (C)), time taken: 1.71s
Testing Function pair Pairing (cteSwap (ASM) <= Kernel_C.cteSwap (C))
  (function pairing 99 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteSwap (ASM) <= Kernel_C.cteSwap (C)), time taken: 3.07s
Testing Function pair Pairing (deletingIRQHandler (ASM) <= Kernel_C.deletingIRQHandler (C))
  (function pairing 100 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deletingIRQHandler (ASM) <= Kernel_C.deletingIRQHandler (C)), time taken: 0.11s
Testing Function pair Pairing (getReceiveSlots (ASM) <= Kernel_C.getReceiveSlots (C))
  (function pairing 101 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (getReceiveSlots (ASM) <= Kernel_C.getReceiveSlots (C)), time taken: 8.09s
Testing Function pair Pairing (switchToIdleThread (ASM) <= Kernel_C.switchToIdleThread (C))
  (function pairing 102 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (switchToIdleThread (ASM) <= Kernel_C.switchToIdleThread (C)), time taken: 0.10s
Testing Function pair Pairing (decodeUnbindNotification (ASM) <= Kernel_C.decodeUnbindNotification (C))
  (function pairing 103 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeUnbindNotification (ASM) <= Kernel_C.decodeUnbindNotification (C)), time taken: 0.29s
Testing Function pair Pairing (unmapPageTable (ASM) <= Kernel_C.unmapPageTable (C))
  (function pairing 104 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (unmapPageTable (ASM) <= Kernel_C.unmapPageTable (C)), time taken: 0.75s
Testing Function pair Pairing (lookupIPCBuffer (ASM) <= Kernel_C.lookupIPCBuffer (C))
  (function pairing 105 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupIPCBuffer (ASM) <= Kernel_C.lookupIPCBuffer (C)), time taken: 1.21s
Testing Function pair Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C))
  (function pairing 106 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [7, 178]
  (in problem)
Now doing proof search in 7 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 7 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 7 init case in problem)
Now doing proof search in 7 loop case in problem.
Discovered a loop relation for split points [52, 196]
  (in 7 loop case in problem)
Now doing proof search in 52 init case in 7 loop case in problem.
Now doing proof search in 52 loop case in 7 loop case in problem.
ProofNode ('Split', ((7, (1, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Var', Type ('Word', 32), name = 'r12')]), (178, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'buffer___ptr_to_unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#26#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'resumeTarget___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'archInfo___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (7, ('Number', (0, 4))), (ProofNode ('Restr', (178, ('Number', (0, 4))), (ProofNode ('Restr', (155, ('Number', (0, 2))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (7, ('Offset', (0, 3))), (ProofNode ('Restr', (178, ('Offset', (0, 3))), (ProofNode ('Split', ((52, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (196, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'buffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#13#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'archInfo___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'resumeTarget___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1')), (Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'w___unsigned_long#v')), (Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'reg___unsigned_long#v'))], 2, 1), (ProofNode ('Restr', (52, ('Number', (0, 3))), (ProofNode ('Restr', (196, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (52, ('Offset', (0, 3))), (ProofNode ('Restr', (196, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits [2, 3, 4 ...] to 7 related to visits [2, 3, 4 ...] to 178
    with equalities
      ((Mem) ('mem')) (@ addr 7)
      = ((Mem) ('Mem')) (@ addr 178)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 4)))) (@ addr 7)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 7)
      ((Word32) ('r13')) (@ addr 7)
      ((Word32) ('r9')) (@ addr 7)
      ((Word32) ('r6')) (@ addr 7)
      ((Word32) (('r7' + ((0 - '#seq-visits') * 4)))) (@ addr 7)
      ((Word32) ('r8')) (@ addr 7)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 7)
      ((Word32) ('r11')) (@ addr 7)
      ((Word32) ('r5')) (@ addr 7)
      ((Word32) ('ret')) (@ addr 7)
      ((Word32) ('r1')) (@ addr 7)
      ((Word32) ('r2')) (@ addr 7)
      ((Bool) (ROData('mem'))) (@ addr 7)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 7)
      ((Word32) ('r12')) (@ addr 7)
      ((Word32) ('buffer___ptr_to_unsigned_long#v')) (@ addr 178)
      ((Word32) (('loop#26#count' + ((0 - '#seq-visits') * 1)))) (@ addr 178)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 178)
      ((Word32) ('resumeTarget___unsigned_long#v')) (@ addr 178)
      ((Word32) ('n___unsigned_long#v')) (@ addr 178)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 178)
      ((Word32) ('archInfo___unsigned_long#v')) (@ addr 178)
      ((Word32[50]) ('GhostAssertions')) (@ addr 178)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 7 is in {0 ..< 4}
    .. proven.
Step 3: 
  Prove the number of visits to 178 is in {0 ..< 4}
    .. proven.
Step 4: 
  Prove the number of visits to 155 is in {0 ..< 2}
    .. proven.
Step 5: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Step 7: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 7 is in {i + 0 ..< i + 3}
    .. proven.
Step 8: 
  Prove the number of visits to 178 is in {i + 0 ..< i + 3}
    .. proven.
Step 9: 
  prove visits to 52 related to visits to 196
    with equalities
      ((Mem) ('mem')) (@ addr 52)
      = ((Mem) ('Mem.1')) (@ addr 196)
      ((Word32) ('r12')) (@ addr 52)
      = ((Word32) ('w___unsigned_long#v')) (@ addr 196)
      ((Word32) ('r14')) (@ addr 52)
      = ((Word32) ('reg___unsigned_long#v')) (@ addr 196)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 4)))) (@ addr 52)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 52)
      ((Word32) ('r13')) (@ addr 52)
      ((Word32) ('r6')) (@ addr 52)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 52)
      ((Word32) ('r1')) (@ addr 52)
      ((Word32) ('r5')) (@ addr 52)
      ((Word32) ('r7')) (@ addr 52)
      ((Word32) ('ret')) (@ addr 52)
      ((Word32) ('r11')) (@ addr 52)
      ((Word32) ('r2')) (@ addr 52)
      ((Bool) (ROData('mem'))) (@ addr 52)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 52)
      ((Word32) ('buffer___ptr_to_unsigned_long#v')) (@ addr 196)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 196)
      ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 196)
      ((Word32) (('loop#13#count' + ((0 - '#seq-visits') * 1)))) (@ addr 196)
      ((Word32) ('n___unsigned_long#v')) (@ addr 196)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 196)
      ((Word32) ('archInfo___unsigned_long#v')) (@ addr 196)
      ((Word32) ('resumeTarget___unsigned_long#v')) (@ addr 196)
      ((Word32[50]) ('GhostAssertions.1')) (@ addr 196)
    .. proven.
Step 10: case in (9) where the length of the sequence < 2
  Prove the number of visits to 52 is in {0 ..< 3}
    .. proven.
Step 11: 
  Prove the number of visits to 196 is in {0 ..< 3}
    .. proven.
Step 12: 
  prove all verification conditions
    .. proven.
Step 13: case in (9) where the length of the sequence is j + 2
  Prove the number of visits to 52 is in {j + 0 ..< j + 3}
    .. proven.
Step 14: 
  Prove the number of visits to 196 is in {j + 0 ..< j + 3}
    .. proven.
Step 15: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C)), time taken: 450.14s
Testing Function pair Pairing (initTimer (ASM) <= Kernel_C.initTimer (C))
  (function pairing 107 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (initTimer (ASM) <= Kernel_C.initTimer (C)), time taken: 0.11s
Testing Function pair Pairing (invokeCNodeRevoke (ASM) <= Kernel_C.invokeCNodeRevoke (C))
  (function pairing 108 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeRevoke (ASM) <= Kernel_C.invokeCNodeRevoke (C)), time taken: 0.10s
Testing Function pair Pairing (lookupPTSlot (ASM) <= Kernel_C.lookupPTSlot (C))
  (function pairing 109 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupPTSlot (ASM) <= Kernel_C.lookupPTSlot (C)), time taken: 0.18s
Testing Function pair Pairing (arch_clean_invalidate_L1_caches (ASM) <= Kernel_C.arch_clean_invalidate_L1_caches (C))
  (function pairing 110 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (arch_clean_invalidate_L1_caches (ASM) <= Kernel_C.arch_clean_invalidate_L1_caches (C)), time taken: 0.84s
Testing Function pair Pairing (APFromVMRights (ASM) <= Kernel_C.APFromVMRights (C))
  (function pairing 111 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (APFromVMRights (ASM) <= Kernel_C.APFromVMRights (C)), time taken: 0.13s
Testing Function pair Pairing (cleanCaches_PoU (ASM) <= Kernel_C.cleanCaches_PoU (C))
  (function pairing 112 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cleanCaches_PoU (ASM) <= Kernel_C.cleanCaches_PoU (C)), time taken: 0.31s
Testing Function pair Pairing (invokeIRQControl (ASM) <= Kernel_C.invokeIRQControl (C))
  (function pairing 113 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeIRQControl (ASM) <= Kernel_C.invokeIRQControl (C)), time taken: 0.28s
Testing Function pair Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C))
  (function pairing 114 of 284)
 .. built problem, finding proof
Decided to case split at (12, 'ASM')
  (in problem)
Now doing proof search in true case (12 visited) in problem.
Now doing proof search in false case (12 not visited) in problem.
ProofNode ('CaseSplit', (12, 'ASM'), (ProofNode ('Restr', (12, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (12, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 12 is visited
Step 2: case in (1) where 12 is visited
  Prove the number of visits to 12 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 12 is not visited
  Prove the number of visits to 12 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C)), time taken: 11.56s
Testing Function pair Pairing (isFinalCapability (ASM) <= Kernel_C.isFinalCapability (C))
  (function pairing 115 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isFinalCapability (ASM) <= Kernel_C.isFinalCapability (C)), time taken: 0.84s
Testing Function pair Pairing (handleUserLevelFault (ASM) <= Kernel_C.handleUserLevelFault (C))
  (function pairing 116 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleUserLevelFault (ASM) <= Kernel_C.handleUserLevelFault (C)), time taken: 0.25s
Testing Function pair Pairing (doFlush (ASM) <= Kernel_C.doFlush (C))
  (function pairing 117 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doFlush (ASM) <= Kernel_C.doFlush (C)), time taken: 3.58s
Testing Function pair Pairing (decodeSetSpace (ASM) <= Kernel_C.decodeSetSpace (C))
  (function pairing 118 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeSetSpace (ASM) <= Kernel_C.decodeSetSpace (C)), time taken: 817.08s
Testing Function pair Pairing (ensureEmptySlot (ASM) <= Kernel_C.ensureEmptySlot (C))
  (function pairing 119 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (ensureEmptySlot (ASM) <= Kernel_C.ensureEmptySlot (C)), time taken: 0.12s
Testing Function pair Pairing (create_ipcbuf_frame_cap (ASM) <= Kernel_C.create_ipcbuf_frame_cap (C))
  (function pairing 120 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_ipcbuf_frame_cap (ASM) <= Kernel_C.create_ipcbuf_frame_cap (C)), time taken: 9.37s
Testing Function pair Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C))
  (function pairing 121 of 284)
 .. built problem, finding proof
Discovered that points [28 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (28, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 28 is in {0 ..< 2}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C)), time taken: 0.52s
Testing Function pair Pairing (copyGlobalMappings (ASM) <= Kernel_C.copyGlobalMappings (C))
  (function pairing 122 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [15, 31]
  (in problem)
Now doing proof search in 15 init case in problem.
Now doing proof search in 15 loop case in problem.
ProofNode ('Split', ((15, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'newPD___ptr_to_struct_pde_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'global_pd___ptr_to_struct_pde_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (15, ('Number', (0, 1))), (ProofNode ('Restr', (31, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (15, ('Offset', (0, 3))), (ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 15 related to visits to 31
    with equalities
      ((Mem) ('mem')) (@ addr 15)
      = ((Mem) ('Mem')) (@ addr 31)
    and with invariants
      ((Word32) ('r7')) (@ addr 15)
      ((Word32) ('r4')) (@ addr 15)
      ((Word32) ('r8')) (@ addr 15)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 15)
      ((Word32) ('r5')) (@ addr 15)
      ((Word32) ('r6')) (@ addr 15)
      ((Word32) ('r0')) (@ addr 15)
      ((Word32) ('r9')) (@ addr 15)
      ((Word32) ('ret')) (@ addr 15)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 1)))) (@ addr 15)
      ((Word32) ('r11')) (@ addr 15)
      ((Word32) ('r12')) (@ addr 15)
      ((Word32) ('r13')) (@ addr 15)
      ((Word32) ('r10')) (@ addr 15)
      ((Bool) (ROData('mem'))) (@ addr 15)
      ((Word32) ('r14')) (@ addr 15)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 15)
      ((Word32) ('newPD___ptr_to_struct_pde_C#v')) (@ addr 31)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 31)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 31)
      ((Word32) ('global_pd___ptr_to_struct_pde_C#v')) (@ addr 31)
      ((Word32[50]) ('GhostAssertions')) (@ addr 31)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 15 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 31 is in {0 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 15 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 31 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (copyGlobalMappings (ASM) <= Kernel_C.copyGlobalMappings (C)), time taken: 7.62s
Testing Function pair Pairing (cleanCacheRange_PoU (ASM) <= Kernel_C.cleanCacheRange_PoU (C))
  (function pairing 123 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [4, 31]
  (in problem)
Now doing proof search in 4 init case in problem.
Now doing proof search in 4 loop case in problem.
ProofNode ('Split', ((4, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r1')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (4, ('Number', (0, 3))), (ProofNode ('Restr', (31, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (4, ('Offset', (0, 3))), (ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 4 related to visits to 31
    with equalities
      ((Mem) ('mem')) (@ addr 4)
      = ((Mem) ('Mem')) (@ addr 31)
    and with invariants
      ((Word32) ('r21')) (@ addr 4)
      ((Word32) ('r4')) (@ addr 4)
      ((Word32) ('r27')) (@ addr 4)
      ((Word32) ('r17')) (@ addr 4)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('r23')) (@ addr 4)
      ((Word32) ('r13')) (@ addr 4)
      ((Word32) ('r10')) (@ addr 4)
      ((Word32) ('r28')) (@ addr 4)
      ((Word32) ('r19')) (@ addr 4)
      ((Word32) ('r16')) (@ addr 4)
      ((Word64) ('clock')) (@ addr 4)
      ((Word32) ('r12')) (@ addr 4)
      ((Word32) ('r9')) (@ addr 4)
      ((Word32) ('r6')) (@ addr 4)
      ((Word32) ('r7')) (@ addr 4)
      ((Word32) ('r31')) (@ addr 4)
      ((Word32) ('r25')) (@ addr 4)
      ((Word32) ('r24')) (@ addr 4)
      ((Word32) ('r8')) (@ addr 4)
      ((Word32) ('r29')) (@ addr 4)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 4)
      ((Word32) ('r18')) (@ addr 4)
      ((Word32) ('r20')) (@ addr 4)
      ((Word32) ('r30')) (@ addr 4)
      ((Word32) ('r14')) (@ addr 4)
      ((Word32) ('r15')) (@ addr 4)
      ((Word32) ('mode')) (@ addr 4)
      ((Word32) ('r11')) (@ addr 4)
      ((Word32) ('r5')) (@ addr 4)
      ((Word32) ('ret')) (@ addr 4)
      ((Word32) ('r26')) (@ addr 4)
      ((Word32) ('r1')) (@ addr 4)
      ((Word32) ('r2')) (@ addr 4)
      ((Bool) (ROData('mem'))) (@ addr 4)
      ((Word32) ('r22')) (@ addr 4)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r1')), ((Word32) ('r0')))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r1')))))) (@ addr 4)
      ((Bool) ('c')) (@ addr 4)
      ((Bool) ('n')) (@ addr 4)
      ((Bool) ('v')) (@ addr 4)
      ((Bool) ('z')) (@ addr 4)
      ((Word32) ('end___unsigned_long#v')) (@ addr 31)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 31)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 31)
      ((Word32) ('start___unsigned_long#v')) (@ addr 31)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 31)
      ((Word32[50]) ('GhostAssertions')) (@ addr 31)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 4 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 31 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 4 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 31 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cleanCacheRange_PoU (ASM) <= Kernel_C.cleanCacheRange_PoU (C)), time taken: 19.85s
Testing Function pair Pairing (restore_user_context (ASM) <= Kernel_C.restore_user_context (C))
  (function pairing 124 of 284)
Skipping Pairing (restore_user_context (ASM) <= Kernel_C.restore_user_context (C)), underspecified C
Testing Function pair Pairing (activateThread (ASM) <= Kernel_C.activateThread (C))
  (function pairing 125 of 284)
 .. built problem, finding proof
Decided to case split at (4, 'ASM')
  (in problem)
Now doing proof search in true case (4 visited) in problem.
Now doing proof search in false case (4 not visited) in problem.
Decided to case split at (6, 'ASM')
  (in false case (4 not visited) in problem)
Now doing proof search in true case (6 visited) in false case (4 not visited) in problem.
Now doing proof search in false case (6 not visited) in false case (4 not visited) in problem.
ProofNode ('CaseSplit', (4, 'ASM'), (ProofNode ('Restr', (4, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (4, ('Number', (0, 1))), (ProofNode ('Restr', (45, ('Number', (0, 1))), (ProofNode ('CaseSplit', (6, 'ASM'), (ProofNode ('Restr', (6, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (6, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 4 is visited
Step 2: case in (1) where 4 is visited
  Prove the number of visits to 4 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 4 is not visited
  Prove the number of visits to 4 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 45 is in {0 ..< 1}
    .. proven.
Step 6: 
  case split on whether 6 is visited
Step 7: case in (6) where 6 is visited
  Prove the number of visits to 6 is in {1 ..< 2}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Step 9: case in (6) where 6 is not visited
  Prove the number of visits to 6 is in {0 ..< 1}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (activateThread (ASM) <= Kernel_C.activateThread (C)), time taken: 3.80s
Testing Function pair Pairing (strlcat (ASM) <= Kernel_C.strlcat (C))
  (function pairing 126 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [37, 101]
  (in problem)
Now doing proof search in 37 init case in problem.
Discovered a loop relation for split points [56, 77]
  (in 37 init case in problem)
Now doing proof search in 56 init case in 37 init case in problem.
Now doing proof search in 56 loop case in 37 init case in problem.
Now doing proof search in 37 loop case in problem.
Discovered a loop relation for split points [56, 77]
  (in 37 loop case in problem)
Now doing proof search in 56 init case in 37 loop case in problem.
Now doing proof search in 56 loop case in 37 loop case in problem.
ProofNode ('Split', ((37, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r3')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r2')])])]), (101, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#24#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [], 2, 1), (ProofNode ('Restr', (37, ('Number', (0, 3))), (ProofNode ('Restr', (101, ('Number', (0, 3))), (ProofNode ('Split', ((56, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r0')])])]), (77, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (56, ('Number', (0, 3))), (ProofNode ('Restr', (77, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (56, ('Offset', (0, 3))), (ProofNode ('Restr', (77, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (37, ('Offset', (0, 3))), (ProofNode ('Restr', (101, ('Offset', (0, 3))), (ProofNode ('Split', ((56, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r0')])])]), (77, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (56, ('Number', (0, 3))), (ProofNode ('Restr', (77, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (56, ('Offset', (0, 3))), (ProofNode ('Restr', (77, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 37 related to visits to 101
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 37)
      ((Word32) ('r4')) (@ addr 37)
      ((Word32) ('r8')) (@ addr 37)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 37)
      ((Word32) ('r13')) (@ addr 37)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 1)))) (@ addr 37)
      ((Word32) ('r9')) (@ addr 37)
      ((Word32) ('ret')) (@ addr 37)
      ((Word32) ('r2')) (@ addr 37)
      ((Word32) ('r11')) (@ addr 37)
      ((Word32) ('r1')) (@ addr 37)
      ((Word32) ('r10')) (@ addr 37)
      ((Mem) ('mem')) (@ addr 37)
      ((Word32) ('r5')) (@ addr 37)
      ((Word32) ('r6')) (@ addr 37)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 37)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r2')), ((Word32) ('r3')))))) (@ addr 37)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r3')), ((Word32) ('r2')))))) (@ addr 37)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 101)
      ((Word32) ('size___unsigned_long#v')) (@ addr 101)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 101)
      ((Word32) ('src___ptr_to_char#v')) (@ addr 101)
      ((Word32) (('loop#24#count' + ((0 - '#seq-visits') * 1)))) (@ addr 101)
      ((Mem) ('Mem')) (@ addr 101)
      ((Word32[50]) ('GhostAssertions')) (@ addr 101)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 37 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 101 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove visits to 56 related to visits to 77
    with equalities
      ((Mem) ('mem')) (@ addr 56)
      = ((Mem) ('Mem')) (@ addr 77)
    and with invariants
      ((Word32) ('r4')) (@ addr 56)
      ((Word32) ('r8')) (@ addr 56)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 56)
      ((Word32) ('r13')) (@ addr 56)
      ((Word32) ('r5')) (@ addr 56)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 56)
      ((Word32) ('r9')) (@ addr 56)
      ((Word32) ('ret')) (@ addr 56)
      ((Word32) ('r2')) (@ addr 56)
      ((Word32) ('r11')) (@ addr 56)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 56)
      ((Word32) ('r10')) (@ addr 56)
      ((Bool) (ROData('mem'))) (@ addr 56)
      ((Word32) ('r6')) (@ addr 56)
      ((Word32) ('r7')) (@ addr 56)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 56)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r2')), ((Word32) ('r0')))))) (@ addr 56)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 77)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 77)
      ((Word32) ('size___unsigned_long#v')) (@ addr 77)
      ((Word32) (('src___ptr_to_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 77)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 77)
      ((Word32[50]) ('GhostAssertions')) (@ addr 77)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 56 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 77 is in {0 ..< 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 56 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 77 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 37 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 101 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 56 related to visits to 77
    with equalities
      ((Mem) ('mem')) (@ addr 56)
      = ((Mem) ('Mem')) (@ addr 77)
    and with invariants
      ((Word32) ('r4')) (@ addr 56)
      ((Word32) ('r8')) (@ addr 56)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 56)
      ((Word32) ('r13')) (@ addr 56)
      ((Word32) ('r5')) (@ addr 56)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 56)
      ((Word32) ('r9')) (@ addr 56)
      ((Word32) ('ret')) (@ addr 56)
      ((Word32) ('r2')) (@ addr 56)
      ((Word32) ('r11')) (@ addr 56)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 56)
      ((Word32) ('r10')) (@ addr 56)
      ((Bool) (ROData('mem'))) (@ addr 56)
      ((Word32) ('r6')) (@ addr 56)
      ((Word32) ('r7')) (@ addr 56)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 56)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r2')), ((Word32) ('r0')))))) (@ addr 56)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 77)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 77)
      ((Word32) ('size___unsigned_long#v')) (@ addr 77)
      ((Word32) (('src___ptr_to_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 77)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 77)
      ((Word32[50]) ('GhostAssertions')) (@ addr 77)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 56 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 77 is in {0 ..< 3}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 56 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 77 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (strlcat (ASM) <= Kernel_C.strlcat (C)), time taken: 118.60s
Testing Function pair Pairing (scheduleChooseNewThread (ASM) <= Kernel_C.scheduleChooseNewThread (C))
  (function pairing 127 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (scheduleChooseNewThread (ASM) <= Kernel_C.scheduleChooseNewThread (C)), time taken: 0.43s
Testing Function pair Pairing (maskCapRights (ASM) <= Kernel_C.maskCapRights (C))
  (function pairing 128 of 284)
 .. built problem, finding proof
Decided to case split at (8, 'ASM')
  (in problem)
Now doing proof search in true case (8 visited) in problem.
Now doing proof search in false case (8 not visited) in problem.
ProofNode ('CaseSplit', (8, 'ASM'), (ProofNode ('Restr', (8, ('Number', (1, 2))), (ProofNode ('Restr', (339, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Restr', (339, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 8 is visited
Step 2: case in (1) where 8 is visited
  Prove the number of visits to 8 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 339 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 8 is not visited
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 339 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (maskCapRights (ASM) <= Kernel_C.maskCapRights (C)), time taken: 5.01s
Testing Function pair Pairing (flushPage (ASM) <= Kernel_C.flushPage (C))
  (function pairing 129 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (flushPage (ASM) <= Kernel_C.flushPage (C)), time taken: 0.73s
Testing Function pair Pairing (Arch_configureIdleThread (ASM) <= Kernel_C.Arch_configureIdleThread (C))
  (function pairing 130 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_configureIdleThread (ASM) <= Kernel_C.Arch_configureIdleThread (C)), time taken: 0.09s
Testing Function pair Pairing (cap_get_capSizeBits (ASM) <= Kernel_C.cap_get_capSizeBits (C))
  (function pairing 131 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cap_get_capSizeBits (ASM) <= Kernel_C.cap_get_capSizeBits (C)), time taken: 0.81s
Testing Function pair Pairing (bindNotification (ASM) <= Kernel_C.bindNotification (C))
  (function pairing 132 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (bindNotification (ASM) <= Kernel_C.bindNotification (C)), time taken: 0.09s
Testing Function pair Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))
  (function pairing 133 of 284)
Aborting Problem (Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))): underspecified asm_instruction'.word_0xeef00a10__\nmov_%0,_r0________\n
Result ProblemAbort for pair Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C)), time taken: 0.00s
Testing Function pair Pairing (insert_region (ASM) <= Kernel_C.insert_region (C))
  (function pairing 134 of 284)
 .. built problem, finding proof
Discovered that points [94 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (94, ('Number', (0, 6))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 94 is in {0 ..< 6}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (insert_region (ASM) <= Kernel_C.insert_region (C)), time taken: 2.37s
Testing Function pair Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C))
  (function pairing 135 of 284)
 .. built problem, finding proof
Decided to case split at (195, 'ASM')
  (in problem)
Now doing proof search in true case (195 visited) in problem.
Now doing proof search in false case (195 not visited) in problem.
Decided to case split at (22, 'ASM')
  (in false case (195 not visited) in problem)
Now doing proof search in true case (22 visited) in false case (195 not visited) in problem.
Discovered a loop relation for split points [1932, 2158]
  (in true case (22 visited) in false case (195 not visited) in problem)
Now doing proof search in 1932 init case in true case (22 visited) in false case (195 not visited) in problem.
Now doing proof search in 1932 loop case in true case (22 visited) in false case (195 not visited) in problem.
Now doing proof search in false case (22 not visited) in false case (195 not visited) in problem.
Decided to case split at (192, 'ASM')
  (in false case (22 not visited) in false case (195 not visited) in problem)
Now doing proof search in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem.
Discovered that points [1306 (loop head)] can be bounded
  (in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem)
Discovered a loop relation for split points [422, 3265]
  (in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem)
Now doing proof search in 422 init case in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem.
Discovered that points [3202 (loop head)] can be bounded
  (in 422 init case in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem)
Discovered a loop relation for split points [476, 3382]
  (in 422 init case in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem)
Now doing proof search in 476 init case in 422 init case in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem.
Discovered that points [3307 (loop head)] can be bounded
  (in 476 init case in 422 init case in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem)
Discovered that points [2021 (loop head)] can be bounded
  (in 476 init case in 422 init case in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem)
Discovered that points [1497 (loop head)] can be bounded
  (in 476 init case in 422 init case in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem)
Now doing proof search in 476 loop case in 422 init case in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem.
Discovered a loop relation for split points [454, 3312]
  (in 476 loop case in 422 init case in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem)
Now doing proof search in 454 init case in 476 loop case in 422 init case in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem.
Now doing proof search in 454 loop case in 476 loop case in 422 init case in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem.
Now doing proof search in 422 loop case in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem.
Discovered a loop relation for split points [777, 3207]
  (in 422 loop case in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem)
Now doing proof search in 777 init case in 422 loop case in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem.
Now doing proof search in 777 loop case in 422 loop case in true case (192 visited) in false case (22 not visited) in false case (195 not visited) in problem.
Now doing proof search in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem.
Decided to case split at (108, 'ASM')
  (in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
Now doing proof search in true case (108 visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem.
Now doing proof search in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem.
Decided to case split at (107, 'ASM')
  (in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
Now doing proof search in true case (107 visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem.
Now doing proof search in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem.
Decided to case split at (38, 'ASM')
  (in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
Now doing proof search in true case (38 visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem.
Discovered a loop relation for split points [673, 2099]
  (in true case (38 visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
Now doing proof search in 673 init case in true case (38 visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem.
Now doing proof search in 673 loop case in true case (38 visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem.
Now doing proof search in false case (38 not visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem.
Discovered that points [2159 (loop head)] can be bounded
  (in false case (38 not visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
Discovered that points [3252 (loop head)] can be bounded
  (in false case (38 not visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
Discovered that points [3202 (loop head)] can be bounded
  (in false case (38 not visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
Discovered that points [2100 (loop head)] can be bounded
  (in false case (38 not visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
Discovered that points [3359 (loop head)] can be bounded
  (in false case (38 not visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
Discovered that points [3307 (loop head)] can be bounded
  (in false case (38 not visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
Discovered that points [1927 (loop head)] can be bounded
  (in false case (38 not visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
Discovered that points [1808 (loop head)] can be bounded
  (in false case (38 not visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
Discovered that points [1306 (loop head)] can be bounded
  (in false case (38 not visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
Discovered that points [1440 (loop head)] can be bounded
  (in false case (38 not visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
Discovered that points [1538 (loop head)] can be bounded
  (in false case (38 not visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
Discovered that points [1497 (loop head)] can be bounded
  (in false case (38 not visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
Discovered that points [2021 (loop head)] can be bounded
  (in false case (38 not visited) in false case (107 not visited) in false case (108 not visited) in false case (192 not visited) in false case (22 not visited) in false case (195 not visited) in problem)
ProofNode ('CaseSplit', (195, 'ASM'), (ProofNode ('Restr', (195, ('Number', (1, 2))), (ProofNode ('Restr', (2584, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (195, ('Number', (0, 1))), (ProofNode ('Restr', (2584, ('Number', (0, 1))), (ProofNode ('CaseSplit', (22, 'ASM'), (ProofNode ('Restr', (22, ('Number', (1, 2))), (ProofNode ('Restr', (2230, ('Number', (1, 2))), (ProofNode ('Split', ((1932, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Num', Type ('Word', 32), val = 1024)])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Num', Type ('Word', 32), val = 1024), Expr ('Var', Type ('Word', 32), name = 'r3')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = 'r5')])])])]), (2158, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'pool___ptr_to_struct_asid_pool_C#v'), Expr ('Var', Type ('Word', 32), name = 'pdCapSlot___ptr_to_struct_cte_C#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#116#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v')]), [], 2, 1), (ProofNode ('Restr', (1932, ('Number', (0, 3))), (ProofNode ('Restr', (2158, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (1932, ('Offset', (0, 3))), (ProofNode ('Restr', (2158, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (22, ('Number', (0, 1))), (ProofNode ('Restr', (2230, ('Number', (0, 1))), (ProofNode ('CaseSplit', (192, 'ASM'), (ProofNode ('Restr', (192, ('Number', (1, 2))), (ProofNode ('Restr', (2579, ('Number', (1, 2))), (ProofNode ('Restr', (1306, ('Number', (0, 2))), (ProofNode ('Split', ((422, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (3265, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'cap___struct_cap_C#v.words_C.1.3'), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v.3'), Expr ('Var', Type ('Word', 32), name = 'cte___ptr_to_struct_cte_C#v.3'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.8'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'ret___struct_create_mappings_pte_return_C#v.pte_C.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#33#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'ret___struct_create_mappings_pte_return_C#v.pte_entries_C.length_C'), Expr ('Var', Type ('Word', 32), name = 'cap___struct_cap_C#v.words_C.0.3'), Expr ('Var', Type ('Word', 32), name = 'ret___struct_create_mappings_pte_return_C#v.pte_entries_C.base_C'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.23'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.23')]), [], 2, 1), (ProofNode ('Restr', (422, ('Number', (0, 3))), (ProofNode ('Restr', (3265, ('Number', (0, 3))), (ProofNode ('Restr', (3202, ('Number', (0, 3))), (ProofNode ('Split', ((476, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (3382, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'cap___struct_cap_C#v.words_C.1.3'), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v.3'), Expr ('Var', Type ('Word', 32), name = 'ret___struct_create_mappings_pde_return_C#v.pde_C.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#35#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.25'), Expr ('Var', Type ('Word', 32), name = 'ret___struct_create_mappings_pde_return_C#v.pde_entries_C.length_C'), Expr ('Var', Type ('Word', 32), name = 'cte___ptr_to_struct_cte_C#v.3'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.10'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.25'), Expr ('Var', Type ('Word', 32), name = 'ret___struct_create_mappings_pde_return_C#v.pde_entries_C.base_C'), Expr ('Var', Type ('Word', 32), name = 'cap___struct_cap_C#v.words_C.0.3')]), [], 2, 1), (ProofNode ('Restr', (476, ('Number', (0, 3))), (ProofNode ('Restr', (3382, ('Number', (0, 3))), (ProofNode ('Restr', (3307, ('Number', (0, 3))), (ProofNode ('Restr', (2021, ('Number', (0, 2))), (ProofNode ('Restr', (1497, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (476, ('Offset', (0, 3))), (ProofNode ('Restr', (3382, ('Offset', (0, 3))), (ProofNode ('Split', ((454, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (3312, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'pde_entries___struct_pde_range_C#v.length_C'), Expr ('Var', Type ('Word', 32), name = 'pde_entries___struct_pde_range_C#v.base_C'), Expr ('Var', Type ('Word', 32), name = 'pde___struct_pde_C#v.words_C.0.3'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.9'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v.7'), Expr ('Var', Type ('Word', 32), name = 'tlbflush_required___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#11#count.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.24')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.24'))], 2, 1), (ProofNode ('Restr', (454, ('Number', (0, 1))), (ProofNode ('Restr', (3312, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (454, ('Offset', (0, 3))), (ProofNode ('Restr', (3312, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)),)), ProofNode ('Restr', (422, ('Offset', (0, 3))), (ProofNode ('Restr', (3265, ('Offset', (0, 3))), (ProofNode ('Split', ((777, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (3207, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'pte___struct_pte_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'pte_entries___struct_pte_range_C#v.length_C'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.22'), Expr ('Var', Type ('Word', 32), name = 'pte_entries___struct_pte_range_C#v.base_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#11#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v.6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.7'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'tlbflush_required___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.22'))], 2, 1), (ProofNode ('Restr', (777, ('Number', (0, 1))), (ProofNode ('Restr', (3207, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (777, ('Offset', (0, 3))), (ProofNode ('Restr', (3207, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)),)), ProofNode ('Restr', (192, ('Number', (0, 1))), (ProofNode ('Restr', (2579, ('Number', (0, 1))), (ProofNode ('CaseSplit', (108, 'ASM'), (ProofNode ('Restr', (108, ('Number', (1, 2))), (ProofNode ('Restr', (2441, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (108, ('Number', (0, 1))), (ProofNode ('Restr', (2441, ('Number', (0, 1))), (ProofNode ('CaseSplit', (107, 'ASM'), (ProofNode ('Restr', (107, ('Number', (1, 2))), (ProofNode ('Restr', (2452, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (107, ('Number', (0, 1))), (ProofNode ('Restr', (2452, ('Number', (0, 1))), (ProofNode ('CaseSplit', (38, 'ASM'), (ProofNode ('Restr', (38, ('Number', (1, 2))), (ProofNode ('Restr', (2146, ('Number', (1, 2))), (ProofNode ('Split', ((673, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r4')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Num', Type ('Word', 32), val = 128)])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r4')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Num', Type ('Word', 32), val = 128), Expr ('Var', Type ('Word', 32), name = 'r4')])])]), (2099, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'untyped___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'depth___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'root___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'untyped___struct_cap_C#v.words_C.1'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#57#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'root___struct_cap_C#v.words_C.1'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'parentSlot___ptr_to_struct_cte_C#v')]), [], 2, 1), (ProofNode ('Restr', (673, ('Number', (0, 3))), (ProofNode ('Restr', (2099, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (673, ('Offset', (0, 3))), (ProofNode ('Restr', (2099, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (38, ('Number', (0, 1))), (ProofNode ('Restr', (2146, ('Number', (0, 1))), (ProofNode ('Restr', (2159, ('Number', (0, 1))), (ProofNode ('Restr', (3252, ('Number', (0, 1))), (ProofNode ('Restr', (3202, ('Number', (0, 1))), (ProofNode ('Restr', (2100, ('Number', (0, 1))), (ProofNode ('Restr', (3359, ('Number', (0, 1))), (ProofNode ('Restr', (3307, ('Number', (0, 1))), (ProofNode ('Restr', (1927, ('Number', (0, 1))), (ProofNode ('Restr', (1808, ('Number', (0, 1))), (ProofNode ('Restr', (1306, ('Number', (0, 1))), (ProofNode ('Restr', (1440, ('Number', (0, 1))), (ProofNode ('Restr', (1538, ('Number', (0, 1))), (ProofNode ('Restr', (1497, ('Number', (0, 1))), (ProofNode ('Restr', (2021, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)),)),)),)),)),)),)),)))),)),)))),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 195 is visited
Step 2: case in (1) where 195 is visited
  Prove the number of visits to 195 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 2584 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 195 is not visited
  Prove the number of visits to 195 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 2584 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 22 is visited
Step 8: case in (7) where 22 is visited
  Prove the number of visits to 22 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 2230 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove visits to 1932 related to visits to 2158
    with equalities
    and with invariants
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 1932)
      ((Word32) ('r5')) (@ addr 1932)
      ((Mem) ('mem')) (@ addr 1932)
      ((Word32) ('ret')) (@ addr 1932)
      ((Word32) ('r13')) (@ addr 1932)
      ((Word32) ('r6')) (@ addr 1932)
      ((Word32) ('r7')) (@ addr 1932)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 1932)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r3')), ((Word32) (1024)))))) (@ addr 1932)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) (1024)), ((Word32) ('r3')))))) (@ addr 1932)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r3')), ((Word32) ((0 - 'r5'))))))) (@ addr 1932)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 2158)
      ((Word32) ('pool___ptr_to_struct_asid_pool_C#v')) (@ addr 2158)
      ((Word32) ('pdCapSlot___ptr_to_struct_cte_C#v')) (@ addr 2158)
      ((Mem) ('Mem')) (@ addr 2158)
      ((Word32[50]) ('GhostAssertions')) (@ addr 2158)
      ((Word32) (('loop#116#count' + ((0 - '#seq-visits') * 1)))) (@ addr 2158)
      ((Word32) ('asid___unsigned_long#v')) (@ addr 2158)
    .. proven.
Step 11: case in (10) where the length of the sequence < 2
  Prove the number of visits to 1932 is in {0 ..< 3}
    .. proven.
Step 12: 
  Prove the number of visits to 2158 is in {0 ..< 3}
    .. proven.
Step 13: 
  prove all verification conditions
    .. proven.
Step 14: case in (10) where the length of the sequence is i + 2
  Prove the number of visits to 1932 is in {i + 0 ..< i + 3}
    .. proven.
Step 15: 
  Prove the number of visits to 2158 is in {i + 0 ..< i + 3}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (7) where 22 is not visited
  Prove the number of visits to 22 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 2230 is in {0 ..< 1}
    .. proven.
Step 19: 
  case split on whether 192 is visited
Step 20: case in (19) where 192 is visited
  Prove the number of visits to 192 is in {1 ..< 2}
    .. proven.
Step 21: 
  Prove the number of visits to 2579 is in {1 ..< 2}
    .. proven.
Step 22: 
  Prove the number of visits to 1306 is in {0 ..< 2}
    .. proven.
Step 23: 
  prove visits to 422 related to visits to 3265
    with equalities
    and with invariants
      ((Word32) ('r4')) (@ addr 422)
      ((Word32) ('r13')) (@ addr 422)
      ((Word32) ('r6')) (@ addr 422)
      ((Word32) ('r8')) (@ addr 422)
      ((Word32) ('r3')) (@ addr 422)
      ((Word32) ('r5')) (@ addr 422)
      ((Word32) ('r7')) (@ addr 422)
      ((Word32) ('ret')) (@ addr 422)
      ((Word32) ('r1')) (@ addr 422)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 4)))) (@ addr 422)
      ((Mem) ('mem')) (@ addr 422)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 422)
      ((Word32) ('cap___struct_cap_C#v.words_C.1.3')) (@ addr 3265)
      ((Word32) ('asid___unsigned_long#v.3')) (@ addr 3265)
      ((Word32) ('cte___ptr_to_struct_cte_C#v.3')) (@ addr 3265)
      ((Word32) (('i___unsigned_long#v.8' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 3265)
      ((Word32) ('ret___struct_create_mappings_pte_return_C#v.pte_C.words_C.0')) (@ addr 3265)
      ((Word32) (('loop#33#count' + ((0 - '#seq-visits') * 1)))) (@ addr 3265)
      ((Word32) ('ret___struct_create_mappings_pte_return_C#v.pte_entries_C.length_C')) (@ addr 3265)
      ((Word32) ('cap___struct_cap_C#v.words_C.0.3')) (@ addr 3265)
      ((Word32) ('ret___struct_create_mappings_pte_return_C#v.pte_entries_C.base_C')) (@ addr 3265)
      ((Word32[50]) ('GhostAssertions.23')) (@ addr 3265)
      ((Mem) ('Mem.23')) (@ addr 3265)
    .. proven.
Step 24: case in (23) where the length of the sequence < 2
  Prove the number of visits to 422 is in {0 ..< 3}
    .. proven.
Step 25: 
  Prove the number of visits to 3265 is in {0 ..< 3}
    .. proven.
Step 26: 
  Prove the number of visits to 3202 is in {0 ..< 3}
    .. proven.
Step 27: 
  prove visits to 476 related to visits to 3382
    with equalities
    and with invariants
      ((Word32) ('r4')) (@ addr 476)
      ((Word32) ('r13')) (@ addr 476)
      ((Word32) ('r9')) (@ addr 476)
      ((Word32) ('r6')) (@ addr 476)
      ((Word32) ('r7')) (@ addr 476)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 476)
      ((Word32) ('r5')) (@ addr 476)
      ((Word32) ('ret')) (@ addr 476)
      ((Word32) ('r1')) (@ addr 476)
      ((Mem) ('mem')) (@ addr 476)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 476)
      ((Word32) ('cap___struct_cap_C#v.words_C.1.3')) (@ addr 3382)
      ((Word32) ('asid___unsigned_long#v.3')) (@ addr 3382)
      ((Word32) ('ret___struct_create_mappings_pde_return_C#v.pde_C.words_C.0')) (@ addr 3382)
      ((Word32) (('loop#35#count' + ((0 - '#seq-visits') * 1)))) (@ addr 3382)
      ((Mem) ('Mem.25')) (@ addr 3382)
      ((Word32) ('ret___struct_create_mappings_pde_return_C#v.pde_entries_C.length_C')) (@ addr 3382)
      ((Word32) ('cte___ptr_to_struct_cte_C#v.3')) (@ addr 3382)
      ((Word32) (('i___unsigned_long#v.10' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 3382)
      ((Word32[50]) ('GhostAssertions.25')) (@ addr 3382)
      ((Word32) ('ret___struct_create_mappings_pde_return_C#v.pde_entries_C.base_C')) (@ addr 3382)
      ((Word32) ('cap___struct_cap_C#v.words_C.0.3')) (@ addr 3382)
    .. proven.
Step 28: case in (27) where the length of the sequence < 2
  Prove the number of visits to 476 is in {0 ..< 3}
    .. proven.
Step 29: 
  Prove the number of visits to 3382 is in {0 ..< 3}
    .. proven.
Step 30: 
  Prove the number of visits to 3307 is in {0 ..< 3}
    .. proven.
Step 31: 
  Prove the number of visits to 2021 is in {0 ..< 2}
    .. proven.
Step 32: 
  Prove the number of visits to 1497 is in {0 ..< 2}
    .. proven.
Step 33: 
  prove all verification conditions
    .. proven.
Step 34: case in (27) where the length of the sequence is k + 2
  Prove the number of visits to 476 is in {k + 0 ..< k + 3}
    .. proven.
Step 35: 
  Prove the number of visits to 3382 is in {k + 0 ..< k + 3}
    .. proven.
Step 36: 
  prove visits to 454 related to visits to 3312
    with equalities
      ((Mem) ('mem')) (@ addr 454)
      = ((Mem) ('Mem.24')) (@ addr 3312)
    and with invariants
      ((Word32) ('r4')) (@ addr 454)
      ((Word32) ('r0')) (@ addr 454)
      ((Word32) ('r13')) (@ addr 454)
      ((Word32) ('r12')) (@ addr 454)
      ((Word32) ('r6')) (@ addr 454)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 454)
      ((Word32) ('ret')) (@ addr 454)
      ((Word32) ('r1')) (@ addr 454)
      ((Word32) ('r2')) (@ addr 454)
      ((Bool) (ROData('mem'))) (@ addr 454)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 454)
      ((Word32) ('pde_entries___struct_pde_range_C#v.length_C')) (@ addr 3312)
      ((Word32) ('pde_entries___struct_pde_range_C#v.base_C')) (@ addr 3312)
      ((Word32) ('pde___struct_pde_C#v.words_C.0.3')) (@ addr 3312)
      ((Word32) (('i___unsigned_long#v.9' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 3312)
      ((Word32) ('asid___unsigned_long#v.7')) (@ addr 3312)
      ((Word32) ('tlbflush_required___unsigned_long#v.1')) (@ addr 3312)
      ((Word32) (('loop#11#count.1' + ((0 - '#seq-visits') * 1)))) (@ addr 3312)
      ((Word32[50]) ('GhostAssertions.24')) (@ addr 3312)
    .. proven.
Step 37: case in (36) where the length of the sequence < 2
  Prove the number of visits to 454 is in {0 ..< 1}
    .. proven.
Step 38: 
  Prove the number of visits to 3312 is in {0 ..< 1}
    .. proven.
Step 39: 
  prove all verification conditions
    .. proven.
Step 40: case in (36) where the length of the sequence is a + 2
  Prove the number of visits to 454 is in {a + 0 ..< a + 3}
    .. proven.
Step 41: 
  Prove the number of visits to 3312 is in {a + 0 ..< a + 3}
    .. proven.
Step 42: 
  prove all verification conditions
    .. proven.
Step 43: case in (23) where the length of the sequence is j + 2
  Prove the number of visits to 422 is in {j + 0 ..< j + 3}
    .. proven.
Step 44: 
  Prove the number of visits to 3265 is in {j + 0 ..< j + 3}
    .. proven.
Step 45: 
  prove visits to 777 related to visits to 3207
    with equalities
      ((Mem) ('mem')) (@ addr 777)
      = ((Mem) ('Mem.22')) (@ addr 3207)
    and with invariants
      ((Word32) ('r4')) (@ addr 777)
      ((Word32) ('r0')) (@ addr 777)
      ((Word32) ('r13')) (@ addr 777)
      ((Word32) ('r12')) (@ addr 777)
      ((Word32) ('r6')) (@ addr 777)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 777)
      ((Word32) ('ret')) (@ addr 777)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 777)
      ((Word32) ('r2')) (@ addr 777)
      ((Bool) (ROData('mem'))) (@ addr 777)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 777)
      ((Word32) ('pte___struct_pte_C#v.words_C.0')) (@ addr 3207)
      ((Word32) ('pte_entries___struct_pte_range_C#v.length_C')) (@ addr 3207)
      ((Word32[50]) ('GhostAssertions.22')) (@ addr 3207)
      ((Word32) ('pte_entries___struct_pte_range_C#v.base_C')) (@ addr 3207)
      ((Word32) (('loop#11#count' + ((0 - '#seq-visits') * 1)))) (@ addr 3207)
      ((Word32) ('asid___unsigned_long#v.6')) (@ addr 3207)
      ((Word32) (('i___unsigned_long#v.7' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 3207)
      ((Word32) ('tlbflush_required___unsigned_long#v')) (@ addr 3207)
    .. proven.
Step 46: case in (45) where the length of the sequence < 2
  Prove the number of visits to 777 is in {0 ..< 1}
    .. proven.
Step 47: 
  Prove the number of visits to 3207 is in {0 ..< 1}
    .. proven.
Step 48: 
  prove all verification conditions
    .. proven.
Step 49: case in (45) where the length of the sequence is b + 2
  Prove the number of visits to 777 is in {b + 0 ..< b + 3}
    .. proven.
Step 50: 
  Prove the number of visits to 3207 is in {b + 0 ..< b + 3}
    .. proven.
Step 51: 
  prove all verification conditions
    .. proven.
Step 52: case in (19) where 192 is not visited
  Prove the number of visits to 192 is in {0 ..< 1}
    .. proven.
Step 53: 
  Prove the number of visits to 2579 is in {0 ..< 1}
    .. proven.
Step 54: 
  case split on whether 108 is visited
Step 55: case in (54) where 108 is visited
  Prove the number of visits to 108 is in {1 ..< 2}
    .. proven.
Step 56: 
  Prove the number of visits to 2441 is in {1 ..< 2}
    .. proven.
Step 57: 
  prove all verification conditions
    .. proven.
Step 58: case in (54) where 108 is not visited
  Prove the number of visits to 108 is in {0 ..< 1}
    .. proven.
Step 59: 
  Prove the number of visits to 2441 is in {0 ..< 1}
    .. proven.
Step 60: 
  case split on whether 107 is visited
Step 61: case in (60) where 107 is visited
  Prove the number of visits to 107 is in {1 ..< 2}
    .. proven.
Step 62: 
  Prove the number of visits to 2452 is in {1 ..< 2}
    .. proven.
Step 63: 
  prove all verification conditions
    .. proven.
Step 64: case in (60) where 107 is not visited
  Prove the number of visits to 107 is in {0 ..< 1}
    .. proven.
Step 65: 
  Prove the number of visits to 2452 is in {0 ..< 1}
    .. proven.
Step 66: 
  case split on whether 38 is visited
Step 67: case in (66) where 38 is visited
  Prove the number of visits to 38 is in {1 ..< 2}
    .. proven.
Step 68: 
  Prove the number of visits to 2146 is in {1 ..< 2}
    .. proven.
Step 69: 
  prove visits to 673 related to visits [2, 3, 4 ...] to 2099
    with equalities
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 673)
      ((Word32) ('r13')) (@ addr 673)
      ((Word32) ('r9')) (@ addr 673)
      ((Word32) ('r7')) (@ addr 673)
      ((Word32) ('r8')) (@ addr 673)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 673)
      ((Word32) ('r14')) (@ addr 673)
      ((Word32) ('r5')) (@ addr 673)
      ((Word32) ('ret')) (@ addr 673)
      ((Mem) ('mem')) (@ addr 673)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 673)
      ((Bool) (Equals(LessEquals(((Word32) (('r4' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r4'))), Less(((Word32) ('r4')), ((Word32) (128)))))) (@ addr 673)
      ((Bool) (Equals(LessEquals(((Word32) (('r4' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r4'))), Less(((Word32) (128)), ((Word32) ('r4')))))) (@ addr 673)
      ((Word32) ('index___unsigned_long#v')) (@ addr 2099)
      ((Word32) ('untyped___struct_cap_C#v.words_C.0')) (@ addr 2099)
      ((Word32) ('depth___unsigned_long#v')) (@ addr 2099)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 2099)
      ((Word32) ('root___struct_cap_C#v.words_C.0')) (@ addr 2099)
      ((Word32) ('untyped___struct_cap_C#v.words_C.1')) (@ addr 2099)
      ((Mem) ('Mem')) (@ addr 2099)
      ((Word32) (('loop#57#count' + ((0 - '#seq-visits') * 1)))) (@ addr 2099)
      ((Word32) ('root___struct_cap_C#v.words_C.1')) (@ addr 2099)
      ((Word32[50]) ('GhostAssertions')) (@ addr 2099)
      ((Word32) ('parentSlot___ptr_to_struct_cte_C#v')) (@ addr 2099)
    .. proven.
Step 70: case in (69) where the length of the sequence < 2
  Prove the number of visits to 673 is in {0 ..< 3}
    .. proven.
Step 71: 
  Prove the number of visits to 2099 is in {0 ..< 4}
    .. proven.
Step 72: 
  prove all verification conditions
    .. proven.
Step 73: case in (69) where the length of the sequence is c + 2
  Prove the number of visits to 673 is in {c + 0 ..< c + 3}
    .. proven.
Step 74: 
  Prove the number of visits to 2099 is in {c + 0 ..< c + 3}
    .. proven.
Step 75: 
  prove all verification conditions
    .. proven.
Step 76: case in (66) where 38 is not visited
  Prove the number of visits to 38 is in {0 ..< 1}
    .. proven.
Step 77: 
  Prove the number of visits to 2146 is in {0 ..< 1}
    .. proven.
Step 78: 
  Prove the number of visits to 2159 is in {0 ..< 1}
    .. proven.
Step 79: 
  Prove the number of visits to 3252 is in {0 ..< 1}
    .. proven.
Step 80: 
  Prove the number of visits to 3202 is in {0 ..< 1}
    .. proven.
Step 81: 
  Prove the number of visits to 2100 is in {0 ..< 1}
    .. proven.
Step 82: 
  Prove the number of visits to 3359 is in {0 ..< 1}
    .. proven.
Step 83: 
  Prove the number of visits to 3307 is in {0 ..< 1}
    .. proven.
Step 84: 
  Prove the number of visits to 1927 is in {0 ..< 1}
    .. proven.
Step 85: 
  Prove the number of visits to 1808 is in {0 ..< 1}
    .. proven.
Step 86: 
  Prove the number of visits to 1306 is in {0 ..< 1}
    .. proven.
Step 87: 
  Prove the number of visits to 1440 is in {0 ..< 1}
    .. proven.
Step 88: 
  Prove the number of visits to 1538 is in {0 ..< 1}
    .. proven.
Step 89: 
  Prove the number of visits to 1497 is in {0 ..< 1}
    .. proven.
Step 90: 
  Prove the number of visits to 2021 is in {0 ..< 1}
    .. proven.
Step 91: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C)), time taken: 2920.66s
Testing Function pair Pairing (Arch_prepareThreadDelete (ASM) <= Kernel_C.Arch_prepareThreadDelete (C))
  (function pairing 136 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_prepareThreadDelete (ASM) <= Kernel_C.Arch_prepareThreadDelete (C)), time taken: 0.32s
Testing Function pair Pairing (lockTLBEntry (ASM) <= Kernel_C.lockTLBEntry (C))
  (function pairing 137 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lockTLBEntry (ASM) <= Kernel_C.lockTLBEntry (C)), time taken: 0.38s
Testing Function pair Pairing (replyFromKernel_success_empty (ASM) <= Kernel_C.replyFromKernel_success_empty (C))
  (function pairing 138 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (replyFromKernel_success_empty (ASM) <= Kernel_C.replyFromKernel_success_empty (C)), time taken: 0.34s
Testing Function pair Pairing (branchFlushRange (ASM) <= Kernel_C.branchFlushRange (C))
  (function pairing 139 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [4, 29]
  (in problem)
Now doing proof search in 4 init case in problem.
Now doing proof search in 4 loop case in problem.
ProofNode ('Split', ((4, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r1')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (29, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (4, ('Number', (0, 3))), (ProofNode ('Restr', (29, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (4, ('Offset', (0, 3))), (ProofNode ('Restr', (29, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 4 related to visits to 29
    with equalities
      ((Mem) ('mem')) (@ addr 4)
      = ((Mem) ('Mem')) (@ addr 29)
    and with invariants
      ((Word32) ('r21')) (@ addr 4)
      ((Word32) ('r4')) (@ addr 4)
      ((Word32) ('r27')) (@ addr 4)
      ((Word32) ('r17')) (@ addr 4)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('r23')) (@ addr 4)
      ((Word32) ('r13')) (@ addr 4)
      ((Word32) ('r10')) (@ addr 4)
      ((Word32) ('r28')) (@ addr 4)
      ((Word32) ('r19')) (@ addr 4)
      ((Word32) ('r16')) (@ addr 4)
      ((Word64) ('clock')) (@ addr 4)
      ((Word32) ('r12')) (@ addr 4)
      ((Word32) ('r9')) (@ addr 4)
      ((Word32) ('r6')) (@ addr 4)
      ((Word32) ('r7')) (@ addr 4)
      ((Word32) ('r31')) (@ addr 4)
      ((Word32) ('r25')) (@ addr 4)
      ((Word32) ('r24')) (@ addr 4)
      ((Word32) ('r8')) (@ addr 4)
      ((Word32) ('r29')) (@ addr 4)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 4)
      ((Word32) ('r18')) (@ addr 4)
      ((Word32) ('r20')) (@ addr 4)
      ((Word32) ('r30')) (@ addr 4)
      ((Word32) ('r14')) (@ addr 4)
      ((Word32) ('r15')) (@ addr 4)
      ((Word32) ('mode')) (@ addr 4)
      ((Word32) ('r11')) (@ addr 4)
      ((Word32) ('r5')) (@ addr 4)
      ((Word32) ('ret')) (@ addr 4)
      ((Word32) ('r26')) (@ addr 4)
      ((Word32) ('r1')) (@ addr 4)
      ((Word32) ('r2')) (@ addr 4)
      ((Bool) (ROData('mem'))) (@ addr 4)
      ((Word32) ('r22')) (@ addr 4)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r1')), ((Word32) ('r0')))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r1')))))) (@ addr 4)
      ((Bool) ('c')) (@ addr 4)
      ((Bool) ('n')) (@ addr 4)
      ((Bool) ('v')) (@ addr 4)
      ((Bool) ('z')) (@ addr 4)
      ((Word32) ('end___unsigned_long#v')) (@ addr 29)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 29)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 29)
      ((Word32) ('start___unsigned_long#v')) (@ addr 29)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 29)
      ((Word32[50]) ('GhostAssertions')) (@ addr 29)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 4 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 29 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 4 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 29 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (branchFlushRange (ASM) <= Kernel_C.branchFlushRange (C)), time taken: 43.16s
Testing Function pair Pairing (cteMove (ASM) <= Kernel_C.cteMove (C))
  (function pairing 140 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteMove (ASM) <= Kernel_C.cteMove (C)), time taken: 1.08s
Testing Function pair Pairing (create_untypeds (ASM) <= Kernel_C.create_untypeds (C))
  (function pairing 141 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [7, 193]
  (in problem)
Now doing proof search in 7 init case in problem.
Discovered a loop relation for split points [120, 168]
  (in 7 init case in problem)
Now doing proof search in 120 init case in 7 init case in problem.
Now doing proof search in 120 loop case in 7 init case in problem.
Now doing proof search in 7 loop case in problem.
Discovered a loop relation for split points [120, 168]
  (in 7 loop case in problem)
Now doing proof search in 120 init case in 7 loop case in problem.
Now doing proof search in 120 loop case in 7 loop case in problem.
ProofNode ('Split', ((7, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 8)])]), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 4)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (193, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'first_untyped_slot___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#41#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (7, ('Number', (0, 3))), (ProofNode ('Restr', (193, ('Number', (0, 3))), (ProofNode ('Split', ((120, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 8)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 4)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (168, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'first_untyped_slot___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#8#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (120, ('Number', (0, 3))), (ProofNode ('Restr', (168, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (120, ('Offset', (0, 3))), (ProofNode ('Restr', (168, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (7, ('Offset', (0, 3))), (ProofNode ('Restr', (193, ('Offset', (0, 3))), (ProofNode ('Split', ((120, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 8)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 4)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (168, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'first_untyped_slot___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#8#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (120, ('Number', (0, 3))), (ProofNode ('Restr', (168, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (120, ('Offset', (0, 3))), (ProofNode ('Restr', (168, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 7 related to visits to 193
    with equalities
      ((Mem) ('mem')) (@ addr 7)
      = ((Mem) ('Mem')) (@ addr 193)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 7)
      ((Word32) ('r13')) (@ addr 7)
      ((Word32) ('r10')) (@ addr 7)
      ((Word32) ('r9')) (@ addr 7)
      ((Word32) ('r6')) (@ addr 7)
      ((Word32) ('r7')) (@ addr 7)
      ((Word32) ('r8')) (@ addr 7)
      ((Word32) ('r11')) (@ addr 7)
      ((Word32) (('r5' + ((0 - '#seq-visits') * 8)))) (@ addr 7)
      ((Word32) ('ret')) (@ addr 7)
      ((Bool) (ROData('mem'))) (@ addr 7)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 4))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 7)
      ((Word32) ('first_untyped_slot___unsigned_long#v')) (@ addr 193)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 193)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 193)
      ((Word32) (('loop#41#count' + ((0 - '#seq-visits') * 1)))) (@ addr 193)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 193)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 7 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 193 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove visits to 120 related to visits to 168
    with equalities
      ((Mem) ('mem')) (@ addr 120)
      = ((Mem) ('Mem')) (@ addr 168)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 8)))) (@ addr 120)
      ((Word32) ('r13')) (@ addr 120)
      ((Word32) ('r10')) (@ addr 120)
      ((Word32) ('r9')) (@ addr 120)
      ((Word32) ('r6')) (@ addr 120)
      ((Word32) ('r7')) (@ addr 120)
      ((Word32) ('r8')) (@ addr 120)
      ((Word32) ('r11')) (@ addr 120)
      ((Word32) ('r5')) (@ addr 120)
      ((Word32) ('ret')) (@ addr 120)
      ((Bool) (ROData('mem'))) (@ addr 120)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 4))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 120)
      ((Word32) ('first_untyped_slot___unsigned_long#v')) (@ addr 168)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 168)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 168)
      ((Word32) (('loop#8#count' + ((0 - '#seq-visits') * 1)))) (@ addr 168)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 168)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 120 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 168 is in {0 ..< 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 120 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 168 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 7 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 193 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 120 related to visits to 168
    with equalities
      ((Mem) ('mem')) (@ addr 120)
      = ((Mem) ('Mem')) (@ addr 168)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 8)))) (@ addr 120)
      ((Word32) ('r13')) (@ addr 120)
      ((Word32) ('r10')) (@ addr 120)
      ((Word32) ('r9')) (@ addr 120)
      ((Word32) ('r6')) (@ addr 120)
      ((Word32) ('r7')) (@ addr 120)
      ((Word32) ('r8')) (@ addr 120)
      ((Word32) ('r11')) (@ addr 120)
      ((Word32) ('r5')) (@ addr 120)
      ((Word32) ('ret')) (@ addr 120)
      ((Bool) (ROData('mem'))) (@ addr 120)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 4))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 120)
      ((Word32) ('first_untyped_slot___unsigned_long#v')) (@ addr 168)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 168)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 168)
      ((Word32) (('loop#8#count' + ((0 - '#seq-visits') * 1)))) (@ addr 168)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 168)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 120 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 168 is in {0 ..< 3}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 120 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 168 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_untypeds (ASM) <= Kernel_C.create_untypeds (C)), time taken: 3217.04s
Testing Function pair Pairing (Arch_deriveCap (ASM) <= Kernel_C.Arch_deriveCap (C))
  (function pairing 142 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_deriveCap (ASM) <= Kernel_C.Arch_deriveCap (C)), time taken: 0.63s
Testing Function pair Pairing (rescheduleRequired (ASM) <= Kernel_C.rescheduleRequired (C))
  (function pairing 143 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (rescheduleRequired (ASM) <= Kernel_C.rescheduleRequired (C)), time taken: 0.40s
Testing Function pair Pairing (setupCallerCap (ASM) <= Kernel_C.setupCallerCap (C))
  (function pairing 144 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setupCallerCap (ASM) <= Kernel_C.setupCallerCap (C)), time taken: 0.53s
Testing Function pair Pairing (isIRQActive (ASM) <= Kernel_C.isIRQActive (C))
  (function pairing 145 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isIRQActive (ASM) <= Kernel_C.isIRQActive (C)), time taken: 0.32s
Testing Function pair Pairing (decodeSetPriority (ASM) <= Kernel_C.decodeSetPriority (C))
  (function pairing 146 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeSetPriority (ASM) <= Kernel_C.decodeSetPriority (C)), time taken: 8.01s
Testing Function pair Pairing (deleteASID (ASM) <= Kernel_C.deleteASID (C))
  (function pairing 147 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deleteASID (ASM) <= Kernel_C.deleteASID (C)), time taken: 0.92s
Testing Function pair Pairing (handleVMFault (ASM) <= Kernel_C.handleVMFault (C))
  (function pairing 148 of 284)
 .. built problem, finding proof
Decided to case split at (3, 'ASM')
  (in problem)
Now doing proof search in true case (3 visited) in problem.
Now doing proof search in false case (3 not visited) in problem.
ProofNode ('CaseSplit', (3, 'ASM'), (ProofNode ('Restr', (3, ('Number', (1, 2))), (ProofNode ('Restr', (60, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Restr', (60, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 3 is visited
Step 2: case in (1) where 3 is visited
  Prove the number of visits to 3 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 60 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 3 is not visited
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 60 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleVMFault (ASM) <= Kernel_C.handleVMFault (C)), time taken: 9.70s
Testing Function pair Pairing (Arch_decodeInvocation (ASM) <= Kernel_C.Arch_decodeInvocation (C))
  (function pairing 149 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_decodeInvocation (ASM) <= Kernel_C.Arch_decodeInvocation (C)), time taken: 0.97s
Testing Function pair Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C))
  (function pairing 150 of 284)
 .. built problem, finding proof
Decided to case split at (3, 'ASM')
  (in problem)
Now doing proof search in true case (3 visited) in problem.
Now doing proof search in false case (3 not visited) in problem.
ProofNode ('CaseSplit', (3, 'ASM'), (ProofNode ('Restr', (3, ('Number', (1, 2))), (ProofNode ('Restr', (165, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Restr', (165, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 3 is visited
Step 2: case in (1) where 3 is visited
  Prove the number of visits to 3 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 165 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 3 is not visited
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 165 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C)), time taken: 15.68s
Testing Function pair Pairing (pageTableMapped (ASM) <= Kernel_C.pageTableMapped (C))
  (function pairing 151 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (pageTableMapped (ASM) <= Kernel_C.pageTableMapped (C)), time taken: 0.48s
Testing Function pair Pairing (emptySlot (ASM) <= Kernel_C.emptySlot (C))
  (function pairing 152 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (emptySlot (ASM) <= Kernel_C.emptySlot (C)), time taken: 1.71s
Testing Function pair Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C))
  (function pairing 153 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [14, 121]
  (in problem)
Now doing proof search in 14 init case in problem.
Now doing proof search in 14 loop case in problem.
ProofNode ('Split', ((14, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4096)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'ret_addr_input'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 32)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 4)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 36)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (121, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'do_map___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'f___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 12)])])])]), Expr ('Var', Type ('Word', 32), name = 'slot_pos_before___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'pv_offset___long#v')]), [(Expr ('Op', Type ('Word', 32), name = 'MemAcc', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'frame_cap___struct_cap_C#v.words_C.0')), (Expr ('Op', Type ('Word', 32), name = 'MemAcc', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 36)])]), Expr ('Var', Type ('Word', 32), name = 'frame_cap___struct_cap_C#v.words_C.1')), (Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (14, ('Number', (0, 3))), (ProofNode ('Restr', (121, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (14, ('Offset', (0, 3))), (ProofNode ('Restr', (121, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 14 related to visits to 121
    with equalities
      ((Word32) (MemAcc('stack', ('r13' + 32)))) (@ addr 14)
      = ((Word32) ('frame_cap___struct_cap_C#v.words_C.0')) (@ addr 121)
      ((Word32) (MemAcc('stack', ('r13' + 36)))) (@ addr 14)
      = ((Word32) ('frame_cap___struct_cap_C#v.words_C.1')) (@ addr 121)
      ((Mem) ('mem')) (@ addr 14)
      = ((Mem) ('Mem')) (@ addr 121)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 4096)))) (@ addr 14)
      ((Word32) ('r13')) (@ addr 14)
      ((Word32) ('r10')) (@ addr 14)
      ((Word32) ('r9')) (@ addr 14)
      ((Word32) ('r6')) (@ addr 14)
      ((Word32) ('r7')) (@ addr 14)
      ((Word32) ('r8')) (@ addr 14)
      ((Word32) ('ret_addr_input')) (@ addr 14)
      ((Bool) (ROData('mem'))) (@ addr 14)
      ((Word32) ('r5')) (@ addr 14)
      ((Word32) ('ret')) (@ addr 14)
      ((Word32) ('r11')) (@ addr 14)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 32))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0))), ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 4))), ((Word32) (0))), ((Word32) (('r13' + 36))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 14)
      ((Word32) ('do_map___unsigned_long#v')) (@ addr 121)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 121)
      ((Word32) (('f___unsigned_long#v' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast(12)))))) (@ addr 121)
      ((Word32) ('slot_pos_before___unsigned_long#v')) (@ addr 121)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.1')) (@ addr 121)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 121)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.0')) (@ addr 121)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 121)
      ((Word32) ('reg___struct_region_C#v.end_C')) (@ addr 121)
      ((Word32) ('pv_offset___long#v')) (@ addr 121)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 14 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 121 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 14 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 121 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C)), time taken: 562.93s
Testing Function pair Pairing (Arch_switchToIdleThread (ASM) <= Kernel_C.Arch_switchToIdleThread (C))
  (function pairing 154 of 284)
 .. built problem, finding proof
Discovered that points [16 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_switchToIdleThread (ASM) <= Kernel_C.Arch_switchToIdleThread (C)), time taken: 0.81s
Testing Function pair Pairing (invokeIRQHandler_SetIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_SetIRQHandler (C))
  (function pairing 155 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeIRQHandler_SetIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_SetIRQHandler (C)), time taken: 0.80s
Testing Function pair Pairing (cleanCacheRange_RAM (ASM) <= Kernel_C.cleanCacheRange_RAM (C))
  (function pairing 156 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [4, 106]
  (in problem)
Now doing proof search in 4 init case in problem.
Discovered that points [80 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [116 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [44 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [55 (loop head)] can be bounded
  (in 4 init case in problem)
Now doing proof search in 4 loop case in problem.
Discovered a loop relation for split points [11, 86]
  (in 4 loop case in problem)
Now doing proof search in 11 init case in 4 loop case in problem.
Discovered that points [116 (loop head)] can be bounded
  (in 11 init case in 4 loop case in problem)
Discovered that points [55 (loop head)] can be bounded
  (in 11 init case in 4 loop case in problem)
Now doing proof search in 11 loop case in 4 loop case in problem.
Discovered that points [116 (loop head)] can be bounded
  (in 11 loop case in 4 loop case in problem)
Discovered that points [55 (loop head)] can be bounded
  (in 11 loop case in 4 loop case in problem)
ProofNode ('Split', ((4, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r14')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (106, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.3'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.2'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.2'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.3'))], 2, 1), (ProofNode ('Restr', (4, ('Number', (0, 3))), (ProofNode ('Restr', (106, ('Number', (0, 3))), (ProofNode ('Restr', (80, ('Number', (0, 5))), (ProofNode ('Restr', (116, ('Number', (0, 2))), (ProofNode ('Restr', (44, ('Number', (0, 4))), (ProofNode ('Restr', (55, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (4, ('Offset', (0, 3))), (ProofNode ('Restr', (106, ('Offset', (0, 3))), (ProofNode ('Split', ((11, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (86, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 5)])])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (11, ('Number', (0, 3))), (ProofNode ('Restr', (86, ('Number', (0, 3))), (ProofNode ('Restr', (116, ('Number', (0, 2))), (ProofNode ('Restr', (55, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Restr', (86, ('Offset', (0, 3))), (ProofNode ('Restr', (116, ('Number', (0, 2))), (ProofNode ('Restr', (55, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 4 related to visits to 106
    with equalities
      ((Mem) ('mem')) (@ addr 4)
      = ((Mem) ('Mem.3')) (@ addr 106)
    and with invariants
      ((Word32) ('r21')) (@ addr 4)
      ((Word32) ('r4')) (@ addr 4)
      ((Word32) ('r27')) (@ addr 4)
      ((Word32) ('r17')) (@ addr 4)
      ((Word32) ('r0')) (@ addr 4)
      ((Word32) ('r11')) (@ addr 4)
      ((Word32) ('r23')) (@ addr 4)
      ((Word32) ('r13')) (@ addr 4)
      ((Word32) ('r10')) (@ addr 4)
      ((Word32) ('r28')) (@ addr 4)
      ((Word32) ('r19')) (@ addr 4)
      ((Word32) ('r16')) (@ addr 4)
      ((Word64) ('clock')) (@ addr 4)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 32)))) (@ addr 4)
      ((Word32) ('r9')) (@ addr 4)
      ((Word32) ('r6')) (@ addr 4)
      ((Word32) ('r7')) (@ addr 4)
      ((Word32) ('r31')) (@ addr 4)
      ((Word32) ('r25')) (@ addr 4)
      ((Word32) ('r24')) (@ addr 4)
      ((Word32) ('r8')) (@ addr 4)
      ((Word32) ('r29')) (@ addr 4)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('r18')) (@ addr 4)
      ((Word32) ('r20')) (@ addr 4)
      ((Word32) ('r30')) (@ addr 4)
      ((Word32) ('r14')) (@ addr 4)
      ((Word32) ('r15')) (@ addr 4)
      ((Word32) ('mode')) (@ addr 4)
      ((Word32) ('r5')) (@ addr 4)
      ((Word32) ('ret')) (@ addr 4)
      ((Word32) ('r26')) (@ addr 4)
      ((Word32) ('r1')) (@ addr 4)
      ((Word32) ('r2')) (@ addr 4)
      ((Bool) (ROData('mem'))) (@ addr 4)
      ((Word32) ('r22')) (@ addr 4)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r14')), ((Word32) ('r3')))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r3')), ((Word32) ('r14')))))) (@ addr 4)
      ((Bool) ('c')) (@ addr 4)
      ((Bool) ('n')) (@ addr 4)
      ((Bool) ('v')) (@ addr 4)
      ((Bool) ('z')) (@ addr 4)
      ((Word32) ('end___unsigned_long#v')) (@ addr 106)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 106)
      ((Word32[50]) ('GhostAssertions.3')) (@ addr 106)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 106)
      ((Word32) ('end___unsigned_long#v.2')) (@ addr 106)
      ((Word32) ('start___unsigned_long#v.2')) (@ addr 106)
      ((Word32) ('start___unsigned_long#v')) (@ addr 106)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 106)
      ((Word32) ('pstart___unsigned_long#v.1')) (@ addr 106)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 4 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 106 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 80 is in {0 ..< 5}
    .. proven.
Step 5: 
  Prove the number of visits to 116 is in {0 ..< 2}
    .. proven.
Step 6: 
  Prove the number of visits to 44 is in {0 ..< 4}
    .. proven.
Step 7: 
  Prove the number of visits to 55 is in {0 ..< 2}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Step 9: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 4 is in {i + 0 ..< i + 3}
    .. proven.
Step 10: 
  Prove the number of visits to 106 is in {i + 0 ..< i + 3}
    .. proven.
Step 11: 
  prove visits to 11 related to visits to 86
    with equalities
      ((Mem) ('mem')) (@ addr 11)
      = ((Mem) ('Mem.1')) (@ addr 86)
    and with invariants
      ((Word32) ('r21')) (@ addr 11)
      ((Word32) ('r4')) (@ addr 11)
      ((Word32) ('r27')) (@ addr 11)
      ((Word32) ('r17')) (@ addr 11)
      ((Word32) ('r0')) (@ addr 11)
      ((Word32) ('r23')) (@ addr 11)
      ((Word32) ('r13')) (@ addr 11)
      ((Word32) ('r10')) (@ addr 11)
      ((Word32) ('r28')) (@ addr 11)
      ((Word32) ('r19')) (@ addr 11)
      ((Word32) ('r16')) (@ addr 11)
      ((Word64) ('clock')) (@ addr 11)
      ((Word32) ('r12')) (@ addr 11)
      ((Word32) ('r9')) (@ addr 11)
      ((Word32) ('r6')) (@ addr 11)
      ((Word32) ('r7')) (@ addr 11)
      ((Word32) ('r31')) (@ addr 11)
      ((Word32) ('r25')) (@ addr 11)
      ((Word32) ('r24')) (@ addr 11)
      ((Word32) ('r8')) (@ addr 11)
      ((Word32) ('r29')) (@ addr 11)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 11)
      ((Word32) ('r1')) (@ addr 11)
      ((Word32) ('r18')) (@ addr 11)
      ((Word32) ('r20')) (@ addr 11)
      ((Word32) ('r30')) (@ addr 11)
      ((Word32) ('r14')) (@ addr 11)
      ((Word32) ('r15')) (@ addr 11)
      ((Word32) ('mode')) (@ addr 11)
      ((Word32) ('r5')) (@ addr 11)
      ((Word32) ('ret')) (@ addr 11)
      ((Word32) ('r26')) (@ addr 11)
      ((Word32) ('r11')) (@ addr 11)
      ((Word32) ('r2')) (@ addr 11)
      ((Bool) (ROData('mem'))) (@ addr 11)
      ((Word32) ('r22')) (@ addr 11)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 11)
      ((Word32) ('end___unsigned_long#v.1')) (@ addr 86)
      ((Word32) (('start___unsigned_long#v.1' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast(5)))))) (@ addr 86)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 86)
      ((Word32[50]) ('GhostAssertions.1')) (@ addr 86)
    .. proven.
Step 12: case in (11) where the length of the sequence < 2
  Prove the number of visits to 11 is in {0 ..< 3}
    .. proven.
Step 13: 
  Prove the number of visits to 86 is in {0 ..< 3}
    .. proven.
Step 14: 
  Prove the number of visits to 116 is in {0 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 55 is in {0 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (11) where the length of the sequence is j + 2
  Prove the number of visits to 11 is in {j + 0 ..< j + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 86 is in {j + 0 ..< j + 3}
    .. proven.
Step 19: 
  Prove the number of visits to 116 is in {0 ..< 2}
    .. proven.
Step 20: 
  Prove the number of visits to 55 is in {0 ..< 2}
    .. proven.
Step 21: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cleanCacheRange_RAM (ASM) <= Kernel_C.cleanCacheRange_RAM (C)), time taken: 141.94s
Testing Function pair Pairing (invokeIRQHandler_AckIRQ (ASM) <= Kernel_C.invokeIRQHandler_AckIRQ (C))
  (function pairing 157 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeIRQHandler_AckIRQ (ASM) <= Kernel_C.invokeIRQHandler_AckIRQ (C)), time taken: 0.33s
Testing Function pair Pairing (lookupTargetSlot (ASM) <= Kernel_C.lookupTargetSlot (C))
  (function pairing 158 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupTargetSlot (ASM) <= Kernel_C.lookupTargetSlot (C)), time taken: 1.19s
Testing Function pair Pairing (maskVMRights (ASM) <= Kernel_C.maskVMRights (C))
  (function pairing 159 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (maskVMRights (ASM) <= Kernel_C.maskVMRights (C)), time taken: 0.39s
Testing Function pair Pairing (lookupCapAndSlot (ASM) <= Kernel_C.lookupCapAndSlot (C))
  (function pairing 160 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupCapAndSlot (ASM) <= Kernel_C.lookupCapAndSlot (C)), time taken: 0.77s
Testing Function pair Pairing (decodeCNodeInvocation (ASM) <= Kernel_C.decodeCNodeInvocation (C))
  (function pairing 161 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeCNodeInvocation (ASM) <= Kernel_C.decodeCNodeInvocation (C)), time taken: 2779.90s
Testing Function pair Pairing (setThreadState (ASM) <= Kernel_C.setThreadState (C))
  (function pairing 162 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setThreadState (ASM) <= Kernel_C.setThreadState (C)), time taken: 0.45s
Testing Function pair Pairing (doFaultTransfer (ASM) <= Kernel_C.doFaultTransfer (C))
  (function pairing 163 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doFaultTransfer (ASM) <= Kernel_C.doFaultTransfer (C)), time taken: 0.42s
Testing Function pair Pairing (get_p_reg_kernel_img_boot (ASM) <= Kernel_C.get_p_reg_kernel_img_boot (C))
  (function pairing 164 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (get_p_reg_kernel_img_boot (ASM) <= Kernel_C.get_p_reg_kernel_img_boot (C)), time taken: 0.34s
Testing Function pair Pairing (invokeCNodeDelete (ASM) <= Kernel_C.invokeCNodeDelete (C))
  (function pairing 165 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeDelete (ASM) <= Kernel_C.invokeCNodeDelete (C)), time taken: 0.33s
Testing Function pair Pairing (unbindMaybeNotification (ASM) <= Kernel_C.unbindMaybeNotification (C))
  (function pairing 166 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (unbindMaybeNotification (ASM) <= Kernel_C.unbindMaybeNotification (C)), time taken: 0.36s
Testing Function pair Pairing (invokeCNodeSaveCaller (ASM) <= Kernel_C.invokeCNodeSaveCaller (C))
  (function pairing 167 of 284)
 .. built problem, finding proof
Decided to case split at (12, 'ASM')
  (in problem)
Now doing proof search in true case (12 visited) in problem.
Now doing proof search in false case (12 not visited) in problem.
ProofNode ('CaseSplit', (12, 'ASM'), (ProofNode ('Restr', (12, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (12, ('Number', (0, 1))), (ProofNode ('Restr', (58, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 12 is visited
Step 2: case in (1) where 12 is visited
  Prove the number of visits to 12 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 12 is not visited
  Prove the number of visits to 12 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 58 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeSaveCaller (ASM) <= Kernel_C.invokeCNodeSaveCaller (C)), time taken: 10.29s
Testing Function pair Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C))
  (function pairing 168 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [10, 65]
  (in problem)
Now doing proof search in 10 init case in problem.
Now doing proof search in 10 loop case in problem.
ProofNode ('Split', ((10, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 16)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Var', Type ('Word', 32), name = 'r8')])]), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (65, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'userSize___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 't___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'destOffset___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'objectSize___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'destLength___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'nextFreeArea___ptr_to_void#v'), Expr ('Var', Type ('Word', 32), name = 'deviceMemory___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'destCNode___ptr_to_struct_cte_C#v'), Expr ('Var', Type ('Word', 32), name = 'parent___ptr_to_struct_cte_C#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (10, ('Number', (0, 3))), (ProofNode ('Restr', (65, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Restr', (65, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 10 related to visits to 65
    with equalities
      ((Mem) ('mem')) (@ addr 10)
      = ((Mem) ('Mem')) (@ addr 65)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 16)))) (@ addr 10)
      ((Word32) ('r13')) (@ addr 10)
      ((Word32) ('r10')) (@ addr 10)
      ((Word32) ('r9')) (@ addr 10)
      ((Word32) (('r6' + ((0 - '#seq-visits') * 1)))) (@ addr 10)
      ((Word32) (('r7' + ((0 - '#seq-visits') * 'r8')))) (@ addr 10)
      ((Word32) ('r8')) (@ addr 10)
      ((Word32) ('r11')) (@ addr 10)
      ((Word32) ('r5')) (@ addr 10)
      ((Word32) ('ret')) (@ addr 10)
      ((Bool) (ROData('mem'))) (@ addr 10)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 10)
      ((Word32) ('userSize___unsigned_long#v')) (@ addr 65)
      ((Word32) ('t___unsigned_long#v')) (@ addr 65)
      ((Word32) ('destOffset___unsigned_long#v')) (@ addr 65)
      ((Word32) ('objectSize___unsigned_long#v')) (@ addr 65)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 65)
      ((Word32) ('destLength___unsigned_long#v')) (@ addr 65)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 65)
      ((Word32) ('nextFreeArea___ptr_to_void#v')) (@ addr 65)
      ((Word32) ('deviceMemory___unsigned_long#v')) (@ addr 65)
      ((Word32) ('destCNode___ptr_to_struct_cte_C#v')) (@ addr 65)
      ((Word32) ('parent___ptr_to_struct_cte_C#v')) (@ addr 65)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 10 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 65 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 10 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 65 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C)), time taken: 767.76s
Testing Function pair Pairing (decodeBindNotification (ASM) <= Kernel_C.decodeBindNotification (C))
  (function pairing 169 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeBindNotification (ASM) <= Kernel_C.decodeBindNotification (C)), time taken: 0.87s
Testing Function pair Pairing (handleUnknownSyscall (ASM) <= Kernel_C.handleUnknownSyscall (C))
  (function pairing 170 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleUnknownSyscall (ASM) <= Kernel_C.handleUnknownSyscall (C)), time taken: 0.46s
Testing Function pair Pairing (setupReplyMaster (ASM) <= Kernel_C.setupReplyMaster (C))
  (function pairing 171 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setupReplyMaster (ASM) <= Kernel_C.setupReplyMaster (C)), time taken: 0.39s
Testing Function pair Pairing (activate_kernel_vspace (ASM) <= Kernel_C.activate_kernel_vspace (C))
  (function pairing 172 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (activate_kernel_vspace (ASM) <= Kernel_C.activate_kernel_vspace (C)), time taken: 0.67s
Testing Function pair Pairing (alloc_rootserver_obj (ASM) <= Kernel_C.alloc_rootserver_obj (C))
  (function pairing 173 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (alloc_rootserver_obj (ASM) <= Kernel_C.alloc_rootserver_obj (C)), time taken: 1.26s
Testing Function pair Pairing (arch_get_n_paging (ASM) <= Kernel_C.arch_get_n_paging (C))
  (function pairing 174 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (arch_get_n_paging (ASM) <= Kernel_C.arch_get_n_paging (C)), time taken: 0.33s
Testing Function pair Pairing (decodeSetIPCBuffer (ASM) <= Kernel_C.decodeSetIPCBuffer (C))
  (function pairing 175 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeSetIPCBuffer (ASM) <= Kernel_C.decodeSetIPCBuffer (C)), time taken: 49.50s
Testing Function pair Pairing (lookupExtraCaps (ASM) <= Kernel_C.lookupExtraCaps (C))
  (function pairing 176 of 284)
 .. built problem, finding proof
Discovered that points [84 (loop head)] can be bounded
  (in problem)
Discovered that points [46 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (84, ('Number', (0, 5))), (ProofNode ('Restr', (46, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 84 is in {0 ..< 5}
    .. proven.
Step 2: 
  Prove the number of visits to 46 is in {0 ..< 4}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupExtraCaps (ASM) <= Kernel_C.lookupExtraCaps (C)), time taken: 17.65s
Testing Function pair Pairing (handleInvocation (ASM) <= Kernel_C.handleInvocation (C))
  (function pairing 177 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleInvocation (ASM) <= Kernel_C.handleInvocation (C)), time taken: 18.81s
Testing Function pair Pairing (Arch_getObjectSize (ASM) <= Kernel_C.Arch_getObjectSize (C))
  (function pairing 178 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_getObjectSize (ASM) <= Kernel_C.Arch_getObjectSize (C)), time taken: 0.38s
Testing Function pair Pairing (decodeReadRegisters (ASM) <= Kernel_C.decodeReadRegisters (C))
  (function pairing 179 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeReadRegisters (ASM) <= Kernel_C.decodeReadRegisters (C)), time taken: 1.30s
Testing Function pair Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C))
  (function pairing 180 of 284)
 .. built problem, finding proof
Decided to case split at (7, 'ASM')
  (in problem)
Now doing proof search in true case (7 visited) in problem.
Discovered that points [456 (loop head)] can be bounded
  (in true case (7 visited) in problem)
Discovered that points [445 (loop head)] can be bounded
  (in true case (7 visited) in problem)
Discovered that points [381 (loop head)] can be bounded
  (in true case (7 visited) in problem)
Discovered that points [370 (loop head)] can be bounded
  (in true case (7 visited) in problem)
Discovered that points [152 (loop head)] can be bounded
  (in true case (7 visited) in problem)
Now doing proof search in false case (7 not visited) in problem.
Decided to case split at (5, 'ASM')
  (in false case (7 not visited) in problem)
Now doing proof search in true case (5 visited) in false case (7 not visited) in problem.
Discovered that points [456 (loop head)] can be bounded
  (in true case (5 visited) in false case (7 not visited) in problem)
Discovered that points [445 (loop head)] can be bounded
  (in true case (5 visited) in false case (7 not visited) in problem)
Discovered that points [381 (loop head)] can be bounded
  (in true case (5 visited) in false case (7 not visited) in problem)
Discovered that points [370 (loop head)] can be bounded
  (in true case (5 visited) in false case (7 not visited) in problem)
Now doing proof search in false case (5 not visited) in false case (7 not visited) in problem.
Decided to case split at (8, 'ASM')
  (in false case (5 not visited) in false case (7 not visited) in problem)
Now doing proof search in true case (8 visited) in false case (5 not visited) in false case (7 not visited) in problem.
Discovered that points [456 (loop head)] can be bounded
  (in true case (8 visited) in false case (5 not visited) in false case (7 not visited) in problem)
Discovered that points [445 (loop head)] can be bounded
  (in true case (8 visited) in false case (5 not visited) in false case (7 not visited) in problem)
Discovered that points [381 (loop head)] can be bounded
  (in true case (8 visited) in false case (5 not visited) in false case (7 not visited) in problem)
Discovered that points [370 (loop head)] can be bounded
  (in true case (8 visited) in false case (5 not visited) in false case (7 not visited) in problem)
Now doing proof search in false case (8 not visited) in false case (5 not visited) in false case (7 not visited) in problem.
Discovered that points [456 (loop head)] can be bounded
  (in false case (8 not visited) in false case (5 not visited) in false case (7 not visited) in problem)
Discovered that points [445 (loop head)] can be bounded
  (in false case (8 not visited) in false case (5 not visited) in false case (7 not visited) in problem)
Discovered that points [381 (loop head)] can be bounded
  (in false case (8 not visited) in false case (5 not visited) in false case (7 not visited) in problem)
Discovered a loop relation for split points [59, 375]
  (in false case (8 not visited) in false case (5 not visited) in false case (7 not visited) in problem)
Now doing proof search in 59 init case in false case (8 not visited) in false case (5 not visited) in false case (7 not visited) in problem.
Now doing proof search in 59 loop case in false case (8 not visited) in false case (5 not visited) in false case (7 not visited) in problem.
ProofNode ('CaseSplit', (7, 'ASM'), (ProofNode ('Restr', (7, ('Number', (1, 2))), (ProofNode ('Restr', (456, ('Number', (0, 1))), (ProofNode ('Restr', (445, ('Number', (0, 1))), (ProofNode ('Restr', (381, ('Number', (0, 1))), (ProofNode ('Restr', (370, ('Number', (0, 1))), (ProofNode ('Restr', (152, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (7, ('Number', (0, 1))), (ProofNode ('Restr', (206, ('Number', (0, 1))), (ProofNode ('CaseSplit', (5, 'ASM'), (ProofNode ('Restr', (5, ('Number', (1, 2))), (ProofNode ('Restr', (456, ('Number', (0, 5))), (ProofNode ('Restr', (445, ('Number', (0, 2))), (ProofNode ('Restr', (381, ('Number', (0, 1))), (ProofNode ('Restr', (370, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (224, ('Number', (0, 1))), (ProofNode ('CaseSplit', (8, 'ASM'), (ProofNode ('Restr', (8, ('Number', (1, 2))), (ProofNode ('Restr', (456, ('Number', (0, 1))), (ProofNode ('Restr', (445, ('Number', (0, 1))), (ProofNode ('Restr', (381, ('Number', (0, 1))), (ProofNode ('Restr', (370, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Restr', (231, ('Number', (0, 1))), (ProofNode ('Restr', (456, ('Number', (0, 1))), (ProofNode ('Restr', (445, ('Number', (0, 1))), (ProofNode ('Restr', (381, ('Number', (0, 6))), (ProofNode ('Split', ((59, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (375, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'receiver___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'receiveIPCBuffer___ptr_to_unsigned_long#v.6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'length___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'receiveIPCBuffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'sender___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'sender___ptr_to_struct_tcb_C#v.1'), Expr ('Var', Type ('Word', 32), name = 'id___anonymous_enum#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.6'))], 2, 1), (ProofNode ('Restr', (59, ('Number', (0, 1))), (ProofNode ('Restr', (375, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (59, ('Offset', (0, 3))), (ProofNode ('Restr', (375, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 7 is visited
Step 2: case in (1) where 7 is visited
  Prove the number of visits to 7 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 456 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 445 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 381 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 370 is in {0 ..< 1}
    .. proven.
Step 7: 
  Prove the number of visits to 152 is in {0 ..< 1}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Step 9: case in (1) where 7 is not visited
  Prove the number of visits to 7 is in {0 ..< 1}
    .. proven.
Step 10: 
  Prove the number of visits to 206 is in {0 ..< 1}
    .. proven.
Step 11: 
  case split on whether 5 is visited
Step 12: case in (11) where 5 is visited
  Prove the number of visits to 5 is in {1 ..< 2}
    .. proven.
Step 13: 
  Prove the number of visits to 456 is in {0 ..< 5}
    .. proven.
Step 14: 
  Prove the number of visits to 445 is in {0 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 381 is in {0 ..< 1}
    .. proven.
Step 16: 
  Prove the number of visits to 370 is in {0 ..< 1}
    .. proven.
Step 17: 
  prove all verification conditions
    .. proven.
Step 18: case in (11) where 5 is not visited
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 19: 
  Prove the number of visits to 224 is in {0 ..< 1}
    .. proven.
Step 20: 
  case split on whether 8 is visited
Step 21: case in (20) where 8 is visited
  Prove the number of visits to 8 is in {1 ..< 2}
    .. proven.
Step 22: 
  Prove the number of visits to 456 is in {0 ..< 1}
    .. proven.
Step 23: 
  Prove the number of visits to 445 is in {0 ..< 1}
    .. proven.
Step 24: 
  Prove the number of visits to 381 is in {0 ..< 1}
    .. proven.
Step 25: 
  Prove the number of visits to 370 is in {0 ..< 1}
    .. proven.
Step 26: 
  prove all verification conditions
    .. proven.
Step 27: case in (20) where 8 is not visited
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 28: 
  Prove the number of visits to 231 is in {0 ..< 1}
    .. proven.
Step 29: 
  Prove the number of visits to 456 is in {0 ..< 1}
    .. proven.
Step 30: 
  Prove the number of visits to 445 is in {0 ..< 1}
    .. proven.
Step 31: 
  Prove the number of visits to 381 is in {0 ..< 6}
    .. proven.
Step 32: 
  prove visits to 59 related to visits to 375
    with equalities
      ((Mem) ('mem')) (@ addr 59)
      = ((Mem) ('Mem.6')) (@ addr 375)
    and with invariants
      ((Word32) ('r7')) (@ addr 59)
      ((Word32) ('r8')) (@ addr 59)
      ((Word32) ('r14')) (@ addr 59)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 59)
      ((Word32) ('r13')) (@ addr 59)
      ((Word32) ('r5')) (@ addr 59)
      ((Word32) ('r0')) (@ addr 59)
      ((Word32) ('r9')) (@ addr 59)
      ((Word32) ('ret')) (@ addr 59)
      ((Word32) ('r2')) (@ addr 59)
      ((Word32) ('r11')) (@ addr 59)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 59)
      ((Word32) ('r10')) (@ addr 59)
      ((Bool) (ROData('mem'))) (@ addr 59)
      ((Word32) ('r6')) (@ addr 59)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 59)
      ((Word32) ('receiver___ptr_to_struct_tcb_C#v')) (@ addr 375)
      ((Word32) ('receiveIPCBuffer___ptr_to_unsigned_long#v.6')) (@ addr 375)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 375)
      ((Word32) ('length___unsigned_long#v')) (@ addr 375)
      ((Word32) ('receiveIPCBuffer___ptr_to_unsigned_long#v')) (@ addr 375)
      ((Word32) ('sender___ptr_to_struct_tcb_C#v')) (@ addr 375)
      ((Word32[50]) ('GhostAssertions.6')) (@ addr 375)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 375)
      ((Word32) ('sender___ptr_to_struct_tcb_C#v.1')) (@ addr 375)
      ((Word32) ('id___anonymous_enum#v')) (@ addr 375)
    .. proven.
Step 33: case in (32) where the length of the sequence < 2
  Prove the number of visits to 59 is in {0 ..< 1}
    .. proven.
Step 34: 
  Prove the number of visits to 375 is in {0 ..< 2}
    .. proven.
Step 35: 
  prove all verification conditions
    .. proven.
Step 36: case in (32) where the length of the sequence is i + 2
  Prove the number of visits to 59 is in {i + 0 ..< i + 3}
    .. proven.
Step 37: 
  Prove the number of visits to 375 is in {i + 0 ..< i + 3}
    .. proven.
Step 38: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C)), time taken: 154.63s
Testing Function pair Pairing (halt (ASM) <= Kernel_C.halt (C))
  (function pairing 181 of 284)
Skipping Pairing (halt (ASM) <= Kernel_C.halt (C)), underspecified C
Testing Function pair Pairing (performInvocation_Notification (ASM) <= Kernel_C.performInvocation_Notification (C))
  (function pairing 182 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (performInvocation_Notification (ASM) <= Kernel_C.performInvocation_Notification (C)), time taken: 0.34s
Testing Function pair Pairing (decodeSetSchedParams (ASM) <= Kernel_C.decodeSetSchedParams (C))
  (function pairing 183 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeSetSchedParams (ASM) <= Kernel_C.decodeSetSchedParams (C)), time taken: 9.98s
Testing Function pair Pairing (map_kernel_frame (ASM) <= Kernel_C.map_kernel_frame (C))
  (function pairing 184 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (map_kernel_frame (ASM) <= Kernel_C.map_kernel_frame (C)), time taken: 0.42s
Testing Function pair Pairing (findFreeHWASID (ASM) <= Kernel_C.findFreeHWASID (C))
  (function pairing 185 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [6, 89]
  (in problem)
Now doing proof search in 6 init case in problem.
Now doing proof search in 6 loop case in problem.
ProofNode ('Split', ((6, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (89, (1, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'hw_asid_offset___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#17#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (6, ('Number', (0, 3))), (ProofNode ('Restr', (89, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (6, ('Offset', (0, 3))), (ProofNode ('Restr', (89, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 6 related to visits [2, 3, 4 ...] to 89
    with equalities
    and with invariants
      ((Word32) ('r21')) (@ addr 6)
      ((Word32) ('r4')) (@ addr 6)
      ((Word32) ('r27')) (@ addr 6)
      ((Word32) ('r17')) (@ addr 6)
      ((Word32) ('r23')) (@ addr 6)
      ((Word32) ('r13')) (@ addr 6)
      ((Word32) ('r10')) (@ addr 6)
      ((Word32) ('r28')) (@ addr 6)
      ((Word32) ('r19')) (@ addr 6)
      ((Word32) ('r16')) (@ addr 6)
      ((Word64) ('clock')) (@ addr 6)
      ((Word32) ('r12')) (@ addr 6)
      ((Word32) ('r9')) (@ addr 6)
      ((Word32) ('r6')) (@ addr 6)
      ((Word32) ('r7')) (@ addr 6)
      ((Word32) ('r31')) (@ addr 6)
      ((Word32) ('r25')) (@ addr 6)
      ((Word32) ('r24')) (@ addr 6)
      ((Word32) ('r8')) (@ addr 6)
      ((Word32) ('r29')) (@ addr 6)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 6)
      ((Word32) ('r1')) (@ addr 6)
      ((Word32) ('r18')) (@ addr 6)
      ((Word32) ('r20')) (@ addr 6)
      ((Word32) ('r30')) (@ addr 6)
      ((Word32) ('r14')) (@ addr 6)
      ((Word32) ('r15')) (@ addr 6)
      ((Word32) ('mode')) (@ addr 6)
      ((Word32) ('r11')) (@ addr 6)
      ((Word32) ('r5')) (@ addr 6)
      ((Word32) ('ret')) (@ addr 6)
      ((Word32) ('r26')) (@ addr 6)
      ((Mem) ('mem')) (@ addr 6)
      ((Word32) ('r22')) (@ addr 6)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 6)
      ((Word32) (('hw_asid_offset___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 89)
      ((Mem) ('Mem')) (@ addr 89)
      ((Word32[50]) ('GhostAssertions')) (@ addr 89)
      ((Word32) (('loop#17#count' + ((0 - '#seq-visits') * 1)))) (@ addr 89)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 6 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 89 is in {0 ..< 4}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 6 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 89 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (findFreeHWASID (ASM) <= Kernel_C.findFreeHWASID (C)), time taken: 32.68s
Testing Function pair Pairing (create_mapped_it_frame_cap (ASM) <= Kernel_C.create_mapped_it_frame_cap (C))
  (function pairing 186 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_mapped_it_frame_cap (ASM) <= Kernel_C.create_mapped_it_frame_cap (C)), time taken: 1.26s
Testing Function pair Pairing (decodeIRQHandlerInvocation (ASM) <= Kernel_C.decodeIRQHandlerInvocation (C))
  (function pairing 187 of 284)
 .. built problem, finding proof
Decided to case split at (2, 'ASM')
  (in problem)
Now doing proof search in true case (2 visited) in problem.
Now doing proof search in false case (2 not visited) in problem.
ProofNode ('CaseSplit', (2, 'ASM'), (ProofNode ('Restr', (2, ('Number', (1, 2))), (ProofNode ('Restr', (157, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (2, ('Number', (0, 1))), (ProofNode ('Restr', (157, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 2 is visited
Step 2: case in (1) where 2 is visited
  Prove the number of visits to 2 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 157 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 2 is not visited
  Prove the number of visits to 2 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 157 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeIRQHandlerInvocation (ASM) <= Kernel_C.decodeIRQHandlerInvocation (C)), time taken: 10.46s
Testing Function pair Pairing (cancelSignal (ASM) <= Kernel_C.cancelSignal (C))
  (function pairing 188 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cancelSignal (ASM) <= Kernel_C.cancelSignal (C)), time taken: 3.05s
Testing Function pair Pairing (sameRegionAs (ASM) <= Kernel_C.sameRegionAs (C))
  (function pairing 189 of 284)
 .. built problem, finding proof
Decided to case split at (12, 'ASM')
  (in problem)
Now doing proof search in true case (12 visited) in problem.
Now doing proof search in false case (12 not visited) in problem.
ProofNode ('CaseSplit', (12, 'ASM'), (ProofNode ('Restr', (12, ('Number', (1, 2))), (ProofNode ('Restr', (498, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (12, ('Number', (0, 1))), (ProofNode ('Restr', (498, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 12 is visited
Step 2: case in (1) where 12 is visited
  Prove the number of visits to 12 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 498 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 12 is not visited
  Prove the number of visits to 12 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 498 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (sameRegionAs (ASM) <= Kernel_C.sameRegionAs (C)), time taken: 192.95s
Testing Function pair Pairing (switchToThread (ASM) <= Kernel_C.switchToThread (C))
  (function pairing 190 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (switchToThread (ASM) <= Kernel_C.switchToThread (C)), time taken: 0.40s
Testing Function pair Pairing (invalidateCacheRange_I (ASM) <= Kernel_C.invalidateCacheRange_I (C))
  (function pairing 191 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [4, 31]
  (in problem)
Now doing proof search in 4 init case in problem.
Now doing proof search in 4 loop case in problem.
ProofNode ('Split', ((4, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r1')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (4, ('Number', (0, 3))), (ProofNode ('Restr', (31, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (4, ('Offset', (0, 3))), (ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 4 related to visits to 31
    with equalities
      ((Mem) ('mem')) (@ addr 4)
      = ((Mem) ('Mem')) (@ addr 31)
    and with invariants
      ((Word32) ('r21')) (@ addr 4)
      ((Word32) ('r4')) (@ addr 4)
      ((Word32) ('r27')) (@ addr 4)
      ((Word32) ('r17')) (@ addr 4)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('r23')) (@ addr 4)
      ((Word32) ('r13')) (@ addr 4)
      ((Word32) ('r10')) (@ addr 4)
      ((Word32) ('r28')) (@ addr 4)
      ((Word32) ('r19')) (@ addr 4)
      ((Word32) ('r16')) (@ addr 4)
      ((Word64) ('clock')) (@ addr 4)
      ((Word32) ('r12')) (@ addr 4)
      ((Word32) ('r9')) (@ addr 4)
      ((Word32) ('r6')) (@ addr 4)
      ((Word32) ('r7')) (@ addr 4)
      ((Word32) ('r31')) (@ addr 4)
      ((Word32) ('r25')) (@ addr 4)
      ((Word32) ('r24')) (@ addr 4)
      ((Word32) ('r8')) (@ addr 4)
      ((Word32) ('r29')) (@ addr 4)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 4)
      ((Word32) ('r18')) (@ addr 4)
      ((Word32) ('r20')) (@ addr 4)
      ((Word32) ('r30')) (@ addr 4)
      ((Word32) ('r14')) (@ addr 4)
      ((Word32) ('r15')) (@ addr 4)
      ((Word32) ('mode')) (@ addr 4)
      ((Word32) ('r11')) (@ addr 4)
      ((Word32) ('r5')) (@ addr 4)
      ((Word32) ('ret')) (@ addr 4)
      ((Word32) ('r26')) (@ addr 4)
      ((Word32) ('r1')) (@ addr 4)
      ((Word32) ('r2')) (@ addr 4)
      ((Bool) (ROData('mem'))) (@ addr 4)
      ((Word32) ('r22')) (@ addr 4)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r1')), ((Word32) ('r0')))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r1')))))) (@ addr 4)
      ((Bool) ('c')) (@ addr 4)
      ((Bool) ('n')) (@ addr 4)
      ((Bool) ('v')) (@ addr 4)
      ((Bool) ('z')) (@ addr 4)
      ((Word32) ('end___unsigned_long#v')) (@ addr 31)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 31)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 31)
      ((Word32) ('start___unsigned_long#v')) (@ addr 31)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 31)
      ((Word32[50]) ('GhostAssertions')) (@ addr 31)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 4 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 31 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 4 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 31 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invalidateCacheRange_I (ASM) <= Kernel_C.invalidateCacheRange_I (C)), time taken: 46.67s
Testing Function pair Pairing (ensureNoChildren (ASM) <= Kernel_C.ensureNoChildren (C))
  (function pairing 192 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (ensureNoChildren (ASM) <= Kernel_C.ensureNoChildren (C)), time taken: 0.44s
Testing Function pair Pairing (getExtraCPtr (ASM) <= Kernel_C.getExtraCPtr (C))
  (function pairing 193 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (getExtraCPtr (ASM) <= Kernel_C.getExtraCPtr (C)), time taken: 0.35s
Testing Function pair Pairing (finaliseCap (ASM) <= Kernel_C.finaliseCap (C))
  (function pairing 194 of 284)
 .. built problem, finding proof
Decided to case split at (18, 'ASM')
  (in problem)
Now doing proof search in true case (18 visited) in problem.
Now doing proof search in false case (18 not visited) in problem.
Decided to case split at (11, 'ASM')
  (in false case (18 not visited) in problem)
Now doing proof search in true case (11 visited) in false case (18 not visited) in problem.
Now doing proof search in false case (11 not visited) in false case (18 not visited) in problem.
Decided to case split at (8, 'ASM')
  (in false case (11 not visited) in false case (18 not visited) in problem)
Now doing proof search in true case (8 visited) in false case (11 not visited) in false case (18 not visited) in problem.
Now doing proof search in false case (8 not visited) in false case (11 not visited) in false case (18 not visited) in problem.
Decided to case split at (43, 'ASM')
  (in false case (8 not visited) in false case (11 not visited) in false case (18 not visited) in problem)
Now doing proof search in true case (43 visited) in false case (8 not visited) in false case (11 not visited) in false case (18 not visited) in problem.
Now doing proof search in false case (43 not visited) in false case (8 not visited) in false case (11 not visited) in false case (18 not visited) in problem.
ProofNode ('CaseSplit', (18, 'ASM'), (ProofNode ('Restr', (18, ('Number', (1, 2))), (ProofNode ('Restr', (395, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (18, ('Number', (0, 1))), (ProofNode ('Restr', (395, ('Number', (0, 1))), (ProofNode ('CaseSplit', (11, 'ASM'), (ProofNode ('Restr', (11, ('Number', (1, 2))), (ProofNode ('Restr', (408, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (11, ('Number', (0, 1))), (ProofNode ('Restr', (408, ('Number', (0, 1))), (ProofNode ('CaseSplit', (8, 'ASM'), (ProofNode ('Restr', (8, ('Number', (1, 2))), (ProofNode ('Restr', (424, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Restr', (424, ('Number', (0, 1))), (ProofNode ('CaseSplit', (43, 'ASM'), (ProofNode ('Restr', (43, ('Number', (1, 2))), (ProofNode ('Restr', (358, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (43, ('Number', (0, 1))), (ProofNode ('Restr', (358, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 18 is visited
Step 2: case in (1) where 18 is visited
  Prove the number of visits to 18 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 395 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 18 is not visited
  Prove the number of visits to 18 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 395 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 11 is visited
Step 8: case in (7) where 11 is visited
  Prove the number of visits to 11 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 408 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 11 is not visited
  Prove the number of visits to 11 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 408 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 8 is visited
Step 14: case in (13) where 8 is visited
  Prove the number of visits to 8 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 424 is in {1 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where 8 is not visited
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 424 is in {0 ..< 1}
    .. proven.
Step 19: 
  case split on whether 43 is visited
Step 20: case in (19) where 43 is visited
  Prove the number of visits to 43 is in {1 ..< 2}
    .. proven.
Step 21: 
  Prove the number of visits to 358 is in {1 ..< 2}
    .. proven.
Step 22: 
  prove all verification conditions
    .. proven.
Step 23: case in (19) where 43 is not visited
  Prove the number of visits to 43 is in {0 ..< 1}
    .. proven.
Step 24: 
  Prove the number of visits to 358 is in {0 ..< 1}
    .. proven.
Step 25: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (finaliseCap (ASM) <= Kernel_C.finaliseCap (C)), time taken: 54.68s
Testing Function pair Pairing (plat_cleanCache (ASM) <= Kernel_C.plat_cleanCache (C))
  (function pairing 195 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [2, 35]
  (in problem)
Now doing proof search in 2 init case in problem.
Discovered that points [50 (loop head)] can be bounded
  (in 2 init case in problem)
Discovered that points [29 (loop head)] can be bounded
  (in 2 init case in problem)
Now doing proof search in 2 loop case in problem.
Discovered that points [50 (loop head)] can be bounded
  (in 2 loop case in problem)
Discovered that points [29 (loop head)] can be bounded
  (in 2 loop case in problem)
ProofNode ('Split', ((2, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (35, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (2, ('Number', (0, 1))), (ProofNode ('Restr', (35, ('Number', (0, 1))), (ProofNode ('Restr', (50, ('Number', (0, 1))), (ProofNode ('Restr', (29, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (2, ('Offset', (0, 1))), (ProofNode ('Restr', (35, ('Offset', (0, 1))), (ProofNode ('Restr', (50, ('Number', (0, 1))), (ProofNode ('Restr', (29, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),))))
 .. proof found.
Step 1: 
  prove visits to 2 related to visits to 35
    with equalities
    and with invariants
      ((Word32) ('r21')) (@ addr 2)
      ((Word32) ('r4')) (@ addr 2)
      ((Word32) ('r27')) (@ addr 2)
      ((Word32) ('r17')) (@ addr 2)
      ((Word32) ('r0')) (@ addr 2)
      ((Word32) ('r23')) (@ addr 2)
      ((Word32) ('r13')) (@ addr 2)
      ((Word32) ('r10')) (@ addr 2)
      ((Word32) ('r28')) (@ addr 2)
      ((Word32) ('r19')) (@ addr 2)
      ((Word32) ('r16')) (@ addr 2)
      ((Word64) ('clock')) (@ addr 2)
      ((Word32) ('r12')) (@ addr 2)
      ((Word32) ('r9')) (@ addr 2)
      ((Word32) ('r6')) (@ addr 2)
      ((Word32) ('r7')) (@ addr 2)
      ((Word32) ('r31')) (@ addr 2)
      ((Word32) ('r25')) (@ addr 2)
      ((Word32) ('r24')) (@ addr 2)
      ((Word32) ('r8')) (@ addr 2)
      ((Word32) ('r29')) (@ addr 2)
      ((Word32) ('r18')) (@ addr 2)
      ((Word32) ('r20')) (@ addr 2)
      ((Word32) ('r30')) (@ addr 2)
      ((Word32) ('r14')) (@ addr 2)
      ((Word32) ('r15')) (@ addr 2)
      ((Word32) ('mode')) (@ addr 2)
      ((Word32) ('r11')) (@ addr 2)
      ((Word32) ('r5')) (@ addr 2)
      ((Word32) ('ret')) (@ addr 2)
      ((Word32) ('r26')) (@ addr 2)
      ((Word32) ('r1')) (@ addr 2)
      ((Word32) ('r2')) (@ addr 2)
      ((Mem) ('mem')) (@ addr 2)
      ((Word32) ('r22')) (@ addr 2)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 2)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 35)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 2 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 35 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 50 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 29 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Step 7: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 2 is in {i + 0 ..< i + 1}
    .. proven.
Step 8: 
  Prove the number of visits to 35 is in {i + 0 ..< i + 1}
    .. proven.
Step 9: 
  Prove the number of visits to 50 is in {0 ..< 1}
    .. proven.
Step 10: 
  Prove the number of visits to 29 is in {0 ..< 1}
    .. proven.
Step 11: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (plat_cleanCache (ASM) <= Kernel_C.plat_cleanCache (C)), time taken: 10.42s
Testing Function pair Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C))
  (function pairing 196 of 284)
 .. built problem, finding proof
Decided to case split at (16, 'ASM')
  (in problem)
Now doing proof search in true case (16 visited) in problem.
Now doing proof search in false case (16 not visited) in problem.
Decided to case split at (19, 'ASM')
  (in false case (16 not visited) in problem)
Now doing proof search in true case (19 visited) in false case (16 not visited) in problem.
Now doing proof search in false case (19 not visited) in false case (16 not visited) in problem.
ProofNode ('CaseSplit', (16, 'ASM'), (ProofNode ('Restr', (16, ('Number', (1, 2))), (ProofNode ('Restr', (188, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (188, ('Number', (0, 1))), (ProofNode ('CaseSplit', (19, 'ASM'), (ProofNode ('Restr', (19, ('Number', (1, 2))), (ProofNode ('Restr', (181, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (19, ('Number', (0, 1))), (ProofNode ('Restr', (181, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 16 is visited
Step 2: case in (1) where 16 is visited
  Prove the number of visits to 16 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 188 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 16 is not visited
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 188 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 19 is visited
Step 8: case in (7) where 19 is visited
  Prove the number of visits to 19 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 181 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 19 is not visited
  Prove the number of visits to 19 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 181 is in {0 ..< 1}
    .. proven.
Step 13: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C)), time taken: 24.35s
Testing Function pair Pairing (loadHWASID (ASM) <= Kernel_C.loadHWASID (C))
  (function pairing 197 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (loadHWASID (ASM) <= Kernel_C.loadHWASID (C)), time taken: 0.34s
Testing Function pair Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C))
  (function pairing 198 of 284)
Skipping Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C)), underspecified C
Testing Function pair Pairing (timerTick (ASM) <= Kernel_C.timerTick (C))
  (function pairing 199 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (timerTick (ASM) <= Kernel_C.timerTick (C)), time taken: 1.55s
Testing Function pair Pairing (setDomain (ASM) <= Kernel_C.setDomain (C))
  (function pairing 200 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setDomain (ASM) <= Kernel_C.setDomain (C)), time taken: 1.21s
Testing Function pair Pairing (sameObjectAs (ASM) <= Kernel_C.sameObjectAs (C))
  (function pairing 201 of 284)
 .. built problem, finding proof
Decided to case split at (22, 'ASM')
  (in problem)
Now doing proof search in true case (22 visited) in problem.
Now doing proof search in false case (22 not visited) in problem.
ProofNode ('CaseSplit', (22, 'ASM'), (ProofNode ('Restr', (22, ('Number', (1, 2))), (ProofNode ('Restr', (87, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (22, ('Number', (0, 1))), (ProofNode ('Restr', (87, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 22 is visited
Step 2: case in (1) where 22 is visited
  Prove the number of visits to 22 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 87 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 22 is not visited
  Prove the number of visits to 22 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 87 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (sameObjectAs (ASM) <= Kernel_C.sameObjectAs (C)), time taken: 8.29s
Testing Function pair Pairing (handleRecv (ASM) <= Kernel_C.handleRecv (C))
  (function pairing 202 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleRecv (ASM) <= Kernel_C.handleRecv (C)), time taken: 9.62s
Testing Function pair Pairing (preemptionPoint (ASM) <= Kernel_C.preemptionPoint (C))
  (function pairing 203 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (preemptionPoint (ASM) <= Kernel_C.preemptionPoint (C)), time taken: 0.35s
Testing Function pair Pairing (resolveAddressBits (ASM) <= Kernel_C.resolveAddressBits (C))
  (function pairing 204 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [19, 191]
  (in problem)
Now doing proof search in 19 init case in problem.
Now doing proof search in 19 loop case in problem.
ProofNode ('Split', ((19, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'ret_addr_input'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (191, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C'), Expr ('Var', Type ('Word', 32), name = 'capptr___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'ret___struct_resolveAddressBits_ret_C#v.slot_C'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'n_bits___unsigned_long#v')), (Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'nodeCap___struct_cap_C#v.words_C.0')), (Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'radixBits___unsigned_long#v')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'levelBits___unsigned_long#v'))], 2, 1), (ProofNode ('Restr', (19, ('Number', (0, 3))), (ProofNode ('Restr', (191, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (19, ('Offset', (0, 3))), (ProofNode ('Restr', (191, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 19 related to visits to 191
    with equalities
      ((Word32) ('r1')) (@ addr 19)
      = ((Word32) ('n_bits___unsigned_long#v')) (@ addr 191)
      ((Word32) ('r14')) (@ addr 19)
      = ((Word32) ('nodeCap___struct_cap_C#v.words_C.0')) (@ addr 191)
      ((Word32) ('r2')) (@ addr 19)
      = ((Word32) ('radixBits___unsigned_long#v')) (@ addr 191)
      ((Word32) ('r4')) (@ addr 19)
      = ((Word32) ('levelBits___unsigned_long#v')) (@ addr 191)
    and with invariants
      ((Word32) ('r0')) (@ addr 19)
      ((Word32) ('r13')) (@ addr 19)
      ((Word32) ('r10')) (@ addr 19)
      ((Word32) ('r9')) (@ addr 19)
      ((Word32) ('r3')) (@ addr 19)
      ((Word32) ('ret_addr_input')) (@ addr 19)
      ((Word32) ('r5')) (@ addr 19)
      ((Word32) ('ret')) (@ addr 19)
      ((Word32) ('r11')) (@ addr 19)
      ((Mem) ('mem')) (@ addr 19)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 19)
      ((Word32) ('ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C')) (@ addr 191)
      ((Word32) ('capptr___unsigned_long#v')) (@ addr 191)
      ((Word32) ('ret___struct_resolveAddressBits_ret_C#v.slot_C')) (@ addr 191)
      ((Word32[50]) ('GhostAssertions')) (@ addr 191)
      ((Mem) ('Mem')) (@ addr 191)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 191)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 19 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 191 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 19 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 191 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (resolveAddressBits (ASM) <= Kernel_C.resolveAddressBits (C)), time taken: 207.20s
Testing Function pair Pairing (invalidateTLBByASID (ASM) <= Kernel_C.invalidateTLBByASID (C))
  (function pairing 205 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invalidateTLBByASID (ASM) <= Kernel_C.invalidateTLBByASID (C)), time taken: 0.47s
Testing Function pair Pairing (memzero (ASM) <= Kernel_C.memzero (C))
  (function pairing 206 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [4, 25]
  (in problem)
Now doing proof search in 4 init case in problem.
Now doing proof search in 4 loop case in problem.
ProofNode ('Split', ((4, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967292)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (25, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'p___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (4, ('Number', (0, 3))), (ProofNode ('Restr', (25, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (4, ('Offset', (0, 3))), (ProofNode ('Restr', (25, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 4 related to visits to 25
    with equalities
      ((Mem) ('mem')) (@ addr 4)
      = ((Mem) ('Mem')) (@ addr 25)
    and with invariants
      ((Word32) ('r7')) (@ addr 4)
      ((Word32) ('r4')) (@ addr 4)
      ((Word32) ('r8')) (@ addr 4)
      ((Word32) ('r14')) (@ addr 4)
      ((Word32) ('r3')) (@ addr 4)
      ((Word32) ('r5')) (@ addr 4)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 4)
      ((Word32) ('r9')) (@ addr 4)
      ((Word32) ('ret')) (@ addr 4)
      ((Word32) ('r11')) (@ addr 4)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4294967292)))) (@ addr 4)
      ((Word32) ('r13')) (@ addr 4)
      ((Word32) ('r10')) (@ addr 4)
      ((Bool) (ROData('mem'))) (@ addr 4)
      ((Word32) ('r6')) (@ addr 4)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 4)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 25)
      ((Word32) (('n___unsigned_long#v' - ((0 - '#seq-visits') * WordCast(4))))) (@ addr 25)
      ((Word32[50]) ('GhostAssertions')) (@ addr 25)
      ((Word32) (('p___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 4)))) (@ addr 25)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 4 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 25 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 4 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 25 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (memzero (ASM) <= Kernel_C.memzero (C)), time taken: 25.24s
Testing Function pair Pairing (provide_cap (ASM) <= Kernel_C.provide_cap (C))
  (function pairing 207 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (provide_cap (ASM) <= Kernel_C.provide_cap (C)), time taken: 0.73s
Testing Function pair Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))
  (function pairing 208 of 284)
 .. built problem, finding proof
Discovered that points [13 (loop head)] can be bounded
  (in problem)
Result ProofEXCEPT for pair Pairing (slowpath (ASM) <= Kernel_C.slowpath (C)), time taken: 17.28s
Testing Function pair Pairing (initIRQController (ASM) <= Kernel_C.initIRQController (C))
  (function pairing 209 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (initIRQController (ASM) <= Kernel_C.initIRQController (C)), time taken: 0.34s
Testing Function pair Pairing (tcbSchedEnqueue (ASM) <= Kernel_C.tcbSchedEnqueue (C))
  (function pairing 210 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (tcbSchedEnqueue (ASM) <= Kernel_C.tcbSchedEnqueue (C)), time taken: 0.70s
Testing Function pair Pairing (lockTLBEntryCritical (ASM) <= Kernel_C.lockTLBEntryCritical (C))
  (function pairing 211 of 284)
Skipping Pairing (lockTLBEntryCritical (ASM) <= Kernel_C.lockTLBEntryCritical (C)), underspecified C
Testing Function pair Pairing (insertNewCap (ASM) <= Kernel_C.insertNewCap (C))
  (function pairing 212 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (insertNewCap (ASM) <= Kernel_C.insertNewCap (C)), time taken: 0.60s
Testing Function pair Pairing (receiveSignal (ASM) <= Kernel_C.receiveSignal (C))
  (function pairing 213 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (receiveSignal (ASM) <= Kernel_C.receiveSignal (C)), time taken: 1.18s
Testing Function pair Pairing (armv_init_user_access (ASM) <= Kernel_C.armv_init_user_access (C))
  (function pairing 214 of 284)
 .. built problem, finding proof
Discovered that points [35 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (35, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 35 is in {0 ..< 2}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (armv_init_user_access (ASM) <= Kernel_C.armv_init_user_access (C)), time taken: 2.22s
Testing Function pair Pairing (getHWASID (ASM) <= Kernel_C.getHWASID (C))
  (function pairing 215 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (getHWASID (ASM) <= Kernel_C.getHWASID (C)), time taken: 0.50s
Testing Function pair Pairing (updateCapData (ASM) <= Kernel_C.updateCapData (C))
  (function pairing 216 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (updateCapData (ASM) <= Kernel_C.updateCapData (C)), time taken: 1.20s
Testing Function pair Pairing (loadCapTransfer (ASM) <= Kernel_C.loadCapTransfer (C))
  (function pairing 217 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (loadCapTransfer (ASM) <= Kernel_C.loadCapTransfer (C)), time taken: 0.42s
Testing Function pair Pairing (lookupCap (ASM) <= Kernel_C.lookupCap (C))
  (function pairing 218 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupCap (ASM) <= Kernel_C.lookupCap (C)), time taken: 0.58s
Testing Function pair Pairing (create_root_cnode (ASM) <= Kernel_C.create_root_cnode (C))
  (function pairing 219 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_root_cnode (ASM) <= Kernel_C.create_root_cnode (C)), time taken: 0.44s
Testing Function pair Pairing (invokeTCB_ThreadControl (ASM) <= Kernel_C.invokeTCB_ThreadControl (C))
  (function pairing 220 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_ThreadControl (ASM) <= Kernel_C.invokeTCB_ThreadControl (C)), time taken: 1995.59s
Testing Function pair Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))
  (function pairing 221 of 284)
Aborting Problem (Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))): underspecified instruction'vmrs_r3_fpexc_E0001DCC
Result ProblemAbort for pair Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C)), time taken: 0.04s
Testing Function pair Pairing (scheduleTCB (ASM) <= Kernel_C.scheduleTCB (C))
  (function pairing 222 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (scheduleTCB (ASM) <= Kernel_C.scheduleTCB (C)), time taken: 0.54s
Testing Function pair Pairing (possibleSwitchTo (ASM) <= Kernel_C.possibleSwitchTo (C))
  (function pairing 223 of 284)
 .. built problem, finding proof
Decided to case split at (4, 'ASM')
  (in problem)
Now doing proof search in true case (4 visited) in problem.
Now doing proof search in false case (4 not visited) in problem.
ProofNode ('CaseSplit', (4, 'ASM'), (ProofNode ('Restr', (4, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (4, ('Number', (0, 1))), (ProofNode ('Restr', (41, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 4 is visited
Step 2: case in (1) where 4 is visited
  Prove the number of visits to 4 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 4 is not visited
  Prove the number of visits to 4 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 41 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (possibleSwitchTo (ASM) <= Kernel_C.possibleSwitchTo (C)), time taken: 9.78s
Testing Function pair Pairing (invokeCNodeMove (ASM) <= Kernel_C.invokeCNodeMove (C))
  (function pairing 224 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeMove (ASM) <= Kernel_C.invokeCNodeMove (C)), time taken: 0.43s
Testing Function pair Pairing (write_it_asid_pool (ASM) <= Kernel_C.write_it_asid_pool (C))
  (function pairing 225 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (write_it_asid_pool (ASM) <= Kernel_C.write_it_asid_pool (C)), time taken: 0.66s
Testing Function pair Pairing (c_handle_fastpath_reply_recv (ASM) <= Kernel_C.c_handle_fastpath_reply_recv (C))
  (function pairing 226 of 284)
Skipping Pairing (c_handle_fastpath_reply_recv (ASM) <= Kernel_C.c_handle_fastpath_reply_recv (C)), underspecified ASM
Testing Function pair Pairing (lookupPivotSlot (ASM) <= Kernel_C.lookupPivotSlot (C))
  (function pairing 227 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupPivotSlot (ASM) <= Kernel_C.lookupPivotSlot (C)), time taken: 1.21s
Testing Function pair Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C))
  (function pairing 228 of 284)
Skipping Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C)), underspecified ASM
Testing Function pair Pairing (populate_bi_frame (ASM) <= Kernel_C.populate_bi_frame (C))
  (function pairing 229 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (populate_bi_frame (ASM) <= Kernel_C.populate_bi_frame (C)), time taken: 1.79s
Testing Function pair Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C))
  (function pairing 230 of 284)
Aborting Problem (Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C))), complex loop
Result ProblemAbort for pair Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C)), time taken: 12.58s
Testing Function pair Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C))
  (function pairing 231 of 284)
Aborting Problem (Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C))), complex loop
Result ProblemAbort for pair Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C)), time taken: 0.90s
Testing Function pair Pairing (completeSignal (ASM) <= Kernel_C.completeSignal (C))
  (function pairing 232 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (completeSignal (ASM) <= Kernel_C.completeSignal (C)), time taken: 2.32s
Testing Function pair Pairing (sendFaultIPC (ASM) <= Kernel_C.sendFaultIPC (C))
  (function pairing 233 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (sendFaultIPC (ASM) <= Kernel_C.sendFaultIPC (C)), time taken: 6.08s
Testing Function pair Pairing (create_domain_cap (ASM) <= Kernel_C.create_domain_cap (C))
  (function pairing 234 of 284)
 .. built problem, finding proof
Discovered that points [34 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (34, ('Number', (0, 5))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 34 is in {0 ..< 5}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_domain_cap (ASM) <= Kernel_C.create_domain_cap (C)), time taken: 7.59s
Testing Function pair Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))
  (function pairing 235 of 284)
Aborting Problem (Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))), complex loop
Result ProblemAbort for pair Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C)), time taken: 11.73s
Testing Function pair Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C))
  (function pairing 236 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [14, 212]
  (in problem)
Now doing proof search in 14 init case in problem.
Discovered that points [197 (loop head)] can be bounded
  (in 14 init case in problem)
Discovered that points [185 (loop head)] can be bounded
  (in 14 init case in problem)
Discovered that points [174 (loop head)] can be bounded
  (in 14 init case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 14 init case in problem)
Discovered that points [147 (loop head)] can be bounded
  (in 14 init case in problem)
Now doing proof search in 14 loop case in problem.
Discovered a loop relation for split points [40, 202]
  (in 14 loop case in problem)
Now doing proof search in 40 init case in 14 loop case in problem.
Discovered that points [185 (loop head)] can be bounded
  (in 40 init case in 14 loop case in problem)
Discovered that points [174 (loop head)] can be bounded
  (in 40 init case in 14 loop case in problem)
Discovered that points [147 (loop head)] can be bounded
  (in 40 init case in 14 loop case in problem)
Now doing proof search in 40 loop case in 14 loop case in problem.
Discovered that points [185 (loop head)] can be bounded
  (in 40 loop case in 14 loop case in problem)
Discovered a loop relation for split points [62, 179]
  (in 40 loop case in 14 loop case in problem)
Now doing proof search in 62 init case in 40 loop case in 14 loop case in problem.
Now doing proof search in 62 loop case in 40 loop case in 14 loop case in problem.
ProofNode ('Split', ((14, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (212, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'ipcBuffer___ptr_to_unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#44#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (14, ('Number', (0, 3))), (ProofNode ('Restr', (212, ('Number', (0, 3))), (ProofNode ('Restr', (197, ('Number', (0, 1))), (ProofNode ('Restr', (185, ('Number', (0, 2))), (ProofNode ('Restr', (174, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 1))), (ProofNode ('Restr', (147, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)), ProofNode ('Restr', (14, ('Offset', (0, 3))), (ProofNode ('Restr', (212, ('Offset', (0, 3))), (ProofNode ('Split', ((40, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Var', Type ('Word', 32), name = 'r14')]), (202, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'ipcBuffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#33#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (40, ('Number', (0, 4))), (ProofNode ('Restr', (202, ('Number', (0, 4))), (ProofNode ('Restr', (185, ('Number', (0, 2))), (ProofNode ('Restr', (174, ('Number', (0, 1))), (ProofNode ('Restr', (147, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (40, ('Offset', (0, 3))), (ProofNode ('Restr', (202, ('Offset', (0, 3))), (ProofNode ('Restr', (185, ('Number', (0, 2))), (ProofNode ('Split', ((62, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (179, (1, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'ipcBuffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'j___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (62, ('Number', (0, 3))), (ProofNode ('Restr', (179, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (62, ('Offset', (0, 3))), (ProofNode ('Restr', (179, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 14 related to visits to 212
    with equalities
      ((Mem) ('mem')) (@ addr 14)
      = ((Mem) ('Mem')) (@ addr 212)
    and with invariants
      ((Word32) ('r4')) (@ addr 14)
      ((Word32) ('r0')) (@ addr 14)
      ((Word32) ('r13')) (@ addr 14)
      ((Word32) ('r10')) (@ addr 14)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 4)))) (@ addr 14)
      ((Word32) ('r9')) (@ addr 14)
      ((Word32) ('r6')) (@ addr 14)
      ((Word32) ('r8')) (@ addr 14)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 14)
      ((Word32) ('r11')) (@ addr 14)
      ((Word32) ('r5')) (@ addr 14)
      ((Word32) ('r7')) (@ addr 14)
      ((Word32) ('ret')) (@ addr 14)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 1)))) (@ addr 14)
      ((Bool) (ROData('mem'))) (@ addr 14)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 14)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 212)
      ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 212)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 212)
      ((Word32) ('n___unsigned_long#v')) (@ addr 212)
      ((Word32) ('ipcBuffer___ptr_to_unsigned_long#v')) (@ addr 212)
      ((Word32) (('loop#44#count' + ((0 - '#seq-visits') * 1)))) (@ addr 212)
      ((Word32[50]) ('GhostAssertions')) (@ addr 212)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 14 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 212 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 197 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 185 is in {0 ..< 2}
    .. proven.
Step 6: 
  Prove the number of visits to 174 is in {0 ..< 1}
    .. proven.
Step 7: 
  Prove the number of visits to 124 is in {0 ..< 1}
    .. proven.
Step 8: 
  Prove the number of visits to 147 is in {0 ..< 1}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 14 is in {i + 0 ..< i + 3}
    .. proven.
Step 11: 
  Prove the number of visits to 212 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  prove visits [2, 3, 4 ...] to 40 related to visits [2, 3, 4 ...] to 202
    with equalities
      ((Mem) ('mem')) (@ addr 40)
      = ((Mem) ('Mem')) (@ addr 202)
    and with invariants
      ((Word32) ('r4')) (@ addr 40)
      ((Word32) ('r0')) (@ addr 40)
      ((Word32) ('r13')) (@ addr 40)
      ((Word32) ('r10')) (@ addr 40)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 4)))) (@ addr 40)
      ((Word32) ('r9')) (@ addr 40)
      ((Word32) ('r6')) (@ addr 40)
      ((Word32) ('r7')) (@ addr 40)
      ((Word32) ('r8')) (@ addr 40)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 40)
      ((Word32) ('r11')) (@ addr 40)
      ((Word32) ('r5')) (@ addr 40)
      ((Word32) ('ret')) (@ addr 40)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 40)
      ((Bool) (ROData('mem'))) (@ addr 40)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 40)
      ((Word32) ('r14')) (@ addr 40)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 202)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 202)
      ((Word32) ('n___unsigned_long#v')) (@ addr 202)
      ((Word32) ('ipcBuffer___ptr_to_unsigned_long#v')) (@ addr 202)
      ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 202)
      ((Word32) (('loop#33#count' + ((0 - '#seq-visits') * 1)))) (@ addr 202)
      ((Word32[50]) ('GhostAssertions')) (@ addr 202)
    .. proven.
Step 13: case in (12) where the length of the sequence < 2
  Prove the number of visits to 40 is in {0 ..< 4}
    .. proven.
Step 14: 
  Prove the number of visits to 202 is in {0 ..< 4}
    .. proven.
Step 15: 
  Prove the number of visits to 185 is in {0 ..< 2}
    .. proven.
Step 16: 
  Prove the number of visits to 174 is in {0 ..< 1}
    .. proven.
Step 17: 
  Prove the number of visits to 147 is in {0 ..< 1}
    .. proven.
Step 18: 
  prove all verification conditions
    .. proven.
Step 19: case in (12) where the length of the sequence is j + 2
  Prove the number of visits to 40 is in {j + 0 ..< j + 3}
    .. proven.
Step 20: 
  Prove the number of visits to 202 is in {j + 0 ..< j + 3}
    .. proven.
Step 21: 
  Prove the number of visits to 185 is in {0 ..< 2}
    .. proven.
Step 22: 
  prove visits to 62 related to visits [2, 3, 4 ...] to 179
    with equalities
      ((Mem) ('mem')) (@ addr 62)
      = ((Mem) ('Mem')) (@ addr 179)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 62)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 62)
      ((Word32) ('r13')) (@ addr 62)
      ((Word32) ('r10')) (@ addr 62)
      ((Word32) ('r12')) (@ addr 62)
      ((Word32) ('r9')) (@ addr 62)
      ((Word32) ('r6')) (@ addr 62)
      ((Word32) ('r7')) (@ addr 62)
      ((Word32) ('r8')) (@ addr 62)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 62)
      ((Word32) ('r11')) (@ addr 62)
      ((Word32) ('r5')) (@ addr 62)
      ((Word32) ('ret')) (@ addr 62)
      ((Word32) ('r2')) (@ addr 62)
      ((Bool) (ROData('mem'))) (@ addr 62)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 62)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 179)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 179)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 179)
      ((Word32) ('n___unsigned_long#v')) (@ addr 179)
      ((Word32) ('ipcBuffer___ptr_to_unsigned_long#v')) (@ addr 179)
      ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 179)
      ((Word32[50]) ('GhostAssertions')) (@ addr 179)
      ((Word32) ('j___unsigned_long#v')) (@ addr 179)
    .. proven.
Step 23: case in (22) where the length of the sequence < 2
  Prove the number of visits to 62 is in {0 ..< 3}
    .. proven.
Step 24: 
  Prove the number of visits to 179 is in {0 ..< 4}
    .. proven.
Step 25: 
  prove all verification conditions
    .. proven.
Step 26: case in (22) where the length of the sequence is k + 2
  Prove the number of visits to 62 is in {k + 0 ..< k + 3}
    .. proven.
Step 27: 
  Prove the number of visits to 179 is in {k + 0 ..< k + 3}
    .. proven.
Step 28: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C)), time taken: 595.85s
Testing Function pair Pairing (get_p_reg_kernel_img (ASM) <= Kernel_C.get_p_reg_kernel_img (C))
  (function pairing 237 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (get_p_reg_kernel_img (ASM) <= Kernel_C.get_p_reg_kernel_img (C)), time taken: 0.35s
Testing Function pair Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C))
  (function pairing 238 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [31, 52]
  (in problem)
Now doing proof search in 31 init case in problem.
Now doing proof search in 31 loop case in problem.
ProofNode ('Split', ((31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r3')])])]), (52, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (31, ('Number', (0, 3))), (ProofNode ('Restr', (52, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Restr', (52, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 31 related to visits to 52
    with equalities
      ((Mem) ('mem')) (@ addr 31)
      = ((Mem) ('Mem')) (@ addr 52)
    and with invariants
      ((Word32) ('r7')) (@ addr 31)
      ((Word32) ('r8')) (@ addr 31)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 1)))) (@ addr 31)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 31)
      ((Word32) ('r13')) (@ addr 31)
      ((Word32) ('r5')) (@ addr 31)
      ((Word32) ('r0')) (@ addr 31)
      ((Word32) ('r9')) (@ addr 31)
      ((Word32) ('ret')) (@ addr 31)
      ((Word32) ('r2')) (@ addr 31)
      ((Word32) ('r11')) (@ addr 31)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 31)
      ((Word32) ('r10')) (@ addr 31)
      ((Bool) (ROData('mem'))) (@ addr 31)
      ((Word32) ('r6')) (@ addr 31)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 31)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r2')), ((Word32) ('r3')))))) (@ addr 31)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 52)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 52)
      ((Word32) ('size___unsigned_long#v')) (@ addr 52)
      ((Word32) ('src___ptr_to_char#v')) (@ addr 52)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 52)
      ((Word32[50]) ('GhostAssertions')) (@ addr 52)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 31 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 52 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 31 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 52 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C)), time taken: 50.74s
Testing Function pair Pairing (cap_get_capIsPhysical (ASM) <= Kernel_C.cap_get_capIsPhysical (C))
  (function pairing 239 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cap_get_capIsPhysical (ASM) <= Kernel_C.cap_get_capIsPhysical (C)), time taken: 0.71s
Testing Function pair Pairing (cancelAllIPC (ASM) <= Kernel_C.cancelAllIPC (C))
  (function pairing 240 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [11, 50]
  (in problem)
Now doing proof search in 11 init case in problem.
Now doing proof search in 11 loop case in problem.
ProofNode ('Split', ((11, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (50, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'))], 2, 1), (ProofNode ('Restr', (11, ('Number', (0, 3))), (ProofNode ('Restr', (50, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Restr', (50, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 11 related to visits to 50
    with equalities
      ((Mem) ('mem')) (@ addr 11)
      = ((Mem) ('Mem')) (@ addr 50)
      ((Word32) ('r0')) (@ addr 11)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 50)
      ((Word32) ('r4')) (@ addr 11)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 50)
    and with invariants
      ((Word32) ('r7')) (@ addr 11)
      ((Word32) ('r8')) (@ addr 11)
      ((Word32) ('r11')) (@ addr 11)
      ((Word32) ('r13')) (@ addr 11)
      ((Word32) ('r9')) (@ addr 11)
      ((Word32) ('ret')) (@ addr 11)
      ((Word32) ('r1')) (@ addr 11)
      ((Word32) ('r10')) (@ addr 11)
      ((Bool) (ROData('mem'))) (@ addr 11)
      ((Word32) ('r5')) (@ addr 11)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 11)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 50)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 11 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 50 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 11 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 50 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cancelAllIPC (ASM) <= Kernel_C.cancelAllIPC (C)), time taken: 41.41s
Testing Function pair Pairing (cpu_initLocalIRQController (ASM) <= Kernel_C.cpu_initLocalIRQController (C))
  (function pairing 241 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cpu_initLocalIRQController (ASM) <= Kernel_C.cpu_initLocalIRQController (C)), time taken: 0.32s
Testing Function pair Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C))
  (function pairing 242 of 284)
Skipping Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C)), underspecified C
Testing Function pair Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C))
  (function pairing 243 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [90, 445]
  (in problem)
Now doing proof search in 90 init case in problem.
Now doing proof search in 90 loop case in problem.
ProofNode ('Split', ((90, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 16)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (445, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nodeWindow___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'cap___struct_cap_C#v.words_C.1'), Expr ('Var', Type ('Word', 32), name = 'objectSize___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v'), Expr ('Var', Type ('Word', 32), name = 'cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'nodeOffset___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'userObjSize___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'newType___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#48#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'destCNode___ptr_to_struct_cte_C#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (90, ('Number', (0, 3))), (ProofNode ('Restr', (445, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (90, ('Offset', (0, 3))), (ProofNode ('Restr', (445, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 90 related to visits to 445
    with equalities
      ((Mem) ('mem')) (@ addr 90)
      = ((Mem) ('Mem')) (@ addr 445)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 16)))) (@ addr 90)
      ((Word32) ('r13')) (@ addr 90)
      ((Word32) ('r10')) (@ addr 90)
      ((Word32) (('r9' + ((0 - '#seq-visits') * 1)))) (@ addr 90)
      ((Word32) ('r6')) (@ addr 90)
      ((Word32) ('r7')) (@ addr 90)
      ((Word32) ('r8')) (@ addr 90)
      ((Word32) ('r11')) (@ addr 90)
      ((Word32) ('r5')) (@ addr 90)
      ((Word32) ('ret')) (@ addr 90)
      ((Bool) (ROData('mem'))) (@ addr 90)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 90)
      ((Word32) ('nodeWindow___unsigned_long#v')) (@ addr 445)
      ((Word32) ('cap___struct_cap_C#v.words_C.1')) (@ addr 445)
      ((Word32) ('objectSize___unsigned_long#v')) (@ addr 445)
      ((Word32) ('slot___ptr_to_struct_cte_C#v')) (@ addr 445)
      ((Word32) ('cap___struct_cap_C#v.words_C.0')) (@ addr 445)
      ((Word32) ('nodeOffset___unsigned_long#v')) (@ addr 445)
      ((Word32) ('userObjSize___unsigned_long#v')) (@ addr 445)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 445)
      ((Word32) ('newType___unsigned_long#v')) (@ addr 445)
      ((Word32) (('loop#48#count' + ((0 - '#seq-visits') * 1)))) (@ addr 445)
      ((Word32) ('destCNode___ptr_to_struct_cte_C#v')) (@ addr 445)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 90 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 445 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 90 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 445 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C)), time taken: 561.19s
Testing Function pair Pairing (Arch_sameObjectAs (ASM) <= Kernel_C.Arch_sameObjectAs (C))
  (function pairing 244 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_sameObjectAs (ASM) <= Kernel_C.Arch_sameObjectAs (C)), time taken: 0.90s
Testing Function pair Pairing (invokeCNodeCancelBadgedSends (ASM) <= Kernel_C.invokeCNodeCancelBadgedSends (C))
  (function pairing 245 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeCancelBadgedSends (ASM) <= Kernel_C.invokeCNodeCancelBadgedSends (C)), time taken: 0.49s
Testing Function pair Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))
  (function pairing 246 of 284)
 .. built problem, finding proof
Discovered that points [35 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (35, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 35 is in {0 ..< 2}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C)), time taken: 2.28s
Testing Function pair Pairing (handleFaultReply (ASM) <= Kernel_C.handleFaultReply (C))
  (function pairing 247 of 284)
 .. built problem, finding proof
Decided to case split at (15, 'ASM')
  (in problem)
Now doing proof search in true case (15 visited) in problem.
Discovered that points [259 (loop head)] can be bounded
  (in true case (15 visited) in problem)
Discovered that points [296 (loop head)] can be bounded
  (in true case (15 visited) in problem)
Discovered that points [243 (loop head)] can be bounded
  (in true case (15 visited) in problem)
Discovered that points [280 (loop head)] can be bounded
  (in true case (15 visited) in problem)
Now doing proof search in false case (15 not visited) in problem.
Decided to case split at (10, 'ASM')
  (in false case (15 not visited) in problem)
Now doing proof search in true case (10 visited) in false case (15 not visited) in problem.
Discovered that points [259 (loop head)] can be bounded
  (in true case (10 visited) in false case (15 not visited) in problem)
Discovered that points [296 (loop head)] can be bounded
  (in true case (10 visited) in false case (15 not visited) in problem)
Discovered that points [243 (loop head)] can be bounded
  (in true case (10 visited) in false case (15 not visited) in problem)
Discovered that points [280 (loop head)] can be bounded
  (in true case (10 visited) in false case (15 not visited) in problem)
Discovered that points [177 (loop head)] can be bounded
  (in true case (10 visited) in false case (15 not visited) in problem)
Discovered that points [193 (loop head)] can be bounded
  (in true case (10 visited) in false case (15 not visited) in problem)
Now doing proof search in false case (10 not visited) in false case (15 not visited) in problem.
Decided to case split at (8, 'ASM')
  (in false case (10 not visited) in false case (15 not visited) in problem)
Now doing proof search in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem.
Discovered that points [296 (loop head)] can be bounded
  (in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [280 (loop head)] can be bounded
  (in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered a loop relation for split points [28, 263]
  (in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem)
Now doing proof search in 28 init case in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem.
Discovered that points [243 (loop head)] can be bounded
  (in 28 init case in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [145 (loop head)] can be bounded
  (in 28 init case in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem)
Now doing proof search in 28 loop case in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem.
Discovered a loop relation for split points [43, 251]
  (in 28 loop case in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem)
Now doing proof search in 43 init case in 28 loop case in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem.
Now doing proof search in 43 loop case in 28 loop case in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem.
Now doing proof search in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem.
Discovered that points [259 (loop head)] can be bounded
  (in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [296 (loop head)] can be bounded
  (in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [243 (loop head)] can be bounded
  (in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [280 (loop head)] can be bounded
  (in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [131 (loop head)] can be bounded
  (in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [145 (loop head)] can be bounded
  (in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [177 (loop head)] can be bounded
  (in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [193 (loop head)] can be bounded
  (in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem)
ProofNode ('CaseSplit', (15, 'ASM'), (ProofNode ('Restr', (15, ('Number', (1, 2))), (ProofNode ('Restr', (259, ('Number', (0, 1))), (ProofNode ('Restr', (296, ('Number', (0, 1))), (ProofNode ('Restr', (243, ('Number', (0, 1))), (ProofNode ('Restr', (280, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (15, ('Number', (0, 1))), (ProofNode ('CaseSplit', (10, 'ASM'), (ProofNode ('Restr', (10, ('Number', (1, 2))), (ProofNode ('Restr', (259, ('Number', (0, 1))), (ProofNode ('Restr', (296, ('Number', (0, 5))), (ProofNode ('Restr', (243, ('Number', (0, 1))), (ProofNode ('Restr', (280, ('Number', (0, 1))), (ProofNode ('Restr', (177, ('Number', (0, 4))), (ProofNode ('Restr', (193, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)), ProofNode ('Restr', (10, ('Number', (0, 1))), (ProofNode ('Restr', (213, ('Number', (0, 1))), (ProofNode ('CaseSplit', (8, 'ASM'), (ProofNode ('Restr', (8, ('Number', (1, 2))), (ProofNode ('Restr', (296, ('Number', (0, 1))), (ProofNode ('Restr', (280, ('Number', (0, 1))), (ProofNode ('Split', ((28, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (263, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'receiver___ptr_to_struct_tcb_C#v.1'), Expr ('Var', Type ('Word', 32), name = 'length___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'archInfo___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'label___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#18#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.1'), Expr ('Var', Type ('Word', 32), name = 'sender___ptr_to_struct_tcb_C#v.1'), Expr ('Var', Type ('Word', 32), name = 'id___anonymous_enum#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (28, ('Number', (0, 3))), (ProofNode ('Restr', (263, ('Number', (0, 4))), (ProofNode ('Restr', (243, ('Number', (0, 1))), (ProofNode ('Restr', (145, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (263, ('Offset', (0, 3))), (ProofNode ('Split', ((43, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (251, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'receiver___ptr_to_struct_tcb_C#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'length___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'archInfo___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'label___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'sendBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.1'), Expr ('Var', Type ('Word', 32), name = 'id___anonymous_enum#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (43, ('Number', (0, 3))), (ProofNode ('Restr', (251, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (43, ('Offset', (0, 3))), (ProofNode ('Restr', (251, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)),)), ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Restr', (211, ('Number', (0, 1))), (ProofNode ('Restr', (259, ('Number', (0, 1))), (ProofNode ('Restr', (296, ('Number', (0, 1))), (ProofNode ('Restr', (243, ('Number', (0, 1))), (ProofNode ('Restr', (280, ('Number', (0, 1))), (ProofNode ('Restr', (131, ('Number', (0, 1))), (ProofNode ('Restr', (145, ('Number', (0, 1))), (ProofNode ('Restr', (177, ('Number', (0, 1))), (ProofNode ('Restr', (193, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)),)),)))),)),)))),))))
 .. proof found.
Step 1: 
  case split on whether 15 is visited
Step 2: case in (1) where 15 is visited
  Prove the number of visits to 15 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 259 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 296 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 243 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 280 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (1) where 15 is not visited
  Prove the number of visits to 15 is in {0 ..< 1}
    .. proven.
Step 9: 
  case split on whether 10 is visited
Step 10: case in (9) where 10 is visited
  Prove the number of visits to 10 is in {1 ..< 2}
    .. proven.
Step 11: 
  Prove the number of visits to 259 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 296 is in {0 ..< 5}
    .. proven.
Step 13: 
  Prove the number of visits to 243 is in {0 ..< 1}
    .. proven.
Step 14: 
  Prove the number of visits to 280 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 177 is in {0 ..< 4}
    .. proven.
Step 16: 
  Prove the number of visits to 193 is in {0 ..< 1}
    .. proven.
Step 17: 
  prove all verification conditions
    .. proven.
Step 18: case in (9) where 10 is not visited
  Prove the number of visits to 10 is in {0 ..< 1}
    .. proven.
Step 19: 
  Prove the number of visits to 213 is in {0 ..< 1}
    .. proven.
Step 20: 
  case split on whether 8 is visited
Step 21: case in (20) where 8 is visited
  Prove the number of visits to 8 is in {1 ..< 2}
    .. proven.
Step 22: 
  Prove the number of visits to 296 is in {0 ..< 1}
    .. proven.
Step 23: 
  Prove the number of visits to 280 is in {0 ..< 1}
    .. proven.
Step 24: 
  prove visits to 28 related to visits [2, 3, 4 ...] to 263
    with equalities
      ((Mem) ('mem')) (@ addr 28)
      = ((Mem) ('Mem.1')) (@ addr 263)
    and with invariants
      ((Word32) ('r4')) (@ addr 28)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 28)
      ((Word32) ('r13')) (@ addr 28)
      ((Word32) ('r10')) (@ addr 28)
      ((Word32) ('r12')) (@ addr 28)
      ((Word32) ('r9')) (@ addr 28)
      ((Word32) ('r6')) (@ addr 28)
      ((Word32) ('r7')) (@ addr 28)
      ((Word32) ('r1')) (@ addr 28)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 4)))) (@ addr 28)
      ((Word32) ('r5')) (@ addr 28)
      ((Word32) ('ret')) (@ addr 28)
      ((Word32) ('r11')) (@ addr 28)
      ((Bool) (ROData('mem'))) (@ addr 28)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 28)
      ((Word32) ('receiver___ptr_to_struct_tcb_C#v.1')) (@ addr 263)
      ((Word32) ('length___unsigned_long#v.1')) (@ addr 263)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 263)
      ((Word32) ('archInfo___unsigned_long#v')) (@ addr 263)
      ((Word32) ('label___unsigned_long#v')) (@ addr 263)
      ((Word32) (('loop#18#count' + ((0 - '#seq-visits') * 1)))) (@ addr 263)
      ((Word32[50]) ('GhostAssertions.1')) (@ addr 263)
      ((Word32) ('sender___ptr_to_struct_tcb_C#v.1')) (@ addr 263)
      ((Word32) ('id___anonymous_enum#v')) (@ addr 263)
    .. proven.
Step 25: case in (24) where the length of the sequence < 2
  Prove the number of visits to 28 is in {0 ..< 3}
    .. proven.
Step 26: 
  Prove the number of visits to 263 is in {0 ..< 4}
    .. proven.
Step 27: 
  Prove the number of visits to 243 is in {0 ..< 1}
    .. proven.
Step 28: 
  Prove the number of visits to 145 is in {0 ..< 1}
    .. proven.
Step 29: 
  prove all verification conditions
    .. proven.
Step 30: case in (24) where the length of the sequence is i + 2
  Prove the number of visits to 28 is in {i + 0 ..< i + 3}
    .. proven.
Step 31: 
  Prove the number of visits to 263 is in {i + 0 ..< i + 3}
    .. proven.
Step 32: 
  prove visits to 43 related to visits to 251
    with equalities
      ((Mem) ('mem')) (@ addr 43)
      = ((Mem) ('Mem.1')) (@ addr 251)
    and with invariants
      ((Word32) ('r7')) (@ addr 43)
      ((Word32) ('r4')) (@ addr 43)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 43)
      ((Word32) ('r5')) (@ addr 43)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 4)))) (@ addr 43)
      ((Word32) ('r9')) (@ addr 43)
      ((Word32) ('ret')) (@ addr 43)
      ((Word32) ('r11')) (@ addr 43)
      ((Word32) ('r13')) (@ addr 43)
      ((Word32) ('r10')) (@ addr 43)
      ((Bool) (ROData('mem'))) (@ addr 43)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 43)
      ((Word32) ('receiver___ptr_to_struct_tcb_C#v.1')) (@ addr 251)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 251)
      ((Word32) ('length___unsigned_long#v.1')) (@ addr 251)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 251)
      ((Word32) ('archInfo___unsigned_long#v')) (@ addr 251)
      ((Word32) ('label___unsigned_long#v')) (@ addr 251)
      ((Word32) ('sendBuf___ptr_to_unsigned_long#v')) (@ addr 251)
      ((Word32[50]) ('GhostAssertions.1')) (@ addr 251)
      ((Word32) ('id___anonymous_enum#v')) (@ addr 251)
    .. proven.
Step 33: case in (32) where the length of the sequence < 2
  Prove the number of visits to 43 is in {0 ..< 3}
    .. proven.
Step 34: 
  Prove the number of visits to 251 is in {0 ..< 3}
    .. proven.
Step 35: 
  prove all verification conditions
    .. proven.
Step 36: case in (32) where the length of the sequence is j + 2
  Prove the number of visits to 43 is in {j + 0 ..< j + 3}
    .. proven.
Step 37: 
  Prove the number of visits to 251 is in {j + 0 ..< j + 3}
    .. proven.
Step 38: 
  prove all verification conditions
    .. proven.
Step 39: case in (20) where 8 is not visited
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 40: 
  Prove the number of visits to 211 is in {0 ..< 1}
    .. proven.
Step 41: 
  Prove the number of visits to 259 is in {0 ..< 1}
    .. proven.
Step 42: 
  Prove the number of visits to 296 is in {0 ..< 1}
    .. proven.
Step 43: 
  Prove the number of visits to 243 is in {0 ..< 1}
    .. proven.
Step 44: 
  Prove the number of visits to 280 is in {0 ..< 1}
    .. proven.
Step 45: 
  Prove the number of visits to 131 is in {0 ..< 1}
    .. proven.
Step 46: 
  Prove the number of visits to 145 is in {0 ..< 1}
    .. proven.
Step 47: 
  Prove the number of visits to 177 is in {0 ..< 1}
    .. proven.
Step 48: 
  Prove the number of visits to 193 is in {0 ..< 1}
    .. proven.
Step 49: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleFaultReply (ASM) <= Kernel_C.handleFaultReply (C)), time taken: 203.34s
Testing Function pair Pairing (doIPCTransfer (ASM) <= Kernel_C.doIPCTransfer (C))
  (function pairing 248 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doIPCTransfer (ASM) <= Kernel_C.doIPCTransfer (C)), time taken: 1.59s
Testing Function pair Pairing (capSwapForDelete (ASM) <= Kernel_C.capSwapForDelete (C))
  (function pairing 249 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (capSwapForDelete (ASM) <= Kernel_C.capSwapForDelete (C)), time taken: 1.03s
Testing Function pair Pairing (create_bi_frame_cap (ASM) <= Kernel_C.create_bi_frame_cap (C))
  (function pairing 250 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_bi_frame_cap (ASM) <= Kernel_C.create_bi_frame_cap (C)), time taken: 3.09s
Testing Function pair Pairing (setMCPriority (ASM) <= Kernel_C.setMCPriority (C))
  (function pairing 251 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setMCPriority (ASM) <= Kernel_C.setMCPriority (C)), time taken: 0.32s
Testing Function pair Pairing (cancelAllSignals (ASM) <= Kernel_C.cancelAllSignals (C))
  (function pairing 252 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [11, 51]
  (in problem)
Now doing proof search in 11 init case in problem.
Now doing proof search in 11 loop case in problem.
ProofNode ('Split', ((11, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (51, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'))], 2, 1), (ProofNode ('Restr', (11, ('Number', (0, 3))), (ProofNode ('Restr', (51, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Restr', (51, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 11 related to visits to 51
    with equalities
      ((Mem) ('mem')) (@ addr 11)
      = ((Mem) ('Mem')) (@ addr 51)
      ((Word32) ('r0')) (@ addr 11)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 51)
      ((Word32) ('r4')) (@ addr 11)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 51)
    and with invariants
      ((Word32) ('r7')) (@ addr 11)
      ((Word32) ('r8')) (@ addr 11)
      ((Word32) ('r11')) (@ addr 11)
      ((Word32) ('r13')) (@ addr 11)
      ((Word32) ('r9')) (@ addr 11)
      ((Word32) ('ret')) (@ addr 11)
      ((Word32) ('r1')) (@ addr 11)
      ((Word32) ('r10')) (@ addr 11)
      ((Bool) (ROData('mem'))) (@ addr 11)
      ((Word32) ('r5')) (@ addr 11)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 11)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 51)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 11 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 51 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 11 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 51 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cancelAllSignals (ASM) <= Kernel_C.cancelAllSignals (C)), time taken: 40.84s
Testing Function pair Pairing (slotCapLongRunningDelete (ASM) <= Kernel_C.slotCapLongRunningDelete (C))
  (function pairing 253 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (slotCapLongRunningDelete (ASM) <= Kernel_C.slotCapLongRunningDelete (C)), time taken: 0.46s
Testing Function pair Pairing (l_impl'wfi (ASM) <= r_impl'wfi (C))
  (function pairing 254 of 284)
Skipping Pairing (l_impl'wfi (ASM) <= r_impl'wfi (C)), underspecified C
Testing Function pair Pairing (unbindNotification (ASM) <= Kernel_C.unbindNotification (C))
  (function pairing 255 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (unbindNotification (ASM) <= Kernel_C.unbindNotification (C)), time taken: 0.35s
Testing Function pair Pairing (setVMRootForFlush (ASM) <= Kernel_C.setVMRootForFlush (C))
  (function pairing 256 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setVMRootForFlush (ASM) <= Kernel_C.setVMRootForFlush (C)), time taken: 0.80s
Testing Function pair Pairing (Arch_activateIdleThread (ASM) <= Kernel_C.Arch_activateIdleThread (C))
  (function pairing 257 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_activateIdleThread (ASM) <= Kernel_C.Arch_activateIdleThread (C)), time taken: 0.30s
Testing Function pair Pairing (unmapPage (ASM) <= Kernel_C.unmapPage (C))
  (function pairing 258 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [48, 223]
  (in problem)
Now doing proof search in 48 init case in problem.
Discovered a loop relation for split points [70, 269]
  (in 48 init case in problem)
Now doing proof search in 70 init case in 48 init case in problem.
Now doing proof search in 70 loop case in 48 init case in problem.
Now doing proof search in 48 loop case in problem.
ProofNode ('Split', ((48, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (223, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#26#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'ret__struct_pte_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'find_ret___struct_findPDForASID_ret_C#v.pd_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'page_size___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C'), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'vptr___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (48, ('Number', (0, 1))), (ProofNode ('Restr', (223, ('Number', (0, 1))), (ProofNode ('Split', ((70, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (269, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#72#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'pd___ptr_to_struct_pde_C#v'), Expr ('Var', Type ('Word', 32), name = 'find_ret___struct_findPDForASID_ret_C#v.pd_C'), Expr ('Var', Type ('Word', 32), name = 'page_size___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'ret__struct_pde_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'vptr___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (70, ('Number', (0, 1))), (ProofNode ('Restr', (269, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (70, ('Offset', (0, 3))), (ProofNode ('Restr', (269, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (48, ('Offset', (0, 3))), (ProofNode ('Restr', (223, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 48 related to visits to 223
    with equalities
      ((Mem) ('mem')) (@ addr 48)
      = ((Mem) ('Mem')) (@ addr 223)
    and with invariants
      ((Word32) ('r4')) (@ addr 48)
      ((Word32) ('r0')) (@ addr 48)
      ((Word32) ('r13')) (@ addr 48)
      ((Word32) ('r10')) (@ addr 48)
      ((Word32) ('r12')) (@ addr 48)
      ((Word32) ('r9')) (@ addr 48)
      ((Word32) ('r6')) (@ addr 48)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 48)
      ((Word32) ('r5')) (@ addr 48)
      ((Word32) ('r7')) (@ addr 48)
      ((Word32) ('ret')) (@ addr 48)
      ((Word32) ('r11')) (@ addr 48)
      ((Word32) ('r2')) (@ addr 48)
      ((Bool) (ROData('mem'))) (@ addr 48)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 48)
      ((Word32) (('loop#26#count' + ((0 - '#seq-visits') * 1)))) (@ addr 223)
      ((Word32) ('ret__struct_pte_C#v.words_C.0')) (@ addr 223)
      ((Word32) ('find_ret___struct_findPDForASID_ret_C#v.pd_C')) (@ addr 223)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 223)
      ((Word32) ('page_size___unsigned_long#v')) (@ addr 223)
      ((Word32) ('lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C')) (@ addr 223)
      ((Word32) ('asid___unsigned_long#v')) (@ addr 223)
      ((Word32[50]) ('GhostAssertions')) (@ addr 223)
      ((Word32) ('vptr___unsigned_long#v')) (@ addr 223)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 48 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 223 is in {0 ..< 1}
    .. proven.
Step 4: 
  prove visits to 70 related to visits to 269
    with equalities
      ((Mem) ('mem')) (@ addr 70)
      = ((Mem) ('Mem')) (@ addr 269)
    and with invariants
      ((Word32) ('r4')) (@ addr 70)
      ((Word32) ('r0')) (@ addr 70)
      ((Word32) ('r13')) (@ addr 70)
      ((Word32) ('r10')) (@ addr 70)
      ((Word32) ('r12')) (@ addr 70)
      ((Word32) ('r9')) (@ addr 70)
      ((Word32) ('r6')) (@ addr 70)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 70)
      ((Word32) ('r5')) (@ addr 70)
      ((Word32) ('r7')) (@ addr 70)
      ((Word32) ('ret')) (@ addr 70)
      ((Word32) ('r11')) (@ addr 70)
      ((Word32) ('r2')) (@ addr 70)
      ((Bool) (ROData('mem'))) (@ addr 70)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 70)
      ((Word32) (('loop#72#count' + ((0 - '#seq-visits') * 1)))) (@ addr 269)
      ((Word32) ('pd___ptr_to_struct_pde_C#v')) (@ addr 269)
      ((Word32) ('find_ret___struct_findPDForASID_ret_C#v.pd_C')) (@ addr 269)
      ((Word32) ('page_size___unsigned_long#v')) (@ addr 269)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 269)
      ((Word32) ('asid___unsigned_long#v')) (@ addr 269)
      ((Word32[50]) ('GhostAssertions')) (@ addr 269)
      ((Word32) ('ret__struct_pde_C#v.words_C.0')) (@ addr 269)
      ((Word32) ('vptr___unsigned_long#v')) (@ addr 269)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 70 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 269 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 70 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 269 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 48 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 223 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (unmapPage (ASM) <= Kernel_C.unmapPage (C)), time taken: 77.76s
Testing Function pair Pairing (lookupSourceSlot (ASM) <= Kernel_C.lookupSourceSlot (C))
  (function pairing 259 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupSourceSlot (ASM) <= Kernel_C.lookupSourceSlot (C)), time taken: 1.22s
Testing Function pair Pairing (invokeIRQHandler_ClearIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_ClearIRQHandler (C))
  (function pairing 260 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeIRQHandler_ClearIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_ClearIRQHandler (C)), time taken: 0.35s
Testing Function pair Pairing (handleInterrupt (ASM) <= Kernel_C.handleInterrupt (C))
  (function pairing 261 of 284)
 .. built problem, finding proof
Decided to case split at (10, 'ASM')
  (in problem)
Now doing proof search in true case (10 visited) in problem.
Now doing proof search in false case (10 not visited) in problem.
ProofNode ('CaseSplit', (10, 'ASM'), (ProofNode ('Restr', (10, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (10, ('Number', (0, 1))), (ProofNode ('Restr', (142, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 10 is visited
Step 2: case in (1) where 10 is visited
  Prove the number of visits to 10 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 10 is not visited
  Prove the number of visits to 10 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 142 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleInterrupt (ASM) <= Kernel_C.handleInterrupt (C)), time taken: 12.31s
Testing Function pair Pairing (Arch_postModifyRegisters (ASM) <= Kernel_C.Arch_postModifyRegisters (C))
  (function pairing 262 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_postModifyRegisters (ASM) <= Kernel_C.Arch_postModifyRegisters (C)), time taken: 0.30s
Testing Function pair Pairing (invalidateASIDEntry (ASM) <= Kernel_C.invalidateASIDEntry (C))
  (function pairing 263 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invalidateASIDEntry (ASM) <= Kernel_C.invalidateASIDEntry (C)), time taken: 0.43s
Testing Function pair Pairing (makeUserPDE (ASM) <= Kernel_C.makeUserPDE (C))
  (function pairing 264 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (makeUserPDE (ASM) <= Kernel_C.makeUserPDE (C)), time taken: 0.62s
Testing Function pair Pairing (invokeTCB_Resume (ASM) <= Kernel_C.invokeTCB_Resume (C))
  (function pairing 265 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_Resume (ASM) <= Kernel_C.invokeTCB_Resume (C)), time taken: 0.33s
Testing Function pair Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C))
  (function pairing 266 of 284)
 .. built problem, finding proof
Decided to case split at (14, 'ASM')
  (in problem)
Now doing proof search in true case (14 visited) in problem.
Now doing proof search in false case (14 not visited) in problem.
Decided to case split at (52, 'ASM')
  (in false case (14 not visited) in problem)
Now doing proof search in true case (52 visited) in false case (14 not visited) in problem.
Now doing proof search in false case (52 not visited) in false case (14 not visited) in problem.
Decided to case split at (15, 'ASM')
  (in false case (52 not visited) in false case (14 not visited) in problem)
Now doing proof search in true case (15 visited) in false case (52 not visited) in false case (14 not visited) in problem.
Now doing proof search in false case (15 not visited) in false case (52 not visited) in false case (14 not visited) in problem.
ProofNode ('CaseSplit', (14, 'ASM'), (ProofNode ('Restr', (14, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (14, ('Number', (0, 1))), (ProofNode ('Restr', (176, ('Number', (0, 1))), (ProofNode ('CaseSplit', (52, 'ASM'), (ProofNode ('Restr', (52, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (52, ('Number', (0, 1))), (ProofNode ('CaseSplit', (15, 'ASM'), (ProofNode ('Restr', (15, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (15, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)))),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 14 is visited
Step 2: case in (1) where 14 is visited
  Prove the number of visits to 14 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 14 is not visited
  Prove the number of visits to 14 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 176 is in {0 ..< 1}
    .. proven.
Step 6: 
  case split on whether 52 is visited
Step 7: case in (6) where 52 is visited
  Prove the number of visits to 52 is in {1 ..< 2}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Step 9: case in (6) where 52 is not visited
  Prove the number of visits to 52 is in {0 ..< 1}
    .. proven.
Step 10: 
  case split on whether 15 is visited
Step 11: case in (10) where 15 is visited
  Prove the number of visits to 15 is in {1 ..< 2}
    .. proven.
Step 12: 
  prove all verification conditions
    .. proven.
Step 13: case in (10) where 15 is not visited
  Prove the number of visits to 15 is in {0 ..< 1}
    .. proven.
Step 14: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C)), time taken: 48.21s
Testing Function pair Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C))
  (function pairing 267 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [78, 271]
  (in problem)
Now doing proof search in 78 init case in problem.
Now doing proof search in 78 loop case in problem.
ProofNode ('Split', ((78, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (271, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v.1'), Expr ('Var', Type ('Word', 32), name = 'immediate___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'exposed___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#9#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (78, ('Number', (0, 3))), (ProofNode ('Restr', (271, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (78, ('Offset', (0, 3))), (ProofNode ('Restr', (271, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 78 related to visits to 271
    with equalities
      ((Mem) ('mem')) (@ addr 78)
      = ((Mem) ('Mem.1')) (@ addr 271)
    and with invariants
      ((Word32) ('r4')) (@ addr 78)
      ((Word32) ('r11')) (@ addr 78)
      ((Word32) ('r5')) (@ addr 78)
      ((Bool) (ROData('mem'))) (@ addr 78)
      ((Word32) ('ret')) (@ addr 78)
      ((Word32) ('r7')) (@ addr 78)
      ((Word32) ('r13')) (@ addr 78)
      ((Word32) ('r6')) (@ addr 78)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0))), ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 78)
      ((Word32) ('slot___ptr_to_struct_cte_C#v.1')) (@ addr 271)
      ((Word32) ('immediate___unsigned_long#v')) (@ addr 271)
      ((Word32) ('exposed___unsigned_long#v')) (@ addr 271)
      ((Word32) ('slot___ptr_to_struct_cte_C#v')) (@ addr 271)
      ((Word32) (('loop#9#count' + ((0 - '#seq-visits') * 1)))) (@ addr 271)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 78 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 271 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 78 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 271 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C)), time taken: 1302.14s
Testing Function pair Pairing (dist_init (ASM) <= Kernel_C.dist_init (C))
  (function pairing 268 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [5, 190]
  (in problem)
Now doing proof search in 5 init case in problem.
Discovered a loop relation for split points [11, 181]
  (in 5 init case in problem)
Now doing proof search in 11 init case in 5 init case in problem.
Discovered a loop relation for split points [79, 209]
  (in 11 init case in 5 init case in problem)
Now doing proof search in 79 init case in 11 init case in 5 init case in problem.
Discovered a loop relation for split points [23, 167]
  (in 79 init case in 11 init case in 5 init case in problem)
Now doing proof search in 23 init case in 79 init case in 11 init case in 5 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 init case in 5 init case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 init case in 5 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 init case in 5 init case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 init case in 5 init case in problem)
Now doing proof search in 23 loop case in 79 init case in 11 init case in 5 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 loop case in 79 init case in 11 init case in 5 init case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 23 loop case in 79 init case in 11 init case in 5 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 loop case in 79 init case in 11 init case in 5 init case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 23 loop case in 79 init case in 11 init case in 5 init case in problem)
Now doing proof search in 79 loop case in 11 init case in 5 init case in problem.
Discovered a loop relation for split points [23, 167]
  (in 79 loop case in 11 init case in 5 init case in problem)
Now doing proof search in 23 init case in 79 loop case in 11 init case in 5 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 init case in 5 init case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 init case in 5 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 init case in 5 init case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 init case in 5 init case in problem)
Now doing proof search in 23 loop case in 79 loop case in 11 init case in 5 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 loop case in 79 loop case in 11 init case in 5 init case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 23 loop case in 79 loop case in 11 init case in 5 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 loop case in 79 loop case in 11 init case in 5 init case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 23 loop case in 79 loop case in 11 init case in 5 init case in problem)
Now doing proof search in 11 loop case in 5 init case in problem.
Discovered a loop relation for split points [79, 209]
  (in 11 loop case in 5 init case in problem)
Now doing proof search in 79 init case in 11 loop case in 5 init case in problem.
Discovered a loop relation for split points [23, 167]
  (in 79 init case in 11 loop case in 5 init case in problem)
Now doing proof search in 23 init case in 79 init case in 11 loop case in 5 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 loop case in 5 init case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 loop case in 5 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 loop case in 5 init case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 loop case in 5 init case in problem)
Now doing proof search in 23 loop case in 79 init case in 11 loop case in 5 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 loop case in 79 init case in 11 loop case in 5 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 loop case in 79 init case in 11 loop case in 5 init case in problem)
Discovered a loop relation for split points [31, 152]
  (in 23 loop case in 79 init case in 11 loop case in 5 init case in problem)
Now doing proof search in 31 init case in 23 loop case in 79 init case in 11 loop case in 5 init case in problem.
Now doing proof search in 31 loop case in 23 loop case in 79 init case in 11 loop case in 5 init case in problem.
Now doing proof search in 79 loop case in 11 loop case in 5 init case in problem.
Discovered a loop relation for split points [23, 167]
  (in 79 loop case in 11 loop case in 5 init case in problem)
Now doing proof search in 23 init case in 79 loop case in 11 loop case in 5 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 loop case in 5 init case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 loop case in 5 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 loop case in 5 init case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 loop case in 5 init case in problem)
Now doing proof search in 23 loop case in 79 loop case in 11 loop case in 5 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 loop case in 79 loop case in 11 loop case in 5 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 loop case in 79 loop case in 11 loop case in 5 init case in problem)
Discovered a loop relation for split points [31, 152]
  (in 23 loop case in 79 loop case in 11 loop case in 5 init case in problem)
Now doing proof search in 31 init case in 23 loop case in 79 loop case in 11 loop case in 5 init case in problem.
Now doing proof search in 31 loop case in 23 loop case in 79 loop case in 11 loop case in 5 init case in problem.
Now doing proof search in 5 loop case in problem.
Discovered a loop relation for split points [11, 181]
  (in 5 loop case in problem)
Now doing proof search in 11 init case in 5 loop case in problem.
Discovered that points [210 (loop head)] can be bounded
  (in 11 init case in 5 loop case in problem)
Discovered that points [163 (loop head)] can be bounded
  (in 11 init case in 5 loop case in problem)
Discovered that points [155 (loop head)] can be bounded
  (in 11 init case in 5 loop case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 11 init case in 5 loop case in problem)
Discovered that points [79 (loop head)] can be bounded
  (in 11 init case in 5 loop case in problem)
Discovered that points [99 (loop head)] can be bounded
  (in 11 init case in 5 loop case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 11 init case in 5 loop case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 11 init case in 5 loop case in problem)
Now doing proof search in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [79, 209]
  (in 11 loop case in 5 loop case in problem)
Now doing proof search in 79 init case in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [23, 167]
  (in 79 init case in 11 loop case in 5 loop case in problem)
Now doing proof search in 23 init case in 79 init case in 11 loop case in 5 loop case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 loop case in 5 loop case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 loop case in 5 loop case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 loop case in 5 loop case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 loop case in 5 loop case in problem)
Now doing proof search in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [28, 159]
  (in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem)
Now doing proof search in 28 init case in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [31, 152]
  (in 28 init case in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem)
Now doing proof search in 31 init case in 28 init case in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem.
Now doing proof search in 31 loop case in 28 init case in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem.
Now doing proof search in 28 loop case in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [31, 152]
  (in 28 loop case in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem)
Now doing proof search in 31 init case in 28 loop case in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem.
Now doing proof search in 31 loop case in 28 loop case in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem.
Now doing proof search in 79 loop case in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [23, 167]
  (in 79 loop case in 11 loop case in 5 loop case in problem)
Now doing proof search in 23 init case in 79 loop case in 11 loop case in 5 loop case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 loop case in 5 loop case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 loop case in 5 loop case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 loop case in 5 loop case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 loop case in 5 loop case in problem)
Now doing proof search in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [28, 159]
  (in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem)
Now doing proof search in 28 init case in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [31, 152]
  (in 28 init case in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem)
Now doing proof search in 31 init case in 28 init case in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem.
Now doing proof search in 31 loop case in 28 init case in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem.
Now doing proof search in 28 loop case in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [31, 152]
  (in 28 loop case in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem)
Now doing proof search in 31 init case in 28 loop case in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem.
Now doing proof search in 31 loop case in 28 loop case in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem.
ProofNode ('Split', ((5, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (190, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#44#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (5, ('Number', (0, 3))), (ProofNode ('Restr', (190, ('Number', (0, 3))), (ProofNode ('Split', ((11, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (181, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#33#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (11, ('Number', (0, 1))), (ProofNode ('Restr', (181, ('Number', (0, 1))), (ProofNode ('Split', ((79, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (209, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v.1'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])])]), [], 2, 1), (ProofNode ('Restr', (79, ('Number', (0, 3))), (ProofNode ('Restr', (209, ('Number', (0, 3))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (167, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 1))), (ProofNode ('Restr', (167, ('Number', (0, 1))), (ProofNode ('Restr', (155, ('Number', (0, 1))), (ProofNode ('Restr', (144, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (167, ('Offset', (0, 3))), (ProofNode ('Restr', (155, ('Number', (0, 2))), (ProofNode ('Restr', (144, ('Number', (0, 3))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)))),)),)), ProofNode ('Restr', (79, ('Offset', (0, 3))), (ProofNode ('Restr', (209, ('Offset', (0, 3))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (167, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 1))), (ProofNode ('Restr', (167, ('Number', (0, 1))), (ProofNode ('Restr', (155, ('Number', (0, 1))), (ProofNode ('Restr', (144, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (167, ('Offset', (0, 3))), (ProofNode ('Restr', (155, ('Number', (0, 2))), (ProofNode ('Restr', (144, ('Number', (0, 3))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)))),)),)))),)),)), ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Restr', (181, ('Offset', (0, 3))), (ProofNode ('Split', ((79, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (209, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v.1'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])])]), [], 2, 1), (ProofNode ('Restr', (79, ('Number', (0, 3))), (ProofNode ('Restr', (209, ('Number', (0, 3))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (167, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 1))), (ProofNode ('Restr', (167, ('Number', (0, 1))), (ProofNode ('Restr', (155, ('Number', (0, 1))), (ProofNode ('Restr', (144, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (167, ('Offset', (0, 3))), (ProofNode ('Restr', (155, ('Number', (0, 2))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Split', ((31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (152, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (31, ('Number', (0, 3))), (ProofNode ('Restr', (152, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Restr', (152, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)))),)),)), ProofNode ('Restr', (79, ('Offset', (0, 3))), (ProofNode ('Restr', (209, ('Offset', (0, 3))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (167, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 1))), (ProofNode ('Restr', (167, ('Number', (0, 1))), (ProofNode ('Restr', (155, ('Number', (0, 1))), (ProofNode ('Restr', (144, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (167, ('Offset', (0, 3))), (ProofNode ('Restr', (155, ('Number', (0, 2))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Split', ((31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (152, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (31, ('Number', (0, 3))), (ProofNode ('Restr', (152, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Restr', (152, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)))),)),)))),)),)))),)),)), ProofNode ('Restr', (5, ('Offset', (0, 3))), (ProofNode ('Restr', (190, ('Offset', (0, 3))), (ProofNode ('Split', ((11, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (181, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#33#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (11, ('Number', (0, 1))), (ProofNode ('Restr', (181, ('Number', (0, 1))), (ProofNode ('Restr', (210, ('Number', (0, 1))), (ProofNode ('Restr', (163, ('Number', (0, 1))), (ProofNode ('Restr', (155, ('Number', (0, 1))), (ProofNode ('Restr', (144, ('Number', (0, 1))), (ProofNode ('Restr', (79, ('Number', (0, 1))), (ProofNode ('Restr', (99, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)),)),)), ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Restr', (181, ('Offset', (0, 3))), (ProofNode ('Split', ((79, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (209, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v.1'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])])]), [], 2, 1), (ProofNode ('Restr', (79, ('Number', (0, 3))), (ProofNode ('Restr', (209, ('Number', (0, 3))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (167, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 1))), (ProofNode ('Restr', (167, ('Number', (0, 1))), (ProofNode ('Restr', (155, ('Number', (0, 1))), (ProofNode ('Restr', (144, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (167, ('Offset', (0, 3))), (ProofNode ('Split', ((28, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (159, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#15#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (28, ('Number', (0, 3))), (ProofNode ('Restr', (159, ('Number', (0, 3))), (ProofNode ('Split', ((31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (152, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (31, ('Number', (0, 3))), (ProofNode ('Restr', (152, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Restr', (152, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (159, ('Offset', (0, 3))), (ProofNode ('Split', ((31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (152, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (31, ('Number', (0, 1))), (ProofNode ('Restr', (152, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Restr', (152, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)), ProofNode ('Restr', (79, ('Offset', (0, 3))), (ProofNode ('Restr', (209, ('Offset', (0, 3))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (167, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 1))), (ProofNode ('Restr', (167, ('Number', (0, 1))), (ProofNode ('Restr', (155, ('Number', (0, 1))), (ProofNode ('Restr', (144, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (167, ('Offset', (0, 3))), (ProofNode ('Split', ((28, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (159, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#15#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (28, ('Number', (0, 3))), (ProofNode ('Restr', (159, ('Number', (0, 3))), (ProofNode ('Split', ((31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (152, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (31, ('Number', (0, 3))), (ProofNode ('Restr', (152, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Restr', (152, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (159, ('Offset', (0, 3))), (ProofNode ('Split', ((31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (152, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (31, ('Number', (0, 1))), (ProofNode ('Restr', (152, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Restr', (152, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 5 related to visits to 190
    with equalities
      ((Mem) ('mem')) (@ addr 5)
      = ((Mem) ('Mem')) (@ addr 190)
    and with invariants
      ((Word32) ('r7')) (@ addr 5)
      ((Word32) ('r4')) (@ addr 5)
      ((Word32) ('r8')) (@ addr 5)
      ((Word32) ('r14')) (@ addr 5)
      ((Word32) ('r5')) (@ addr 5)
      ((Word32) ('r0')) (@ addr 5)
      ((Word32) ('r9')) (@ addr 5)
      ((Word32) ('ret')) (@ addr 5)
      ((Word32) ('r2')) (@ addr 5)
      ((Word32) ('r11')) (@ addr 5)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 5)
      ((Word32) ('r13')) (@ addr 5)
      ((Word32) ('r10')) (@ addr 5)
      ((Bool) (ROData('mem'))) (@ addr 5)
      ((Word32) ('r6')) (@ addr 5)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 5)
      ((Word32) ('nirqs___int#v')) (@ addr 190)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 190)
      ((Word32) (('loop#44#count' + ((0 - '#seq-visits') * 1)))) (@ addr 190)
      ((Word32[50]) ('GhostAssertions')) (@ addr 190)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 5 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 190 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove visits to 11 related to visits to 181
    with equalities
      ((Mem) ('mem')) (@ addr 11)
      = ((Mem) ('Mem')) (@ addr 181)
    and with invariants
      ((Word32) ('r7')) (@ addr 11)
      ((Word32) ('r4')) (@ addr 11)
      ((Word32) ('r8')) (@ addr 11)
      ((Word32) ('r14')) (@ addr 11)
      ((Word32) ('r5')) (@ addr 11)
      ((Word32) ('r0')) (@ addr 11)
      ((Word32) ('r9')) (@ addr 11)
      ((Word32) ('ret')) (@ addr 11)
      ((Word32) ('r2')) (@ addr 11)
      ((Word32) ('r11')) (@ addr 11)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 11)
      ((Word32) ('r12')) (@ addr 11)
      ((Word32) ('r13')) (@ addr 11)
      ((Word32) ('r10')) (@ addr 11)
      ((Bool) (ROData('mem'))) (@ addr 11)
      ((Word32) ('r6')) (@ addr 11)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 11)
      ((Word32) ('nirqs___int#v')) (@ addr 181)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 181)
      ((Word32) (('loop#33#count' + ((0 - '#seq-visits') * 1)))) (@ addr 181)
      ((Word32[50]) ('GhostAssertions')) (@ addr 181)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 11 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 181 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove visits to 79 related to visits to 209
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 79)
      ((Word32) ('r4')) (@ addr 79)
      ((Word32) ('r8')) (@ addr 79)
      ((Word32) ('r14')) (@ addr 79)
      ((Word32) ('r5')) (@ addr 79)
      ((Word32) ('r0')) (@ addr 79)
      ((Word32) ('r9')) (@ addr 79)
      ((Word32) ('ret')) (@ addr 79)
      ((Word32) ('r2')) (@ addr 79)
      ((Word32) ('r11')) (@ addr 79)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 79)
      ((Word32) ('r13')) (@ addr 79)
      ((Word32) ('r10')) (@ addr 79)
      ((Mem) ('mem')) (@ addr 79)
      ((Word32) ('r6')) (@ addr 79)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 79)
      ((Word32) ('nirqs___int#v.1')) (@ addr 209)
      ((Word32) ('nirqs___int#v')) (@ addr 209)
      ((Mem) ('Mem.1')) (@ addr 209)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 209)
      ((Mem) ('Mem')) (@ addr 209)
      ((Word32[50]) ('GhostAssertions')) (@ addr 209)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 209)
    .. proven.
Step 8: case in (7) where the length of the sequence < 2
  Prove the number of visits to 79 is in {0 ..< 3}
    .. proven.
Step 9: 
  Prove the number of visits to 209 is in {0 ..< 3}
    .. proven.
Step 10: 
  prove visits to 23 related to visits to 167
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 167)
    and with invariants
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r3')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r12')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Word8) ('target___unsigned_char#v')) (@ addr 167)
      ((Word32) ('nirqs___int#v')) (@ addr 167)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 167)
      ((Word32[50]) ('GhostAssertions')) (@ addr 167)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 167)
    .. proven.
Step 11: case in (10) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 167 is in {0 ..< 1}
    .. proven.
Step 13: 
  Prove the number of visits to 155 is in {0 ..< 1}
    .. proven.
Step 14: 
  Prove the number of visits to 144 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 16: 
  Prove the number of visits to 124 is in {0 ..< 1}
    .. proven.
Step 17: 
  prove all verification conditions
    .. proven.
Step 18: case in (10) where the length of the sequence is a + 2
  Prove the number of visits to 23 is in {a + 0 ..< a + 3}
    .. proven.
Step 19: 
  Prove the number of visits to 167 is in {a + 0 ..< a + 3}
    .. proven.
Step 20: 
  Prove the number of visits to 155 is in {0 ..< 2}
    .. proven.
Step 21: 
  Prove the number of visits to 144 is in {0 ..< 3}
    .. proven.
Step 22: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 23: 
  Prove the number of visits to 124 is in {0 ..< 2}
    .. proven.
Step 24: 
  prove all verification conditions
    .. proven.
Step 25: case in (7) where the length of the sequence is k + 2
  Prove the number of visits to 79 is in {k + 0 ..< k + 3}
    .. proven.
Step 26: 
  Prove the number of visits to 209 is in {k + 0 ..< k + 3}
    .. proven.
Step 27: 
  prove visits to 23 related to visits to 167
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 167)
    and with invariants
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r3')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r12')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Word8) ('target___unsigned_char#v')) (@ addr 167)
      ((Word32) ('nirqs___int#v')) (@ addr 167)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 167)
      ((Word32[50]) ('GhostAssertions')) (@ addr 167)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 167)
    .. proven.
Step 28: case in (27) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 1}
    .. proven.
Step 29: 
  Prove the number of visits to 167 is in {0 ..< 1}
    .. proven.
Step 30: 
  Prove the number of visits to 155 is in {0 ..< 1}
    .. proven.
Step 31: 
  Prove the number of visits to 144 is in {0 ..< 1}
    .. proven.
Step 32: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 33: 
  Prove the number of visits to 124 is in {0 ..< 1}
    .. proven.
Step 34: 
  prove all verification conditions
    .. proven.
Step 35: case in (27) where the length of the sequence is b + 2
  Prove the number of visits to 23 is in {b + 0 ..< b + 3}
    .. proven.
Step 36: 
  Prove the number of visits to 167 is in {b + 0 ..< b + 3}
    .. proven.
Step 37: 
  Prove the number of visits to 155 is in {0 ..< 2}
    .. proven.
Step 38: 
  Prove the number of visits to 144 is in {0 ..< 3}
    .. proven.
Step 39: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 40: 
  Prove the number of visits to 124 is in {0 ..< 2}
    .. proven.
Step 41: 
  prove all verification conditions
    .. proven.
Step 42: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 11 is in {j + 0 ..< j + 3}
    .. proven.
Step 43: 
  Prove the number of visits to 181 is in {j + 0 ..< j + 3}
    .. proven.
Step 44: 
  prove visits to 79 related to visits to 209
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 79)
      ((Word32) ('r4')) (@ addr 79)
      ((Word32) ('r8')) (@ addr 79)
      ((Word32) ('r14')) (@ addr 79)
      ((Word32) ('r5')) (@ addr 79)
      ((Word32) ('r0')) (@ addr 79)
      ((Word32) ('r9')) (@ addr 79)
      ((Word32) ('ret')) (@ addr 79)
      ((Word32) ('r2')) (@ addr 79)
      ((Word32) ('r11')) (@ addr 79)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 79)
      ((Word32) ('r13')) (@ addr 79)
      ((Word32) ('r10')) (@ addr 79)
      ((Mem) ('mem')) (@ addr 79)
      ((Word32) ('r6')) (@ addr 79)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 79)
      ((Word32) ('nirqs___int#v.1')) (@ addr 209)
      ((Word32) ('nirqs___int#v')) (@ addr 209)
      ((Mem) ('Mem.1')) (@ addr 209)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 209)
      ((Mem) ('Mem')) (@ addr 209)
      ((Word32[50]) ('GhostAssertions')) (@ addr 209)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 209)
    .. proven.
Step 45: case in (44) where the length of the sequence < 2
  Prove the number of visits to 79 is in {0 ..< 3}
    .. proven.
Step 46: 
  Prove the number of visits to 209 is in {0 ..< 3}
    .. proven.
Step 47: 
  prove visits to 23 related to visits to 167
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 167)
    and with invariants
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r3')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r12')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Word8) ('target___unsigned_char#v')) (@ addr 167)
      ((Word32) ('nirqs___int#v')) (@ addr 167)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 167)
      ((Word32[50]) ('GhostAssertions')) (@ addr 167)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 167)
    .. proven.
Step 48: case in (47) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 1}
    .. proven.
Step 49: 
  Prove the number of visits to 167 is in {0 ..< 1}
    .. proven.
Step 50: 
  Prove the number of visits to 155 is in {0 ..< 1}
    .. proven.
Step 51: 
  Prove the number of visits to 144 is in {0 ..< 1}
    .. proven.
Step 52: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 53: 
  Prove the number of visits to 124 is in {0 ..< 1}
    .. proven.
Step 54: 
  prove all verification conditions
    .. proven.
Step 55: case in (47) where the length of the sequence is i2 + 2
  Prove the number of visits to 23 is in {i2 + 0 ..< i2 + 3}
    .. proven.
Step 56: 
  Prove the number of visits to 167 is in {i2 + 0 ..< i2 + 3}
    .. proven.
Step 57: 
  Prove the number of visits to 155 is in {0 ..< 2}
    .. proven.
Step 58: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 59: 
  prove visits to 31 related to visits to 152
    with equalities
      ((Mem) ('mem')) (@ addr 31)
      = ((Mem) ('Mem')) (@ addr 152)
    and with invariants
      ((Word32) ('r7')) (@ addr 31)
      ((Word32) ('r4')) (@ addr 31)
      ((Word32) ('r8')) (@ addr 31)
      ((Word32) ('r14')) (@ addr 31)
      ((Word32) ('r5')) (@ addr 31)
      ((Word32) ('r0')) (@ addr 31)
      ((Word32) ('r9')) (@ addr 31)
      ((Word32) ('ret')) (@ addr 31)
      ((Word32) ('r2')) (@ addr 31)
      ((Word32) ('r11')) (@ addr 31)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 31)
      ((Word32) ('r12')) (@ addr 31)
      ((Word32) ('r13')) (@ addr 31)
      ((Word32) ('r10')) (@ addr 31)
      ((Bool) (ROData('mem'))) (@ addr 31)
      ((Word32) ('r6')) (@ addr 31)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 31)
      ((Word32) ('nirqs___int#v')) (@ addr 152)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 152)
      ((Word32[50]) ('GhostAssertions')) (@ addr 152)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 152)
    .. proven.
Step 60: case in (59) where the length of the sequence < 2
  Prove the number of visits to 31 is in {0 ..< 3}
    .. proven.
Step 61: 
  Prove the number of visits to 152 is in {0 ..< 3}
    .. proven.
Step 62: 
  prove all verification conditions
    .. proven.
Step 63: case in (59) where the length of the sequence is j2 + 2
  Prove the number of visits to 31 is in {j2 + 0 ..< j2 + 3}
    .. proven.
Step 64: 
  Prove the number of visits to 152 is in {j2 + 0 ..< j2 + 3}
    .. proven.
Step 65: 
  prove all verification conditions
    .. proven.
Step 66: case in (44) where the length of the sequence is c + 2
  Prove the number of visits to 79 is in {c + 0 ..< c + 3}
    .. proven.
Step 67: 
  Prove the number of visits to 209 is in {c + 0 ..< c + 3}
    .. proven.
Step 68: 
  prove visits to 23 related to visits to 167
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 167)
    and with invariants
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r3')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r12')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Word8) ('target___unsigned_char#v')) (@ addr 167)
      ((Word32) ('nirqs___int#v')) (@ addr 167)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 167)
      ((Word32[50]) ('GhostAssertions')) (@ addr 167)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 167)
    .. proven.
Step 69: case in (68) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 1}
    .. proven.
Step 70: 
  Prove the number of visits to 167 is in {0 ..< 1}
    .. proven.
Step 71: 
  Prove the number of visits to 155 is in {0 ..< 1}
    .. proven.
Step 72: 
  Prove the number of visits to 144 is in {0 ..< 1}
    .. proven.
Step 73: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 74: 
  Prove the number of visits to 124 is in {0 ..< 1}
    .. proven.
Step 75: 
  prove all verification conditions
    .. proven.
Step 76: case in (68) where the length of the sequence is k2 + 2
  Prove the number of visits to 23 is in {k2 + 0 ..< k2 + 3}
    .. proven.
Step 77: 
  Prove the number of visits to 167 is in {k2 + 0 ..< k2 + 3}
    .. proven.
Step 78: 
  Prove the number of visits to 155 is in {0 ..< 2}
    .. proven.
Step 79: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 80: 
  prove visits to 31 related to visits to 152
    with equalities
      ((Mem) ('mem')) (@ addr 31)
      = ((Mem) ('Mem')) (@ addr 152)
    and with invariants
      ((Word32) ('r7')) (@ addr 31)
      ((Word32) ('r4')) (@ addr 31)
      ((Word32) ('r8')) (@ addr 31)
      ((Word32) ('r14')) (@ addr 31)
      ((Word32) ('r5')) (@ addr 31)
      ((Word32) ('r0')) (@ addr 31)
      ((Word32) ('r9')) (@ addr 31)
      ((Word32) ('ret')) (@ addr 31)
      ((Word32) ('r2')) (@ addr 31)
      ((Word32) ('r11')) (@ addr 31)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 31)
      ((Word32) ('r12')) (@ addr 31)
      ((Word32) ('r13')) (@ addr 31)
      ((Word32) ('r10')) (@ addr 31)
      ((Bool) (ROData('mem'))) (@ addr 31)
      ((Word32) ('r6')) (@ addr 31)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 31)
      ((Word32) ('nirqs___int#v')) (@ addr 152)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 152)
      ((Word32[50]) ('GhostAssertions')) (@ addr 152)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 152)
    .. proven.
Step 81: case in (80) where the length of the sequence < 2
  Prove the number of visits to 31 is in {0 ..< 3}
    .. proven.
Step 82: 
  Prove the number of visits to 152 is in {0 ..< 3}
    .. proven.
Step 83: 
  prove all verification conditions
    .. proven.
Step 84: case in (80) where the length of the sequence is a2 + 2
  Prove the number of visits to 31 is in {a2 + 0 ..< a2 + 3}
    .. proven.
Step 85: 
  Prove the number of visits to 152 is in {a2 + 0 ..< a2 + 3}
    .. proven.
Step 86: 
  prove all verification conditions
    .. proven.
Step 87: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 5 is in {i + 0 ..< i + 3}
    .. proven.
Step 88: 
  Prove the number of visits to 190 is in {i + 0 ..< i + 3}
    .. proven.
Step 89: 
  prove visits to 11 related to visits to 181
    with equalities
      ((Mem) ('mem')) (@ addr 11)
      = ((Mem) ('Mem')) (@ addr 181)
    and with invariants
      ((Word32) ('r7')) (@ addr 11)
      ((Word32) ('r4')) (@ addr 11)
      ((Word32) ('r8')) (@ addr 11)
      ((Word32) ('r14')) (@ addr 11)
      ((Word32) ('r5')) (@ addr 11)
      ((Word32) ('r0')) (@ addr 11)
      ((Word32) ('r9')) (@ addr 11)
      ((Word32) ('ret')) (@ addr 11)
      ((Word32) ('r2')) (@ addr 11)
      ((Word32) ('r11')) (@ addr 11)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 11)
      ((Word32) ('r12')) (@ addr 11)
      ((Word32) ('r13')) (@ addr 11)
      ((Word32) ('r10')) (@ addr 11)
      ((Bool) (ROData('mem'))) (@ addr 11)
      ((Word32) ('r6')) (@ addr 11)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 11)
      ((Word32) ('nirqs___int#v')) (@ addr 181)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 181)
      ((Word32) (('loop#33#count' + ((0 - '#seq-visits') * 1)))) (@ addr 181)
      ((Word32[50]) ('GhostAssertions')) (@ addr 181)
    .. proven.
Step 90: case in (89) where the length of the sequence < 2
  Prove the number of visits to 11 is in {0 ..< 1}
    .. proven.
Step 91: 
  Prove the number of visits to 181 is in {0 ..< 1}
    .. proven.
Step 92: 
  Prove the number of visits to 210 is in {0 ..< 1}
    .. proven.
Step 93: 
  Prove the number of visits to 163 is in {0 ..< 1}
    .. proven.
Step 94: 
  Prove the number of visits to 155 is in {0 ..< 1}
    .. proven.
Step 95: 
  Prove the number of visits to 144 is in {0 ..< 1}
    .. proven.
Step 96: 
  Prove the number of visits to 79 is in {0 ..< 1}
    .. proven.
Step 97: 
  Prove the number of visits to 99 is in {0 ..< 1}
    .. proven.
Step 98: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 99: 
  Prove the number of visits to 124 is in {0 ..< 1}
    .. proven.
Step 100: 
  prove all verification conditions
    .. proven.
Step 101: case in (89) where the length of the sequence is b2 + 2
  Prove the number of visits to 11 is in {b2 + 0 ..< b2 + 3}
    .. proven.
Step 102: 
  Prove the number of visits to 181 is in {b2 + 0 ..< b2 + 3}
    .. proven.
Step 103: 
  prove visits to 79 related to visits to 209
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 79)
      ((Word32) ('r4')) (@ addr 79)
      ((Word32) ('r8')) (@ addr 79)
      ((Word32) ('r14')) (@ addr 79)
      ((Word32) ('r5')) (@ addr 79)
      ((Word32) ('r0')) (@ addr 79)
      ((Word32) ('r9')) (@ addr 79)
      ((Word32) ('ret')) (@ addr 79)
      ((Word32) ('r2')) (@ addr 79)
      ((Word32) ('r11')) (@ addr 79)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 79)
      ((Word32) ('r13')) (@ addr 79)
      ((Word32) ('r10')) (@ addr 79)
      ((Mem) ('mem')) (@ addr 79)
      ((Word32) ('r6')) (@ addr 79)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 79)
      ((Word32) ('nirqs___int#v.1')) (@ addr 209)
      ((Word32) ('nirqs___int#v')) (@ addr 209)
      ((Mem) ('Mem.1')) (@ addr 209)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 209)
      ((Mem) ('Mem')) (@ addr 209)
      ((Word32[50]) ('GhostAssertions')) (@ addr 209)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 209)
    .. proven.
Step 104: case in (103) where the length of the sequence < 2
  Prove the number of visits to 79 is in {0 ..< 3}
    .. proven.
Step 105: 
  Prove the number of visits to 209 is in {0 ..< 3}
    .. proven.
Step 106: 
  prove visits to 23 related to visits to 167
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 167)
    and with invariants
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r3')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r12')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Word8) ('target___unsigned_char#v')) (@ addr 167)
      ((Word32) ('nirqs___int#v')) (@ addr 167)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 167)
      ((Word32[50]) ('GhostAssertions')) (@ addr 167)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 167)
    .. proven.
Step 107: case in (106) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 1}
    .. proven.
Step 108: 
  Prove the number of visits to 167 is in {0 ..< 1}
    .. proven.
Step 109: 
  Prove the number of visits to 155 is in {0 ..< 1}
    .. proven.
Step 110: 
  Prove the number of visits to 144 is in {0 ..< 1}
    .. proven.
Step 111: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 112: 
  Prove the number of visits to 124 is in {0 ..< 1}
    .. proven.
Step 113: 
  prove all verification conditions
    .. proven.
Step 114: case in (106) where the length of the sequence is i3 + 2
  Prove the number of visits to 23 is in {i3 + 0 ..< i3 + 3}
    .. proven.
Step 115: 
  Prove the number of visits to 167 is in {i3 + 0 ..< i3 + 3}
    .. proven.
Step 116: 
  prove visits to 28 related to visits to 159
    with equalities
      ((Mem) ('mem')) (@ addr 28)
      = ((Mem) ('Mem')) (@ addr 159)
    and with invariants
      ((Word32) ('r7')) (@ addr 28)
      ((Word32) ('r4')) (@ addr 28)
      ((Word32) ('r8')) (@ addr 28)
      ((Word32) ('r14')) (@ addr 28)
      ((Word32) ('r5')) (@ addr 28)
      ((Word32) ('r0')) (@ addr 28)
      ((Word32) ('r9')) (@ addr 28)
      ((Word32) ('ret')) (@ addr 28)
      ((Word32) ('r2')) (@ addr 28)
      ((Word32) ('r11')) (@ addr 28)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 28)
      ((Word32) ('r12')) (@ addr 28)
      ((Word32) ('r13')) (@ addr 28)
      ((Word32) ('r10')) (@ addr 28)
      ((Bool) (ROData('mem'))) (@ addr 28)
      ((Word32) ('r6')) (@ addr 28)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 28)
      ((Word32) (('loop#15#count' + ((0 - '#seq-visits') * 1)))) (@ addr 159)
      ((Word32) ('nirqs___int#v')) (@ addr 159)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 159)
      ((Word32[50]) ('GhostAssertions')) (@ addr 159)
    .. proven.
Step 117: case in (116) where the length of the sequence < 2
  Prove the number of visits to 28 is in {0 ..< 3}
    .. proven.
Step 118: 
  Prove the number of visits to 159 is in {0 ..< 3}
    .. proven.
Step 119: 
  prove visits to 31 related to visits to 152
    with equalities
      ((Mem) ('mem')) (@ addr 31)
      = ((Mem) ('Mem')) (@ addr 152)
    and with invariants
      ((Word32) ('r7')) (@ addr 31)
      ((Word32) ('r4')) (@ addr 31)
      ((Word32) ('r8')) (@ addr 31)
      ((Word32) ('r14')) (@ addr 31)
      ((Word32) ('r5')) (@ addr 31)
      ((Word32) ('r0')) (@ addr 31)
      ((Word32) ('r9')) (@ addr 31)
      ((Word32) ('ret')) (@ addr 31)
      ((Word32) ('r2')) (@ addr 31)
      ((Word32) ('r11')) (@ addr 31)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 31)
      ((Word32) ('r12')) (@ addr 31)
      ((Word32) ('r13')) (@ addr 31)
      ((Word32) ('r10')) (@ addr 31)
      ((Bool) (ROData('mem'))) (@ addr 31)
      ((Word32) ('r6')) (@ addr 31)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 31)
      ((Word32) ('nirqs___int#v')) (@ addr 152)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 152)
      ((Word32[50]) ('GhostAssertions')) (@ addr 152)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 152)
    .. proven.
Step 120: case in (119) where the length of the sequence < 2
  Prove the number of visits to 31 is in {0 ..< 3}
    .. proven.
Step 121: 
  Prove the number of visits to 152 is in {0 ..< 3}
    .. proven.
Step 122: 
  prove all verification conditions
    .. proven.
Step 123: case in (119) where the length of the sequence is k3 + 2
  Prove the number of visits to 31 is in {k3 + 0 ..< k3 + 3}
    .. proven.
Step 124: 
  Prove the number of visits to 152 is in {k3 + 0 ..< k3 + 3}
    .. proven.
Step 125: 
  prove all verification conditions
    .. proven.
Step 126: case in (116) where the length of the sequence is j3 + 2
  Prove the number of visits to 28 is in {j3 + 0 ..< j3 + 3}
    .. proven.
Step 127: 
  Prove the number of visits to 159 is in {j3 + 0 ..< j3 + 3}
    .. proven.
Step 128: 
  prove visits to 31 related to visits to 152
    with equalities
      ((Mem) ('mem')) (@ addr 31)
      = ((Mem) ('Mem')) (@ addr 152)
    and with invariants
      ((Word32) ('r7')) (@ addr 31)
      ((Word32) ('r4')) (@ addr 31)
      ((Word32) ('r8')) (@ addr 31)
      ((Word32) ('r14')) (@ addr 31)
      ((Word32) ('r5')) (@ addr 31)
      ((Word32) ('r0')) (@ addr 31)
      ((Word32) ('r9')) (@ addr 31)
      ((Word32) ('ret')) (@ addr 31)
      ((Word32) ('r2')) (@ addr 31)
      ((Word32) ('r11')) (@ addr 31)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 31)
      ((Word32) ('r12')) (@ addr 31)
      ((Word32) ('r13')) (@ addr 31)
      ((Word32) ('r10')) (@ addr 31)
      ((Bool) (ROData('mem'))) (@ addr 31)
      ((Word32) ('r6')) (@ addr 31)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 31)
      ((Word32) ('nirqs___int#v')) (@ addr 152)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 152)
      ((Word32[50]) ('GhostAssertions')) (@ addr 152)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 152)
    .. proven.
Step 129: case in (128) where the length of the sequence < 2
  Prove the number of visits to 31 is in {0 ..< 1}
    .. proven.
Step 130: 
  Prove the number of visits to 152 is in {0 ..< 1}
    .. proven.
Step 131: 
  prove all verification conditions
    .. proven.
Step 132: case in (128) where the length of the sequence is a3 + 2
  Prove the number of visits to 31 is in {a3 + 0 ..< a3 + 3}
    .. proven.
Step 133: 
  Prove the number of visits to 152 is in {a3 + 0 ..< a3 + 3}
    .. proven.
Step 134: 
  prove all verification conditions
    .. proven.
Step 135: case in (103) where the length of the sequence is c2 + 2
  Prove the number of visits to 79 is in {c2 + 0 ..< c2 + 3}
    .. proven.
Step 136: 
  Prove the number of visits to 209 is in {c2 + 0 ..< c2 + 3}
    .. proven.
Step 137: 
  prove visits to 23 related to visits to 167
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 167)
    and with invariants
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r3')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r12')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Word8) ('target___unsigned_char#v')) (@ addr 167)
      ((Word32) ('nirqs___int#v')) (@ addr 167)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 167)
      ((Word32[50]) ('GhostAssertions')) (@ addr 167)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 167)
    .. proven.
Step 138: case in (137) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 1}
    .. proven.
Step 139: 
  Prove the number of visits to 167 is in {0 ..< 1}
    .. proven.
Step 140: 
  Prove the number of visits to 155 is in {0 ..< 1}
    .. proven.
Step 141: 
  Prove the number of visits to 144 is in {0 ..< 1}
    .. proven.
Step 142: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 143: 
  Prove the number of visits to 124 is in {0 ..< 1}
    .. proven.
Step 144: 
  prove all verification conditions
    .. proven.
Step 145: case in (137) where the length of the sequence is b3 + 2
  Prove the number of visits to 23 is in {b3 + 0 ..< b3 + 3}
    .. proven.
Step 146: 
  Prove the number of visits to 167 is in {b3 + 0 ..< b3 + 3}
    .. proven.
Step 147: 
  prove visits to 28 related to visits to 159
    with equalities
      ((Mem) ('mem')) (@ addr 28)
      = ((Mem) ('Mem')) (@ addr 159)
    and with invariants
      ((Word32) ('r7')) (@ addr 28)
      ((Word32) ('r4')) (@ addr 28)
      ((Word32) ('r8')) (@ addr 28)
      ((Word32) ('r14')) (@ addr 28)
      ((Word32) ('r5')) (@ addr 28)
      ((Word32) ('r0')) (@ addr 28)
      ((Word32) ('r9')) (@ addr 28)
      ((Word32) ('ret')) (@ addr 28)
      ((Word32) ('r2')) (@ addr 28)
      ((Word32) ('r11')) (@ addr 28)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 28)
      ((Word32) ('r12')) (@ addr 28)
      ((Word32) ('r13')) (@ addr 28)
      ((Word32) ('r10')) (@ addr 28)
      ((Bool) (ROData('mem'))) (@ addr 28)
      ((Word32) ('r6')) (@ addr 28)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 28)
      ((Word32) (('loop#15#count' + ((0 - '#seq-visits') * 1)))) (@ addr 159)
      ((Word32) ('nirqs___int#v')) (@ addr 159)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 159)
      ((Word32[50]) ('GhostAssertions')) (@ addr 159)
    .. proven.
Step 148: case in (147) where the length of the sequence < 2
  Prove the number of visits to 28 is in {0 ..< 3}
    .. proven.
Step 149: 
  Prove the number of visits to 159 is in {0 ..< 3}
    .. proven.
Step 150: 
  prove visits to 31 related to visits to 152
    with equalities
      ((Mem) ('mem')) (@ addr 31)
      = ((Mem) ('Mem')) (@ addr 152)
    and with invariants
      ((Word32) ('r7')) (@ addr 31)
      ((Word32) ('r4')) (@ addr 31)
      ((Word32) ('r8')) (@ addr 31)
      ((Word32) ('r14')) (@ addr 31)
      ((Word32) ('r5')) (@ addr 31)
      ((Word32) ('r0')) (@ addr 31)
      ((Word32) ('r9')) (@ addr 31)
      ((Word32) ('ret')) (@ addr 31)
      ((Word32) ('r2')) (@ addr 31)
      ((Word32) ('r11')) (@ addr 31)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 31)
      ((Word32) ('r12')) (@ addr 31)
      ((Word32) ('r13')) (@ addr 31)
      ((Word32) ('r10')) (@ addr 31)
      ((Bool) (ROData('mem'))) (@ addr 31)
      ((Word32) ('r6')) (@ addr 31)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 31)
      ((Word32) ('nirqs___int#v')) (@ addr 152)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 152)
      ((Word32[50]) ('GhostAssertions')) (@ addr 152)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 152)
    .. proven.
Step 151: case in (150) where the length of the sequence < 2
  Prove the number of visits to 31 is in {0 ..< 3}
    .. proven.
Step 152: 
  Prove the number of visits to 152 is in {0 ..< 3}
    .. proven.
Step 153: 
  prove all verification conditions
    .. proven.
Step 154: case in (150) where the length of the sequence is i4 + 2
  Prove the number of visits to 31 is in {i4 + 0 ..< i4 + 3}
    .. proven.
Step 155: 
  Prove the number of visits to 152 is in {i4 + 0 ..< i4 + 3}
    .. proven.
Step 156: 
  prove all verification conditions
    .. proven.
Step 157: case in (147) where the length of the sequence is c3 + 2
  Prove the number of visits to 28 is in {c3 + 0 ..< c3 + 3}
    .. proven.
Step 158: 
  Prove the number of visits to 159 is in {c3 + 0 ..< c3 + 3}
    .. proven.
Step 159: 
  prove visits to 31 related to visits to 152
    with equalities
      ((Mem) ('mem')) (@ addr 31)
      = ((Mem) ('Mem')) (@ addr 152)
    and with invariants
      ((Word32) ('r7')) (@ addr 31)
      ((Word32) ('r4')) (@ addr 31)
      ((Word32) ('r8')) (@ addr 31)
      ((Word32) ('r14')) (@ addr 31)
      ((Word32) ('r5')) (@ addr 31)
      ((Word32) ('r0')) (@ addr 31)
      ((Word32) ('r9')) (@ addr 31)
      ((Word32) ('ret')) (@ addr 31)
      ((Word32) ('r2')) (@ addr 31)
      ((Word32) ('r11')) (@ addr 31)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 31)
      ((Word32) ('r12')) (@ addr 31)
      ((Word32) ('r13')) (@ addr 31)
      ((Word32) ('r10')) (@ addr 31)
      ((Bool) (ROData('mem'))) (@ addr 31)
      ((Word32) ('r6')) (@ addr 31)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 31)
      ((Word32) ('nirqs___int#v')) (@ addr 152)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 152)
      ((Word32[50]) ('GhostAssertions')) (@ addr 152)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 152)
    .. proven.
Step 160: case in (159) where the length of the sequence < 2
  Prove the number of visits to 31 is in {0 ..< 1}
    .. proven.
Step 161: 
  Prove the number of visits to 152 is in {0 ..< 1}
    .. proven.
Step 162: 
  prove all verification conditions
    .. proven.
Step 163: case in (159) where the length of the sequence is j4 + 2
  Prove the number of visits to 31 is in {j4 + 0 ..< j4 + 3}
    .. proven.
Step 164: 
  Prove the number of visits to 152 is in {j4 + 0 ..< j4 + 3}
    .. proven.
Step 165: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (dist_init (ASM) <= Kernel_C.dist_init (C)), time taken: 696.71s
Testing Function pair Pairing (l_impl'isb (ASM) <= r_impl'isb (C))
  (function pairing 269 of 284)
Skipping Pairing (l_impl'isb (ASM) <= r_impl'isb (C)), underspecified C
Testing Function pair Pairing (c_handle_interrupt (ASM) <= Kernel_C.c_handle_interrupt (C))
  (function pairing 270 of 284)
 .. built problem, finding proof
Discovered that points [26 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (26, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 26 is in {0 ..< 2}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (c_handle_interrupt (ASM) <= Kernel_C.c_handle_interrupt (C)), time taken: 2.29s
Testing Function pair Pairing (invokeTCB_Suspend (ASM) <= Kernel_C.invokeTCB_Suspend (C))
  (function pairing 271 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_Suspend (ASM) <= Kernel_C.invokeTCB_Suspend (C)), time taken: 0.34s
Testing Function pair Pairing (initL2Cache (ASM) <= Kernel_C.initL2Cache (C))
  (function pairing 272 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [8, 157]
  (in problem)
Now doing proof search in 8 init case in problem.
Now doing proof search in 8 loop case in problem.
ProofNode ('Split', ((8, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (157, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#46#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Restr', (157, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (8, ('Offset', (0, 1))), (ProofNode ('Restr', (157, ('Offset', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 8 related to visits to 157
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 8)
      ((Word32) ('r4')) (@ addr 8)
      ((Word32) ('r8')) (@ addr 8)
      ((Word32) ('r11')) (@ addr 8)
      ((Word32) ('r5')) (@ addr 8)
      ((Word32) ('r6')) (@ addr 8)
      ((Word32) ('r0')) (@ addr 8)
      ((Word32) ('r9')) (@ addr 8)
      ((Word32) ('ret')) (@ addr 8)
      ((Word32) ('r2')) (@ addr 8)
      ((Word32) ('r13')) (@ addr 8)
      ((Word32) ('r10')) (@ addr 8)
      ((Mem) ('mem')) (@ addr 8)
      ((Word32) ('r14')) (@ addr 8)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 8)
      ((Word32) (('loop#46#count' + ((0 - '#seq-visits') * 1)))) (@ addr 157)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 157 is in {0 ..< 1}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 8 is in {i + 0 ..< i + 1}
    .. proven.
Step 6: 
  Prove the number of visits to 157 is in {i + 0 ..< i + 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (initL2Cache (ASM) <= Kernel_C.initL2Cache (C)), time taken: 8.08s
Testing Function pair Pairing (isValidVTableRoot (ASM) <= Kernel_C.isValidVTableRoot (C))
  (function pairing 273 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isValidVTableRoot (ASM) <= Kernel_C.isValidVTableRoot (C)), time taken: 0.34s
Testing Function pair Pairing (doReplyTransfer (ASM) <= Kernel_C.doReplyTransfer (C))
  (function pairing 274 of 284)
 .. built problem, finding proof
Decided to case split at (3, 'ASM')
  (in problem)
Now doing proof search in true case (3 visited) in problem.
Now doing proof search in false case (3 not visited) in problem.
ProofNode ('CaseSplit', (3, 'ASM'), (ProofNode ('Restr', (3, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Restr', (81, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 3 is visited
Step 2: case in (1) where 3 is visited
  Prove the number of visits to 3 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 3 is not visited
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 81 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doReplyTransfer (ASM) <= Kernel_C.doReplyTransfer (C)), time taken: 9.76s
Testing Function pair Pairing (init_core_state (ASM) <= Kernel_C.init_core_state (C))
  (function pairing 275 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (init_core_state (ASM) <= Kernel_C.init_core_state (C)), time taken: 0.32s
Testing Function pair Pairing (Arch_createObject (ASM) <= Kernel_C.Arch_createObject (C))
  (function pairing 276 of 284)
 .. built problem, finding proof
Decided to case split at (4, 'ASM')
  (in problem)
Now doing proof search in true case (4 visited) in problem.
Now doing proof search in false case (4 not visited) in problem.
ProofNode ('CaseSplit', (4, 'ASM'), (ProofNode ('Restr', (4, ('Number', (1, 2))), (ProofNode ('Restr', (199, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (4, ('Number', (0, 1))), (ProofNode ('Restr', (199, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 4 is visited
Step 2: case in (1) where 4 is visited
  Prove the number of visits to 4 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 199 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 4 is not visited
  Prove the number of visits to 4 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 199 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_createObject (ASM) <= Kernel_C.Arch_createObject (C)), time taken: 10.09s
Testing Function pair Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C))
  (function pairing 277 of 284)
 .. built problem, finding proof
Decided to case split at (13, 'ASM')
  (in problem)
Now doing proof search in true case (13 visited) in problem.
Now doing proof search in false case (13 not visited) in problem.
ProofNode ('CaseSplit', (13, 'ASM'), (ProofNode ('Restr', (13, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (13, ('Number', (0, 1))), (ProofNode ('Restr', (110, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 13 is visited
Step 2: case in (1) where 13 is visited
  Prove the number of visits to 13 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 13 is not visited
  Prove the number of visits to 13 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 110 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C)), time taken: 11.11s
Testing Function pair Pairing (tcbEPAppend (ASM) <= Kernel_C.tcbEPAppend (C))
  (function pairing 278 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (tcbEPAppend (ASM) <= Kernel_C.tcbEPAppend (C)), time taken: 0.38s
Testing Function pair Pairing (Arch_decodeIRQControlInvocation (ASM) <= Kernel_C.Arch_decodeIRQControlInvocation (C))
  (function pairing 279 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_decodeIRQControlInvocation (ASM) <= Kernel_C.Arch_decodeIRQControlInvocation (C)), time taken: 7.81s
Testing Function pair Pairing (l_impl'dsb (ASM) <= r_impl'dsb (C))
  (function pairing 280 of 284)
Skipping Pairing (l_impl'dsb (ASM) <= r_impl'dsb (C)), underspecified C
Testing Function pair Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C))
  (function pairing 281 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [12, 1034]
  (in problem)
Now doing proof search in 12 init case in problem.
Discovered a loop relation for split points [23, 1009]
  (in 12 init case in problem)
Now doing proof search in 23 init case in 12 init case in problem.
Discovered that points [810 (loop head)] can be bounded
  (in 23 init case in 12 init case in problem)
Discovered that points [783 (loop head)] can be bounded
  (in 23 init case in 12 init case in problem)
Result ProofNoSplit for pair Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C)), time taken: 929.41s
Testing Function pair Pairing (lookupSlotForCNodeOp (ASM) <= Kernel_C.lookupSlotForCNodeOp (C))
  (function pairing 282 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupSlotForCNodeOp (ASM) <= Kernel_C.lookupSlotForCNodeOp (C)), time taken: 2.26s
Testing Function pair Pairing (invokeCNodeInsert (ASM) <= Kernel_C.invokeCNodeInsert (C))
  (function pairing 283 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeInsert (ASM) <= Kernel_C.invokeCNodeInsert (C)), time taken: 0.49s
Testing Function pair Pairing (handleFault (ASM) <= Kernel_C.handleFault (C))
  (function pairing 284 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleFault (ASM) <= Kernel_C.handleFault (C)), time taken: 0.51s
Results: [('Pairing (handleReply (ASM) <= Kernel_C.handleReply (C))', 'True'), ('Pairing (tcbSchedAppend (ASM) <= Kernel_C.tcbSchedAppend (C))', 'True'), ('Pairing (isIOSpaceFrameCap (ASM) <= Kernel_C.isIOSpaceFrameCap (C))', 'True'), ('Pairing (setPriority (ASM) <= Kernel_C.setPriority (C))', 'True'), ('Pairing (Arch_updateCapData (ASM) <= Kernel_C.Arch_updateCapData (C))', 'True'), ('Pairing (idle_thread (ASM) <= Kernel_C.idle_thread (C))', 'True'), ('Pairing (deleteASIDPool (ASM) <= Kernel_C.deleteASIDPool (C))', 'True'), ('Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C))', 'True'), ('Pairing (lookupPDSlot (ASM) <= Kernel_C.lookupPDSlot (C))', 'True'), ('Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C))', 'True'), ('Pairing (create_idle_thread (ASM) <= Kernel_C.create_idle_thread (C))', 'True'), ('Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C))', 'True'), ('Pairing (create_unmapped_it_frame_cap (ASM) <= Kernel_C.create_unmapped_it_frame_cap (C))', 'True'), ('Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C))', 'True'), ('Pairing (memset (ASM) <= Kernel_C.memset (C))', 'True'), ('Pairing (setNextPC (ASM) <= Kernel_C.setNextPC (C))', 'True'), ('Pairing (handleVMFaultEvent (ASM) <= Kernel_C.handleVMFaultEvent (C))', 'True'), ('Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C))', 'True'), ('Pairing (deletedIRQHandler (ASM) <= Kernel_C.deletedIRQHandler (C))', 'True'), ('Pairing (configureIdleThread (ASM) <= Kernel_C.configureIdleThread (C))', 'True'), ('Pairing (handleInterruptEntry (ASM) <= Kernel_C.handleInterruptEntry (C))', 'True'), ('Pairing (create_initial_thread (ASM) <= Kernel_C.create_initial_thread (C))', 'True'), ('Pairing (hasCancelSendRights (ASM) <= Kernel_C.hasCancelSendRights (C))', 'True'), ('Pairing (decodeTCBInvocation (ASM) <= Kernel_C.decodeTCBInvocation (C))', 'True'), ('Pairing (calculate_extra_bi_size_bits (ASM) <= Kernel_C.calculate_extra_bi_size_bits (C))', 'True'), ('Pairing (create_it_asid_pool (ASM) <= Kernel_C.create_it_asid_pool (C))', 'True'), ('Pairing (performInvocation_Endpoint (ASM) <= Kernel_C.performInvocation_Endpoint (C))', 'True'), ('Pairing (isCapRevocable (ASM) <= Kernel_C.isCapRevocable (C))', 'True'), ('Pairing (maybe_alloc_extra_bi (ASM) <= Kernel_C.maybe_alloc_extra_bi (C))', 'True'), ('Pairing (char_to_long (ASM) <= Kernel_C.char_to_long (C))', 'True'), ('Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C))', 'True'), ('Pairing (cteInsert (ASM) <= Kernel_C.cteInsert (C))', 'True'), ('Pairing (bi_finalise (ASM) <= Kernel_C.bi_finalise (C))', 'True'), ('Pairing (Arch_decodeTransfer (ASM) <= Kernel_C.Arch_decodeTransfer (C))', 'True'), ('Pairing (tcbSchedDequeue (ASM) <= Kernel_C.tcbSchedDequeue (C))', 'True'), ('Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))', 'ProblemAbort'), ('Pairing (sendIPC (ASM) <= Kernel_C.sendIPC (C))', 'True'), ('Pairing (Arch_maskCapRights (ASM) <= Kernel_C.Arch_maskCapRights (C))', 'True'), ('Pairing (chooseThread (ASM) <= Kernel_C.chooseThread (C))', 'True'), ('Pairing (deriveCap (ASM) <= Kernel_C.deriveCap (C))', 'True'), ('Pairing (create_it_address_space (ASM) <= Kernel_C.create_it_address_space (C))', 'True'), ('Pairing (invalidateCacheRange_RAM (ASM) <= Kernel_C.invalidateCacheRange_RAM (C))', 'True'), ('Pairing (schedule (ASM) <= Kernel_C.schedule (C))', 'True'), ('Pairing (map_kernel_devices (ASM) <= Kernel_C.map_kernel_devices (C))', 'True'), ('Pairing (Arch_handleFaultReply (ASM) <= Kernel_C.Arch_handleFaultReply (C))', 'True'), ('Pairing (decodeDomainInvocation (ASM) <= Kernel_C.decodeDomainInvocation (C))', 'True'), ('Pairing (suspend (ASM) <= Kernel_C.suspend (C))', 'True'), ('Pairing (tcbEPDequeue (ASM) <= Kernel_C.tcbEPDequeue (C))', 'True'), ('Pairing (cteRevoke (ASM) <= Kernel_C.cteRevoke (C))', 'True'), ('Pairing (memcpy (ASM) <= Kernel_C.memcpy (C))', 'True'), ('Pairing (deleteCallerCap (ASM) <= Kernel_C.deleteCallerCap (C))', 'True'), ('Pairing (reserve_region (ASM) <= Kernel_C.reserve_region (C))', 'True'), ('Pairing (invokeTCB_NotificationControl (ASM) <= Kernel_C.invokeTCB_NotificationControl (C))', 'True'), ('Pairing (cleanInvalidateCacheRange_RAM (ASM) <= Kernel_C.cleanInvalidateCacheRange_RAM (C))', 'True'), ('Pairing (doNormalTransfer (ASM) <= Kernel_C.doNormalTransfer (C))', 'True'), ('Pairing (setIRQTrigger (ASM) <= Kernel_C.setIRQTrigger (C))', 'True'), ('Pairing (decodeSetMCPriority (ASM) <= Kernel_C.decodeSetMCPriority (C))', 'True'), ('Pairing (invokeCNodeRotate (ASM) <= Kernel_C.invokeCNodeRotate (C))', 'True'), ('Pairing (doNBRecvFailedTransfer (ASM) <= Kernel_C.doNBRecvFailedTransfer (C))', 'True'), ('Pairing (getObjectSize (ASM) <= Kernel_C.getObjectSize (C))', 'True'), ('Pairing (restart (ASM) <= Kernel_C.restart (C))', 'True'), ('Pairing (Arch_isFrameType (ASM) <= Kernel_C.Arch_isFrameType (C))', 'True'), ('Pairing (getRestartPC (ASM) <= Kernel_C.getRestartPC (C))', 'True'), ('Pairing (strncmp (ASM) <= Kernel_C.strncmp (C))', 'True'), ('Pairing (arm_errata (ASM) <= Kernel_C.arm_errata (C))', 'True'), ('Pairing (flushSpace (ASM) <= Kernel_C.flushSpace (C))', 'True'), ('Pairing (checkValidIPCBuffer (ASM) <= Kernel_C.checkValidIPCBuffer (C))', 'True'), ('Pairing (arch_clean_invalidate_caches (ASM) <= Kernel_C.arch_clean_invalidate_caches (C))', 'True'), ('Pairing (cleanInvalidateL1Caches (ASM) <= Kernel_C.cleanInvalidateL1Caches (C))', 'True'), ('Pairing (createObject (ASM) <= Kernel_C.createObject (C))', 'True'), ('Pairing (invokeUntyped_Retype (ASM) <= Kernel_C.invokeUntyped_Retype (C))', 'True'), ('Pairing (str_to_long (ASM) <= Kernel_C.str_to_long (C))', 'True'), ('Pairing (decodeCopyRegisters (ASM) <= Kernel_C.decodeCopyRegisters (C))', 'True'), ('Pairing (replyFromKernel_error (ASM) <= Kernel_C.replyFromKernel_error (C))', 'True'), ('Pairing (decodeInvocation (ASM) <= Kernel_C.decodeInvocation (C))', 'True'), ('Pairing (write_slot (ASM) <= Kernel_C.write_slot (C))', 'True'), ('Pairing (cap_get_capPtr (ASM) <= Kernel_C.cap_get_capPtr (C))', 'True'), ('Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))', 'ProblemAbort'), ('Pairing (Arch_performTransfer (ASM) <= Kernel_C.Arch_performTransfer (C))', 'True'), ('Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C))', 'True'), ('Pairing (cteDeleteOne (ASM) <= Kernel_C.cteDeleteOne (C))', 'True'), ('Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))', 'ProblemAbort'), ('Pairing (setIRQState (ASM) <= Kernel_C.setIRQState (C))', 'True'), ('Pairing (isMDBParentOf (ASM) <= Kernel_C.isMDBParentOf (C))', 'True'), ('Pairing (lookupSlot (ASM) <= Kernel_C.lookupSlot (C))', 'True'), ('Pairing (Arch_finaliseCap (ASM) <= Kernel_C.Arch_finaliseCap (C))', 'True'), ('Pairing (findPDForASID (ASM) <= Kernel_C.findPDForASID (C))', 'True'), ('Pairing (strnlen (ASM) <= Kernel_C.strnlen (C))', 'True'), ('Pairing (decodeTCBConfigure (ASM) <= Kernel_C.decodeTCBConfigure (C))', 'True'), ('Pairing (flushTable (ASM) <= Kernel_C.flushTable (C))', 'True'), ('Pairing (invokeTCB_CopyRegisters (ASM) <= Kernel_C.invokeTCB_CopyRegisters (C))', 'True'), ('Pairing (decodeWriteRegisters (ASM) <= Kernel_C.decodeWriteRegisters (C))', 'True'), ('Pairing (handleDoubleFault (ASM) <= Kernel_C.handleDoubleFault (C))', 'True'), ("Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C))", 'None'), ('Pairing (cpu_iface_init (ASM) <= Kernel_C.cpu_iface_init (C))', 'True'), ('Pairing (setExtraBadge (ASM) <= Kernel_C.setExtraBadge (C))', 'True'), ('Pairing (performInvocation_Reply (ASM) <= Kernel_C.performInvocation_Reply (C))', 'True'), ('Pairing (Arch_sameRegionAs (ASM) <= Kernel_C.Arch_sameRegionAs (C))', 'True'), ('Pairing (cteSwap (ASM) <= Kernel_C.cteSwap (C))', 'True'), ('Pairing (deletingIRQHandler (ASM) <= Kernel_C.deletingIRQHandler (C))', 'True'), ('Pairing (getReceiveSlots (ASM) <= Kernel_C.getReceiveSlots (C))', 'True'), ('Pairing (switchToIdleThread (ASM) <= Kernel_C.switchToIdleThread (C))', 'True'), ('Pairing (decodeUnbindNotification (ASM) <= Kernel_C.decodeUnbindNotification (C))', 'True'), ('Pairing (unmapPageTable (ASM) <= Kernel_C.unmapPageTable (C))', 'True'), ('Pairing (lookupIPCBuffer (ASM) <= Kernel_C.lookupIPCBuffer (C))', 'True'), ('Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C))', 'True'), ('Pairing (initTimer (ASM) <= Kernel_C.initTimer (C))', 'True'), ('Pairing (invokeCNodeRevoke (ASM) <= Kernel_C.invokeCNodeRevoke (C))', 'True'), ('Pairing (lookupPTSlot (ASM) <= Kernel_C.lookupPTSlot (C))', 'True'), ('Pairing (arch_clean_invalidate_L1_caches (ASM) <= Kernel_C.arch_clean_invalidate_L1_caches (C))', 'True'), ('Pairing (APFromVMRights (ASM) <= Kernel_C.APFromVMRights (C))', 'True'), ('Pairing (cleanCaches_PoU (ASM) <= Kernel_C.cleanCaches_PoU (C))', 'True'), ('Pairing (invokeIRQControl (ASM) <= Kernel_C.invokeIRQControl (C))', 'True'), ('Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C))', 'True'), ('Pairing (isFinalCapability (ASM) <= Kernel_C.isFinalCapability (C))', 'True'), ('Pairing (handleUserLevelFault (ASM) <= Kernel_C.handleUserLevelFault (C))', 'True'), ('Pairing (doFlush (ASM) <= Kernel_C.doFlush (C))', 'True'), ('Pairing (decodeSetSpace (ASM) <= Kernel_C.decodeSetSpace (C))', 'True'), ('Pairing (ensureEmptySlot (ASM) <= Kernel_C.ensureEmptySlot (C))', 'True'), ('Pairing (create_ipcbuf_frame_cap (ASM) <= Kernel_C.create_ipcbuf_frame_cap (C))', 'True'), ('Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C))', 'True'), ('Pairing (copyGlobalMappings (ASM) <= Kernel_C.copyGlobalMappings (C))', 'True'), ('Pairing (cleanCacheRange_PoU (ASM) <= Kernel_C.cleanCacheRange_PoU (C))', 'True'), ('Pairing (restore_user_context (ASM) <= Kernel_C.restore_user_context (C))', 'None'), ('Pairing (activateThread (ASM) <= Kernel_C.activateThread (C))', 'True'), ('Pairing (strlcat (ASM) <= Kernel_C.strlcat (C))', 'True'), ('Pairing (scheduleChooseNewThread (ASM) <= Kernel_C.scheduleChooseNewThread (C))', 'True'), ('Pairing (maskCapRights (ASM) <= Kernel_C.maskCapRights (C))', 'True'), ('Pairing (flushPage (ASM) <= Kernel_C.flushPage (C))', 'True'), ('Pairing (Arch_configureIdleThread (ASM) <= Kernel_C.Arch_configureIdleThread (C))', 'True'), ('Pairing (cap_get_capSizeBits (ASM) <= Kernel_C.cap_get_capSizeBits (C))', 'True'), ('Pairing (bindNotification (ASM) <= Kernel_C.bindNotification (C))', 'True'), ('Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))', 'ProblemAbort'), ('Pairing (insert_region (ASM) <= Kernel_C.insert_region (C))', 'True'), ('Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C))', 'True'), ('Pairing (Arch_prepareThreadDelete (ASM) <= Kernel_C.Arch_prepareThreadDelete (C))', 'True'), ('Pairing (lockTLBEntry (ASM) <= Kernel_C.lockTLBEntry (C))', 'True'), ('Pairing (replyFromKernel_success_empty (ASM) <= Kernel_C.replyFromKernel_success_empty (C))', 'True'), ('Pairing (branchFlushRange (ASM) <= Kernel_C.branchFlushRange (C))', 'True'), ('Pairing (cteMove (ASM) <= Kernel_C.cteMove (C))', 'True'), ('Pairing (create_untypeds (ASM) <= Kernel_C.create_untypeds (C))', 'True'), ('Pairing (Arch_deriveCap (ASM) <= Kernel_C.Arch_deriveCap (C))', 'True'), ('Pairing (rescheduleRequired (ASM) <= Kernel_C.rescheduleRequired (C))', 'True'), ('Pairing (setupCallerCap (ASM) <= Kernel_C.setupCallerCap (C))', 'True'), ('Pairing (isIRQActive (ASM) <= Kernel_C.isIRQActive (C))', 'True'), ('Pairing (decodeSetPriority (ASM) <= Kernel_C.decodeSetPriority (C))', 'True'), ('Pairing (deleteASID (ASM) <= Kernel_C.deleteASID (C))', 'True'), ('Pairing (handleVMFault (ASM) <= Kernel_C.handleVMFault (C))', 'True'), ('Pairing (Arch_decodeInvocation (ASM) <= Kernel_C.Arch_decodeInvocation (C))', 'True'), ('Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C))', 'True'), ('Pairing (pageTableMapped (ASM) <= Kernel_C.pageTableMapped (C))', 'True'), ('Pairing (emptySlot (ASM) <= Kernel_C.emptySlot (C))', 'True'), ('Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C))', 'True'), ('Pairing (Arch_switchToIdleThread (ASM) <= Kernel_C.Arch_switchToIdleThread (C))', 'True'), ('Pairing (invokeIRQHandler_SetIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_SetIRQHandler (C))', 'True'), ('Pairing (cleanCacheRange_RAM (ASM) <= Kernel_C.cleanCacheRange_RAM (C))', 'True'), ('Pairing (invokeIRQHandler_AckIRQ (ASM) <= Kernel_C.invokeIRQHandler_AckIRQ (C))', 'True'), ('Pairing (lookupTargetSlot (ASM) <= Kernel_C.lookupTargetSlot (C))', 'True'), ('Pairing (maskVMRights (ASM) <= Kernel_C.maskVMRights (C))', 'True'), ('Pairing (lookupCapAndSlot (ASM) <= Kernel_C.lookupCapAndSlot (C))', 'True'), ('Pairing (decodeCNodeInvocation (ASM) <= Kernel_C.decodeCNodeInvocation (C))', 'True'), ('Pairing (setThreadState (ASM) <= Kernel_C.setThreadState (C))', 'True'), ('Pairing (doFaultTransfer (ASM) <= Kernel_C.doFaultTransfer (C))', 'True'), ('Pairing (get_p_reg_kernel_img_boot (ASM) <= Kernel_C.get_p_reg_kernel_img_boot (C))', 'True'), ('Pairing (invokeCNodeDelete (ASM) <= Kernel_C.invokeCNodeDelete (C))', 'True'), ('Pairing (unbindMaybeNotification (ASM) <= Kernel_C.unbindMaybeNotification (C))', 'True'), ('Pairing (invokeCNodeSaveCaller (ASM) <= Kernel_C.invokeCNodeSaveCaller (C))', 'True'), ('Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C))', 'True'), ('Pairing (decodeBindNotification (ASM) <= Kernel_C.decodeBindNotification (C))', 'True'), ('Pairing (handleUnknownSyscall (ASM) <= Kernel_C.handleUnknownSyscall (C))', 'True'), ('Pairing (setupReplyMaster (ASM) <= Kernel_C.setupReplyMaster (C))', 'True'), ('Pairing (activate_kernel_vspace (ASM) <= Kernel_C.activate_kernel_vspace (C))', 'True'), ('Pairing (alloc_rootserver_obj (ASM) <= Kernel_C.alloc_rootserver_obj (C))', 'True'), ('Pairing (arch_get_n_paging (ASM) <= Kernel_C.arch_get_n_paging (C))', 'True'), ('Pairing (decodeSetIPCBuffer (ASM) <= Kernel_C.decodeSetIPCBuffer (C))', 'True'), ('Pairing (lookupExtraCaps (ASM) <= Kernel_C.lookupExtraCaps (C))', 'True'), ('Pairing (handleInvocation (ASM) <= Kernel_C.handleInvocation (C))', 'True'), ('Pairing (Arch_getObjectSize (ASM) <= Kernel_C.Arch_getObjectSize (C))', 'True'), ('Pairing (decodeReadRegisters (ASM) <= Kernel_C.decodeReadRegisters (C))', 'True'), ('Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C))', 'True'), ('Pairing (halt (ASM) <= Kernel_C.halt (C))', 'None'), ('Pairing (performInvocation_Notification (ASM) <= Kernel_C.performInvocation_Notification (C))', 'True'), ('Pairing (decodeSetSchedParams (ASM) <= Kernel_C.decodeSetSchedParams (C))', 'True'), ('Pairing (map_kernel_frame (ASM) <= Kernel_C.map_kernel_frame (C))', 'True'), ('Pairing (findFreeHWASID (ASM) <= Kernel_C.findFreeHWASID (C))', 'True'), ('Pairing (create_mapped_it_frame_cap (ASM) <= Kernel_C.create_mapped_it_frame_cap (C))', 'True'), ('Pairing (decodeIRQHandlerInvocation (ASM) <= Kernel_C.decodeIRQHandlerInvocation (C))', 'True'), ('Pairing (cancelSignal (ASM) <= Kernel_C.cancelSignal (C))', 'True'), ('Pairing (sameRegionAs (ASM) <= Kernel_C.sameRegionAs (C))', 'True'), ('Pairing (switchToThread (ASM) <= Kernel_C.switchToThread (C))', 'True'), ('Pairing (invalidateCacheRange_I (ASM) <= Kernel_C.invalidateCacheRange_I (C))', 'True'), ('Pairing (ensureNoChildren (ASM) <= Kernel_C.ensureNoChildren (C))', 'True'), ('Pairing (getExtraCPtr (ASM) <= Kernel_C.getExtraCPtr (C))', 'True'), ('Pairing (finaliseCap (ASM) <= Kernel_C.finaliseCap (C))', 'True'), ('Pairing (plat_cleanCache (ASM) <= Kernel_C.plat_cleanCache (C))', 'True'), ('Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C))', 'True'), ('Pairing (loadHWASID (ASM) <= Kernel_C.loadHWASID (C))', 'True'), ("Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C))", 'None'), ('Pairing (timerTick (ASM) <= Kernel_C.timerTick (C))', 'True'), ('Pairing (setDomain (ASM) <= Kernel_C.setDomain (C))', 'True'), ('Pairing (sameObjectAs (ASM) <= Kernel_C.sameObjectAs (C))', 'True'), ('Pairing (handleRecv (ASM) <= Kernel_C.handleRecv (C))', 'True'), ('Pairing (preemptionPoint (ASM) <= Kernel_C.preemptionPoint (C))', 'True'), ('Pairing (resolveAddressBits (ASM) <= Kernel_C.resolveAddressBits (C))', 'True'), ('Pairing (invalidateTLBByASID (ASM) <= Kernel_C.invalidateTLBByASID (C))', 'True'), ('Pairing (memzero (ASM) <= Kernel_C.memzero (C))', 'True'), ('Pairing (provide_cap (ASM) <= Kernel_C.provide_cap (C))', 'True'), ('Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))', 'ProofEXCEPT'), ('Pairing (initIRQController (ASM) <= Kernel_C.initIRQController (C))', 'True'), ('Pairing (tcbSchedEnqueue (ASM) <= Kernel_C.tcbSchedEnqueue (C))', 'True'), ('Pairing (lockTLBEntryCritical (ASM) <= Kernel_C.lockTLBEntryCritical (C))', 'None'), ('Pairing (insertNewCap (ASM) <= Kernel_C.insertNewCap (C))', 'True'), ('Pairing (receiveSignal (ASM) <= Kernel_C.receiveSignal (C))', 'True'), ('Pairing (armv_init_user_access (ASM) <= Kernel_C.armv_init_user_access (C))', 'True'), ('Pairing (getHWASID (ASM) <= Kernel_C.getHWASID (C))', 'True'), ('Pairing (updateCapData (ASM) <= Kernel_C.updateCapData (C))', 'True'), ('Pairing (loadCapTransfer (ASM) <= Kernel_C.loadCapTransfer (C))', 'True'), ('Pairing (lookupCap (ASM) <= Kernel_C.lookupCap (C))', 'True'), ('Pairing (create_root_cnode (ASM) <= Kernel_C.create_root_cnode (C))', 'True'), ('Pairing (invokeTCB_ThreadControl (ASM) <= Kernel_C.invokeTCB_ThreadControl (C))', 'True'), ('Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))', 'ProblemAbort'), ('Pairing (scheduleTCB (ASM) <= Kernel_C.scheduleTCB (C))', 'True'), ('Pairing (possibleSwitchTo (ASM) <= Kernel_C.possibleSwitchTo (C))', 'True'), ('Pairing (invokeCNodeMove (ASM) <= Kernel_C.invokeCNodeMove (C))', 'True'), ('Pairing (write_it_asid_pool (ASM) <= Kernel_C.write_it_asid_pool (C))', 'True'), ('Pairing (c_handle_fastpath_reply_recv (ASM) <= Kernel_C.c_handle_fastpath_reply_recv (C))', 'None'), ('Pairing (lookupPivotSlot (ASM) <= Kernel_C.lookupPivotSlot (C))', 'True'), ('Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C))', 'None'), ('Pairing (populate_bi_frame (ASM) <= Kernel_C.populate_bi_frame (C))', 'True'), ('Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C))', 'ProblemAbort'), ('Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C))', 'ProblemAbort'), ('Pairing (completeSignal (ASM) <= Kernel_C.completeSignal (C))', 'True'), ('Pairing (sendFaultIPC (ASM) <= Kernel_C.sendFaultIPC (C))', 'True'), ('Pairing (create_domain_cap (ASM) <= Kernel_C.create_domain_cap (C))', 'True'), ('Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))', 'ProblemAbort'), ('Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C))', 'True'), ('Pairing (get_p_reg_kernel_img (ASM) <= Kernel_C.get_p_reg_kernel_img (C))', 'True'), ('Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C))', 'True'), ('Pairing (cap_get_capIsPhysical (ASM) <= Kernel_C.cap_get_capIsPhysical (C))', 'True'), ('Pairing (cancelAllIPC (ASM) <= Kernel_C.cancelAllIPC (C))', 'True'), ('Pairing (cpu_initLocalIRQController (ASM) <= Kernel_C.cpu_initLocalIRQController (C))', 'True'), ("Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C))", 'None'), ('Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C))', 'True'), ('Pairing (Arch_sameObjectAs (ASM) <= Kernel_C.Arch_sameObjectAs (C))', 'True'), ('Pairing (invokeCNodeCancelBadgedSends (ASM) <= Kernel_C.invokeCNodeCancelBadgedSends (C))', 'True'), ('Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))', 'True'), ('Pairing (handleFaultReply (ASM) <= Kernel_C.handleFaultReply (C))', 'True'), ('Pairing (doIPCTransfer (ASM) <= Kernel_C.doIPCTransfer (C))', 'True'), ('Pairing (capSwapForDelete (ASM) <= Kernel_C.capSwapForDelete (C))', 'True'), ('Pairing (create_bi_frame_cap (ASM) <= Kernel_C.create_bi_frame_cap (C))', 'True'), ('Pairing (setMCPriority (ASM) <= Kernel_C.setMCPriority (C))', 'True'), ('Pairing (cancelAllSignals (ASM) <= Kernel_C.cancelAllSignals (C))', 'True'), ('Pairing (slotCapLongRunningDelete (ASM) <= Kernel_C.slotCapLongRunningDelete (C))', 'True'), ("Pairing (l_impl'wfi (ASM) <= r_impl'wfi (C))", 'None'), ('Pairing (unbindNotification (ASM) <= Kernel_C.unbindNotification (C))', 'True'), ('Pairing (setVMRootForFlush (ASM) <= Kernel_C.setVMRootForFlush (C))', 'True'), ('Pairing (Arch_activateIdleThread (ASM) <= Kernel_C.Arch_activateIdleThread (C))', 'True'), ('Pairing (unmapPage (ASM) <= Kernel_C.unmapPage (C))', 'True'), ('Pairing (lookupSourceSlot (ASM) <= Kernel_C.lookupSourceSlot (C))', 'True'), ('Pairing (invokeIRQHandler_ClearIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_ClearIRQHandler (C))', 'True'), ('Pairing (handleInterrupt (ASM) <= Kernel_C.handleInterrupt (C))', 'True'), ('Pairing (Arch_postModifyRegisters (ASM) <= Kernel_C.Arch_postModifyRegisters (C))', 'True'), ('Pairing (invalidateASIDEntry (ASM) <= Kernel_C.invalidateASIDEntry (C))', 'True'), ('Pairing (makeUserPDE (ASM) <= Kernel_C.makeUserPDE (C))', 'True'), ('Pairing (invokeTCB_Resume (ASM) <= Kernel_C.invokeTCB_Resume (C))', 'True'), ('Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C))', 'True'), ('Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C))', 'True'), ('Pairing (dist_init (ASM) <= Kernel_C.dist_init (C))', 'True'), ("Pairing (l_impl'isb (ASM) <= r_impl'isb (C))", 'None'), ('Pairing (c_handle_interrupt (ASM) <= Kernel_C.c_handle_interrupt (C))', 'True'), ('Pairing (invokeTCB_Suspend (ASM) <= Kernel_C.invokeTCB_Suspend (C))', 'True'), ('Pairing (initL2Cache (ASM) <= Kernel_C.initL2Cache (C))', 'True'), ('Pairing (isValidVTableRoot (ASM) <= Kernel_C.isValidVTableRoot (C))', 'True'), ('Pairing (doReplyTransfer (ASM) <= Kernel_C.doReplyTransfer (C))', 'True'), ('Pairing (init_core_state (ASM) <= Kernel_C.init_core_state (C))', 'True'), ('Pairing (Arch_createObject (ASM) <= Kernel_C.Arch_createObject (C))', 'True'), ('Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C))', 'True'), ('Pairing (tcbEPAppend (ASM) <= Kernel_C.tcbEPAppend (C))', 'True'), ('Pairing (Arch_decodeIRQControlInvocation (ASM) <= Kernel_C.Arch_decodeIRQControlInvocation (C))', 'True'), ("Pairing (l_impl'dsb (ASM) <= r_impl'dsb (C))", 'None'), ('Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C))', 'ProofNoSplit'), ('Pairing (lookupSlotForCNodeOp (ASM) <= Kernel_C.lookupSlotForCNodeOp (C))', 'True'), ('Pairing (invokeCNodeInsert (ASM) <= Kernel_C.invokeCNodeInsert (C))', 'True'), ('Pairing (handleFault (ASM) <= Kernel_C.handleFault (C))', 'True')]
Result summary:
  - 263 proofs checked
  - 19 proofs skipped
  - failures: ['Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))', 'Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C))']
