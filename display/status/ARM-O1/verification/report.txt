Checking 284 function pair problems
Testing Function pair Pairing (handleUnknownSyscall (ASM) <= Kernel_C.handleUnknownSyscall (C))
  (function pairing 1 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleUnknownSyscall (ASM) <= Kernel_C.handleUnknownSyscall (C)), time taken: 0.20s
Testing Function pair Pairing (replyFromKernel_error (ASM) <= Kernel_C.replyFromKernel_error (C))
  (function pairing 2 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (replyFromKernel_error (ASM) <= Kernel_C.replyFromKernel_error (C)), time taken: 0.22s
Testing Function pair Pairing (map_kernel_devices (ASM) <= Kernel_C.map_kernel_devices (C))
  (function pairing 3 of 284)
 .. built problem, finding proof
Discovered that points [49 (loop head)] can be bounded
  (in problem)
Discovered that points [28 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (49, ('Number', (0, 2))), (ProofNode ('Restr', (28, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 49 is in {0 ..< 2}
    .. proven.
Step 2: 
  Prove the number of visits to 28 is in {0 ..< 1}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (map_kernel_devices (ASM) <= Kernel_C.map_kernel_devices (C)), time taken: 1.01s
Testing Function pair Pairing (str_to_long (ASM) <= Kernel_C.str_to_long (C))
  (function pairing 4 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [14, 70]
  (in problem)
Now doing proof search in 14 init case in problem.
Now doing proof search in 14 loop case in problem.
ProofNode ('Split', ((14, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (70, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'base___unsigned#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'str___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'res___long#v')), (Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'val___long#v'))], 2, 1), (ProofNode ('Restr', (14, ('Number', (0, 3))), (ProofNode ('Restr', (70, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (14, ('Offset', (0, 3))), (ProofNode ('Restr', (70, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 14 related to visits to 70
    with equalities
      ((Word32) ('r0')) (@ addr 14)
      = ((Word32) ('res___long#v')) (@ addr 70)
      ((Word32) ('r5')) (@ addr 14)
      = ((Word32) ('val___long#v')) (@ addr 70)
    and with invariants
      ((Word32) ('r7')) (@ addr 14)
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 14)
      ((Word32) ('r8')) (@ addr 14)
      ((Word32) ('r9')) (@ addr 14)
      ((Word32) ('ret')) (@ addr 14)
      ((Word32) ('r11')) (@ addr 14)
      ((Word32) ('r13')) (@ addr 14)
      ((Word32) ('r10')) (@ addr 14)
      ((Mem) ('mem')) (@ addr 14)
      ((Word32) ('r6')) (@ addr 14)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 14)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 70)
      ((Word32) ('base___unsigned#v')) (@ addr 70)
      ((Mem) ('Mem')) (@ addr 70)
      ((Word32) (('str___ptr_to_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 70)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 14 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 70 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 14 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 70 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (str_to_long (ASM) <= Kernel_C.str_to_long (C)), time taken: 75.28s
Testing Function pair Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C))
  (function pairing 5 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [7, 178]
  (in problem)
Now doing proof search in 7 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 7 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 7 init case in problem)
Now doing proof search in 7 loop case in problem.
Discovered a loop relation for split points [52, 196]
  (in 7 loop case in problem)
Now doing proof search in 52 init case in 7 loop case in problem.
Now doing proof search in 52 loop case in 7 loop case in problem.
ProofNode ('Split', ((7, (1, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Var', Type ('Word', 32), name = 'r12')]), (178, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'buffer___ptr_to_unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#26#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'resumeTarget___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'archInfo___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (7, ('Number', (0, 4))), (ProofNode ('Restr', (178, ('Number', (0, 4))), (ProofNode ('Restr', (155, ('Number', (0, 2))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (7, ('Offset', (0, 3))), (ProofNode ('Restr', (178, ('Offset', (0, 3))), (ProofNode ('Split', ((52, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (196, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'buffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#13#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'archInfo___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'resumeTarget___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1')), (Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'w___unsigned_long#v')), (Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'reg___unsigned_long#v'))], 2, 1), (ProofNode ('Restr', (52, ('Number', (0, 3))), (ProofNode ('Restr', (196, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (52, ('Offset', (0, 3))), (ProofNode ('Restr', (196, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits [2, 3, 4 ...] to 7 related to visits [2, 3, 4 ...] to 178
    with equalities
      ((Mem) ('mem')) (@ addr 7)
      = ((Mem) ('Mem')) (@ addr 178)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 4)))) (@ addr 7)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 7)
      ((Word32) ('r13')) (@ addr 7)
      ((Word32) ('r9')) (@ addr 7)
      ((Word32) ('r6')) (@ addr 7)
      ((Word32) (('r7' + ((0 - '#seq-visits') * 4)))) (@ addr 7)
      ((Word32) ('r8')) (@ addr 7)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 7)
      ((Word32) ('r11')) (@ addr 7)
      ((Word32) ('r5')) (@ addr 7)
      ((Word32) ('ret')) (@ addr 7)
      ((Word32) ('r1')) (@ addr 7)
      ((Word32) ('r2')) (@ addr 7)
      ((Bool) (ROData('mem'))) (@ addr 7)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 7)
      ((Word32) ('r12')) (@ addr 7)
      ((Word32) ('buffer___ptr_to_unsigned_long#v')) (@ addr 178)
      ((Word32) (('loop#26#count' + ((0 - '#seq-visits') * 1)))) (@ addr 178)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 178)
      ((Word32) ('resumeTarget___unsigned_long#v')) (@ addr 178)
      ((Word32) ('n___unsigned_long#v')) (@ addr 178)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 178)
      ((Word32) ('archInfo___unsigned_long#v')) (@ addr 178)
      ((Word32[50]) ('GhostAssertions')) (@ addr 178)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 7 is in {0 ..< 4}
    .. proven.
Step 3: 
  Prove the number of visits to 178 is in {0 ..< 4}
    .. proven.
Step 4: 
  Prove the number of visits to 155 is in {0 ..< 2}
    .. proven.
Step 5: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Step 7: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 7 is in {i + 0 ..< i + 3}
    .. proven.
Step 8: 
  Prove the number of visits to 178 is in {i + 0 ..< i + 3}
    .. proven.
Step 9: 
  prove visits to 52 related to visits to 196
    with equalities
      ((Mem) ('mem')) (@ addr 52)
      = ((Mem) ('Mem.1')) (@ addr 196)
      ((Word32) ('r12')) (@ addr 52)
      = ((Word32) ('w___unsigned_long#v')) (@ addr 196)
      ((Word32) ('r14')) (@ addr 52)
      = ((Word32) ('reg___unsigned_long#v')) (@ addr 196)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 4)))) (@ addr 52)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 52)
      ((Word32) ('r13')) (@ addr 52)
      ((Word32) ('r6')) (@ addr 52)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 52)
      ((Word32) ('r1')) (@ addr 52)
      ((Word32) ('r5')) (@ addr 52)
      ((Word32) ('r7')) (@ addr 52)
      ((Word32) ('ret')) (@ addr 52)
      ((Word32) ('r11')) (@ addr 52)
      ((Word32) ('r2')) (@ addr 52)
      ((Bool) (ROData('mem'))) (@ addr 52)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 52)
      ((Word32) ('buffer___ptr_to_unsigned_long#v')) (@ addr 196)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 196)
      ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 196)
      ((Word32) (('loop#13#count' + ((0 - '#seq-visits') * 1)))) (@ addr 196)
      ((Word32) ('n___unsigned_long#v')) (@ addr 196)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 196)
      ((Word32) ('archInfo___unsigned_long#v')) (@ addr 196)
      ((Word32) ('resumeTarget___unsigned_long#v')) (@ addr 196)
      ((Word32[50]) ('GhostAssertions.1')) (@ addr 196)
    .. proven.
Step 10: case in (9) where the length of the sequence < 2
  Prove the number of visits to 52 is in {0 ..< 3}
    .. proven.
Step 11: 
  Prove the number of visits to 196 is in {0 ..< 3}
    .. proven.
Step 12: 
  prove all verification conditions
    .. proven.
Step 13: case in (9) where the length of the sequence is j + 2
  Prove the number of visits to 52 is in {j + 0 ..< j + 3}
    .. proven.
Step 14: 
  Prove the number of visits to 196 is in {j + 0 ..< j + 3}
    .. proven.
Step 15: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C)), time taken: 502.53s
Testing Function pair Pairing (invokeCNodeRevoke (ASM) <= Kernel_C.invokeCNodeRevoke (C))
  (function pairing 6 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeRevoke (ASM) <= Kernel_C.invokeCNodeRevoke (C)), time taken: 0.10s
Testing Function pair Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C))
  (function pairing 7 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [12, 1023]
  (in problem)
Now doing proof search in 12 init case in problem.
Discovered a loop relation for split points [23, 998]
  (in 12 init case in problem)
Now doing proof search in 23 init case in 12 init case in problem.
Discovered that points [799 (loop head)] can be bounded
  (in 23 init case in 12 init case in problem)
Discovered that points [772 (loop head)] can be bounded
  (in 23 init case in 12 init case in problem)
Result ProofNoSplit for pair Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C)), time taken: 635.12s
Testing Function pair Pairing (Arch_decodeIRQControlInvocation (ASM) <= Kernel_C.Arch_decodeIRQControlInvocation (C))
  (function pairing 8 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_decodeIRQControlInvocation (ASM) <= Kernel_C.Arch_decodeIRQControlInvocation (C)), time taken: 8.58s
Testing Function pair Pairing (sameRegionAs (ASM) <= Kernel_C.sameRegionAs (C))
  (function pairing 9 of 284)
 .. built problem, finding proof
Decided to case split at (12, 'ASM')
  (in problem)
Now doing proof search in true case (12 visited) in problem.
Now doing proof search in false case (12 not visited) in problem.
ProofNode ('CaseSplit', (12, 'ASM'), (ProofNode ('Restr', (12, ('Number', (1, 2))), (ProofNode ('Restr', (498, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (12, ('Number', (0, 1))), (ProofNode ('Restr', (498, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 12 is visited
Step 2: case in (1) where 12 is visited
  Prove the number of visits to 12 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 498 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 12 is not visited
  Prove the number of visits to 12 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 498 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (sameRegionAs (ASM) <= Kernel_C.sameRegionAs (C)), time taken: 19.45s
Testing Function pair Pairing (Arch_switchToIdleThread (ASM) <= Kernel_C.Arch_switchToIdleThread (C))
  (function pairing 10 of 284)
 .. built problem, finding proof
Discovered that points [16 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_switchToIdleThread (ASM) <= Kernel_C.Arch_switchToIdleThread (C)), time taken: 0.37s
Testing Function pair Pairing (strncmp (ASM) <= Kernel_C.strncmp (C))
  (function pairing 11 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [13, 70]
  (in problem)
Now doing proof search in 13 init case in problem.
Now doing proof search in 13 loop case in problem.
ProofNode ('Split', ((13, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (70, (1, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'n___int#v'), Expr ('Var', Type ('Word', 32), name = 's1___ptr_to_char#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('Word', 32), name = 's2___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (13, ('Number', (0, 3))), (ProofNode ('Restr', (70, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (13, ('Offset', (0, 3))), (ProofNode ('Restr', (70, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 13 related to visits [2, 3, 4 ...] to 70
    with equalities
    and with invariants
      ((Word32) ('r8')) (@ addr 13)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 13)
      ((Word32) ('r5')) (@ addr 13)
      ((Word32) ('r9')) (@ addr 13)
      ((Word32) ('ret')) (@ addr 13)
      ((Word32) ('r2')) (@ addr 13)
      ((Word32) ('r11')) (@ addr 13)
      ((Word32) ('r13')) (@ addr 13)
      ((Word32) ('r10')) (@ addr 13)
      ((Mem) ('mem')) (@ addr 13)
      ((Word32) ('r6')) (@ addr 13)
      ((Word32) ('r7')) (@ addr 13)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 13)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 70)
      ((Word32) ('n___int#v')) (@ addr 70)
      ((Word32) ('s1___ptr_to_char#v')) (@ addr 70)
      ((Mem) ('Mem')) (@ addr 70)
      ((Word32) ('s2___ptr_to_char#v')) (@ addr 70)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 70)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 13 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 70 is in {0 ..< 4}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 13 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 70 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (strncmp (ASM) <= Kernel_C.strncmp (C)), time taken: 21.03s
Testing Function pair Pairing (invokeTCB_CopyRegisters (ASM) <= Kernel_C.invokeTCB_CopyRegisters (C))
  (function pairing 12 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [9, 109]
  (in problem)
Now doing proof search in 9 init case in problem.
Discovered a loop relation for split points [19, 94]
  (in 9 init case in problem)
Now doing proof search in 19 init case in 9 init case in problem.
Now doing proof search in 19 loop case in 9 init case in problem.
Now doing proof search in 9 loop case in problem.
Discovered a loop relation for split points [19, 94]
  (in 9 loop case in problem)
Now doing proof search in 19 init case in 9 loop case in problem.
Now doing proof search in 19 loop case in 9 loop case in problem.
ProofNode ('Split', ((9, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (109, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'transferArch___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#25#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'transferInteger___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (9, ('Number', (0, 1))), (ProofNode ('Restr', (109, ('Number', (0, 2))), (ProofNode ('Split', ((19, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (94, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'transferArch___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (19, ('Number', (0, 1))), (ProofNode ('Restr', (94, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (19, ('Offset', (0, 3))), (ProofNode ('Restr', (94, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (9, ('Offset', (0, 3))), (ProofNode ('Restr', (109, ('Offset', (0, 3))), (ProofNode ('Split', ((19, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (94, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'transferArch___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (19, ('Number', (0, 1))), (ProofNode ('Restr', (94, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (19, ('Offset', (0, 3))), (ProofNode ('Restr', (94, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 9 related to visits to 109
    with equalities
      ((Mem) ('mem')) (@ addr 9)
      = ((Mem) ('Mem')) (@ addr 109)
    and with invariants
      ((Word32) ('r4')) (@ addr 9)
      ((Word32) ('r8')) (@ addr 9)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 9)
      ((Word32) ('r5')) (@ addr 9)
      ((Word32) ('r0')) (@ addr 9)
      ((Word32) ('r9')) (@ addr 9)
      ((Word32) ('ret')) (@ addr 9)
      ((Word32) ('r11')) (@ addr 9)
      ((Word32) ('r13')) (@ addr 9)
      ((Word32) ('r10')) (@ addr 9)
      ((Bool) (ROData('mem'))) (@ addr 9)
      ((Word32) ('r7')) (@ addr 9)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 9)
      ((Word32) ('transferArch___unsigned_long#v')) (@ addr 109)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 109)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 109)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 109)
      ((Word32) (('loop#25#count' + ((0 - '#seq-visits') * 1)))) (@ addr 109)
      ((Word32) ('transferInteger___unsigned_long#v')) (@ addr 109)
      ((Word32[50]) ('GhostAssertions')) (@ addr 109)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 9 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 109 is in {0 ..< 2}
    .. proven.
Step 4: 
  prove visits to 19 related to visits to 94
    with equalities
      ((Mem) ('mem')) (@ addr 19)
      = ((Mem) ('Mem')) (@ addr 94)
    and with invariants
      ((Word32) ('r4')) (@ addr 19)
      ((Word32) ('r8')) (@ addr 19)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 19)
      ((Word32) ('r5')) (@ addr 19)
      ((Word32) ('r0')) (@ addr 19)
      ((Word32) ('r9')) (@ addr 19)
      ((Word32) ('ret')) (@ addr 19)
      ((Word32) ('r11')) (@ addr 19)
      ((Word32) ('r13')) (@ addr 19)
      ((Word32) ('r10')) (@ addr 19)
      ((Bool) (ROData('mem'))) (@ addr 19)
      ((Word32) ('r7')) (@ addr 19)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 19)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 94)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 94)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 94)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 94)
      ((Word32) ('transferArch___unsigned_long#v')) (@ addr 94)
      ((Word32[50]) ('GhostAssertions')) (@ addr 94)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 19 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 94 is in {0 ..< 2}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 19 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 94 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 9 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 109 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 19 related to visits to 94
    with equalities
      ((Mem) ('mem')) (@ addr 19)
      = ((Mem) ('Mem')) (@ addr 94)
    and with invariants
      ((Word32) ('r4')) (@ addr 19)
      ((Word32) ('r8')) (@ addr 19)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 19)
      ((Word32) ('r5')) (@ addr 19)
      ((Word32) ('r0')) (@ addr 19)
      ((Word32) ('r9')) (@ addr 19)
      ((Word32) ('ret')) (@ addr 19)
      ((Word32) ('r11')) (@ addr 19)
      ((Word32) ('r13')) (@ addr 19)
      ((Word32) ('r10')) (@ addr 19)
      ((Bool) (ROData('mem'))) (@ addr 19)
      ((Word32) ('r7')) (@ addr 19)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 19)
      ((Word32) ('dest___ptr_to_struct_tcb_C#v')) (@ addr 94)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 94)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 94)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 94)
      ((Word32) ('transferArch___unsigned_long#v')) (@ addr 94)
      ((Word32[50]) ('GhostAssertions')) (@ addr 94)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 19 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 94 is in {0 ..< 1}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 19 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 94 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_CopyRegisters (ASM) <= Kernel_C.invokeTCB_CopyRegisters (C)), time taken: 88.85s
Testing Function pair Pairing (setupCallerCap (ASM) <= Kernel_C.setupCallerCap (C))
  (function pairing 13 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setupCallerCap (ASM) <= Kernel_C.setupCallerCap (C)), time taken: 0.33s
Testing Function pair Pairing (unbindNotification (ASM) <= Kernel_C.unbindNotification (C))
  (function pairing 14 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (unbindNotification (ASM) <= Kernel_C.unbindNotification (C)), time taken: 0.17s
Testing Function pair Pairing (unbindMaybeNotification (ASM) <= Kernel_C.unbindMaybeNotification (C))
  (function pairing 15 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (unbindMaybeNotification (ASM) <= Kernel_C.unbindMaybeNotification (C)), time taken: 0.18s
Testing Function pair Pairing (isFinalCapability (ASM) <= Kernel_C.isFinalCapability (C))
  (function pairing 16 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isFinalCapability (ASM) <= Kernel_C.isFinalCapability (C)), time taken: 0.87s
Testing Function pair Pairing (unmapPage (ASM) <= Kernel_C.unmapPage (C))
  (function pairing 17 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [48, 223]
  (in problem)
Now doing proof search in 48 init case in problem.
Discovered a loop relation for split points [70, 269]
  (in 48 init case in problem)
Now doing proof search in 70 init case in 48 init case in problem.
Now doing proof search in 70 loop case in 48 init case in problem.
Now doing proof search in 48 loop case in problem.
ProofNode ('Split', ((48, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (223, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#26#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'ret__struct_pte_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'find_ret___struct_findPDForASID_ret_C#v.pd_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'page_size___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C'), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'vptr___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (48, ('Number', (0, 1))), (ProofNode ('Restr', (223, ('Number', (0, 1))), (ProofNode ('Split', ((70, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (269, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#72#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'pd___ptr_to_struct_pde_C#v'), Expr ('Var', Type ('Word', 32), name = 'find_ret___struct_findPDForASID_ret_C#v.pd_C'), Expr ('Var', Type ('Word', 32), name = 'page_size___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'ret__struct_pde_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'vptr___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (70, ('Number', (0, 1))), (ProofNode ('Restr', (269, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (70, ('Offset', (0, 3))), (ProofNode ('Restr', (269, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (48, ('Offset', (0, 3))), (ProofNode ('Restr', (223, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 48 related to visits to 223
    with equalities
      ((Mem) ('mem')) (@ addr 48)
      = ((Mem) ('Mem')) (@ addr 223)
    and with invariants
      ((Word32) ('r4')) (@ addr 48)
      ((Word32) ('r0')) (@ addr 48)
      ((Word32) ('r13')) (@ addr 48)
      ((Word32) ('r10')) (@ addr 48)
      ((Word32) ('r12')) (@ addr 48)
      ((Word32) ('r9')) (@ addr 48)
      ((Word32) ('r6')) (@ addr 48)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 48)
      ((Word32) ('r5')) (@ addr 48)
      ((Word32) ('r7')) (@ addr 48)
      ((Word32) ('ret')) (@ addr 48)
      ((Word32) ('r11')) (@ addr 48)
      ((Word32) ('r2')) (@ addr 48)
      ((Bool) (ROData('mem'))) (@ addr 48)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 48)
      ((Word32) (('loop#26#count' + ((0 - '#seq-visits') * 1)))) (@ addr 223)
      ((Word32) ('ret__struct_pte_C#v.words_C.0')) (@ addr 223)
      ((Word32) ('find_ret___struct_findPDForASID_ret_C#v.pd_C')) (@ addr 223)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 223)
      ((Word32) ('page_size___unsigned_long#v')) (@ addr 223)
      ((Word32) ('lu_ret___struct_lookupPTSlot_ret_C#v.ptSlot_C')) (@ addr 223)
      ((Word32) ('asid___unsigned_long#v')) (@ addr 223)
      ((Word32[50]) ('GhostAssertions')) (@ addr 223)
      ((Word32) ('vptr___unsigned_long#v')) (@ addr 223)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 48 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 223 is in {0 ..< 1}
    .. proven.
Step 4: 
  prove visits to 70 related to visits to 269
    with equalities
      ((Mem) ('mem')) (@ addr 70)
      = ((Mem) ('Mem')) (@ addr 269)
    and with invariants
      ((Word32) ('r4')) (@ addr 70)
      ((Word32) ('r0')) (@ addr 70)
      ((Word32) ('r13')) (@ addr 70)
      ((Word32) ('r10')) (@ addr 70)
      ((Word32) ('r12')) (@ addr 70)
      ((Word32) ('r9')) (@ addr 70)
      ((Word32) ('r6')) (@ addr 70)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 70)
      ((Word32) ('r5')) (@ addr 70)
      ((Word32) ('r7')) (@ addr 70)
      ((Word32) ('ret')) (@ addr 70)
      ((Word32) ('r11')) (@ addr 70)
      ((Word32) ('r2')) (@ addr 70)
      ((Bool) (ROData('mem'))) (@ addr 70)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 70)
      ((Word32) (('loop#72#count' + ((0 - '#seq-visits') * 1)))) (@ addr 269)
      ((Word32) ('pd___ptr_to_struct_pde_C#v')) (@ addr 269)
      ((Word32) ('find_ret___struct_findPDForASID_ret_C#v.pd_C')) (@ addr 269)
      ((Word32) ('page_size___unsigned_long#v')) (@ addr 269)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 269)
      ((Word32) ('asid___unsigned_long#v')) (@ addr 269)
      ((Word32[50]) ('GhostAssertions')) (@ addr 269)
      ((Word32) ('ret__struct_pde_C#v.words_C.0')) (@ addr 269)
      ((Word32) ('vptr___unsigned_long#v')) (@ addr 269)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 70 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 269 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 70 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 269 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 48 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 223 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (unmapPage (ASM) <= Kernel_C.unmapPage (C)), time taken: 55.44s
Testing Function pair Pairing (pageTableMapped (ASM) <= Kernel_C.pageTableMapped (C))
  (function pairing 18 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (pageTableMapped (ASM) <= Kernel_C.pageTableMapped (C)), time taken: 30.32s
Testing Function pair Pairing (c_handle_interrupt (ASM) <= Kernel_C.c_handle_interrupt (C))
  (function pairing 19 of 284)
 .. built problem, finding proof
Discovered that points [26 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (26, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 26 is in {0 ..< 2}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (c_handle_interrupt (ASM) <= Kernel_C.c_handle_interrupt (C)), time taken: 0.92s
Testing Function pair Pairing (invokeTCB_Suspend (ASM) <= Kernel_C.invokeTCB_Suspend (C))
  (function pairing 20 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_Suspend (ASM) <= Kernel_C.invokeTCB_Suspend (C)), time taken: 0.16s
Testing Function pair Pairing (doNormalTransfer (ASM) <= Kernel_C.doNormalTransfer (C))
  (function pairing 21 of 284)
 .. built problem, finding proof
Discovered that points [269 (loop head)] can be bounded
  (in problem)
Discovered that points [141 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (269, ('Number', (0, 5))), (ProofNode ('Restr', (141, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 269 is in {0 ..< 5}
    .. proven.
Step 2: 
  Prove the number of visits to 141 is in {0 ..< 4}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doNormalTransfer (ASM) <= Kernel_C.doNormalTransfer (C)), time taken: 195.57s
Testing Function pair Pairing (unmapPageTable (ASM) <= Kernel_C.unmapPageTable (C))
  (function pairing 22 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (unmapPageTable (ASM) <= Kernel_C.unmapPageTable (C)), time taken: 0.83s
Testing Function pair Pairing (deleteASID (ASM) <= Kernel_C.deleteASID (C))
  (function pairing 23 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deleteASID (ASM) <= Kernel_C.deleteASID (C)), time taken: 0.72s
Testing Function pair Pairing (configureIdleThread (ASM) <= Kernel_C.configureIdleThread (C))
  (function pairing 24 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (configureIdleThread (ASM) <= Kernel_C.configureIdleThread (C)), time taken: 0.28s
Testing Function pair Pairing (isValidVTableRoot (ASM) <= Kernel_C.isValidVTableRoot (C))
  (function pairing 25 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isValidVTableRoot (ASM) <= Kernel_C.isValidVTableRoot (C)), time taken: 0.16s
Testing Function pair Pairing (loadCapTransfer (ASM) <= Kernel_C.loadCapTransfer (C))
  (function pairing 26 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (loadCapTransfer (ASM) <= Kernel_C.loadCapTransfer (C)), time taken: 0.24s
Testing Function pair Pairing (create_ipcbuf_frame_cap (ASM) <= Kernel_C.create_ipcbuf_frame_cap (C))
  (function pairing 27 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_ipcbuf_frame_cap (ASM) <= Kernel_C.create_ipcbuf_frame_cap (C)), time taken: 9.55s
Testing Function pair Pairing (chooseThread (ASM) <= Kernel_C.chooseThread (C))
  (function pairing 28 of 284)
 .. built problem, finding proof
Decided to case split at (5, 'ASM')
  (in problem)
Now doing proof search in true case (5 visited) in problem.
Now doing proof search in false case (5 not visited) in problem.
ProofNode ('CaseSplit', (5, 'ASM'), (ProofNode ('Restr', (5, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (51, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 5 is visited
Step 2: case in (1) where 5 is visited
  Prove the number of visits to 5 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 5 is not visited
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 51 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (chooseThread (ASM) <= Kernel_C.chooseThread (C)), time taken: 3.51s
Testing Function pair Pairing (handleFault (ASM) <= Kernel_C.handleFault (C))
  (function pairing 29 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleFault (ASM) <= Kernel_C.handleFault (C)), time taken: 0.29s
Testing Function pair Pairing (getHWASID (ASM) <= Kernel_C.getHWASID (C))
  (function pairing 30 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (getHWASID (ASM) <= Kernel_C.getHWASID (C)), time taken: 0.32s
Testing Function pair Pairing (handleInterrupt (ASM) <= Kernel_C.handleInterrupt (C))
  (function pairing 31 of 284)
 .. built problem, finding proof
Decided to case split at (10, 'ASM')
  (in problem)
Now doing proof search in true case (10 visited) in problem.
Now doing proof search in false case (10 not visited) in problem.
ProofNode ('CaseSplit', (10, 'ASM'), (ProofNode ('Restr', (10, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (10, ('Number', (0, 1))), (ProofNode ('Restr', (142, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 10 is visited
Step 2: case in (1) where 10 is visited
  Prove the number of visits to 10 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 10 is not visited
  Prove the number of visits to 10 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 142 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleInterrupt (ASM) <= Kernel_C.handleInterrupt (C)), time taken: 5.32s
Testing Function pair Pairing (decodeSetIPCBuffer (ASM) <= Kernel_C.decodeSetIPCBuffer (C))
  (function pairing 32 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeSetIPCBuffer (ASM) <= Kernel_C.decodeSetIPCBuffer (C)), time taken: 51.16s
Testing Function pair Pairing (resolveAddressBits (ASM) <= Kernel_C.resolveAddressBits (C))
  (function pairing 33 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [19, 191]
  (in problem)
Now doing proof search in 19 init case in problem.
Now doing proof search in 19 loop case in problem.
ProofNode ('Split', ((19, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'ret_addr_input'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (191, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C'), Expr ('Var', Type ('Word', 32), name = 'capptr___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'ret___struct_resolveAddressBits_ret_C#v.slot_C'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'n_bits___unsigned_long#v')), (Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'nodeCap___struct_cap_C#v.words_C.0')), (Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'radixBits___unsigned_long#v')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'levelBits___unsigned_long#v'))], 2, 1), (ProofNode ('Restr', (19, ('Number', (0, 3))), (ProofNode ('Restr', (191, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (19, ('Offset', (0, 3))), (ProofNode ('Restr', (191, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 19 related to visits to 191
    with equalities
      ((Word32) ('r1')) (@ addr 19)
      = ((Word32) ('n_bits___unsigned_long#v')) (@ addr 191)
      ((Word32) ('r14')) (@ addr 19)
      = ((Word32) ('nodeCap___struct_cap_C#v.words_C.0')) (@ addr 191)
      ((Word32) ('r2')) (@ addr 19)
      = ((Word32) ('radixBits___unsigned_long#v')) (@ addr 191)
      ((Word32) ('r4')) (@ addr 19)
      = ((Word32) ('levelBits___unsigned_long#v')) (@ addr 191)
    and with invariants
      ((Word32) ('r0')) (@ addr 19)
      ((Word32) ('r13')) (@ addr 19)
      ((Word32) ('r10')) (@ addr 19)
      ((Word32) ('r9')) (@ addr 19)
      ((Word32) ('r3')) (@ addr 19)
      ((Word32) ('ret_addr_input')) (@ addr 19)
      ((Word32) ('r5')) (@ addr 19)
      ((Word32) ('ret')) (@ addr 19)
      ((Word32) ('r11')) (@ addr 19)
      ((Mem) ('mem')) (@ addr 19)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 19)
      ((Word32) ('ret___struct_resolveAddressBits_ret_C#v.bitsRemaining_C')) (@ addr 191)
      ((Word32) ('capptr___unsigned_long#v')) (@ addr 191)
      ((Word32) ('ret___struct_resolveAddressBits_ret_C#v.slot_C')) (@ addr 191)
      ((Word32[50]) ('GhostAssertions')) (@ addr 191)
      ((Mem) ('Mem')) (@ addr 191)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 191)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 19 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 191 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 19 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 191 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (resolveAddressBits (ASM) <= Kernel_C.resolveAddressBits (C)), time taken: 198.30s
Testing Function pair Pairing (getRestartPC (ASM) <= Kernel_C.getRestartPC (C))
  (function pairing 34 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (getRestartPC (ASM) <= Kernel_C.getRestartPC (C)), time taken: 0.14s
Testing Function pair Pairing (setExtraBadge (ASM) <= Kernel_C.setExtraBadge (C))
  (function pairing 35 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setExtraBadge (ASM) <= Kernel_C.setExtraBadge (C)), time taken: 0.17s
Testing Function pair Pairing (cteMove (ASM) <= Kernel_C.cteMove (C))
  (function pairing 36 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteMove (ASM) <= Kernel_C.cteMove (C)), time taken: 1.35s
Testing Function pair Pairing (flushTable (ASM) <= Kernel_C.flushTable (C))
  (function pairing 37 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (flushTable (ASM) <= Kernel_C.flushTable (C)), time taken: 2.47s
Testing Function pair Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C))
  (function pairing 38 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [31, 52]
  (in problem)
Now doing proof search in 31 init case in problem.
Now doing proof search in 31 loop case in problem.
ProofNode ('Split', ((31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r3')])])]), (52, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (31, ('Number', (0, 3))), (ProofNode ('Restr', (52, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Restr', (52, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 31 related to visits to 52
    with equalities
      ((Mem) ('mem')) (@ addr 31)
      = ((Mem) ('Mem')) (@ addr 52)
    and with invariants
      ((Word32) ('r7')) (@ addr 31)
      ((Word32) ('r8')) (@ addr 31)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 1)))) (@ addr 31)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 31)
      ((Word32) ('r13')) (@ addr 31)
      ((Word32) ('r5')) (@ addr 31)
      ((Word32) ('r0')) (@ addr 31)
      ((Word32) ('r9')) (@ addr 31)
      ((Word32) ('ret')) (@ addr 31)
      ((Word32) ('r2')) (@ addr 31)
      ((Word32) ('r11')) (@ addr 31)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 31)
      ((Word32) ('r10')) (@ addr 31)
      ((Bool) (ROData('mem'))) (@ addr 31)
      ((Word32) ('r6')) (@ addr 31)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 31)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r2')), ((Word32) ('r3')))))) (@ addr 31)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 52)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 52)
      ((Word32) ('size___unsigned_long#v')) (@ addr 52)
      ((Word32) ('src___ptr_to_char#v')) (@ addr 52)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 52)
      ((Word32[50]) ('GhostAssertions')) (@ addr 52)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 31 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 52 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 31 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 52 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C)), time taken: 28.24s
Testing Function pair Pairing (sendFaultIPC (ASM) <= Kernel_C.sendFaultIPC (C))
  (function pairing 39 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (sendFaultIPC (ASM) <= Kernel_C.sendFaultIPC (C)), time taken: 6.90s
Testing Function pair Pairing (receiveSignal (ASM) <= Kernel_C.receiveSignal (C))
  (function pairing 40 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (receiveSignal (ASM) <= Kernel_C.receiveSignal (C)), time taken: 1.06s
Testing Function pair Pairing (tcb_queue_remove (ASM) <= Kernel_C.tcb_queue_remove (C))
  (function pairing 41 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (tcb_queue_remove (ASM) <= Kernel_C.tcb_queue_remove (C)), time taken: 0.36s
Testing Function pair Pairing (ensureNoChildren (ASM) <= Kernel_C.ensureNoChildren (C))
  (function pairing 42 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (ensureNoChildren (ASM) <= Kernel_C.ensureNoChildren (C)), time taken: 0.25s
Testing Function pair Pairing (decodeWriteRegisters (ASM) <= Kernel_C.decodeWriteRegisters (C))
  (function pairing 43 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeWriteRegisters (ASM) <= Kernel_C.decodeWriteRegisters (C)), time taken: 0.97s
Testing Function pair Pairing (setIRQTrigger (ASM) <= Kernel_C.setIRQTrigger (C))
  (function pairing 44 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setIRQTrigger (ASM) <= Kernel_C.setIRQTrigger (C)), time taken: 0.15s
Testing Function pair Pairing (Arch_sameObjectAs (ASM) <= Kernel_C.Arch_sameObjectAs (C))
  (function pairing 45 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_sameObjectAs (ASM) <= Kernel_C.Arch_sameObjectAs (C)), time taken: 0.71s
Testing Function pair Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C))
  (function pairing 46 of 284)
Aborting Problem (Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C)), time taken: 0.00s
Testing Function pair Pairing (isCapRevocable (ASM) <= Kernel_C.isCapRevocable (C))
  (function pairing 47 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isCapRevocable (ASM) <= Kernel_C.isCapRevocable (C)), time taken: 0.40s
Testing Function pair Pairing (initIRQController (ASM) <= Kernel_C.initIRQController (C))
  (function pairing 48 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (initIRQController (ASM) <= Kernel_C.initIRQController (C)), time taken: 0.14s
Testing Function pair Pairing (invalidateASIDEntry (ASM) <= Kernel_C.invalidateASIDEntry (C))
  (function pairing 49 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invalidateASIDEntry (ASM) <= Kernel_C.invalidateASIDEntry (C)), time taken: 0.25s
Testing Function pair Pairing (l_impl'wfi (ASM) <= r_impl'wfi (C))
  (function pairing 50 of 284)
Skipping Pairing (l_impl'wfi (ASM) <= r_impl'wfi (C)), underspecified C
Testing Function pair Pairing (lookupSlot (ASM) <= Kernel_C.lookupSlot (C))
  (function pairing 51 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupSlot (ASM) <= Kernel_C.lookupSlot (C)), time taken: 0.80s
Testing Function pair Pairing (copyGlobalMappings (ASM) <= Kernel_C.copyGlobalMappings (C))
  (function pairing 52 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [15, 31]
  (in problem)
Now doing proof search in 15 init case in problem.
Now doing proof search in 15 loop case in problem.
ProofNode ('Split', ((15, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'newPD___ptr_to_struct_pde_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'global_pd___ptr_to_struct_pde_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (15, ('Number', (0, 1))), (ProofNode ('Restr', (31, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (15, ('Offset', (0, 3))), (ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 15 related to visits to 31
    with equalities
      ((Mem) ('mem')) (@ addr 15)
      = ((Mem) ('Mem')) (@ addr 31)
    and with invariants
      ((Word32) ('r7')) (@ addr 15)
      ((Word32) ('r4')) (@ addr 15)
      ((Word32) ('r8')) (@ addr 15)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 15)
      ((Word32) ('r5')) (@ addr 15)
      ((Word32) ('r6')) (@ addr 15)
      ((Word32) ('r0')) (@ addr 15)
      ((Word32) ('r9')) (@ addr 15)
      ((Word32) ('ret')) (@ addr 15)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 1)))) (@ addr 15)
      ((Word32) ('r11')) (@ addr 15)
      ((Word32) ('r12')) (@ addr 15)
      ((Word32) ('r13')) (@ addr 15)
      ((Word32) ('r10')) (@ addr 15)
      ((Bool) (ROData('mem'))) (@ addr 15)
      ((Word32) ('r14')) (@ addr 15)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 15)
      ((Word32) ('newPD___ptr_to_struct_pde_C#v')) (@ addr 31)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 31)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 31)
      ((Word32) ('global_pd___ptr_to_struct_pde_C#v')) (@ addr 31)
      ((Word32[50]) ('GhostAssertions')) (@ addr 31)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 15 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 31 is in {0 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 15 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 31 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (copyGlobalMappings (ASM) <= Kernel_C.copyGlobalMappings (C)), time taken: 11.79s
Testing Function pair Pairing (create_mapped_it_frame_cap (ASM) <= Kernel_C.create_mapped_it_frame_cap (C))
  (function pairing 53 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_mapped_it_frame_cap (ASM) <= Kernel_C.create_mapped_it_frame_cap (C)), time taken: 1.10s
Testing Function pair Pairing (activate_kernel_vspace (ASM) <= Kernel_C.activate_kernel_vspace (C))
  (function pairing 54 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (activate_kernel_vspace (ASM) <= Kernel_C.activate_kernel_vspace (C)), time taken: 0.35s
Testing Function pair Pairing (decodeBindNotification (ASM) <= Kernel_C.decodeBindNotification (C))
  (function pairing 55 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeBindNotification (ASM) <= Kernel_C.decodeBindNotification (C)), time taken: 0.65s
Testing Function pair Pairing (getObjectSize (ASM) <= Kernel_C.getObjectSize (C))
  (function pairing 56 of 284)
 .. built problem, finding proof
Decided to case split at (2, 'ASM')
  (in problem)
Now doing proof search in true case (2 visited) in problem.
Now doing proof search in false case (2 not visited) in problem.
ProofNode ('CaseSplit', (2, 'ASM'), (ProofNode ('Restr', (2, ('Number', (1, 2))), (ProofNode ('Restr', (49, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (2, ('Number', (0, 1))), (ProofNode ('Restr', (49, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 2 is visited
Step 2: case in (1) where 2 is visited
  Prove the number of visits to 2 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 49 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 2 is not visited
  Prove the number of visits to 2 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 49 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (getObjectSize (ASM) <= Kernel_C.getObjectSize (C)), time taken: 3.67s
Testing Function pair Pairing (handleFaultReply (ASM) <= Kernel_C.handleFaultReply (C))
  (function pairing 57 of 284)
 .. built problem, finding proof
Decided to case split at (15, 'ASM')
  (in problem)
Now doing proof search in true case (15 visited) in problem.
Discovered that points [259 (loop head)] can be bounded
  (in true case (15 visited) in problem)
Discovered that points [296 (loop head)] can be bounded
  (in true case (15 visited) in problem)
Discovered that points [243 (loop head)] can be bounded
  (in true case (15 visited) in problem)
Discovered that points [280 (loop head)] can be bounded
  (in true case (15 visited) in problem)
Now doing proof search in false case (15 not visited) in problem.
Decided to case split at (10, 'ASM')
  (in false case (15 not visited) in problem)
Now doing proof search in true case (10 visited) in false case (15 not visited) in problem.
Discovered that points [259 (loop head)] can be bounded
  (in true case (10 visited) in false case (15 not visited) in problem)
Discovered that points [296 (loop head)] can be bounded
  (in true case (10 visited) in false case (15 not visited) in problem)
Discovered that points [243 (loop head)] can be bounded
  (in true case (10 visited) in false case (15 not visited) in problem)
Discovered that points [280 (loop head)] can be bounded
  (in true case (10 visited) in false case (15 not visited) in problem)
Discovered that points [177 (loop head)] can be bounded
  (in true case (10 visited) in false case (15 not visited) in problem)
Discovered that points [193 (loop head)] can be bounded
  (in true case (10 visited) in false case (15 not visited) in problem)
Now doing proof search in false case (10 not visited) in false case (15 not visited) in problem.
Decided to case split at (8, 'ASM')
  (in false case (10 not visited) in false case (15 not visited) in problem)
Now doing proof search in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem.
Discovered that points [296 (loop head)] can be bounded
  (in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [280 (loop head)] can be bounded
  (in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered a loop relation for split points [28, 263]
  (in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem)
Now doing proof search in 28 init case in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem.
Discovered that points [243 (loop head)] can be bounded
  (in 28 init case in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [145 (loop head)] can be bounded
  (in 28 init case in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem)
Now doing proof search in 28 loop case in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem.
Discovered a loop relation for split points [43, 251]
  (in 28 loop case in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem)
Now doing proof search in 43 init case in 28 loop case in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem.
Now doing proof search in 43 loop case in 28 loop case in true case (8 visited) in false case (10 not visited) in false case (15 not visited) in problem.
Now doing proof search in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem.
Discovered that points [259 (loop head)] can be bounded
  (in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [296 (loop head)] can be bounded
  (in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [243 (loop head)] can be bounded
  (in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [280 (loop head)] can be bounded
  (in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [131 (loop head)] can be bounded
  (in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [145 (loop head)] can be bounded
  (in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [177 (loop head)] can be bounded
  (in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem)
Discovered that points [193 (loop head)] can be bounded
  (in false case (8 not visited) in false case (10 not visited) in false case (15 not visited) in problem)
ProofNode ('CaseSplit', (15, 'ASM'), (ProofNode ('Restr', (15, ('Number', (1, 2))), (ProofNode ('Restr', (259, ('Number', (0, 1))), (ProofNode ('Restr', (296, ('Number', (0, 1))), (ProofNode ('Restr', (243, ('Number', (0, 1))), (ProofNode ('Restr', (280, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (15, ('Number', (0, 1))), (ProofNode ('CaseSplit', (10, 'ASM'), (ProofNode ('Restr', (10, ('Number', (1, 2))), (ProofNode ('Restr', (259, ('Number', (0, 1))), (ProofNode ('Restr', (296, ('Number', (0, 5))), (ProofNode ('Restr', (243, ('Number', (0, 1))), (ProofNode ('Restr', (280, ('Number', (0, 1))), (ProofNode ('Restr', (177, ('Number', (0, 4))), (ProofNode ('Restr', (193, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)), ProofNode ('Restr', (10, ('Number', (0, 1))), (ProofNode ('Restr', (213, ('Number', (0, 1))), (ProofNode ('CaseSplit', (8, 'ASM'), (ProofNode ('Restr', (8, ('Number', (1, 2))), (ProofNode ('Restr', (296, ('Number', (0, 1))), (ProofNode ('Restr', (280, ('Number', (0, 1))), (ProofNode ('Split', ((28, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (263, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'receiver___ptr_to_struct_tcb_C#v.1'), Expr ('Var', Type ('Word', 32), name = 'length___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'archInfo___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'label___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#18#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.1'), Expr ('Var', Type ('Word', 32), name = 'sender___ptr_to_struct_tcb_C#v.1'), Expr ('Var', Type ('Word', 32), name = 'id___anonymous_enum#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (28, ('Number', (0, 3))), (ProofNode ('Restr', (263, ('Number', (0, 4))), (ProofNode ('Restr', (243, ('Number', (0, 1))), (ProofNode ('Restr', (145, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (263, ('Offset', (0, 3))), (ProofNode ('Split', ((43, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (251, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'receiver___ptr_to_struct_tcb_C#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'length___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'archInfo___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'label___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'sendBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.1'), Expr ('Var', Type ('Word', 32), name = 'id___anonymous_enum#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (43, ('Number', (0, 3))), (ProofNode ('Restr', (251, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (43, ('Offset', (0, 3))), (ProofNode ('Restr', (251, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)),)), ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Restr', (211, ('Number', (0, 1))), (ProofNode ('Restr', (259, ('Number', (0, 1))), (ProofNode ('Restr', (296, ('Number', (0, 1))), (ProofNode ('Restr', (243, ('Number', (0, 1))), (ProofNode ('Restr', (280, ('Number', (0, 1))), (ProofNode ('Restr', (131, ('Number', (0, 1))), (ProofNode ('Restr', (145, ('Number', (0, 1))), (ProofNode ('Restr', (177, ('Number', (0, 1))), (ProofNode ('Restr', (193, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)),)),)))),)),)))),))))
 .. proof found.
Step 1: 
  case split on whether 15 is visited
Step 2: case in (1) where 15 is visited
  Prove the number of visits to 15 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 259 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 296 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 243 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 280 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (1) where 15 is not visited
  Prove the number of visits to 15 is in {0 ..< 1}
    .. proven.
Step 9: 
  case split on whether 10 is visited
Step 10: case in (9) where 10 is visited
  Prove the number of visits to 10 is in {1 ..< 2}
    .. proven.
Step 11: 
  Prove the number of visits to 259 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 296 is in {0 ..< 5}
    .. proven.
Step 13: 
  Prove the number of visits to 243 is in {0 ..< 1}
    .. proven.
Step 14: 
  Prove the number of visits to 280 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 177 is in {0 ..< 4}
    .. proven.
Step 16: 
  Prove the number of visits to 193 is in {0 ..< 1}
    .. proven.
Step 17: 
  prove all verification conditions
    .. proven.
Step 18: case in (9) where 10 is not visited
  Prove the number of visits to 10 is in {0 ..< 1}
    .. proven.
Step 19: 
  Prove the number of visits to 213 is in {0 ..< 1}
    .. proven.
Step 20: 
  case split on whether 8 is visited
Step 21: case in (20) where 8 is visited
  Prove the number of visits to 8 is in {1 ..< 2}
    .. proven.
Step 22: 
  Prove the number of visits to 296 is in {0 ..< 1}
    .. proven.
Step 23: 
  Prove the number of visits to 280 is in {0 ..< 1}
    .. proven.
Step 24: 
  prove visits to 28 related to visits [2, 3, 4 ...] to 263
    with equalities
      ((Mem) ('mem')) (@ addr 28)
      = ((Mem) ('Mem.1')) (@ addr 263)
    and with invariants
      ((Word32) ('r4')) (@ addr 28)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 28)
      ((Word32) ('r13')) (@ addr 28)
      ((Word32) ('r10')) (@ addr 28)
      ((Word32) ('r12')) (@ addr 28)
      ((Word32) ('r9')) (@ addr 28)
      ((Word32) ('r6')) (@ addr 28)
      ((Word32) ('r7')) (@ addr 28)
      ((Word32) ('r1')) (@ addr 28)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 4)))) (@ addr 28)
      ((Word32) ('r5')) (@ addr 28)
      ((Word32) ('ret')) (@ addr 28)
      ((Word32) ('r11')) (@ addr 28)
      ((Bool) (ROData('mem'))) (@ addr 28)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 28)
      ((Word32) ('receiver___ptr_to_struct_tcb_C#v.1')) (@ addr 263)
      ((Word32) ('length___unsigned_long#v.1')) (@ addr 263)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 263)
      ((Word32) ('archInfo___unsigned_long#v')) (@ addr 263)
      ((Word32) ('label___unsigned_long#v')) (@ addr 263)
      ((Word32) (('loop#18#count' + ((0 - '#seq-visits') * 1)))) (@ addr 263)
      ((Word32[50]) ('GhostAssertions.1')) (@ addr 263)
      ((Word32) ('sender___ptr_to_struct_tcb_C#v.1')) (@ addr 263)
      ((Word32) ('id___anonymous_enum#v')) (@ addr 263)
    .. proven.
Step 25: case in (24) where the length of the sequence < 2
  Prove the number of visits to 28 is in {0 ..< 3}
    .. proven.
Step 26: 
  Prove the number of visits to 263 is in {0 ..< 4}
    .. proven.
Step 27: 
  Prove the number of visits to 243 is in {0 ..< 1}
    .. proven.
Step 28: 
  Prove the number of visits to 145 is in {0 ..< 1}
    .. proven.
Step 29: 
  prove all verification conditions
    .. proven.
Step 30: case in (24) where the length of the sequence is i + 2
  Prove the number of visits to 28 is in {i + 0 ..< i + 3}
    .. proven.
Step 31: 
  Prove the number of visits to 263 is in {i + 0 ..< i + 3}
    .. proven.
Step 32: 
  prove visits to 43 related to visits to 251
    with equalities
      ((Mem) ('mem')) (@ addr 43)
      = ((Mem) ('Mem.1')) (@ addr 251)
    and with invariants
      ((Word32) ('r7')) (@ addr 43)
      ((Word32) ('r4')) (@ addr 43)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 43)
      ((Word32) ('r5')) (@ addr 43)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 4)))) (@ addr 43)
      ((Word32) ('r9')) (@ addr 43)
      ((Word32) ('ret')) (@ addr 43)
      ((Word32) ('r11')) (@ addr 43)
      ((Word32) ('r13')) (@ addr 43)
      ((Word32) ('r10')) (@ addr 43)
      ((Bool) (ROData('mem'))) (@ addr 43)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 43)
      ((Word32) ('receiver___ptr_to_struct_tcb_C#v.1')) (@ addr 251)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 251)
      ((Word32) ('length___unsigned_long#v.1')) (@ addr 251)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 251)
      ((Word32) ('archInfo___unsigned_long#v')) (@ addr 251)
      ((Word32) ('label___unsigned_long#v')) (@ addr 251)
      ((Word32) ('sendBuf___ptr_to_unsigned_long#v')) (@ addr 251)
      ((Word32[50]) ('GhostAssertions.1')) (@ addr 251)
      ((Word32) ('id___anonymous_enum#v')) (@ addr 251)
    .. proven.
Step 33: case in (32) where the length of the sequence < 2
  Prove the number of visits to 43 is in {0 ..< 3}
    .. proven.
Step 34: 
  Prove the number of visits to 251 is in {0 ..< 3}
    .. proven.
Step 35: 
  prove all verification conditions
    .. proven.
Step 36: case in (32) where the length of the sequence is j + 2
  Prove the number of visits to 43 is in {j + 0 ..< j + 3}
    .. proven.
Step 37: 
  Prove the number of visits to 251 is in {j + 0 ..< j + 3}
    .. proven.
Step 38: 
  prove all verification conditions
    .. proven.
Step 39: case in (20) where 8 is not visited
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 40: 
  Prove the number of visits to 211 is in {0 ..< 1}
    .. proven.
Step 41: 
  Prove the number of visits to 259 is in {0 ..< 1}
    .. proven.
Step 42: 
  Prove the number of visits to 296 is in {0 ..< 1}
    .. proven.
Step 43: 
  Prove the number of visits to 243 is in {0 ..< 1}
    .. proven.
Step 44: 
  Prove the number of visits to 280 is in {0 ..< 1}
    .. proven.
Step 45: 
  Prove the number of visits to 131 is in {0 ..< 1}
    .. proven.
Step 46: 
  Prove the number of visits to 145 is in {0 ..< 1}
    .. proven.
Step 47: 
  Prove the number of visits to 177 is in {0 ..< 1}
    .. proven.
Step 48: 
  Prove the number of visits to 193 is in {0 ..< 1}
    .. proven.
Step 49: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleFaultReply (ASM) <= Kernel_C.handleFaultReply (C)), time taken: 140.40s
Testing Function pair Pairing (halt (ASM) <= Kernel_C.halt (C))
  (function pairing 58 of 284)
Skipping Pairing (halt (ASM) <= Kernel_C.halt (C)), underspecified C
Testing Function pair Pairing (setupReplyMaster (ASM) <= Kernel_C.setupReplyMaster (C))
  (function pairing 59 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setupReplyMaster (ASM) <= Kernel_C.setupReplyMaster (C)), time taken: 0.21s
Testing Function pair Pairing (suspend (ASM) <= Kernel_C.suspend (C))
  (function pairing 60 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (suspend (ASM) <= Kernel_C.suspend (C)), time taken: 0.57s
Testing Function pair Pairing (setDomain (ASM) <= Kernel_C.setDomain (C))
  (function pairing 61 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setDomain (ASM) <= Kernel_C.setDomain (C)), time taken: 0.97s
Testing Function pair Pairing (bi_finalise (ASM) <= Kernel_C.bi_finalise (C))
  (function pairing 62 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (bi_finalise (ASM) <= Kernel_C.bi_finalise (C)), time taken: 0.14s
Testing Function pair Pairing (isMDBParentOf (ASM) <= Kernel_C.isMDBParentOf (C))
  (function pairing 63 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isMDBParentOf (ASM) <= Kernel_C.isMDBParentOf (C)), time taken: 1.21s
Testing Function pair Pairing (decodeCNodeInvocation (ASM) <= Kernel_C.decodeCNodeInvocation (C))
  (function pairing 64 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeCNodeInvocation (ASM) <= Kernel_C.decodeCNodeInvocation (C)), time taken: 3183.39s
Testing Function pair Pairing (bindNotification (ASM) <= Kernel_C.bindNotification (C))
  (function pairing 65 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (bindNotification (ASM) <= Kernel_C.bindNotification (C)), time taken: 0.16s
Testing Function pair Pairing (invokeTCB_ThreadControl (ASM) <= Kernel_C.invokeTCB_ThreadControl (C))
  (function pairing 66 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_ThreadControl (ASM) <= Kernel_C.invokeTCB_ThreadControl (C)), time taken: 2155.32s
Testing Function pair Pairing (checkValidIPCBuffer (ASM) <= Kernel_C.checkValidIPCBuffer (C))
  (function pairing 67 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (checkValidIPCBuffer (ASM) <= Kernel_C.checkValidIPCBuffer (C)), time taken: 0.28s
Testing Function pair Pairing (provide_cap (ASM) <= Kernel_C.provide_cap (C))
  (function pairing 68 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (provide_cap (ASM) <= Kernel_C.provide_cap (C)), time taken: 0.56s
Testing Function pair Pairing (memset (ASM) <= Kernel_C.memset (C))
  (function pairing 69 of 284)
 .. built problem, finding proof
Decided to case split at (7, 'ASM')
  (in problem)
Now doing proof search in true case (7 visited) in problem.
Now doing proof search in false case (7 not visited) in problem.
Discovered a loop relation for split points [15, 52]
  (in false case (7 not visited) in problem)
Now doing proof search in 15 init case in false case (7 not visited) in problem.
Now doing proof search in 15 loop case in false case (7 not visited) in problem.
ProofNode ('CaseSplit', (7, 'ASM'), (ProofNode ('Restr', (7, ('Number', (1, 2))), (ProofNode ('Restr', (43, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (7, ('Number', (0, 1))), (ProofNode ('Restr', (43, ('Number', (0, 1))), (ProofNode ('Split', ((15, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (52, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#5#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 's___ptr_to_void#v'), Expr ('Var', Type ('Word', 32), name = 'c___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'p___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (15, ('Number', (0, 3))), (ProofNode ('Restr', (52, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (15, ('Offset', (0, 3))), (ProofNode ('Restr', (52, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 7 is visited
Step 2: case in (1) where 7 is visited
  Prove the number of visits to 7 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 43 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 7 is not visited
  Prove the number of visits to 7 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 43 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove visits to 15 related to visits to 52
    with equalities
      ((Mem) ('mem')) (@ addr 15)
      = ((Mem) ('Mem')) (@ addr 52)
    and with invariants
      ((Word32) ('r7')) (@ addr 15)
      ((Word32) ('r4')) (@ addr 15)
      ((Word32) ('r8')) (@ addr 15)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 15)
      ((Word32) ('r13')) (@ addr 15)
      ((Word32) ('r9')) (@ addr 15)
      ((Word32) ('ret')) (@ addr 15)
      ((Word32) ('r2')) (@ addr 15)
      ((Word32) ('r11')) (@ addr 15)
      ((Word32) ('r1')) (@ addr 15)
      ((Word32) ('r10')) (@ addr 15)
      ((Bool) (ROData('mem'))) (@ addr 15)
      ((Word32) ('r5')) (@ addr 15)
      ((Word32) ('r6')) (@ addr 15)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 15)
      ((Word32) (('loop#5#count' + ((0 - '#seq-visits') * 1)))) (@ addr 52)
      ((Word32) (('n___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 52)
      ((Word32) ('s___ptr_to_void#v')) (@ addr 52)
      ((Word32) ('c___unsigned_long#v')) (@ addr 52)
      ((Word32[50]) ('GhostAssertions')) (@ addr 52)
      ((Word32) (('p___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 52)
    .. proven.
Step 8: case in (7) where the length of the sequence < 2
  Prove the number of visits to 15 is in {0 ..< 3}
    .. proven.
Step 9: 
  Prove the number of visits to 52 is in {0 ..< 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where the length of the sequence is i + 2
  Prove the number of visits to 15 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 52 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (memset (ASM) <= Kernel_C.memset (C)), time taken: 14.38s
Testing Function pair Pairing (idle_thread (ASM) <= Kernel_C.idle_thread (C))
  (function pairing 70 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [1, 7]
  (in problem)
Now doing proof search in 1 init case in problem.
Now doing proof search in 1 loop case in problem.
ProofNode ('Split', ((1, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (7, (0, 1), [Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (1, ('Number', (0, 1))), (ProofNode ('Restr', (7, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (1, ('Offset', (0, 1))), (ProofNode ('Restr', (7, ('Offset', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 1 related to visits to 7
    with equalities
      ((Mem) ('mem')) (@ addr 1)
      = ((Mem) ('Mem')) (@ addr 7)
    and with invariants
      ((Word32) ('r21')) (@ addr 1)
      ((Word32) ('r4')) (@ addr 1)
      ((Bool) ('v')) (@ addr 1)
      ((Word32) ('r27')) (@ addr 1)
      ((Word32) ('r17')) (@ addr 1)
      ((Word32) ('r0')) (@ addr 1)
      ((Word32) ('r23')) (@ addr 1)
      ((Word32) ('r13')) (@ addr 1)
      ((Word32) ('r10')) (@ addr 1)
      ((Word32) ('r28')) (@ addr 1)
      ((Word32) ('r19')) (@ addr 1)
      ((Word32) ('r16')) (@ addr 1)
      ((Word64) ('clock')) (@ addr 1)
      ((Word32) ('r12')) (@ addr 1)
      ((Word32) ('r9')) (@ addr 1)
      ((Bool) ('z')) (@ addr 1)
      ((Word32) ('r6')) (@ addr 1)
      ((Word32) ('r7')) (@ addr 1)
      ((Word32) ('r31')) (@ addr 1)
      ((Word32) ('r25')) (@ addr 1)
      ((Word32) ('r24')) (@ addr 1)
      ((Word32) ('r8')) (@ addr 1)
      ((Word32) ('r29')) (@ addr 1)
      ((Word32) ('r3')) (@ addr 1)
      ((Bool) ('n')) (@ addr 1)
      ((Bool) ('c')) (@ addr 1)
      ((Word32) ('r18')) (@ addr 1)
      ((Word32) ('r20')) (@ addr 1)
      ((Word32) ('r30')) (@ addr 1)
      ((Word32) ('r14')) (@ addr 1)
      ((Word32) ('r15')) (@ addr 1)
      ((Word32) ('mode')) (@ addr 1)
      ((Word32) ('r11')) (@ addr 1)
      ((Word32) ('r5')) (@ addr 1)
      ((Word32) ('r26')) (@ addr 1)
      ((Word32) ('r1')) (@ addr 1)
      ((Word32) ('r2')) (@ addr 1)
      ((Bool) (ROData('mem'))) (@ addr 1)
      ((Word32) ('r22')) (@ addr 1)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 1)
      ((Word32[50]) ('GhostAssertions')) (@ addr 7)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 7)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 1 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 7 is in {0 ..< 1}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 1 is in {i + 0 ..< i + 1}
    .. proven.
Step 6: 
  Prove the number of visits to 7 is in {i + 0 ..< i + 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (idle_thread (ASM) <= Kernel_C.idle_thread (C)), time taken: 5.24s
Testing Function pair Pairing (deletedIRQHandler (ASM) <= Kernel_C.deletedIRQHandler (C))
  (function pairing 71 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deletedIRQHandler (ASM) <= Kernel_C.deletedIRQHandler (C)), time taken: 0.13s
Testing Function pair Pairing (setVMRootForFlush (ASM) <= Kernel_C.setVMRootForFlush (C))
  (function pairing 72 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setVMRootForFlush (ASM) <= Kernel_C.setVMRootForFlush (C)), time taken: 0.60s
Testing Function pair Pairing (calculate_extra_bi_size_bits (ASM) <= Kernel_C.calculate_extra_bi_size_bits (C))
  (function pairing 73 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (calculate_extra_bi_size_bits (ASM) <= Kernel_C.calculate_extra_bi_size_bits (C)), time taken: 0.13s
Testing Function pair Pairing (handleVMFaultEvent (ASM) <= Kernel_C.handleVMFaultEvent (C))
  (function pairing 74 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleVMFaultEvent (ASM) <= Kernel_C.handleVMFaultEvent (C)), time taken: 0.37s
Testing Function pair Pairing (invokeCNodeDelete (ASM) <= Kernel_C.invokeCNodeDelete (C))
  (function pairing 75 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeDelete (ASM) <= Kernel_C.invokeCNodeDelete (C)), time taken: 0.14s
Testing Function pair Pairing (setIRQState (ASM) <= Kernel_C.setIRQState (C))
  (function pairing 76 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setIRQState (ASM) <= Kernel_C.setIRQState (C)), time taken: 0.16s
Testing Function pair Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C))
  (function pairing 77 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C)), time taken: 6.99s
Testing Function pair Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C))
  (function pairing 78 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C)), time taken: 12.88s
Testing Function pair Pairing (Arch_performTransfer (ASM) <= Kernel_C.Arch_performTransfer (C))
  (function pairing 79 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_performTransfer (ASM) <= Kernel_C.Arch_performTransfer (C)), time taken: 0.12s
Testing Function pair Pairing (invokeCNodeRotate (ASM) <= Kernel_C.invokeCNodeRotate (C))
  (function pairing 80 of 284)
 .. built problem, finding proof
Decided to case split at (6, 'ASM')
  (in problem)
Now doing proof search in true case (6 visited) in problem.
Now doing proof search in false case (6 not visited) in problem.
ProofNode ('CaseSplit', (6, 'ASM'), (ProofNode ('Restr', (6, ('Number', (1, 2))), (ProofNode ('Restr', (55, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (6, ('Number', (0, 1))), (ProofNode ('Restr', (55, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 6 is visited
Step 2: case in (1) where 6 is visited
  Prove the number of visits to 6 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 55 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 6 is not visited
  Prove the number of visits to 6 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 55 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeRotate (ASM) <= Kernel_C.invokeCNodeRotate (C)), time taken: 5.56s
Testing Function pair Pairing (createObject (ASM) <= Kernel_C.createObject (C))
  (function pairing 81 of 284)
 .. built problem, finding proof
Decided to case split at (3, 'ASM')
  (in problem)
Now doing proof search in true case (3 visited) in problem.
Now doing proof search in false case (3 not visited) in problem.
ProofNode ('CaseSplit', (3, 'ASM'), (ProofNode ('Restr', (3, ('Number', (1, 2))), (ProofNode ('Restr', (147, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Restr', (147, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 3 is visited
Step 2: case in (1) where 3 is visited
  Prove the number of visits to 3 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 147 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 3 is not visited
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 147 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (createObject (ASM) <= Kernel_C.createObject (C)), time taken: 4.05s
Testing Function pair Pairing (get_p_reg_kernel_img_boot (ASM) <= Kernel_C.get_p_reg_kernel_img_boot (C))
  (function pairing 82 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (get_p_reg_kernel_img_boot (ASM) <= Kernel_C.get_p_reg_kernel_img_boot (C)), time taken: 0.15s
Testing Function pair Pairing (c_handle_fastpath_reply_recv (ASM) <= Kernel_C.c_handle_fastpath_reply_recv (C))
  (function pairing 83 of 284)
Skipping Pairing (c_handle_fastpath_reply_recv (ASM) <= Kernel_C.c_handle_fastpath_reply_recv (C)), underspecified ASM
Testing Function pair Pairing (switchToIdleThread (ASM) <= Kernel_C.switchToIdleThread (C))
  (function pairing 84 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (switchToIdleThread (ASM) <= Kernel_C.switchToIdleThread (C)), time taken: 0.16s
Testing Function pair Pairing (timerTick (ASM) <= Kernel_C.timerTick (C))
  (function pairing 85 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (timerTick (ASM) <= Kernel_C.timerTick (C)), time taken: 1.13s
Testing Function pair Pairing (doFaultTransfer (ASM) <= Kernel_C.doFaultTransfer (C))
  (function pairing 86 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doFaultTransfer (ASM) <= Kernel_C.doFaultTransfer (C)), time taken: 0.23s
Testing Function pair Pairing (rescheduleRequired (ASM) <= Kernel_C.rescheduleRequired (C))
  (function pairing 87 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (rescheduleRequired (ASM) <= Kernel_C.rescheduleRequired (C)), time taken: 0.21s
Testing Function pair Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C))
  (function pairing 88 of 284)
 .. built problem, finding proof
Decided to case split at (16, 'ASM')
  (in problem)
Now doing proof search in true case (16 visited) in problem.
Now doing proof search in false case (16 not visited) in problem.
Decided to case split at (19, 'ASM')
  (in false case (16 not visited) in problem)
Now doing proof search in true case (19 visited) in false case (16 not visited) in problem.
Now doing proof search in false case (19 not visited) in false case (16 not visited) in problem.
ProofNode ('CaseSplit', (16, 'ASM'), (ProofNode ('Restr', (16, ('Number', (1, 2))), (ProofNode ('Restr', (188, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (16, ('Number', (0, 1))), (ProofNode ('Restr', (188, ('Number', (0, 1))), (ProofNode ('CaseSplit', (19, 'ASM'), (ProofNode ('Restr', (19, ('Number', (1, 2))), (ProofNode ('Restr', (181, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (19, ('Number', (0, 1))), (ProofNode ('Restr', (181, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 16 is visited
Step 2: case in (1) where 16 is visited
  Prove the number of visits to 16 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 188 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 16 is not visited
  Prove the number of visits to 16 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 188 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 19 is visited
Step 8: case in (7) where 19 is visited
  Prove the number of visits to 19 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 181 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 19 is not visited
  Prove the number of visits to 19 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 181 is in {0 ..< 1}
    .. proven.
Step 13: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C)), time taken: 12.88s
Testing Function pair Pairing (handleReply (ASM) <= Kernel_C.handleReply (C))
  (function pairing 89 of 284)
 .. built problem, finding proof
Decided to case split at (14, 'ASM')
  (in problem)
Now doing proof search in true case (14 visited) in problem.
Now doing proof search in false case (14 not visited) in problem.
ProofNode ('CaseSplit', (14, 'ASM'), (ProofNode ('Restr', (14, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (14, ('Number', (0, 1))), (ProofNode ('Restr', (53, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 14 is visited
Step 2: case in (1) where 14 is visited
  Prove the number of visits to 14 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 14 is not visited
  Prove the number of visits to 14 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 53 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleReply (ASM) <= Kernel_C.handleReply (C)), time taken: 3.92s
Testing Function pair Pairing (maybe_alloc_extra_bi (ASM) <= Kernel_C.maybe_alloc_extra_bi (C))
  (function pairing 90 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (maybe_alloc_extra_bi (ASM) <= Kernel_C.maybe_alloc_extra_bi (C)), time taken: 0.22s
Testing Function pair Pairing (slotCapLongRunningDelete (ASM) <= Kernel_C.slotCapLongRunningDelete (C))
  (function pairing 91 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (slotCapLongRunningDelete (ASM) <= Kernel_C.slotCapLongRunningDelete (C)), time taken: 0.28s
Testing Function pair Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C))
  (function pairing 92 of 284)
 .. built problem, finding proof
Decided to case split at (7, 'ASM')
  (in problem)
Now doing proof search in true case (7 visited) in problem.
Discovered that points [456 (loop head)] can be bounded
  (in true case (7 visited) in problem)
Discovered that points [445 (loop head)] can be bounded
  (in true case (7 visited) in problem)
Discovered that points [381 (loop head)] can be bounded
  (in true case (7 visited) in problem)
Discovered that points [370 (loop head)] can be bounded
  (in true case (7 visited) in problem)
Discovered that points [152 (loop head)] can be bounded
  (in true case (7 visited) in problem)
Now doing proof search in false case (7 not visited) in problem.
Decided to case split at (5, 'ASM')
  (in false case (7 not visited) in problem)
Now doing proof search in true case (5 visited) in false case (7 not visited) in problem.
Discovered that points [456 (loop head)] can be bounded
  (in true case (5 visited) in false case (7 not visited) in problem)
Discovered that points [445 (loop head)] can be bounded
  (in true case (5 visited) in false case (7 not visited) in problem)
Discovered that points [381 (loop head)] can be bounded
  (in true case (5 visited) in false case (7 not visited) in problem)
Discovered that points [370 (loop head)] can be bounded
  (in true case (5 visited) in false case (7 not visited) in problem)
Now doing proof search in false case (5 not visited) in false case (7 not visited) in problem.
Decided to case split at (8, 'ASM')
  (in false case (5 not visited) in false case (7 not visited) in problem)
Now doing proof search in true case (8 visited) in false case (5 not visited) in false case (7 not visited) in problem.
Discovered that points [456 (loop head)] can be bounded
  (in true case (8 visited) in false case (5 not visited) in false case (7 not visited) in problem)
Discovered that points [445 (loop head)] can be bounded
  (in true case (8 visited) in false case (5 not visited) in false case (7 not visited) in problem)
Discovered that points [381 (loop head)] can be bounded
  (in true case (8 visited) in false case (5 not visited) in false case (7 not visited) in problem)
Discovered that points [370 (loop head)] can be bounded
  (in true case (8 visited) in false case (5 not visited) in false case (7 not visited) in problem)
Now doing proof search in false case (8 not visited) in false case (5 not visited) in false case (7 not visited) in problem.
Discovered that points [456 (loop head)] can be bounded
  (in false case (8 not visited) in false case (5 not visited) in false case (7 not visited) in problem)
Discovered that points [445 (loop head)] can be bounded
  (in false case (8 not visited) in false case (5 not visited) in false case (7 not visited) in problem)
Discovered that points [381 (loop head)] can be bounded
  (in false case (8 not visited) in false case (5 not visited) in false case (7 not visited) in problem)
Discovered a loop relation for split points [59, 375]
  (in false case (8 not visited) in false case (5 not visited) in false case (7 not visited) in problem)
Now doing proof search in 59 init case in false case (8 not visited) in false case (5 not visited) in false case (7 not visited) in problem.
Now doing proof search in 59 loop case in false case (8 not visited) in false case (5 not visited) in false case (7 not visited) in problem.
ProofNode ('CaseSplit', (7, 'ASM'), (ProofNode ('Restr', (7, ('Number', (1, 2))), (ProofNode ('Restr', (456, ('Number', (0, 1))), (ProofNode ('Restr', (445, ('Number', (0, 1))), (ProofNode ('Restr', (381, ('Number', (0, 1))), (ProofNode ('Restr', (370, ('Number', (0, 1))), (ProofNode ('Restr', (152, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (7, ('Number', (0, 1))), (ProofNode ('Restr', (206, ('Number', (0, 1))), (ProofNode ('CaseSplit', (5, 'ASM'), (ProofNode ('Restr', (5, ('Number', (1, 2))), (ProofNode ('Restr', (456, ('Number', (0, 5))), (ProofNode ('Restr', (445, ('Number', (0, 2))), (ProofNode ('Restr', (381, ('Number', (0, 1))), (ProofNode ('Restr', (370, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (224, ('Number', (0, 1))), (ProofNode ('CaseSplit', (8, 'ASM'), (ProofNode ('Restr', (8, ('Number', (1, 2))), (ProofNode ('Restr', (456, ('Number', (0, 1))), (ProofNode ('Restr', (445, ('Number', (0, 1))), (ProofNode ('Restr', (381, ('Number', (0, 1))), (ProofNode ('Restr', (370, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Restr', (231, ('Number', (0, 1))), (ProofNode ('Restr', (456, ('Number', (0, 1))), (ProofNode ('Restr', (445, ('Number', (0, 1))), (ProofNode ('Restr', (381, ('Number', (0, 6))), (ProofNode ('Split', ((59, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (375, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'receiver___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'receiveIPCBuffer___ptr_to_unsigned_long#v.6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'length___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'receiveIPCBuffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'sender___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'sender___ptr_to_struct_tcb_C#v.1'), Expr ('Var', Type ('Word', 32), name = 'id___anonymous_enum#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.6'))], 2, 1), (ProofNode ('Restr', (59, ('Number', (0, 1))), (ProofNode ('Restr', (375, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (59, ('Offset', (0, 3))), (ProofNode ('Restr', (375, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 7 is visited
Step 2: case in (1) where 7 is visited
  Prove the number of visits to 7 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 456 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 445 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 381 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 370 is in {0 ..< 1}
    .. proven.
Step 7: 
  Prove the number of visits to 152 is in {0 ..< 1}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Step 9: case in (1) where 7 is not visited
  Prove the number of visits to 7 is in {0 ..< 1}
    .. proven.
Step 10: 
  Prove the number of visits to 206 is in {0 ..< 1}
    .. proven.
Step 11: 
  case split on whether 5 is visited
Step 12: case in (11) where 5 is visited
  Prove the number of visits to 5 is in {1 ..< 2}
    .. proven.
Step 13: 
  Prove the number of visits to 456 is in {0 ..< 5}
    .. proven.
Step 14: 
  Prove the number of visits to 445 is in {0 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 381 is in {0 ..< 1}
    .. proven.
Step 16: 
  Prove the number of visits to 370 is in {0 ..< 1}
    .. proven.
Step 17: 
  prove all verification conditions
    .. proven.
Step 18: case in (11) where 5 is not visited
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 19: 
  Prove the number of visits to 224 is in {0 ..< 1}
    .. proven.
Step 20: 
  case split on whether 8 is visited
Step 21: case in (20) where 8 is visited
  Prove the number of visits to 8 is in {1 ..< 2}
    .. proven.
Step 22: 
  Prove the number of visits to 456 is in {0 ..< 1}
    .. proven.
Step 23: 
  Prove the number of visits to 445 is in {0 ..< 1}
    .. proven.
Step 24: 
  Prove the number of visits to 381 is in {0 ..< 1}
    .. proven.
Step 25: 
  Prove the number of visits to 370 is in {0 ..< 1}
    .. proven.
Step 26: 
  prove all verification conditions
    .. proven.
Step 27: case in (20) where 8 is not visited
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 28: 
  Prove the number of visits to 231 is in {0 ..< 1}
    .. proven.
Step 29: 
  Prove the number of visits to 456 is in {0 ..< 1}
    .. proven.
Step 30: 
  Prove the number of visits to 445 is in {0 ..< 1}
    .. proven.
Step 31: 
  Prove the number of visits to 381 is in {0 ..< 6}
    .. proven.
Step 32: 
  prove visits to 59 related to visits to 375
    with equalities
      ((Mem) ('mem')) (@ addr 59)
      = ((Mem) ('Mem.6')) (@ addr 375)
    and with invariants
      ((Word32) ('r7')) (@ addr 59)
      ((Word32) ('r8')) (@ addr 59)
      ((Word32) ('r14')) (@ addr 59)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 59)
      ((Word32) ('r13')) (@ addr 59)
      ((Word32) ('r5')) (@ addr 59)
      ((Word32) ('r0')) (@ addr 59)
      ((Word32) ('r9')) (@ addr 59)
      ((Word32) ('ret')) (@ addr 59)
      ((Word32) ('r2')) (@ addr 59)
      ((Word32) ('r11')) (@ addr 59)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 59)
      ((Word32) ('r10')) (@ addr 59)
      ((Bool) (ROData('mem'))) (@ addr 59)
      ((Word32) ('r6')) (@ addr 59)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 59)
      ((Word32) ('receiver___ptr_to_struct_tcb_C#v')) (@ addr 375)
      ((Word32) ('receiveIPCBuffer___ptr_to_unsigned_long#v.6')) (@ addr 375)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 375)
      ((Word32) ('length___unsigned_long#v')) (@ addr 375)
      ((Word32) ('receiveIPCBuffer___ptr_to_unsigned_long#v')) (@ addr 375)
      ((Word32) ('sender___ptr_to_struct_tcb_C#v')) (@ addr 375)
      ((Word32[50]) ('GhostAssertions.6')) (@ addr 375)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 375)
      ((Word32) ('sender___ptr_to_struct_tcb_C#v.1')) (@ addr 375)
      ((Word32) ('id___anonymous_enum#v')) (@ addr 375)
    .. proven.
Step 33: case in (32) where the length of the sequence < 2
  Prove the number of visits to 59 is in {0 ..< 1}
    .. proven.
Step 34: 
  Prove the number of visits to 375 is in {0 ..< 2}
    .. proven.
Step 35: 
  prove all verification conditions
    .. proven.
Step 36: case in (32) where the length of the sequence is i + 2
  Prove the number of visits to 59 is in {i + 0 ..< i + 3}
    .. proven.
Step 37: 
  Prove the number of visits to 375 is in {i + 0 ..< i + 3}
    .. proven.
Step 38: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C)), time taken: 104.64s
Testing Function pair Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))
  (function pairing 93 of 284)
Aborting Problem (Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (slowpath (ASM) <= Kernel_C.slowpath (C)), time taken: 0.00s
Testing Function pair Pairing (create_root_cnode (ASM) <= Kernel_C.create_root_cnode (C))
  (function pairing 94 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_root_cnode (ASM) <= Kernel_C.create_root_cnode (C)), time taken: 0.25s
Testing Function pair Pairing (decodeInvocation (ASM) <= Kernel_C.decodeInvocation (C))
  (function pairing 95 of 284)
 .. built problem, finding proof
Decided to case split at (102, 'ASM')
  (in problem)
Now doing proof search in true case (102 visited) in problem.
Now doing proof search in false case (102 not visited) in problem.
Decided to case split at (42, 'ASM')
  (in false case (102 not visited) in problem)
Now doing proof search in true case (42 visited) in false case (102 not visited) in problem.
Now doing proof search in false case (42 not visited) in false case (102 not visited) in problem.
Decided to case split at (30, 'ASM')
  (in false case (42 not visited) in false case (102 not visited) in problem)
Now doing proof search in true case (30 visited) in false case (42 not visited) in false case (102 not visited) in problem.
Now doing proof search in false case (30 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Decided to case split at (196, 'ASM')
  (in false case (30 not visited) in false case (42 not visited) in false case (102 not visited) in problem)
Now doing proof search in true case (196 visited) in false case (30 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Now doing proof search in false case (196 not visited) in false case (30 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Decided to case split at (54, 'ASM')
  (in false case (196 not visited) in false case (30 not visited) in false case (42 not visited) in false case (102 not visited) in problem)
Now doing proof search in true case (54 visited) in false case (196 not visited) in false case (30 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Now doing proof search in false case (54 not visited) in false case (196 not visited) in false case (30 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Decided to case split at (48, 'ASM')
  (in false case (54 not visited) in false case (196 not visited) in false case (30 not visited) in false case (42 not visited) in false case (102 not visited) in problem)
Now doing proof search in true case (48 visited) in false case (54 not visited) in false case (196 not visited) in false case (30 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Now doing proof search in false case (48 not visited) in false case (54 not visited) in false case (196 not visited) in false case (30 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Decided to case split at (36, 'ASM')
  (in false case (48 not visited) in false case (54 not visited) in false case (196 not visited) in false case (30 not visited) in false case (42 not visited) in false case (102 not visited) in problem)
Now doing proof search in true case (36 visited) in false case (48 not visited) in false case (54 not visited) in false case (196 not visited) in false case (30 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Now doing proof search in false case (36 not visited) in false case (48 not visited) in false case (54 not visited) in false case (196 not visited) in false case (30 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Decided to case split at (24, 'ASM')
  (in false case (36 not visited) in false case (48 not visited) in false case (54 not visited) in false case (196 not visited) in false case (30 not visited) in false case (42 not visited) in false case (102 not visited) in problem)
Now doing proof search in true case (24 visited) in false case (36 not visited) in false case (48 not visited) in false case (54 not visited) in false case (196 not visited) in false case (30 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
Now doing proof search in false case (24 not visited) in false case (36 not visited) in false case (48 not visited) in false case (54 not visited) in false case (196 not visited) in false case (30 not visited) in false case (42 not visited) in false case (102 not visited) in problem.
ProofNode ('CaseSplit', (102, 'ASM'), (ProofNode ('Restr', (102, ('Number', (1, 2))), (ProofNode ('Restr', (500, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (102, ('Number', (0, 1))), (ProofNode ('Restr', (500, ('Number', (0, 1))), (ProofNode ('CaseSplit', (42, 'ASM'), (ProofNode ('Restr', (42, ('Number', (1, 2))), (ProofNode ('Restr', (489, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (42, ('Number', (0, 1))), (ProofNode ('Restr', (489, ('Number', (0, 1))), (ProofNode ('CaseSplit', (30, 'ASM'), (ProofNode ('Restr', (30, ('Number', (1, 2))), (ProofNode ('Restr', (463, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (30, ('Number', (0, 1))), (ProofNode ('Restr', (463, ('Number', (0, 1))), (ProofNode ('CaseSplit', (196, 'ASM'), (ProofNode ('Restr', (196, ('Number', (1, 2))), (ProofNode ('Restr', (486, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (196, ('Number', (0, 1))), (ProofNode ('Restr', (486, ('Number', (0, 1))), (ProofNode ('CaseSplit', (54, 'ASM'), (ProofNode ('Restr', (54, ('Number', (1, 2))), (ProofNode ('Restr', (495, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (54, ('Number', (0, 1))), (ProofNode ('Restr', (495, ('Number', (0, 1))), (ProofNode ('CaseSplit', (48, 'ASM'), (ProofNode ('Restr', (48, ('Number', (1, 2))), (ProofNode ('Restr', (483, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (48, ('Number', (0, 1))), (ProofNode ('Restr', (483, ('Number', (0, 1))), (ProofNode ('CaseSplit', (36, 'ASM'), (ProofNode ('Restr', (36, ('Number', (1, 2))), (ProofNode ('Restr', (480, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (36, ('Number', (0, 1))), (ProofNode ('Restr', (480, ('Number', (0, 1))), (ProofNode ('CaseSplit', (24, 'ASM'), (ProofNode ('Restr', (24, ('Number', (1, 2))), (ProofNode ('Restr', (446, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (24, ('Number', (0, 1))), (ProofNode ('Restr', (446, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)))),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 102 is visited
Step 2: case in (1) where 102 is visited
  Prove the number of visits to 102 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 500 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 102 is not visited
  Prove the number of visits to 102 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 500 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 42 is visited
Step 8: case in (7) where 42 is visited
  Prove the number of visits to 42 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 489 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 42 is not visited
  Prove the number of visits to 42 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 489 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 30 is visited
Step 14: case in (13) where 30 is visited
  Prove the number of visits to 30 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 463 is in {1 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where 30 is not visited
  Prove the number of visits to 30 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 463 is in {0 ..< 1}
    .. proven.
Step 19: 
  case split on whether 196 is visited
Step 20: case in (19) where 196 is visited
  Prove the number of visits to 196 is in {1 ..< 2}
    .. proven.
Step 21: 
  Prove the number of visits to 486 is in {1 ..< 2}
    .. proven.
Step 22: 
  prove all verification conditions
    .. proven.
Step 23: case in (19) where 196 is not visited
  Prove the number of visits to 196 is in {0 ..< 1}
    .. proven.
Step 24: 
  Prove the number of visits to 486 is in {0 ..< 1}
    .. proven.
Step 25: 
  case split on whether 54 is visited
Step 26: case in (25) where 54 is visited
  Prove the number of visits to 54 is in {1 ..< 2}
    .. proven.
Step 27: 
  Prove the number of visits to 495 is in {1 ..< 2}
    .. proven.
Step 28: 
  prove all verification conditions
    .. proven.
Step 29: case in (25) where 54 is not visited
  Prove the number of visits to 54 is in {0 ..< 1}
    .. proven.
Step 30: 
  Prove the number of visits to 495 is in {0 ..< 1}
    .. proven.
Step 31: 
  case split on whether 48 is visited
Step 32: case in (31) where 48 is visited
  Prove the number of visits to 48 is in {1 ..< 2}
    .. proven.
Step 33: 
  Prove the number of visits to 483 is in {1 ..< 2}
    .. proven.
Step 34: 
  prove all verification conditions
    .. proven.
Step 35: case in (31) where 48 is not visited
  Prove the number of visits to 48 is in {0 ..< 1}
    .. proven.
Step 36: 
  Prove the number of visits to 483 is in {0 ..< 1}
    .. proven.
Step 37: 
  case split on whether 36 is visited
Step 38: case in (37) where 36 is visited
  Prove the number of visits to 36 is in {1 ..< 2}
    .. proven.
Step 39: 
  Prove the number of visits to 480 is in {1 ..< 2}
    .. proven.
Step 40: 
  prove all verification conditions
    .. proven.
Step 41: case in (37) where 36 is not visited
  Prove the number of visits to 36 is in {0 ..< 1}
    .. proven.
Step 42: 
  Prove the number of visits to 480 is in {0 ..< 1}
    .. proven.
Step 43: 
  case split on whether 24 is visited
Step 44: case in (43) where 24 is visited
  Prove the number of visits to 24 is in {1 ..< 2}
    .. proven.
Step 45: 
  Prove the number of visits to 446 is in {1 ..< 2}
    .. proven.
Step 46: 
  prove all verification conditions
    .. proven.
Step 47: case in (43) where 24 is not visited
  Prove the number of visits to 24 is in {0 ..< 1}
    .. proven.
Step 48: 
  Prove the number of visits to 446 is in {0 ..< 1}
    .. proven.
Step 49: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeInvocation (ASM) <= Kernel_C.decodeInvocation (C)), time taken: 65.38s
Testing Function pair Pairing (getReceiveSlots (ASM) <= Kernel_C.getReceiveSlots (C))
  (function pairing 96 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (getReceiveSlots (ASM) <= Kernel_C.getReceiveSlots (C)), time taken: 3.59s
Testing Function pair Pairing (invokeUntyped_Retype (ASM) <= Kernel_C.invokeUntyped_Retype (C))
  (function pairing 97 of 284)
 .. built problem, finding proof
Decided to case split at (38, 'ASM')
  (in problem)
Now doing proof search in true case (38 visited) in problem.
Discovered a loop relation for split points [117, 192]
  (in true case (38 visited) in problem)
Now doing proof search in 117 init case in true case (38 visited) in problem.
Now doing proof search in 117 loop case in true case (38 visited) in problem.
Now doing proof search in false case (38 not visited) in problem.
Discovered that points [177 (loop head)] can be bounded
  (in false case (38 not visited) in problem)
Discovered that points [117 (loop head)] can be bounded
  (in false case (38 not visited) in problem)
ProofNode ('CaseSplit', (38, 'ASM'), (ProofNode ('Restr', (38, ('Number', (1, 2))), (ProofNode ('Split', ((117, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967040)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967040)])]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (192, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'userSize___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'chunk___int#v'), Expr ('Var', Type ('Word', 32), name = 'destOffset___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'destLength___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'prev_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'offset___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Var', Type ('Word', 32), name = 'chunk___int#v')])])])]), Expr ('Var', Type ('Word', 32), name = 'retypeBase___ptr_to_void#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'newType___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'regionBase___ptr_to_void#v'), Expr ('Var', Type ('Word', 32), name = 'deviceMemory___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'prev_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'regionBase___ptr_to_void#v.1'), Expr ('Var', Type ('Word', 32), name = 'destCNode___ptr_to_struct_cte_C#v'), Expr ('Var', Type ('Word', 32), name = 'srcSlot___ptr_to_struct_cte_C#v'), Expr ('Var', Type ('Word', 32), name = 'srcSlot___ptr_to_struct_cte_C#v.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (117, ('Number', (0, 3))), (ProofNode ('Restr', (192, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (117, ('Offset', (0, 3))), (ProofNode ('Restr', (192, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)), ProofNode ('Restr', (38, ('Number', (0, 1))), (ProofNode ('Restr', (195, ('Number', (0, 1))), (ProofNode ('Restr', (177, ('Number', (0, 1))), (ProofNode ('Restr', (117, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),))))
 .. proof found.
Step 1: 
  case split on whether 38 is visited
Step 2: case in (1) where 38 is visited
  Prove the number of visits to 38 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove visits to 117 related to visits to 192
    with equalities
      ((Mem) ('mem')) (@ addr 117)
      = ((Mem) ('Mem.1')) (@ addr 192)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 4294967040)))) (@ addr 117)
      ((Word32) ('r13')) (@ addr 117)
      ((Word32) ('r10')) (@ addr 117)
      ((Word32) ('r9')) (@ addr 117)
      ((Word32) ('r6')) (@ addr 117)
      ((Word32) ('r8')) (@ addr 117)
      ((Word32) (('r5' + ((0 - '#seq-visits') * 4294967040)))) (@ addr 117)
      ((Word32) ('r7')) (@ addr 117)
      ((Word32) ('ret')) (@ addr 117)
      ((Word32) ('r11')) (@ addr 117)
      ((Bool) (ROData('mem'))) (@ addr 117)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 117)
      ((Word32) ('userSize___unsigned_long#v')) (@ addr 192)
      ((Word32) ('chunk___int#v')) (@ addr 192)
      ((Word32) ('destOffset___unsigned_long#v')) (@ addr 192)
      ((Word32) ('destLength___unsigned_long#v')) (@ addr 192)
      ((Word32) ('prev_cap___struct_cap_C#v.words_C.1')) (@ addr 192)
      ((Word32) (('offset___unsigned_long#v' - ((0 - '#seq-visits') * ShiftLeft(1, WordCast('chunk___int#v')))))) (@ addr 192)
      ((Word32) ('retypeBase___ptr_to_void#v')) (@ addr 192)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 192)
      ((Word32) ('newType___unsigned_long#v')) (@ addr 192)
      ((Word32) ('regionBase___ptr_to_void#v')) (@ addr 192)
      ((Word32) ('deviceMemory___unsigned_long#v')) (@ addr 192)
      ((Word32) ('prev_cap___struct_cap_C#v.words_C.0')) (@ addr 192)
      ((Word32) ('regionBase___ptr_to_void#v.1')) (@ addr 192)
      ((Word32) ('destCNode___ptr_to_struct_cte_C#v')) (@ addr 192)
      ((Word32) ('srcSlot___ptr_to_struct_cte_C#v')) (@ addr 192)
      ((Word32) ('srcSlot___ptr_to_struct_cte_C#v.1')) (@ addr 192)
    .. proven.
Step 4: case in (3) where the length of the sequence < 2
  Prove the number of visits to 117 is in {0 ..< 3}
    .. proven.
Step 5: 
  Prove the number of visits to 192 is in {0 ..< 3}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Step 7: case in (3) where the length of the sequence is i + 2
  Prove the number of visits to 117 is in {i + 0 ..< i + 3}
    .. proven.
Step 8: 
  Prove the number of visits to 192 is in {i + 0 ..< i + 3}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (1) where 38 is not visited
  Prove the number of visits to 38 is in {0 ..< 1}
    .. proven.
Step 11: 
  Prove the number of visits to 195 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 177 is in {0 ..< 1}
    .. proven.
Step 13: 
  Prove the number of visits to 117 is in {0 ..< 1}
    .. proven.
Step 14: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeUntyped_Retype (ASM) <= Kernel_C.invokeUntyped_Retype (C)), time taken: 253.46s
Testing Function pair Pairing (cancelSignal (ASM) <= Kernel_C.cancelSignal (C))
  (function pairing 98 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cancelSignal (ASM) <= Kernel_C.cancelSignal (C)), time taken: 4.17s
Testing Function pair Pairing (cteSwap (ASM) <= Kernel_C.cteSwap (C))
  (function pairing 99 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteSwap (ASM) <= Kernel_C.cteSwap (C)), time taken: 5.68s
Testing Function pair Pairing (create_bi_frame_cap (ASM) <= Kernel_C.create_bi_frame_cap (C))
  (function pairing 100 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_bi_frame_cap (ASM) <= Kernel_C.create_bi_frame_cap (C)), time taken: 2.83s
Testing Function pair Pairing (deletingIRQHandler (ASM) <= Kernel_C.deletingIRQHandler (C))
  (function pairing 101 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deletingIRQHandler (ASM) <= Kernel_C.deletingIRQHandler (C)), time taken: 0.26s
Testing Function pair Pairing (tcbSchedEnqueue (ASM) <= Kernel_C.tcbSchedEnqueue (C))
  (function pairing 102 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (tcbSchedEnqueue (ASM) <= Kernel_C.tcbSchedEnqueue (C)), time taken: 0.61s
Testing Function pair Pairing (deleteASIDPool (ASM) <= Kernel_C.deleteASIDPool (C))
  (function pairing 103 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [8, 63]
  (in problem)
Now doing proof search in 8 init case in problem.
Now doing proof search in 8 loop case in problem.
ProofNode ('Split', ((8, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (63, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'asid_base___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'offset___unsigned#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'pool___ptr_to_struct_asid_pool_C#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (8, ('Number', (0, 3))), (ProofNode ('Restr', (63, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (8, ('Offset', (0, 3))), (ProofNode ('Restr', (63, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 8 related to visits to 63
    with equalities
      ((Mem) ('mem')) (@ addr 8)
      = ((Mem) ('Mem')) (@ addr 63)
    and with invariants
      ((Word32) ('r7')) (@ addr 8)
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 8)
      ((Word32) ('r11')) (@ addr 8)
      ((Word32) (('r5' + ((0 - '#seq-visits') * 4)))) (@ addr 8)
      ((Word32) ('r9')) (@ addr 8)
      ((Word32) ('ret')) (@ addr 8)
      ((Word32) ('r13')) (@ addr 8)
      ((Word32) ('r10')) (@ addr 8)
      ((Word32) ('r6')) (@ addr 8)
      ((Bool) (ROData('mem'))) (@ addr 8)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 8)
      ((Word32) ('asid_base___unsigned_long#v')) (@ addr 63)
      ((Word32) (('offset___unsigned#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 63)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 63)
      ((Word32) ('pool___ptr_to_struct_asid_pool_C#v')) (@ addr 63)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 8 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 63 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 8 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 63 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deleteASIDPool (ASM) <= Kernel_C.deleteASIDPool (C)), time taken: 21.75s
Testing Function pair Pairing (tcbEPAppend (ASM) <= Kernel_C.tcbEPAppend (C))
  (function pairing 104 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (tcbEPAppend (ASM) <= Kernel_C.tcbEPAppend (C)), time taken: 0.20s
Testing Function pair Pairing (invokeCNodeSaveCaller (ASM) <= Kernel_C.invokeCNodeSaveCaller (C))
  (function pairing 105 of 284)
 .. built problem, finding proof
Decided to case split at (12, 'ASM')
  (in problem)
Now doing proof search in true case (12 visited) in problem.
Now doing proof search in false case (12 not visited) in problem.
ProofNode ('CaseSplit', (12, 'ASM'), (ProofNode ('Restr', (12, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (12, ('Number', (0, 1))), (ProofNode ('Restr', (58, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 12 is visited
Step 2: case in (1) where 12 is visited
  Prove the number of visits to 12 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 12 is not visited
  Prove the number of visits to 12 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 58 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeSaveCaller (ASM) <= Kernel_C.invokeCNodeSaveCaller (C)), time taken: 4.28s
Testing Function pair Pairing (lookupIPCBuffer (ASM) <= Kernel_C.lookupIPCBuffer (C))
  (function pairing 106 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupIPCBuffer (ASM) <= Kernel_C.lookupIPCBuffer (C)), time taken: 0.74s
Testing Function pair Pairing (Arch_activateIdleThread (ASM) <= Kernel_C.Arch_activateIdleThread (C))
  (function pairing 107 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_activateIdleThread (ASM) <= Kernel_C.Arch_activateIdleThread (C)), time taken: 0.13s
Testing Function pair Pairing (insertNewCap (ASM) <= Kernel_C.insertNewCap (C))
  (function pairing 108 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (insertNewCap (ASM) <= Kernel_C.insertNewCap (C)), time taken: 0.55s
Testing Function pair Pairing (decodeCopyRegisters (ASM) <= Kernel_C.decodeCopyRegisters (C))
  (function pairing 109 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeCopyRegisters (ASM) <= Kernel_C.decodeCopyRegisters (C)), time taken: 1.27s
Testing Function pair Pairing (invokeTCB_NotificationControl (ASM) <= Kernel_C.invokeTCB_NotificationControl (C))
  (function pairing 110 of 284)
 .. built problem, finding proof
Decided to case split at (3, 'ASM')
  (in problem)
Now doing proof search in true case (3 visited) in problem.
Now doing proof search in false case (3 not visited) in problem.
ProofNode ('CaseSplit', (3, 'ASM'), (ProofNode ('Restr', (3, ('Number', (1, 2))), (ProofNode ('Restr', (18, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Restr', (18, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 3 is visited
Step 2: case in (1) where 3 is visited
  Prove the number of visits to 3 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 18 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 3 is not visited
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 18 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_NotificationControl (ASM) <= Kernel_C.invokeTCB_NotificationControl (C)), time taken: 2.34s
Testing Function pair Pairing (invalidateTLBByASID (ASM) <= Kernel_C.invalidateTLBByASID (C))
  (function pairing 111 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invalidateTLBByASID (ASM) <= Kernel_C.invalidateTLBByASID (C)), time taken: 0.28s
Testing Function pair Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C))
  (function pairing 112 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [14, 121]
  (in problem)
Now doing proof search in 14 init case in problem.
Now doing proof search in 14 loop case in problem.
ProofNode ('Split', ((14, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4096)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'ret_addr_input'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 32)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 4)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 36)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (121, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'do_map___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'f___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 12)])])])]), Expr ('Var', Type ('Word', 32), name = 'slot_pos_before___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'pv_offset___long#v')]), [(Expr ('Op', Type ('Word', 32), name = 'MemAcc', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'frame_cap___struct_cap_C#v.words_C.0')), (Expr ('Op', Type ('Word', 32), name = 'MemAcc', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 36)])]), Expr ('Var', Type ('Word', 32), name = 'frame_cap___struct_cap_C#v.words_C.1')), (Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (14, ('Number', (0, 3))), (ProofNode ('Restr', (121, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (14, ('Offset', (0, 3))), (ProofNode ('Restr', (121, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 14 related to visits to 121
    with equalities
      ((Word32) (MemAcc('stack', ('r13' + 32)))) (@ addr 14)
      = ((Word32) ('frame_cap___struct_cap_C#v.words_C.0')) (@ addr 121)
      ((Word32) (MemAcc('stack', ('r13' + 36)))) (@ addr 14)
      = ((Word32) ('frame_cap___struct_cap_C#v.words_C.1')) (@ addr 121)
      ((Mem) ('mem')) (@ addr 14)
      = ((Mem) ('Mem')) (@ addr 121)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 4096)))) (@ addr 14)
      ((Word32) ('r13')) (@ addr 14)
      ((Word32) ('r10')) (@ addr 14)
      ((Word32) ('r9')) (@ addr 14)
      ((Word32) ('r6')) (@ addr 14)
      ((Word32) ('r7')) (@ addr 14)
      ((Word32) ('r8')) (@ addr 14)
      ((Word32) ('ret_addr_input')) (@ addr 14)
      ((Bool) (ROData('mem'))) (@ addr 14)
      ((Word32) ('r5')) (@ addr 14)
      ((Word32) ('ret')) (@ addr 14)
      ((Word32) ('r11')) (@ addr 14)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 32))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0))), ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 4))), ((Word32) (0))), ((Word32) (('r13' + 36))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 14)
      ((Word32) ('do_map___unsigned_long#v')) (@ addr 121)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 121)
      ((Word32) (('f___unsigned_long#v' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast(12)))))) (@ addr 121)
      ((Word32) ('slot_pos_before___unsigned_long#v')) (@ addr 121)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.1')) (@ addr 121)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 121)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.0')) (@ addr 121)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 121)
      ((Word32) ('reg___struct_region_C#v.end_C')) (@ addr 121)
      ((Word32) ('pv_offset___long#v')) (@ addr 121)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 14 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 121 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 14 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 121 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C)), time taken: 2166.13s
Testing Function pair Pairing (create_it_asid_pool (ASM) <= Kernel_C.create_it_asid_pool (C))
  (function pairing 113 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_it_asid_pool (ASM) <= Kernel_C.create_it_asid_pool (C)), time taken: 3.32s
Testing Function pair Pairing (lookupSlotForCNodeOp (ASM) <= Kernel_C.lookupSlotForCNodeOp (C))
  (function pairing 114 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupSlotForCNodeOp (ASM) <= Kernel_C.lookupSlotForCNodeOp (C)), time taken: 3.33s
Testing Function pair Pairing (makeUserPDE (ASM) <= Kernel_C.makeUserPDE (C))
  (function pairing 115 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (makeUserPDE (ASM) <= Kernel_C.makeUserPDE (C)), time taken: 0.98s
Testing Function pair Pairing (cleanCaches_PoU (ASM) <= Kernel_C.cleanCaches_PoU (C))
  (function pairing 116 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cleanCaches_PoU (ASM) <= Kernel_C.cleanCaches_PoU (C)), time taken: 0.81s
Testing Function pair Pairing (cleanCacheRange_PoU (ASM) <= Kernel_C.cleanCacheRange_PoU (C))
  (function pairing 117 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [4, 31]
  (in problem)
Now doing proof search in 4 init case in problem.
Now doing proof search in 4 loop case in problem.
ProofNode ('Split', ((4, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r1')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (4, ('Number', (0, 3))), (ProofNode ('Restr', (31, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (4, ('Offset', (0, 3))), (ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 4 related to visits to 31
    with equalities
      ((Mem) ('mem')) (@ addr 4)
      = ((Mem) ('Mem')) (@ addr 31)
    and with invariants
      ((Word32) ('r21')) (@ addr 4)
      ((Word32) ('r4')) (@ addr 4)
      ((Word32) ('r27')) (@ addr 4)
      ((Word32) ('r17')) (@ addr 4)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('r23')) (@ addr 4)
      ((Word32) ('r13')) (@ addr 4)
      ((Word32) ('r10')) (@ addr 4)
      ((Word32) ('r28')) (@ addr 4)
      ((Word32) ('r19')) (@ addr 4)
      ((Word32) ('r16')) (@ addr 4)
      ((Word64) ('clock')) (@ addr 4)
      ((Word32) ('r12')) (@ addr 4)
      ((Word32) ('r9')) (@ addr 4)
      ((Word32) ('r6')) (@ addr 4)
      ((Word32) ('r7')) (@ addr 4)
      ((Word32) ('r31')) (@ addr 4)
      ((Word32) ('r25')) (@ addr 4)
      ((Word32) ('r24')) (@ addr 4)
      ((Word32) ('r8')) (@ addr 4)
      ((Word32) ('r29')) (@ addr 4)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 4)
      ((Word32) ('r18')) (@ addr 4)
      ((Word32) ('r20')) (@ addr 4)
      ((Word32) ('r30')) (@ addr 4)
      ((Word32) ('r14')) (@ addr 4)
      ((Word32) ('r15')) (@ addr 4)
      ((Word32) ('mode')) (@ addr 4)
      ((Word32) ('r11')) (@ addr 4)
      ((Word32) ('r5')) (@ addr 4)
      ((Word32) ('ret')) (@ addr 4)
      ((Word32) ('r26')) (@ addr 4)
      ((Word32) ('r1')) (@ addr 4)
      ((Word32) ('r2')) (@ addr 4)
      ((Bool) (ROData('mem'))) (@ addr 4)
      ((Word32) ('r22')) (@ addr 4)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r1')), ((Word32) ('r0')))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r1')))))) (@ addr 4)
      ((Bool) ('c')) (@ addr 4)
      ((Bool) ('n')) (@ addr 4)
      ((Bool) ('v')) (@ addr 4)
      ((Bool) ('z')) (@ addr 4)
      ((Word32) ('end___unsigned_long#v')) (@ addr 31)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 31)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 31)
      ((Word32) ('start___unsigned_long#v')) (@ addr 31)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 31)
      ((Word32[50]) ('GhostAssertions')) (@ addr 31)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 4 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 31 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 4 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 31 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cleanCacheRange_PoU (ASM) <= Kernel_C.cleanCacheRange_PoU (C)), time taken: 73.67s
Testing Function pair Pairing (isIRQActive (ASM) <= Kernel_C.isIRQActive (C))
  (function pairing 118 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isIRQActive (ASM) <= Kernel_C.isIRQActive (C)), time taken: 0.42s
Testing Function pair Pairing (Arch_postModifyRegisters (ASM) <= Kernel_C.Arch_postModifyRegisters (C))
  (function pairing 119 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_postModifyRegisters (ASM) <= Kernel_C.Arch_postModifyRegisters (C)), time taken: 0.36s
Testing Function pair Pairing (handleDoubleFault (ASM) <= Kernel_C.handleDoubleFault (C))
  (function pairing 120 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleDoubleFault (ASM) <= Kernel_C.handleDoubleFault (C)), time taken: 0.48s
Testing Function pair Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))
  (function pairing 121 of 284)
Aborting Problem (Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C)), time taken: 0.01s
Testing Function pair Pairing (map_kernel_frame (ASM) <= Kernel_C.map_kernel_frame (C))
  (function pairing 122 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (map_kernel_frame (ASM) <= Kernel_C.map_kernel_frame (C)), time taken: 0.61s
Testing Function pair Pairing (handleUserLevelFault (ASM) <= Kernel_C.handleUserLevelFault (C))
  (function pairing 123 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleUserLevelFault (ASM) <= Kernel_C.handleUserLevelFault (C)), time taken: 0.73s
Testing Function pair Pairing (Arch_isFrameType (ASM) <= Kernel_C.Arch_isFrameType (C))
  (function pairing 124 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_isFrameType (ASM) <= Kernel_C.Arch_isFrameType (C)), time taken: 0.43s
Testing Function pair Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C))
  (function pairing 125 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [71, 132]
  (in problem)
Now doing proof search in 71 init case in problem.
Now doing proof search in 71 loop case in problem.
ProofNode ('Split', ((71, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 4)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (132, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'badge___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'epptr___ptr_to_struct_endpoint_C#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'queue___struct_tcb_queue_C#v.head_C')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v')), (Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'queue___struct_tcb_queue_C#v.end_C'))], 2, 1), (ProofNode ('Restr', (71, ('Number', (0, 3))), (ProofNode ('Restr', (132, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (71, ('Offset', (0, 3))), (ProofNode ('Restr', (132, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 71 related to visits to 132
    with equalities
      ((Mem) ('mem')) (@ addr 71)
      = ((Mem) ('Mem')) (@ addr 132)
      ((Word32) ('r10')) (@ addr 71)
      = ((Word32) ('queue___struct_tcb_queue_C#v.head_C')) (@ addr 132)
      ((Word32) ('r4')) (@ addr 71)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 132)
      ((Word32) ('r8')) (@ addr 71)
      = ((Word32) ('queue___struct_tcb_queue_C#v.end_C')) (@ addr 132)
    and with invariants
      ((Word32) ('r13')) (@ addr 71)
      ((Word32) ('r9')) (@ addr 71)
      ((Word32) ('r6')) (@ addr 71)
      ((Word32) ('r7')) (@ addr 71)
      ((Word32) ('r11')) (@ addr 71)
      ((Word32) ('ret')) (@ addr 71)
      ((Bool) (ROData('mem'))) (@ addr 71)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 4))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 71)
      ((Word32) ('badge___unsigned_long#v')) (@ addr 132)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 132)
      ((Word32) ('epptr___ptr_to_struct_endpoint_C#v')) (@ addr 132)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 71 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 132 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 71 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 132 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C)), time taken: 563.39s
Testing Function pair Pairing (cteRevoke (ASM) <= Kernel_C.cteRevoke (C))
  (function pairing 126 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [11, 75]
  (in problem)
Now doing proof search in 11 init case in problem.
Now doing proof search in 11 loop case in problem.
ProofNode ('Split', ((11, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (75, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'nextPtr___ptr_to_struct_cte_C#v'))], 2, 1), (ProofNode ('Restr', (11, ('Number', (0, 3))), (ProofNode ('Restr', (75, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Restr', (75, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 11 related to visits to 75
    with equalities
      ((Mem) ('mem')) (@ addr 11)
      = ((Mem) ('Mem')) (@ addr 75)
      ((Word32) ('r4')) (@ addr 11)
      = ((Word32) ('nextPtr___ptr_to_struct_cte_C#v')) (@ addr 75)
    and with invariants
      ((Word32) ('r8')) (@ addr 11)
      ((Word32) ('r5')) (@ addr 11)
      ((Word32) ('r9')) (@ addr 11)
      ((Word32) ('ret')) (@ addr 11)
      ((Word32) ('r11')) (@ addr 11)
      ((Word32) ('r13')) (@ addr 11)
      ((Word32) ('r10')) (@ addr 11)
      ((Bool) (ROData('mem'))) (@ addr 11)
      ((Word32) ('r6')) (@ addr 11)
      ((Word32) ('r7')) (@ addr 11)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 11)
      ((Word32) ('slot___ptr_to_struct_cte_C#v')) (@ addr 75)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 75)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 11 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 75 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 11 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 75 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteRevoke (ASM) <= Kernel_C.cteRevoke (C)), time taken: 44.74s
Testing Function pair Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C))
  (function pairing 127 of 284)
Skipping Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C)), underspecified C
Testing Function pair Pairing (invokeIRQHandler_ClearIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_ClearIRQHandler (C))
  (function pairing 128 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeIRQHandler_ClearIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_ClearIRQHandler (C)), time taken: 0.30s
Testing Function pair Pairing (initL2Cache (ASM) <= Kernel_C.initL2Cache (C))
  (function pairing 129 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [8, 157]
  (in problem)
Now doing proof search in 8 init case in problem.
Now doing proof search in 8 loop case in problem.
ProofNode ('Split', ((8, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (157, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#46#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Restr', (157, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (8, ('Offset', (0, 1))), (ProofNode ('Restr', (157, ('Offset', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 8 related to visits to 157
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 8)
      ((Word32) ('r4')) (@ addr 8)
      ((Word32) ('r8')) (@ addr 8)
      ((Word32) ('r11')) (@ addr 8)
      ((Word32) ('r5')) (@ addr 8)
      ((Word32) ('r6')) (@ addr 8)
      ((Word32) ('r0')) (@ addr 8)
      ((Word32) ('r9')) (@ addr 8)
      ((Word32) ('ret')) (@ addr 8)
      ((Word32) ('r2')) (@ addr 8)
      ((Word32) ('r13')) (@ addr 8)
      ((Word32) ('r10')) (@ addr 8)
      ((Mem) ('mem')) (@ addr 8)
      ((Word32) ('r14')) (@ addr 8)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 8)
      ((Word32) (('loop#46#count' + ((0 - '#seq-visits') * 1)))) (@ addr 157)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 157 is in {0 ..< 1}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 8 is in {i + 0 ..< i + 1}
    .. proven.
Step 6: 
  Prove the number of visits to 157 is in {i + 0 ..< i + 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (initL2Cache (ASM) <= Kernel_C.initL2Cache (C)), time taken: 9.04s
Testing Function pair Pairing (write_slot (ASM) <= Kernel_C.write_slot (C))
  (function pairing 130 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (write_slot (ASM) <= Kernel_C.write_slot (C)), time taken: 0.33s
Testing Function pair Pairing (Arch_handleFaultReply (ASM) <= Kernel_C.Arch_handleFaultReply (C))
  (function pairing 131 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_handleFaultReply (ASM) <= Kernel_C.Arch_handleFaultReply (C)), time taken: 0.29s
Testing Function pair Pairing (cancelAllSignals (ASM) <= Kernel_C.cancelAllSignals (C))
  (function pairing 132 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [11, 51]
  (in problem)
Now doing proof search in 11 init case in problem.
Now doing proof search in 11 loop case in problem.
ProofNode ('Split', ((11, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (51, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'))], 2, 1), (ProofNode ('Restr', (11, ('Number', (0, 3))), (ProofNode ('Restr', (51, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Restr', (51, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 11 related to visits to 51
    with equalities
      ((Mem) ('mem')) (@ addr 11)
      = ((Mem) ('Mem')) (@ addr 51)
      ((Word32) ('r0')) (@ addr 11)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 51)
      ((Word32) ('r4')) (@ addr 11)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 51)
    and with invariants
      ((Word32) ('r7')) (@ addr 11)
      ((Word32) ('r8')) (@ addr 11)
      ((Word32) ('r11')) (@ addr 11)
      ((Word32) ('r13')) (@ addr 11)
      ((Word32) ('r9')) (@ addr 11)
      ((Word32) ('ret')) (@ addr 11)
      ((Word32) ('r1')) (@ addr 11)
      ((Word32) ('r10')) (@ addr 11)
      ((Bool) (ROData('mem'))) (@ addr 11)
      ((Word32) ('r5')) (@ addr 11)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 11)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 51)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 11 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 51 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 11 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 51 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cancelAllSignals (ASM) <= Kernel_C.cancelAllSignals (C)), time taken: 50.54s
Testing Function pair Pairing (isIOSpaceFrameCap (ASM) <= Kernel_C.isIOSpaceFrameCap (C))
  (function pairing 133 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (isIOSpaceFrameCap (ASM) <= Kernel_C.isIOSpaceFrameCap (C)), time taken: 0.41s
Testing Function pair Pairing (invalidateCacheRange_RAM (ASM) <= Kernel_C.invalidateCacheRange_RAM (C))
  (function pairing 134 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [10, 136]
  (in problem)
Now doing proof search in 10 init case in problem.
Discovered that points [154 (loop head)] can be bounded
  (in 10 init case in problem)
Discovered that points [63 (loop head)] can be bounded
  (in 10 init case in problem)
Discovered a loop relation for split points [20, 89]
  (in 10 init case in problem)
Now doing proof search in 20 init case in 10 init case in problem.
Now doing proof search in 20 loop case in 10 init case in problem.
Now doing proof search in 10 loop case in problem.
Discovered that points [154 (loop head)] can be bounded
  (in 10 loop case in problem)
Discovered that points [63 (loop head)] can be bounded
  (in 10 loop case in problem)
Discovered a loop relation for split points [20, 89]
  (in 10 loop case in problem)
Now doing proof search in 20 init case in 10 loop case in problem.
Now doing proof search in 20 loop case in 10 loop case in problem.
ProofNode ('Split', ((10, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (136, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.3'), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.1'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 5)])])])]), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.3'))], 2, 1), (ProofNode ('Restr', (10, ('Number', (0, 3))), (ProofNode ('Restr', (136, ('Number', (0, 3))), (ProofNode ('Restr', (154, ('Number', (0, 2))), (ProofNode ('Restr', (63, ('Number', (0, 2))), (ProofNode ('Split', ((20, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r2')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (89, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (20, ('Number', (0, 3))), (ProofNode ('Restr', (89, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (20, ('Offset', (0, 3))), (ProofNode ('Restr', (89, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)), ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Restr', (136, ('Offset', (0, 3))), (ProofNode ('Restr', (154, ('Number', (0, 2))), (ProofNode ('Restr', (63, ('Number', (0, 2))), (ProofNode ('Split', ((20, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r2')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (89, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (20, ('Number', (0, 3))), (ProofNode ('Restr', (89, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (20, ('Offset', (0, 3))), (ProofNode ('Restr', (89, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),))))
 .. proof found.
Step 1: 
  prove visits to 10 related to visits to 136
    with equalities
      ((Mem) ('mem')) (@ addr 10)
      = ((Mem) ('Mem.3')) (@ addr 136)
    and with invariants
      ((Word32) ('r21')) (@ addr 10)
      ((Word32) ('r4')) (@ addr 10)
      ((Word32) ('r27')) (@ addr 10)
      ((Word32) ('r17')) (@ addr 10)
      ((Word32) ('r0')) (@ addr 10)
      ((Word32) ('r11')) (@ addr 10)
      ((Word32) ('r23')) (@ addr 10)
      ((Word32) ('r13')) (@ addr 10)
      ((Word32) ('r10')) (@ addr 10)
      ((Word32) ('r28')) (@ addr 10)
      ((Word32) ('r24')) (@ addr 10)
      ((Word32) ('r19')) (@ addr 10)
      ((Word32) ('r16')) (@ addr 10)
      ((Word64) ('clock')) (@ addr 10)
      ((Word32) ('r12')) (@ addr 10)
      ((Word32) ('r9')) (@ addr 10)
      ((Word32) ('r6')) (@ addr 10)
      ((Word32) ('r7')) (@ addr 10)
      ((Word32) ('r31')) (@ addr 10)
      ((Word32) ('r25')) (@ addr 10)
      ((Word32) ('r8')) (@ addr 10)
      ((Word32) ('r29')) (@ addr 10)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 10)
      ((Word32) ('r18')) (@ addr 10)
      ((Word32) ('r20')) (@ addr 10)
      ((Word32) ('r30')) (@ addr 10)
      ((Word32) ('r14')) (@ addr 10)
      ((Word32) ('r15')) (@ addr 10)
      ((Word32) ('mode')) (@ addr 10)
      ((Word32) ('r5')) (@ addr 10)
      ((Word32) ('ret')) (@ addr 10)
      ((Word32) ('r26')) (@ addr 10)
      ((Word32) ('r1')) (@ addr 10)
      ((Word32) ('r2')) (@ addr 10)
      ((Bool) (ROData('mem'))) (@ addr 10)
      ((Word32) ('r22')) (@ addr 10)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 10)
      ((Word32) ('end___unsigned_long#v')) (@ addr 136)
      ((Word32[50]) ('GhostAssertions.3')) (@ addr 136)
      ((Word32) ('end___unsigned_long#v.1')) (@ addr 136)
      ((Word32) ('start___unsigned_long#v')) (@ addr 136)
      ((Word32) (('loop#3#count.1' + ((0 - '#seq-visits') * 1)))) (@ addr 136)
      ((Word32) (('start___unsigned_long#v.1' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast(5)))))) (@ addr 136)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 136)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 10 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 136 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 154 is in {0 ..< 2}
    .. proven.
Step 5: 
  Prove the number of visits to 63 is in {0 ..< 2}
    .. proven.
Step 6: 
  prove visits to 20 related to visits to 89
    with equalities
      ((Mem) ('mem')) (@ addr 20)
      = ((Mem) ('Mem')) (@ addr 89)
    and with invariants
      ((Word32) ('r21')) (@ addr 20)
      ((Word32) ('r4')) (@ addr 20)
      ((Word32) ('r27')) (@ addr 20)
      ((Word32) ('r17')) (@ addr 20)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 20)
      ((Word32) ('r11')) (@ addr 20)
      ((Word32) ('r23')) (@ addr 20)
      ((Word32) ('r13')) (@ addr 20)
      ((Word32) ('r10')) (@ addr 20)
      ((Word32) ('r28')) (@ addr 20)
      ((Word32) ('r19')) (@ addr 20)
      ((Word32) ('r16')) (@ addr 20)
      ((Word64) ('clock')) (@ addr 20)
      ((Word32) ('r12')) (@ addr 20)
      ((Word32) ('r9')) (@ addr 20)
      ((Word32) ('r6')) (@ addr 20)
      ((Word32) ('r7')) (@ addr 20)
      ((Word32) ('r31')) (@ addr 20)
      ((Word32) ('r25')) (@ addr 20)
      ((Word32) ('r24')) (@ addr 20)
      ((Word32) ('r8')) (@ addr 20)
      ((Word32) ('r29')) (@ addr 20)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 20)
      ((Word32) ('r18')) (@ addr 20)
      ((Word32) ('r20')) (@ addr 20)
      ((Word32) ('r30')) (@ addr 20)
      ((Word32) ('r14')) (@ addr 20)
      ((Word32) ('r15')) (@ addr 20)
      ((Word32) ('mode')) (@ addr 20)
      ((Word32) ('r5')) (@ addr 20)
      ((Word32) ('ret')) (@ addr 20)
      ((Word32) ('r26')) (@ addr 20)
      ((Word32) ('r1')) (@ addr 20)
      ((Word32) ('r2')) (@ addr 20)
      ((Bool) (ROData('mem'))) (@ addr 20)
      ((Word32) ('r22')) (@ addr 20)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 20)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r2')), ((Word32) ('r0')))))) (@ addr 20)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r2')))))) (@ addr 20)
      ((Bool) ('c')) (@ addr 20)
      ((Bool) ('n')) (@ addr 20)
      ((Bool) ('v')) (@ addr 20)
      ((Bool) ('z')) (@ addr 20)
      ((Word32) ('end___unsigned_long#v')) (@ addr 89)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 89)
      ((Word32) ('start___unsigned_long#v')) (@ addr 89)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 89)
      ((Word32[50]) ('GhostAssertions')) (@ addr 89)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 89)
    .. proven.
Step 7: case in (6) where the length of the sequence < 2
  Prove the number of visits to 20 is in {0 ..< 3}
    .. proven.
Step 8: 
  Prove the number of visits to 89 is in {0 ..< 3}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (6) where the length of the sequence is j + 2
  Prove the number of visits to 20 is in {j + 0 ..< j + 3}
    .. proven.
Step 11: 
  Prove the number of visits to 89 is in {j + 0 ..< j + 3}
    .. proven.
Step 12: 
  prove all verification conditions
    .. proven.
Step 13: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 10 is in {i + 0 ..< i + 3}
    .. proven.
Step 14: 
  Prove the number of visits to 136 is in {i + 0 ..< i + 3}
    .. proven.
Step 15: 
  Prove the number of visits to 154 is in {0 ..< 2}
    .. proven.
Step 16: 
  Prove the number of visits to 63 is in {0 ..< 2}
    .. proven.
Step 17: 
  prove visits to 20 related to visits to 89
    with equalities
      ((Mem) ('mem')) (@ addr 20)
      = ((Mem) ('Mem')) (@ addr 89)
    and with invariants
      ((Word32) ('r21')) (@ addr 20)
      ((Word32) ('r4')) (@ addr 20)
      ((Word32) ('r27')) (@ addr 20)
      ((Word32) ('r17')) (@ addr 20)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 20)
      ((Word32) ('r11')) (@ addr 20)
      ((Word32) ('r23')) (@ addr 20)
      ((Word32) ('r13')) (@ addr 20)
      ((Word32) ('r10')) (@ addr 20)
      ((Word32) ('r28')) (@ addr 20)
      ((Word32) ('r19')) (@ addr 20)
      ((Word32) ('r16')) (@ addr 20)
      ((Word64) ('clock')) (@ addr 20)
      ((Word32) ('r12')) (@ addr 20)
      ((Word32) ('r9')) (@ addr 20)
      ((Word32) ('r6')) (@ addr 20)
      ((Word32) ('r7')) (@ addr 20)
      ((Word32) ('r31')) (@ addr 20)
      ((Word32) ('r25')) (@ addr 20)
      ((Word32) ('r24')) (@ addr 20)
      ((Word32) ('r8')) (@ addr 20)
      ((Word32) ('r29')) (@ addr 20)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 20)
      ((Word32) ('r18')) (@ addr 20)
      ((Word32) ('r20')) (@ addr 20)
      ((Word32) ('r30')) (@ addr 20)
      ((Word32) ('r14')) (@ addr 20)
      ((Word32) ('r15')) (@ addr 20)
      ((Word32) ('mode')) (@ addr 20)
      ((Word32) ('r5')) (@ addr 20)
      ((Word32) ('ret')) (@ addr 20)
      ((Word32) ('r26')) (@ addr 20)
      ((Word32) ('r1')) (@ addr 20)
      ((Word32) ('r2')) (@ addr 20)
      ((Bool) (ROData('mem'))) (@ addr 20)
      ((Word32) ('r22')) (@ addr 20)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 20)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r2')), ((Word32) ('r0')))))) (@ addr 20)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r2')))))) (@ addr 20)
      ((Bool) ('c')) (@ addr 20)
      ((Bool) ('n')) (@ addr 20)
      ((Bool) ('v')) (@ addr 20)
      ((Bool) ('z')) (@ addr 20)
      ((Word32) ('end___unsigned_long#v')) (@ addr 89)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 89)
      ((Word32) ('start___unsigned_long#v')) (@ addr 89)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 89)
      ((Word32[50]) ('GhostAssertions')) (@ addr 89)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 89)
    .. proven.
Step 18: case in (17) where the length of the sequence < 2
  Prove the number of visits to 20 is in {0 ..< 3}
    .. proven.
Step 19: 
  Prove the number of visits to 89 is in {0 ..< 3}
    .. proven.
Step 20: 
  prove all verification conditions
    .. proven.
Step 21: case in (17) where the length of the sequence is k + 2
  Prove the number of visits to 20 is in {k + 0 ..< k + 3}
    .. proven.
Step 22: 
  Prove the number of visits to 89 is in {k + 0 ..< k + 3}
    .. proven.
Step 23: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invalidateCacheRange_RAM (ASM) <= Kernel_C.invalidateCacheRange_RAM (C)), time taken: 303.01s
Testing Function pair Pairing (finaliseCap (ASM) <= Kernel_C.finaliseCap (C))
  (function pairing 135 of 284)
 .. built problem, finding proof
Decided to case split at (11, 'ASM')
  (in problem)
Now doing proof search in true case (11 visited) in problem.
Now doing proof search in false case (11 not visited) in problem.
Decided to case split at (43, 'ASM')
  (in false case (11 not visited) in problem)
Now doing proof search in true case (43 visited) in false case (11 not visited) in problem.
Now doing proof search in false case (43 not visited) in false case (11 not visited) in problem.
Decided to case split at (18, 'ASM')
  (in false case (43 not visited) in false case (11 not visited) in problem)
Now doing proof search in true case (18 visited) in false case (43 not visited) in false case (11 not visited) in problem.
Now doing proof search in false case (18 not visited) in false case (43 not visited) in false case (11 not visited) in problem.
Decided to case split at (8, 'ASM')
  (in false case (18 not visited) in false case (43 not visited) in false case (11 not visited) in problem)
Now doing proof search in true case (8 visited) in false case (18 not visited) in false case (43 not visited) in false case (11 not visited) in problem.
Now doing proof search in false case (8 not visited) in false case (18 not visited) in false case (43 not visited) in false case (11 not visited) in problem.
ProofNode ('CaseSplit', (11, 'ASM'), (ProofNode ('Restr', (11, ('Number', (1, 2))), (ProofNode ('Restr', (408, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (11, ('Number', (0, 1))), (ProofNode ('Restr', (408, ('Number', (0, 1))), (ProofNode ('CaseSplit', (43, 'ASM'), (ProofNode ('Restr', (43, ('Number', (1, 2))), (ProofNode ('Restr', (358, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (43, ('Number', (0, 1))), (ProofNode ('Restr', (358, ('Number', (0, 1))), (ProofNode ('CaseSplit', (18, 'ASM'), (ProofNode ('Restr', (18, ('Number', (1, 2))), (ProofNode ('Restr', (395, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (18, ('Number', (0, 1))), (ProofNode ('Restr', (395, ('Number', (0, 1))), (ProofNode ('CaseSplit', (8, 'ASM'), (ProofNode ('Restr', (8, ('Number', (1, 2))), (ProofNode ('Restr', (424, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Restr', (424, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 11 is visited
Step 2: case in (1) where 11 is visited
  Prove the number of visits to 11 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 408 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 11 is not visited
  Prove the number of visits to 11 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 408 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 43 is visited
Step 8: case in (7) where 43 is visited
  Prove the number of visits to 43 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 358 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 43 is not visited
  Prove the number of visits to 43 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 358 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 18 is visited
Step 14: case in (13) where 18 is visited
  Prove the number of visits to 18 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 395 is in {1 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where 18 is not visited
  Prove the number of visits to 18 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 395 is in {0 ..< 1}
    .. proven.
Step 19: 
  case split on whether 8 is visited
Step 20: case in (19) where 8 is visited
  Prove the number of visits to 8 is in {1 ..< 2}
    .. proven.
Step 21: 
  Prove the number of visits to 424 is in {1 ..< 2}
    .. proven.
Step 22: 
  prove all verification conditions
    .. proven.
Step 23: case in (19) where 8 is not visited
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 24: 
  Prove the number of visits to 424 is in {0 ..< 1}
    .. proven.
Step 25: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (finaliseCap (ASM) <= Kernel_C.finaliseCap (C)), time taken: 53.03s
Testing Function pair Pairing (invokeCNodeInsert (ASM) <= Kernel_C.invokeCNodeInsert (C))
  (function pairing 136 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeInsert (ASM) <= Kernel_C.invokeCNodeInsert (C)), time taken: 0.35s
Testing Function pair Pairing (findFreeHWASID (ASM) <= Kernel_C.findFreeHWASID (C))
  (function pairing 137 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [6, 89]
  (in problem)
Now doing proof search in 6 init case in problem.
Now doing proof search in 6 loop case in problem.
ProofNode ('Split', ((6, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (89, (1, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'hw_asid_offset___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#17#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (6, ('Number', (0, 3))), (ProofNode ('Restr', (89, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (6, ('Offset', (0, 3))), (ProofNode ('Restr', (89, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 6 related to visits [2, 3, 4 ...] to 89
    with equalities
    and with invariants
      ((Word32) ('r21')) (@ addr 6)
      ((Word32) ('r4')) (@ addr 6)
      ((Word32) ('r27')) (@ addr 6)
      ((Word32) ('r17')) (@ addr 6)
      ((Word32) ('r23')) (@ addr 6)
      ((Word32) ('r13')) (@ addr 6)
      ((Word32) ('r10')) (@ addr 6)
      ((Word32) ('r28')) (@ addr 6)
      ((Word32) ('r19')) (@ addr 6)
      ((Word32) ('r16')) (@ addr 6)
      ((Word64) ('clock')) (@ addr 6)
      ((Word32) ('r12')) (@ addr 6)
      ((Word32) ('r9')) (@ addr 6)
      ((Word32) ('r6')) (@ addr 6)
      ((Word32) ('r7')) (@ addr 6)
      ((Word32) ('r31')) (@ addr 6)
      ((Word32) ('r25')) (@ addr 6)
      ((Word32) ('r24')) (@ addr 6)
      ((Word32) ('r8')) (@ addr 6)
      ((Word32) ('r29')) (@ addr 6)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 6)
      ((Word32) ('r1')) (@ addr 6)
      ((Word32) ('r18')) (@ addr 6)
      ((Word32) ('r20')) (@ addr 6)
      ((Word32) ('r30')) (@ addr 6)
      ((Word32) ('r14')) (@ addr 6)
      ((Word32) ('r15')) (@ addr 6)
      ((Word32) ('mode')) (@ addr 6)
      ((Word32) ('r11')) (@ addr 6)
      ((Word32) ('r5')) (@ addr 6)
      ((Word32) ('ret')) (@ addr 6)
      ((Word32) ('r26')) (@ addr 6)
      ((Mem) ('mem')) (@ addr 6)
      ((Word32) ('r22')) (@ addr 6)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 6)
      ((Word32) (('hw_asid_offset___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 89)
      ((Mem) ('Mem')) (@ addr 89)
      ((Word32[50]) ('GhostAssertions')) (@ addr 89)
      ((Word32) (('loop#17#count' + ((0 - '#seq-visits') * 1)))) (@ addr 89)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 6 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 89 is in {0 ..< 4}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 6 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 89 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (findFreeHWASID (ASM) <= Kernel_C.findFreeHWASID (C)), time taken: 33.94s
Testing Function pair Pairing (findPDForASID (ASM) <= Kernel_C.findPDForASID (C))
  (function pairing 138 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (findPDForASID (ASM) <= Kernel_C.findPDForASID (C)), time taken: 0.47s
Testing Function pair Pairing (lookupExtraCaps (ASM) <= Kernel_C.lookupExtraCaps (C))
  (function pairing 139 of 284)
 .. built problem, finding proof
Discovered that points [84 (loop head)] can be bounded
  (in problem)
Discovered that points [46 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (84, ('Number', (0, 5))), (ProofNode ('Restr', (46, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),))
 .. proof found.
Step 1: 
  Prove the number of visits to 84 is in {0 ..< 5}
    .. proven.
Step 2: 
  Prove the number of visits to 46 is in {0 ..< 4}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupExtraCaps (ASM) <= Kernel_C.lookupExtraCaps (C)), time taken: 25.77s
Testing Function pair Pairing (decodeTCBInvocation (ASM) <= Kernel_C.decodeTCBInvocation (C))
  (function pairing 140 of 284)
 .. built problem, finding proof
Decided to case split at (33, 'ASM')
  (in problem)
Now doing proof search in true case (33 visited) in problem.
Now doing proof search in false case (33 not visited) in problem.
Decided to case split at (30, 'ASM')
  (in false case (33 not visited) in problem)
Now doing proof search in true case (30 visited) in false case (33 not visited) in problem.
Now doing proof search in false case (30 not visited) in false case (33 not visited) in problem.
Decided to case split at (42, 'ASM')
  (in false case (30 not visited) in false case (33 not visited) in problem)
Now doing proof search in true case (42 visited) in false case (30 not visited) in false case (33 not visited) in problem.
Now doing proof search in false case (42 not visited) in false case (30 not visited) in false case (33 not visited) in problem.
Decided to case split at (39, 'ASM')
  (in false case (42 not visited) in false case (30 not visited) in false case (33 not visited) in problem)
Now doing proof search in true case (39 visited) in false case (42 not visited) in false case (30 not visited) in false case (33 not visited) in problem.
Now doing proof search in false case (39 not visited) in false case (42 not visited) in false case (30 not visited) in false case (33 not visited) in problem.
Decided to case split at (36, 'ASM')
  (in false case (39 not visited) in false case (42 not visited) in false case (30 not visited) in false case (33 not visited) in problem)
Now doing proof search in true case (36 visited) in false case (39 not visited) in false case (42 not visited) in false case (30 not visited) in false case (33 not visited) in problem.
Now doing proof search in false case (36 not visited) in false case (39 not visited) in false case (42 not visited) in false case (30 not visited) in false case (33 not visited) in problem.
Decided to case split at (27, 'ASM')
  (in false case (36 not visited) in false case (39 not visited) in false case (42 not visited) in false case (30 not visited) in false case (33 not visited) in problem)
Now doing proof search in true case (27 visited) in false case (36 not visited) in false case (39 not visited) in false case (42 not visited) in false case (30 not visited) in false case (33 not visited) in problem.
Now doing proof search in false case (27 not visited) in false case (36 not visited) in false case (39 not visited) in false case (42 not visited) in false case (30 not visited) in false case (33 not visited) in problem.
ProofNode ('CaseSplit', (33, 'ASM'), (ProofNode ('Restr', (33, ('Number', (1, 2))), (ProofNode ('Restr', (251, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (33, ('Number', (0, 1))), (ProofNode ('Restr', (251, ('Number', (0, 1))), (ProofNode ('CaseSplit', (30, 'ASM'), (ProofNode ('Restr', (30, ('Number', (1, 2))), (ProofNode ('Restr', (276, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (30, ('Number', (0, 1))), (ProofNode ('Restr', (276, ('Number', (0, 1))), (ProofNode ('CaseSplit', (42, 'ASM'), (ProofNode ('Restr', (42, ('Number', (1, 2))), (ProofNode ('Restr', (282, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (42, ('Number', (0, 1))), (ProofNode ('Restr', (282, ('Number', (0, 1))), (ProofNode ('CaseSplit', (39, 'ASM'), (ProofNode ('Restr', (39, ('Number', (1, 2))), (ProofNode ('Restr', (279, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (39, ('Number', (0, 1))), (ProofNode ('Restr', (279, ('Number', (0, 1))), (ProofNode ('CaseSplit', (36, 'ASM'), (ProofNode ('Restr', (36, ('Number', (1, 2))), (ProofNode ('Restr', (258, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (36, ('Number', (0, 1))), (ProofNode ('Restr', (258, ('Number', (0, 1))), (ProofNode ('CaseSplit', (27, 'ASM'), (ProofNode ('Restr', (27, ('Number', (1, 2))), (ProofNode ('Restr', (273, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (27, ('Number', (0, 1))), (ProofNode ('Restr', (273, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 33 is visited
Step 2: case in (1) where 33 is visited
  Prove the number of visits to 33 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 251 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 33 is not visited
  Prove the number of visits to 33 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 251 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 30 is visited
Step 8: case in (7) where 30 is visited
  Prove the number of visits to 30 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 276 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 30 is not visited
  Prove the number of visits to 30 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 276 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 42 is visited
Step 14: case in (13) where 42 is visited
  Prove the number of visits to 42 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 282 is in {1 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where 42 is not visited
  Prove the number of visits to 42 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 282 is in {0 ..< 1}
    .. proven.
Step 19: 
  case split on whether 39 is visited
Step 20: case in (19) where 39 is visited
  Prove the number of visits to 39 is in {1 ..< 2}
    .. proven.
Step 21: 
  Prove the number of visits to 279 is in {1 ..< 2}
    .. proven.
Step 22: 
  prove all verification conditions
    .. proven.
Step 23: case in (19) where 39 is not visited
  Prove the number of visits to 39 is in {0 ..< 1}
    .. proven.
Step 24: 
  Prove the number of visits to 279 is in {0 ..< 1}
    .. proven.
Step 25: 
  case split on whether 36 is visited
Step 26: case in (25) where 36 is visited
  Prove the number of visits to 36 is in {1 ..< 2}
    .. proven.
Step 27: 
  Prove the number of visits to 258 is in {1 ..< 2}
    .. proven.
Step 28: 
  prove all verification conditions
    .. proven.
Step 29: case in (25) where 36 is not visited
  Prove the number of visits to 36 is in {0 ..< 1}
    .. proven.
Step 30: 
  Prove the number of visits to 258 is in {0 ..< 1}
    .. proven.
Step 31: 
  case split on whether 27 is visited
Step 32: case in (31) where 27 is visited
  Prove the number of visits to 27 is in {1 ..< 2}
    .. proven.
Step 33: 
  Prove the number of visits to 273 is in {1 ..< 2}
    .. proven.
Step 34: 
  prove all verification conditions
    .. proven.
Step 35: case in (31) where 27 is not visited
  Prove the number of visits to 27 is in {0 ..< 1}
    .. proven.
Step 36: 
  Prove the number of visits to 273 is in {0 ..< 1}
    .. proven.
Step 37: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeTCBInvocation (ASM) <= Kernel_C.decodeTCBInvocation (C)), time taken: 101.82s
Testing Function pair Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C))
  (function pairing 141 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [78, 271]
  (in problem)
Now doing proof search in 78 init case in problem.
Now doing proof search in 78 loop case in problem.
ProofNode ('Split', ((78, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (271, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v.1'), Expr ('Var', Type ('Word', 32), name = 'immediate___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'exposed___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#9#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (78, ('Number', (0, 3))), (ProofNode ('Restr', (271, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (78, ('Offset', (0, 3))), (ProofNode ('Restr', (271, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 78 related to visits to 271
    with equalities
      ((Mem) ('mem')) (@ addr 78)
      = ((Mem) ('Mem.1')) (@ addr 271)
    and with invariants
      ((Word32) ('r4')) (@ addr 78)
      ((Word32) ('r11')) (@ addr 78)
      ((Word32) ('r5')) (@ addr 78)
      ((Bool) (ROData('mem'))) (@ addr 78)
      ((Word32) ('ret')) (@ addr 78)
      ((Word32) ('r7')) (@ addr 78)
      ((Word32) ('r13')) (@ addr 78)
      ((Word32) ('r6')) (@ addr 78)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0))), ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 78)
      ((Word32) ('slot___ptr_to_struct_cte_C#v.1')) (@ addr 271)
      ((Word32) ('immediate___unsigned_long#v')) (@ addr 271)
      ((Word32) ('exposed___unsigned_long#v')) (@ addr 271)
      ((Word32) ('slot___ptr_to_struct_cte_C#v')) (@ addr 271)
      ((Word32) (('loop#9#count' + ((0 - '#seq-visits') * 1)))) (@ addr 271)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 78 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 271 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 78 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 271 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C)), time taken: 1991.50s
Testing Function pair Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C))
  (function pairing 142 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [10, 65]
  (in problem)
Now doing proof search in 10 init case in problem.
Now doing proof search in 10 loop case in problem.
ProofNode ('Split', ((10, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 16)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Var', Type ('Word', 32), name = 'r8')])]), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (65, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'userSize___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 't___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'destOffset___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'objectSize___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'destLength___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'nextFreeArea___ptr_to_void#v'), Expr ('Var', Type ('Word', 32), name = 'deviceMemory___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'destCNode___ptr_to_struct_cte_C#v'), Expr ('Var', Type ('Word', 32), name = 'parent___ptr_to_struct_cte_C#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (10, ('Number', (0, 3))), (ProofNode ('Restr', (65, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (10, ('Offset', (0, 3))), (ProofNode ('Restr', (65, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 10 related to visits to 65
    with equalities
      ((Mem) ('mem')) (@ addr 10)
      = ((Mem) ('Mem')) (@ addr 65)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 16)))) (@ addr 10)
      ((Word32) ('r13')) (@ addr 10)
      ((Word32) ('r10')) (@ addr 10)
      ((Word32) ('r9')) (@ addr 10)
      ((Word32) (('r6' + ((0 - '#seq-visits') * 1)))) (@ addr 10)
      ((Word32) (('r7' + ((0 - '#seq-visits') * 'r8')))) (@ addr 10)
      ((Word32) ('r8')) (@ addr 10)
      ((Word32) ('r11')) (@ addr 10)
      ((Word32) ('r5')) (@ addr 10)
      ((Word32) ('ret')) (@ addr 10)
      ((Bool) (ROData('mem'))) (@ addr 10)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 10)
      ((Word32) ('userSize___unsigned_long#v')) (@ addr 65)
      ((Word32) ('t___unsigned_long#v')) (@ addr 65)
      ((Word32) ('destOffset___unsigned_long#v')) (@ addr 65)
      ((Word32) ('objectSize___unsigned_long#v')) (@ addr 65)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 65)
      ((Word32) ('destLength___unsigned_long#v')) (@ addr 65)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 65)
      ((Word32) ('nextFreeArea___ptr_to_void#v')) (@ addr 65)
      ((Word32) ('deviceMemory___unsigned_long#v')) (@ addr 65)
      ((Word32) ('destCNode___ptr_to_struct_cte_C#v')) (@ addr 65)
      ((Word32) ('parent___ptr_to_struct_cte_C#v')) (@ addr 65)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 10 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 65 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 10 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 65 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C)), time taken: 395.85s
Testing Function pair Pairing (invokeCNodeCancelBadgedSends (ASM) <= Kernel_C.invokeCNodeCancelBadgedSends (C))
  (function pairing 143 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeCancelBadgedSends (ASM) <= Kernel_C.invokeCNodeCancelBadgedSends (C)), time taken: 0.32s
Testing Function pair Pairing (emptySlot (ASM) <= Kernel_C.emptySlot (C))
  (function pairing 144 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (emptySlot (ASM) <= Kernel_C.emptySlot (C)), time taken: 1.56s
Testing Function pair Pairing (flushPage (ASM) <= Kernel_C.flushPage (C))
  (function pairing 145 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (flushPage (ASM) <= Kernel_C.flushPage (C)), time taken: 0.97s
Testing Function pair Pairing (cap_get_capSizeBits (ASM) <= Kernel_C.cap_get_capSizeBits (C))
  (function pairing 146 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cap_get_capSizeBits (ASM) <= Kernel_C.cap_get_capSizeBits (C)), time taken: 0.94s
Testing Function pair Pairing (flushSpace (ASM) <= Kernel_C.flushSpace (C))
  (function pairing 147 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (flushSpace (ASM) <= Kernel_C.flushSpace (C)), time taken: 0.37s
Testing Function pair Pairing (arch_clean_invalidate_L1_caches (ASM) <= Kernel_C.arch_clean_invalidate_L1_caches (C))
  (function pairing 148 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (arch_clean_invalidate_L1_caches (ASM) <= Kernel_C.arch_clean_invalidate_L1_caches (C)), time taken: 0.70s
Testing Function pair Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))
  (function pairing 149 of 284)
Aborting Problem (Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))): underspecified instruction'vmrs_r3_fpexc_E0001D94
Result ProblemAbort for pair Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C)), time taken: 0.04s
Testing Function pair Pairing (lookupCapAndSlot (ASM) <= Kernel_C.lookupCapAndSlot (C))
  (function pairing 150 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupCapAndSlot (ASM) <= Kernel_C.lookupCapAndSlot (C)), time taken: 0.69s
Testing Function pair Pairing (strnlen (ASM) <= Kernel_C.strnlen (C))
  (function pairing 151 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [23, 42]
  (in problem)
Now doing proof search in 23 init case in problem.
Now doing proof search in 23 loop case in problem.
ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r1')])])]), (42, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 's___ptr_to_char#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'maxlen___unsigned_long#v')]), [], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 3))), (ProofNode ('Restr', (42, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (42, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 23 related to visits to 42
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r1')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Mem) ('mem')) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r1')), ((Word32) ('r0')))))) (@ addr 23)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r1')))))) (@ addr 23)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 42)
      ((Word32) ('s___ptr_to_char#v')) (@ addr 42)
      ((Mem) ('Mem')) (@ addr 42)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 42)
      ((Word32) ('maxlen___unsigned_long#v')) (@ addr 42)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 42 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 23 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 42 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (strnlen (ASM) <= Kernel_C.strnlen (C)), time taken: 17.72s
Testing Function pair Pairing (decodeSetMCPriority (ASM) <= Kernel_C.decodeSetMCPriority (C))
  (function pairing 152 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeSetMCPriority (ASM) <= Kernel_C.decodeSetMCPriority (C)), time taken: 8.74s
Testing Function pair Pairing (cteInsert (ASM) <= Kernel_C.cteInsert (C))
  (function pairing 153 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteInsert (ASM) <= Kernel_C.cteInsert (C)), time taken: 2.16s
Testing Function pair Pairing (decodeDomainInvocation (ASM) <= Kernel_C.decodeDomainInvocation (C))
  (function pairing 154 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeDomainInvocation (ASM) <= Kernel_C.decodeDomainInvocation (C)), time taken: 0.82s
Testing Function pair Pairing (replyFromKernel_success_empty (ASM) <= Kernel_C.replyFromKernel_success_empty (C))
  (function pairing 155 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (replyFromKernel_success_empty (ASM) <= Kernel_C.replyFromKernel_success_empty (C)), time taken: 0.23s
Testing Function pair Pairing (Arch_updateCapData (ASM) <= Kernel_C.Arch_updateCapData (C))
  (function pairing 156 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_updateCapData (ASM) <= Kernel_C.Arch_updateCapData (C)), time taken: 0.21s
Testing Function pair Pairing (populate_bi_frame (ASM) <= Kernel_C.populate_bi_frame (C))
  (function pairing 157 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (populate_bi_frame (ASM) <= Kernel_C.populate_bi_frame (C)), time taken: 1.89s
Testing Function pair Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C))
  (function pairing 158 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [6, 83]
  (in problem)
Now doing proof search in 6 init case in problem.
Discovered that points [70 (loop head)] can be bounded
  (in 6 init case in problem)
Discovered that points [58 (loop head)] can be bounded
  (in 6 init case in problem)
Now doing proof search in 6 loop case in problem.
Found a future induction at 70
Now doing proof search in 6 loop case in problem.
Discovered a loop relation for split points [23, 75]
  (in 6 loop case in problem)
Now doing proof search in 23 init case in 6 loop case in problem.
Now doing proof search in 23 loop case in 6 loop case in problem.
ProofNode ('Split', ((6, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (83, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'receiver___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#13#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'recvBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'sender___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'sendBuf___ptr_to_unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (6, ('Number', (0, 3))), (ProofNode ('Restr', (83, ('Number', (0, 3))), (ProofNode ('Restr', (70, ('Number', (0, 2))), (ProofNode ('Restr', (58, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (6, ('Offset', (0, 3))), (ProofNode ('Restr', (83, ('Offset', (0, 3))), (ProofNode ('SingleRevInduct', (70, ([Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'recvBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'sendBuf___ptr_to_unsigned_long#v'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])])], 1), (Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Num', Type ('Word', 32), val = 939526312)]), 4294967293)), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (75, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'sendBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'recvBuf___ptr_to_unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 3))), (ProofNode ('Restr', (75, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (75, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),))))
 .. proof found.
Step 1: 
  prove visits to 6 related to visits to 83
    with equalities
      ((Mem) ('mem')) (@ addr 6)
      = ((Mem) ('Mem')) (@ addr 83)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 4)))) (@ addr 6)
      ((Word32) ('r0')) (@ addr 6)
      ((Word32) ('r13')) (@ addr 6)
      ((Word32) ('r10')) (@ addr 6)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 1)))) (@ addr 6)
      ((Word32) ('r9')) (@ addr 6)
      ((Word32) ('r6')) (@ addr 6)
      ((Word32) ('r8')) (@ addr 6)
      ((Word32) ('r3')) (@ addr 6)
      ((Word32) ('r11')) (@ addr 6)
      ((Word32) ('r7')) (@ addr 6)
      ((Word32) ('ret')) (@ addr 6)
      ((Word32) ('r1')) (@ addr 6)
      ((Word32) ('r2')) (@ addr 6)
      ((Bool) (ROData('mem'))) (@ addr 6)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 6)
      ((Word32) ('receiver___ptr_to_struct_tcb_C#v')) (@ addr 83)
      ((Word32) (('loop#13#count' + ((0 - '#seq-visits') * 1)))) (@ addr 83)
      ((Word32) ('n___unsigned_long#v')) (@ addr 83)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 83)
      ((Word32) ('recvBuf___ptr_to_unsigned_long#v')) (@ addr 83)
      ((Word32) ('sender___ptr_to_struct_tcb_C#v')) (@ addr 83)
      ((Word32[50]) ('GhostAssertions')) (@ addr 83)
      ((Word32) ('sendBuf___ptr_to_unsigned_long#v')) (@ addr 83)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 6 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 83 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 70 is in {0 ..< 2}
    .. proven.
Step 5: 
  Prove the number of visits to 58 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Step 7: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 6 is in {i + 0 ..< i + 3}
    .. proven.
Step 8: 
  Prove the number of visits to 83 is in {i + 0 ..< i + 3}
    .. proven.
Step 9: 
  Proving a predicate by future induction.
    proving these invariants by 1-induction
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 70)
      ((Word32) ('n___unsigned_long#v')) (@ addr 70)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 70)
      ((Word32) ('recvBuf___ptr_to_unsigned_long#v')) (@ addr 70)
      ((Word32[50]) ('GhostAssertions')) (@ addr 70)
      ((Word32) ('sendBuf___ptr_to_unsigned_long#v')) (@ addr 70)
      ((Bool) (Equals(LessEquals(((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))), ((Word32) ('i___unsigned_long#v'))), Less(((Word32) ((0 - WordCastSigned(1)))), ((Word32) ('i___unsigned_long#v')))))) (@ addr 70)
      ((Bool) (Equals(LessEquals(((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))), ((Word32) ('i___unsigned_long#v'))), Less(((Word32) ('i___unsigned_long#v')), ((Word32) ((0 - WordCastSigned(1)))))))) (@ addr 70)
    then establishing this predicate
      ((Bool) (Less(((Word32) ('n___unsigned_long#v')), ((Word32) (939526312))))) (@ addr 70)
    at large iterations (4294967293) and by back induction.
    .. proven.
Step 10: 
  prove visits to 23 related to visits to 75
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 75)
    and with invariants
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r1')) (@ addr 23)
      ((Word32) ('r0')) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 4)))) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 4)))) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Word32) ('sendBuf___ptr_to_unsigned_long#v')) (@ addr 75)
      ((Word32) ('n___unsigned_long#v')) (@ addr 75)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 75)
      ((Word32) ('recvBuf___ptr_to_unsigned_long#v')) (@ addr 75)
      ((Word32[50]) ('GhostAssertions')) (@ addr 75)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 75)
    .. proven.
Step 11: case in (10) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 3}
    .. proven.
Step 12: 
  Prove the number of visits to 75 is in {0 ..< 3}
    .. proven.
Step 13: 
  prove all verification conditions
    .. proven.
Step 14: case in (10) where the length of the sequence is j + 2
  Prove the number of visits to 23 is in {j + 0 ..< j + 3}
    .. proven.
Step 15: 
  Prove the number of visits to 75 is in {j + 0 ..< j + 3}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C)), time taken: 76.83s
Testing Function pair Pairing (armv_init_user_access (ASM) <= Kernel_C.armv_init_user_access (C))
  (function pairing 159 of 284)
 .. built problem, finding proof
Discovered that points [35 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (35, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 35 is in {0 ..< 2}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (armv_init_user_access (ASM) <= Kernel_C.armv_init_user_access (C)), time taken: 1.42s
Testing Function pair Pairing (cteDeleteOne (ASM) <= Kernel_C.cteDeleteOne (C))
  (function pairing 160 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cteDeleteOne (ASM) <= Kernel_C.cteDeleteOne (C)), time taken: 0.85s
Testing Function pair Pairing (arm_errata (ASM) <= Kernel_C.arm_errata (C))
  (function pairing 161 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (arm_errata (ASM) <= Kernel_C.arm_errata (C)), time taken: 0.15s
Testing Function pair Pairing (Arch_decodeInvocation (ASM) <= Kernel_C.Arch_decodeInvocation (C))
  (function pairing 162 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_decodeInvocation (ASM) <= Kernel_C.Arch_decodeInvocation (C)), time taken: 0.90s
Testing Function pair Pairing (l_impl'dsb (ASM) <= r_impl'dsb (C))
  (function pairing 163 of 284)
Skipping Pairing (l_impl'dsb (ASM) <= r_impl'dsb (C)), underspecified C
Testing Function pair Pairing (create_initial_thread (ASM) <= Kernel_C.create_initial_thread (C))
  (function pairing 164 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_initial_thread (ASM) <= Kernel_C.create_initial_thread (C)), time taken: 1982.44s
Testing Function pair Pairing (get_p_reg_kernel_img (ASM) <= Kernel_C.get_p_reg_kernel_img (C))
  (function pairing 165 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (get_p_reg_kernel_img (ASM) <= Kernel_C.get_p_reg_kernel_img (C)), time taken: 0.17s
Testing Function pair Pairing (hasCancelSendRights (ASM) <= Kernel_C.hasCancelSendRights (C))
  (function pairing 166 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (hasCancelSendRights (ASM) <= Kernel_C.hasCancelSendRights (C)), time taken: 0.22s
Testing Function pair Pairing (invokeIRQControl (ASM) <= Kernel_C.invokeIRQControl (C))
  (function pairing 167 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeIRQControl (ASM) <= Kernel_C.invokeIRQControl (C)), time taken: 0.33s
Testing Function pair Pairing (plat_cleanCache (ASM) <= Kernel_C.plat_cleanCache (C))
  (function pairing 168 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [2, 35]
  (in problem)
Now doing proof search in 2 init case in problem.
Discovered that points [50 (loop head)] can be bounded
  (in 2 init case in problem)
Discovered that points [29 (loop head)] can be bounded
  (in 2 init case in problem)
Now doing proof search in 2 loop case in problem.
Discovered that points [50 (loop head)] can be bounded
  (in 2 loop case in problem)
Discovered that points [29 (loop head)] can be bounded
  (in 2 loop case in problem)
ProofNode ('Split', ((2, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (35, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (2, ('Number', (0, 1))), (ProofNode ('Restr', (35, ('Number', (0, 1))), (ProofNode ('Restr', (50, ('Number', (0, 1))), (ProofNode ('Restr', (29, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (2, ('Offset', (0, 1))), (ProofNode ('Restr', (35, ('Offset', (0, 1))), (ProofNode ('Restr', (50, ('Number', (0, 1))), (ProofNode ('Restr', (29, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),))))
 .. proof found.
Step 1: 
  prove visits to 2 related to visits to 35
    with equalities
    and with invariants
      ((Word32) ('r21')) (@ addr 2)
      ((Word32) ('r4')) (@ addr 2)
      ((Word32) ('r27')) (@ addr 2)
      ((Word32) ('r17')) (@ addr 2)
      ((Word32) ('r0')) (@ addr 2)
      ((Word32) ('r23')) (@ addr 2)
      ((Word32) ('r13')) (@ addr 2)
      ((Word32) ('r10')) (@ addr 2)
      ((Word32) ('r28')) (@ addr 2)
      ((Word32) ('r19')) (@ addr 2)
      ((Word32) ('r16')) (@ addr 2)
      ((Word64) ('clock')) (@ addr 2)
      ((Word32) ('r12')) (@ addr 2)
      ((Word32) ('r9')) (@ addr 2)
      ((Word32) ('r6')) (@ addr 2)
      ((Word32) ('r7')) (@ addr 2)
      ((Word32) ('r31')) (@ addr 2)
      ((Word32) ('r25')) (@ addr 2)
      ((Word32) ('r24')) (@ addr 2)
      ((Word32) ('r8')) (@ addr 2)
      ((Word32) ('r29')) (@ addr 2)
      ((Word32) ('r18')) (@ addr 2)
      ((Word32) ('r20')) (@ addr 2)
      ((Word32) ('r30')) (@ addr 2)
      ((Word32) ('r14')) (@ addr 2)
      ((Word32) ('r15')) (@ addr 2)
      ((Word32) ('mode')) (@ addr 2)
      ((Word32) ('r11')) (@ addr 2)
      ((Word32) ('r5')) (@ addr 2)
      ((Word32) ('ret')) (@ addr 2)
      ((Word32) ('r26')) (@ addr 2)
      ((Word32) ('r1')) (@ addr 2)
      ((Word32) ('r2')) (@ addr 2)
      ((Mem) ('mem')) (@ addr 2)
      ((Word32) ('r22')) (@ addr 2)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 2)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 35)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 2 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 35 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 50 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 29 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Step 7: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 2 is in {i + 0 ..< i + 1}
    .. proven.
Step 8: 
  Prove the number of visits to 35 is in {i + 0 ..< i + 1}
    .. proven.
Step 9: 
  Prove the number of visits to 50 is in {0 ..< 1}
    .. proven.
Step 10: 
  Prove the number of visits to 29 is in {0 ..< 1}
    .. proven.
Step 11: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (plat_cleanCache (ASM) <= Kernel_C.plat_cleanCache (C)), time taken: 5.99s
Testing Function pair Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C))
  (function pairing 169 of 284)
Aborting Problem (Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C))), complex loop
Result ProblemAbort for pair Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C)), time taken: 0.89s
Testing Function pair Pairing (dist_init (ASM) <= Kernel_C.dist_init (C))
  (function pairing 170 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [5, 190]
  (in problem)
Now doing proof search in 5 init case in problem.
Discovered a loop relation for split points [11, 181]
  (in 5 init case in problem)
Now doing proof search in 11 init case in 5 init case in problem.
Discovered a loop relation for split points [79, 209]
  (in 11 init case in 5 init case in problem)
Now doing proof search in 79 init case in 11 init case in 5 init case in problem.
Discovered a loop relation for split points [23, 167]
  (in 79 init case in 11 init case in 5 init case in problem)
Now doing proof search in 23 init case in 79 init case in 11 init case in 5 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 init case in 5 init case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 init case in 5 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 init case in 5 init case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 init case in 5 init case in problem)
Now doing proof search in 23 loop case in 79 init case in 11 init case in 5 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 loop case in 79 init case in 11 init case in 5 init case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 23 loop case in 79 init case in 11 init case in 5 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 loop case in 79 init case in 11 init case in 5 init case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 23 loop case in 79 init case in 11 init case in 5 init case in problem)
Now doing proof search in 79 loop case in 11 init case in 5 init case in problem.
Discovered a loop relation for split points [23, 167]
  (in 79 loop case in 11 init case in 5 init case in problem)
Now doing proof search in 23 init case in 79 loop case in 11 init case in 5 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 init case in 5 init case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 init case in 5 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 init case in 5 init case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 init case in 5 init case in problem)
Now doing proof search in 23 loop case in 79 loop case in 11 init case in 5 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 loop case in 79 loop case in 11 init case in 5 init case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 23 loop case in 79 loop case in 11 init case in 5 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 loop case in 79 loop case in 11 init case in 5 init case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 23 loop case in 79 loop case in 11 init case in 5 init case in problem)
Now doing proof search in 11 loop case in 5 init case in problem.
Discovered a loop relation for split points [79, 209]
  (in 11 loop case in 5 init case in problem)
Now doing proof search in 79 init case in 11 loop case in 5 init case in problem.
Discovered a loop relation for split points [23, 167]
  (in 79 init case in 11 loop case in 5 init case in problem)
Now doing proof search in 23 init case in 79 init case in 11 loop case in 5 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 loop case in 5 init case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 loop case in 5 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 loop case in 5 init case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 loop case in 5 init case in problem)
Now doing proof search in 23 loop case in 79 init case in 11 loop case in 5 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 loop case in 79 init case in 11 loop case in 5 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 loop case in 79 init case in 11 loop case in 5 init case in problem)
Discovered a loop relation for split points [31, 152]
  (in 23 loop case in 79 init case in 11 loop case in 5 init case in problem)
Now doing proof search in 31 init case in 23 loop case in 79 init case in 11 loop case in 5 init case in problem.
Now doing proof search in 31 loop case in 23 loop case in 79 init case in 11 loop case in 5 init case in problem.
Now doing proof search in 79 loop case in 11 loop case in 5 init case in problem.
Discovered a loop relation for split points [23, 167]
  (in 79 loop case in 11 loop case in 5 init case in problem)
Now doing proof search in 23 init case in 79 loop case in 11 loop case in 5 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 loop case in 5 init case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 loop case in 5 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 loop case in 5 init case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 loop case in 5 init case in problem)
Now doing proof search in 23 loop case in 79 loop case in 11 loop case in 5 init case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 loop case in 79 loop case in 11 loop case in 5 init case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 loop case in 79 loop case in 11 loop case in 5 init case in problem)
Discovered a loop relation for split points [31, 152]
  (in 23 loop case in 79 loop case in 11 loop case in 5 init case in problem)
Now doing proof search in 31 init case in 23 loop case in 79 loop case in 11 loop case in 5 init case in problem.
Now doing proof search in 31 loop case in 23 loop case in 79 loop case in 11 loop case in 5 init case in problem.
Now doing proof search in 5 loop case in problem.
Discovered a loop relation for split points [11, 181]
  (in 5 loop case in problem)
Now doing proof search in 11 init case in 5 loop case in problem.
Discovered that points [210 (loop head)] can be bounded
  (in 11 init case in 5 loop case in problem)
Discovered that points [163 (loop head)] can be bounded
  (in 11 init case in 5 loop case in problem)
Discovered that points [155 (loop head)] can be bounded
  (in 11 init case in 5 loop case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 11 init case in 5 loop case in problem)
Discovered that points [79 (loop head)] can be bounded
  (in 11 init case in 5 loop case in problem)
Discovered that points [99 (loop head)] can be bounded
  (in 11 init case in 5 loop case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 11 init case in 5 loop case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 11 init case in 5 loop case in problem)
Now doing proof search in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [79, 209]
  (in 11 loop case in 5 loop case in problem)
Now doing proof search in 79 init case in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [23, 167]
  (in 79 init case in 11 loop case in 5 loop case in problem)
Now doing proof search in 23 init case in 79 init case in 11 loop case in 5 loop case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 loop case in 5 loop case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 loop case in 5 loop case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 loop case in 5 loop case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 23 init case in 79 init case in 11 loop case in 5 loop case in problem)
Now doing proof search in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [28, 159]
  (in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem)
Now doing proof search in 28 init case in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [31, 152]
  (in 28 init case in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem)
Now doing proof search in 31 init case in 28 init case in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem.
Now doing proof search in 31 loop case in 28 init case in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem.
Now doing proof search in 28 loop case in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [31, 152]
  (in 28 loop case in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem)
Now doing proof search in 31 init case in 28 loop case in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem.
Now doing proof search in 31 loop case in 28 loop case in 23 loop case in 79 init case in 11 loop case in 5 loop case in problem.
Now doing proof search in 79 loop case in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [23, 167]
  (in 79 loop case in 11 loop case in 5 loop case in problem)
Now doing proof search in 23 init case in 79 loop case in 11 loop case in 5 loop case in problem.
Discovered that points [155 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 loop case in 5 loop case in problem)
Discovered that points [144 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 loop case in 5 loop case in problem)
Discovered that points [111 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 loop case in 5 loop case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 23 init case in 79 loop case in 11 loop case in 5 loop case in problem)
Now doing proof search in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [28, 159]
  (in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem)
Now doing proof search in 28 init case in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [31, 152]
  (in 28 init case in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem)
Now doing proof search in 31 init case in 28 init case in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem.
Now doing proof search in 31 loop case in 28 init case in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem.
Now doing proof search in 28 loop case in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem.
Discovered a loop relation for split points [31, 152]
  (in 28 loop case in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem)
Now doing proof search in 31 init case in 28 loop case in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem.
Now doing proof search in 31 loop case in 28 loop case in 23 loop case in 79 loop case in 11 loop case in 5 loop case in problem.
ProofNode ('Split', ((5, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (190, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#44#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (5, ('Number', (0, 3))), (ProofNode ('Restr', (190, ('Number', (0, 3))), (ProofNode ('Split', ((11, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (181, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#33#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (11, ('Number', (0, 1))), (ProofNode ('Restr', (181, ('Number', (0, 1))), (ProofNode ('Split', ((79, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (209, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v.1'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])])]), [], 2, 1), (ProofNode ('Restr', (79, ('Number', (0, 3))), (ProofNode ('Restr', (209, ('Number', (0, 3))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (167, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 1))), (ProofNode ('Restr', (167, ('Number', (0, 1))), (ProofNode ('Restr', (155, ('Number', (0, 1))), (ProofNode ('Restr', (144, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (167, ('Offset', (0, 3))), (ProofNode ('Restr', (155, ('Number', (0, 2))), (ProofNode ('Restr', (144, ('Number', (0, 3))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)))),)),)), ProofNode ('Restr', (79, ('Offset', (0, 3))), (ProofNode ('Restr', (209, ('Offset', (0, 3))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (167, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 1))), (ProofNode ('Restr', (167, ('Number', (0, 1))), (ProofNode ('Restr', (155, ('Number', (0, 1))), (ProofNode ('Restr', (144, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (167, ('Offset', (0, 3))), (ProofNode ('Restr', (155, ('Number', (0, 2))), (ProofNode ('Restr', (144, ('Number', (0, 3))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)))),)),)))),)),)), ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Restr', (181, ('Offset', (0, 3))), (ProofNode ('Split', ((79, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (209, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v.1'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])])]), [], 2, 1), (ProofNode ('Restr', (79, ('Number', (0, 3))), (ProofNode ('Restr', (209, ('Number', (0, 3))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (167, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 1))), (ProofNode ('Restr', (167, ('Number', (0, 1))), (ProofNode ('Restr', (155, ('Number', (0, 1))), (ProofNode ('Restr', (144, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (167, ('Offset', (0, 3))), (ProofNode ('Restr', (155, ('Number', (0, 2))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Split', ((31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (152, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (31, ('Number', (0, 3))), (ProofNode ('Restr', (152, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Restr', (152, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)))),)),)), ProofNode ('Restr', (79, ('Offset', (0, 3))), (ProofNode ('Restr', (209, ('Offset', (0, 3))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (167, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 1))), (ProofNode ('Restr', (167, ('Number', (0, 1))), (ProofNode ('Restr', (155, ('Number', (0, 1))), (ProofNode ('Restr', (144, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (167, ('Offset', (0, 3))), (ProofNode ('Restr', (155, ('Number', (0, 2))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Split', ((31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (152, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (31, ('Number', (0, 3))), (ProofNode ('Restr', (152, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Restr', (152, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)))),)),)))),)),)))),)),)), ProofNode ('Restr', (5, ('Offset', (0, 3))), (ProofNode ('Restr', (190, ('Offset', (0, 3))), (ProofNode ('Split', ((11, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (181, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#33#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (11, ('Number', (0, 1))), (ProofNode ('Restr', (181, ('Number', (0, 1))), (ProofNode ('Restr', (210, ('Number', (0, 1))), (ProofNode ('Restr', (163, ('Number', (0, 1))), (ProofNode ('Restr', (155, ('Number', (0, 1))), (ProofNode ('Restr', (144, ('Number', (0, 1))), (ProofNode ('Restr', (79, ('Number', (0, 1))), (ProofNode ('Restr', (99, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)),)),)), ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Restr', (181, ('Offset', (0, 3))), (ProofNode ('Split', ((79, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (209, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v.1'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#7#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])])]), [], 2, 1), (ProofNode ('Restr', (79, ('Number', (0, 3))), (ProofNode ('Restr', (209, ('Number', (0, 3))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (167, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 1))), (ProofNode ('Restr', (167, ('Number', (0, 1))), (ProofNode ('Restr', (155, ('Number', (0, 1))), (ProofNode ('Restr', (144, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (167, ('Offset', (0, 3))), (ProofNode ('Split', ((28, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (159, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#15#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (28, ('Number', (0, 3))), (ProofNode ('Restr', (159, ('Number', (0, 3))), (ProofNode ('Split', ((31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (152, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (31, ('Number', (0, 3))), (ProofNode ('Restr', (152, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Restr', (152, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (159, ('Offset', (0, 3))), (ProofNode ('Split', ((31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (152, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (31, ('Number', (0, 1))), (ProofNode ('Restr', (152, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Restr', (152, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)), ProofNode ('Restr', (79, ('Offset', (0, 3))), (ProofNode ('Restr', (209, ('Offset', (0, 3))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (167, (0, 1), [Expr ('Var', Type ('Word', 8), name = 'target___unsigned_char#v'), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 1))), (ProofNode ('Restr', (167, ('Number', (0, 1))), (ProofNode ('Restr', (155, ('Number', (0, 1))), (ProofNode ('Restr', (144, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (167, ('Offset', (0, 3))), (ProofNode ('Split', ((28, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (159, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#15#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (28, ('Number', (0, 3))), (ProofNode ('Restr', (159, ('Number', (0, 3))), (ProofNode ('Split', ((31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (152, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (31, ('Number', (0, 3))), (ProofNode ('Restr', (152, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Restr', (152, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (28, ('Offset', (0, 3))), (ProofNode ('Restr', (159, ('Offset', (0, 3))), (ProofNode ('Split', ((31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (152, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nirqs___int#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 32)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (31, ('Number', (0, 1))), (ProofNode ('Restr', (152, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Restr', (152, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 5 related to visits to 190
    with equalities
      ((Mem) ('mem')) (@ addr 5)
      = ((Mem) ('Mem')) (@ addr 190)
    and with invariants
      ((Word32) ('r7')) (@ addr 5)
      ((Word32) ('r4')) (@ addr 5)
      ((Word32) ('r8')) (@ addr 5)
      ((Word32) ('r14')) (@ addr 5)
      ((Word32) ('r5')) (@ addr 5)
      ((Word32) ('r0')) (@ addr 5)
      ((Word32) ('r9')) (@ addr 5)
      ((Word32) ('ret')) (@ addr 5)
      ((Word32) ('r2')) (@ addr 5)
      ((Word32) ('r11')) (@ addr 5)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 5)
      ((Word32) ('r13')) (@ addr 5)
      ((Word32) ('r10')) (@ addr 5)
      ((Bool) (ROData('mem'))) (@ addr 5)
      ((Word32) ('r6')) (@ addr 5)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 5)
      ((Word32) ('nirqs___int#v')) (@ addr 190)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 190)
      ((Word32) (('loop#44#count' + ((0 - '#seq-visits') * 1)))) (@ addr 190)
      ((Word32[50]) ('GhostAssertions')) (@ addr 190)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 5 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 190 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove visits to 11 related to visits to 181
    with equalities
      ((Mem) ('mem')) (@ addr 11)
      = ((Mem) ('Mem')) (@ addr 181)
    and with invariants
      ((Word32) ('r7')) (@ addr 11)
      ((Word32) ('r4')) (@ addr 11)
      ((Word32) ('r8')) (@ addr 11)
      ((Word32) ('r14')) (@ addr 11)
      ((Word32) ('r5')) (@ addr 11)
      ((Word32) ('r0')) (@ addr 11)
      ((Word32) ('r9')) (@ addr 11)
      ((Word32) ('ret')) (@ addr 11)
      ((Word32) ('r2')) (@ addr 11)
      ((Word32) ('r11')) (@ addr 11)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 11)
      ((Word32) ('r12')) (@ addr 11)
      ((Word32) ('r13')) (@ addr 11)
      ((Word32) ('r10')) (@ addr 11)
      ((Bool) (ROData('mem'))) (@ addr 11)
      ((Word32) ('r6')) (@ addr 11)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 11)
      ((Word32) ('nirqs___int#v')) (@ addr 181)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 181)
      ((Word32) (('loop#33#count' + ((0 - '#seq-visits') * 1)))) (@ addr 181)
      ((Word32[50]) ('GhostAssertions')) (@ addr 181)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 11 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 181 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove visits to 79 related to visits to 209
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 79)
      ((Word32) ('r4')) (@ addr 79)
      ((Word32) ('r8')) (@ addr 79)
      ((Word32) ('r14')) (@ addr 79)
      ((Word32) ('r5')) (@ addr 79)
      ((Word32) ('r0')) (@ addr 79)
      ((Word32) ('r9')) (@ addr 79)
      ((Word32) ('ret')) (@ addr 79)
      ((Word32) ('r2')) (@ addr 79)
      ((Word32) ('r11')) (@ addr 79)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 79)
      ((Word32) ('r13')) (@ addr 79)
      ((Word32) ('r10')) (@ addr 79)
      ((Mem) ('mem')) (@ addr 79)
      ((Word32) ('r6')) (@ addr 79)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 79)
      ((Word32) ('nirqs___int#v.1')) (@ addr 209)
      ((Word32) ('nirqs___int#v')) (@ addr 209)
      ((Mem) ('Mem.1')) (@ addr 209)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 209)
      ((Mem) ('Mem')) (@ addr 209)
      ((Word32[50]) ('GhostAssertions')) (@ addr 209)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 209)
    .. proven.
Step 8: case in (7) where the length of the sequence < 2
  Prove the number of visits to 79 is in {0 ..< 3}
    .. proven.
Step 9: 
  Prove the number of visits to 209 is in {0 ..< 3}
    .. proven.
Step 10: 
  prove visits to 23 related to visits to 167
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 167)
    and with invariants
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r3')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r12')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Word8) ('target___unsigned_char#v')) (@ addr 167)
      ((Word32) ('nirqs___int#v')) (@ addr 167)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 167)
      ((Word32[50]) ('GhostAssertions')) (@ addr 167)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 167)
    .. proven.
Step 11: case in (10) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 167 is in {0 ..< 1}
    .. proven.
Step 13: 
  Prove the number of visits to 155 is in {0 ..< 1}
    .. proven.
Step 14: 
  Prove the number of visits to 144 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 16: 
  Prove the number of visits to 124 is in {0 ..< 1}
    .. proven.
Step 17: 
  prove all verification conditions
    .. proven.
Step 18: case in (10) where the length of the sequence is a + 2
  Prove the number of visits to 23 is in {a + 0 ..< a + 3}
    .. proven.
Step 19: 
  Prove the number of visits to 167 is in {a + 0 ..< a + 3}
    .. proven.
Step 20: 
  Prove the number of visits to 155 is in {0 ..< 2}
    .. proven.
Step 21: 
  Prove the number of visits to 144 is in {0 ..< 3}
    .. proven.
Step 22: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 23: 
  Prove the number of visits to 124 is in {0 ..< 2}
    .. proven.
Step 24: 
  prove all verification conditions
    .. proven.
Step 25: case in (7) where the length of the sequence is k + 2
  Prove the number of visits to 79 is in {k + 0 ..< k + 3}
    .. proven.
Step 26: 
  Prove the number of visits to 209 is in {k + 0 ..< k + 3}
    .. proven.
Step 27: 
  prove visits to 23 related to visits to 167
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 167)
    and with invariants
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r3')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r12')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Word8) ('target___unsigned_char#v')) (@ addr 167)
      ((Word32) ('nirqs___int#v')) (@ addr 167)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 167)
      ((Word32[50]) ('GhostAssertions')) (@ addr 167)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 167)
    .. proven.
Step 28: case in (27) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 1}
    .. proven.
Step 29: 
  Prove the number of visits to 167 is in {0 ..< 1}
    .. proven.
Step 30: 
  Prove the number of visits to 155 is in {0 ..< 1}
    .. proven.
Step 31: 
  Prove the number of visits to 144 is in {0 ..< 1}
    .. proven.
Step 32: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 33: 
  Prove the number of visits to 124 is in {0 ..< 1}
    .. proven.
Step 34: 
  prove all verification conditions
    .. proven.
Step 35: case in (27) where the length of the sequence is b + 2
  Prove the number of visits to 23 is in {b + 0 ..< b + 3}
    .. proven.
Step 36: 
  Prove the number of visits to 167 is in {b + 0 ..< b + 3}
    .. proven.
Step 37: 
  Prove the number of visits to 155 is in {0 ..< 2}
    .. proven.
Step 38: 
  Prove the number of visits to 144 is in {0 ..< 3}
    .. proven.
Step 39: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 40: 
  Prove the number of visits to 124 is in {0 ..< 2}
    .. proven.
Step 41: 
  prove all verification conditions
    .. proven.
Step 42: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 11 is in {j + 0 ..< j + 3}
    .. proven.
Step 43: 
  Prove the number of visits to 181 is in {j + 0 ..< j + 3}
    .. proven.
Step 44: 
  prove visits to 79 related to visits to 209
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 79)
      ((Word32) ('r4')) (@ addr 79)
      ((Word32) ('r8')) (@ addr 79)
      ((Word32) ('r14')) (@ addr 79)
      ((Word32) ('r5')) (@ addr 79)
      ((Word32) ('r0')) (@ addr 79)
      ((Word32) ('r9')) (@ addr 79)
      ((Word32) ('ret')) (@ addr 79)
      ((Word32) ('r2')) (@ addr 79)
      ((Word32) ('r11')) (@ addr 79)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 79)
      ((Word32) ('r13')) (@ addr 79)
      ((Word32) ('r10')) (@ addr 79)
      ((Mem) ('mem')) (@ addr 79)
      ((Word32) ('r6')) (@ addr 79)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 79)
      ((Word32) ('nirqs___int#v.1')) (@ addr 209)
      ((Word32) ('nirqs___int#v')) (@ addr 209)
      ((Mem) ('Mem.1')) (@ addr 209)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 209)
      ((Mem) ('Mem')) (@ addr 209)
      ((Word32[50]) ('GhostAssertions')) (@ addr 209)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 209)
    .. proven.
Step 45: case in (44) where the length of the sequence < 2
  Prove the number of visits to 79 is in {0 ..< 3}
    .. proven.
Step 46: 
  Prove the number of visits to 209 is in {0 ..< 3}
    .. proven.
Step 47: 
  prove visits to 23 related to visits to 167
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 167)
    and with invariants
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r3')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r12')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Word8) ('target___unsigned_char#v')) (@ addr 167)
      ((Word32) ('nirqs___int#v')) (@ addr 167)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 167)
      ((Word32[50]) ('GhostAssertions')) (@ addr 167)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 167)
    .. proven.
Step 48: case in (47) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 1}
    .. proven.
Step 49: 
  Prove the number of visits to 167 is in {0 ..< 1}
    .. proven.
Step 50: 
  Prove the number of visits to 155 is in {0 ..< 1}
    .. proven.
Step 51: 
  Prove the number of visits to 144 is in {0 ..< 1}
    .. proven.
Step 52: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 53: 
  Prove the number of visits to 124 is in {0 ..< 1}
    .. proven.
Step 54: 
  prove all verification conditions
    .. proven.
Step 55: case in (47) where the length of the sequence is i2 + 2
  Prove the number of visits to 23 is in {i2 + 0 ..< i2 + 3}
    .. proven.
Step 56: 
  Prove the number of visits to 167 is in {i2 + 0 ..< i2 + 3}
    .. proven.
Step 57: 
  Prove the number of visits to 155 is in {0 ..< 2}
    .. proven.
Step 58: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 59: 
  prove visits to 31 related to visits to 152
    with equalities
      ((Mem) ('mem')) (@ addr 31)
      = ((Mem) ('Mem')) (@ addr 152)
    and with invariants
      ((Word32) ('r7')) (@ addr 31)
      ((Word32) ('r4')) (@ addr 31)
      ((Word32) ('r8')) (@ addr 31)
      ((Word32) ('r14')) (@ addr 31)
      ((Word32) ('r5')) (@ addr 31)
      ((Word32) ('r0')) (@ addr 31)
      ((Word32) ('r9')) (@ addr 31)
      ((Word32) ('ret')) (@ addr 31)
      ((Word32) ('r2')) (@ addr 31)
      ((Word32) ('r11')) (@ addr 31)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 31)
      ((Word32) ('r12')) (@ addr 31)
      ((Word32) ('r13')) (@ addr 31)
      ((Word32) ('r10')) (@ addr 31)
      ((Bool) (ROData('mem'))) (@ addr 31)
      ((Word32) ('r6')) (@ addr 31)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 31)
      ((Word32) ('nirqs___int#v')) (@ addr 152)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 152)
      ((Word32[50]) ('GhostAssertions')) (@ addr 152)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 152)
    .. proven.
Step 60: case in (59) where the length of the sequence < 2
  Prove the number of visits to 31 is in {0 ..< 3}
    .. proven.
Step 61: 
  Prove the number of visits to 152 is in {0 ..< 3}
    .. proven.
Step 62: 
  prove all verification conditions
    .. proven.
Step 63: case in (59) where the length of the sequence is j2 + 2
  Prove the number of visits to 31 is in {j2 + 0 ..< j2 + 3}
    .. proven.
Step 64: 
  Prove the number of visits to 152 is in {j2 + 0 ..< j2 + 3}
    .. proven.
Step 65: 
  prove all verification conditions
    .. proven.
Step 66: case in (44) where the length of the sequence is c + 2
  Prove the number of visits to 79 is in {c + 0 ..< c + 3}
    .. proven.
Step 67: 
  Prove the number of visits to 209 is in {c + 0 ..< c + 3}
    .. proven.
Step 68: 
  prove visits to 23 related to visits to 167
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 167)
    and with invariants
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r3')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r12')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Word8) ('target___unsigned_char#v')) (@ addr 167)
      ((Word32) ('nirqs___int#v')) (@ addr 167)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 167)
      ((Word32[50]) ('GhostAssertions')) (@ addr 167)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 167)
    .. proven.
Step 69: case in (68) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 1}
    .. proven.
Step 70: 
  Prove the number of visits to 167 is in {0 ..< 1}
    .. proven.
Step 71: 
  Prove the number of visits to 155 is in {0 ..< 1}
    .. proven.
Step 72: 
  Prove the number of visits to 144 is in {0 ..< 1}
    .. proven.
Step 73: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 74: 
  Prove the number of visits to 124 is in {0 ..< 1}
    .. proven.
Step 75: 
  prove all verification conditions
    .. proven.
Step 76: case in (68) where the length of the sequence is k2 + 2
  Prove the number of visits to 23 is in {k2 + 0 ..< k2 + 3}
    .. proven.
Step 77: 
  Prove the number of visits to 167 is in {k2 + 0 ..< k2 + 3}
    .. proven.
Step 78: 
  Prove the number of visits to 155 is in {0 ..< 2}
    .. proven.
Step 79: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 80: 
  prove visits to 31 related to visits to 152
    with equalities
      ((Mem) ('mem')) (@ addr 31)
      = ((Mem) ('Mem')) (@ addr 152)
    and with invariants
      ((Word32) ('r7')) (@ addr 31)
      ((Word32) ('r4')) (@ addr 31)
      ((Word32) ('r8')) (@ addr 31)
      ((Word32) ('r14')) (@ addr 31)
      ((Word32) ('r5')) (@ addr 31)
      ((Word32) ('r0')) (@ addr 31)
      ((Word32) ('r9')) (@ addr 31)
      ((Word32) ('ret')) (@ addr 31)
      ((Word32) ('r2')) (@ addr 31)
      ((Word32) ('r11')) (@ addr 31)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 31)
      ((Word32) ('r12')) (@ addr 31)
      ((Word32) ('r13')) (@ addr 31)
      ((Word32) ('r10')) (@ addr 31)
      ((Bool) (ROData('mem'))) (@ addr 31)
      ((Word32) ('r6')) (@ addr 31)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 31)
      ((Word32) ('nirqs___int#v')) (@ addr 152)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 152)
      ((Word32[50]) ('GhostAssertions')) (@ addr 152)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 152)
    .. proven.
Step 81: case in (80) where the length of the sequence < 2
  Prove the number of visits to 31 is in {0 ..< 3}
    .. proven.
Step 82: 
  Prove the number of visits to 152 is in {0 ..< 3}
    .. proven.
Step 83: 
  prove all verification conditions
    .. proven.
Step 84: case in (80) where the length of the sequence is a2 + 2
  Prove the number of visits to 31 is in {a2 + 0 ..< a2 + 3}
    .. proven.
Step 85: 
  Prove the number of visits to 152 is in {a2 + 0 ..< a2 + 3}
    .. proven.
Step 86: 
  prove all verification conditions
    .. proven.
Step 87: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 5 is in {i + 0 ..< i + 3}
    .. proven.
Step 88: 
  Prove the number of visits to 190 is in {i + 0 ..< i + 3}
    .. proven.
Step 89: 
  prove visits to 11 related to visits to 181
    with equalities
      ((Mem) ('mem')) (@ addr 11)
      = ((Mem) ('Mem')) (@ addr 181)
    and with invariants
      ((Word32) ('r7')) (@ addr 11)
      ((Word32) ('r4')) (@ addr 11)
      ((Word32) ('r8')) (@ addr 11)
      ((Word32) ('r14')) (@ addr 11)
      ((Word32) ('r5')) (@ addr 11)
      ((Word32) ('r0')) (@ addr 11)
      ((Word32) ('r9')) (@ addr 11)
      ((Word32) ('ret')) (@ addr 11)
      ((Word32) ('r2')) (@ addr 11)
      ((Word32) ('r11')) (@ addr 11)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 11)
      ((Word32) ('r12')) (@ addr 11)
      ((Word32) ('r13')) (@ addr 11)
      ((Word32) ('r10')) (@ addr 11)
      ((Bool) (ROData('mem'))) (@ addr 11)
      ((Word32) ('r6')) (@ addr 11)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 11)
      ((Word32) ('nirqs___int#v')) (@ addr 181)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 181)
      ((Word32) (('loop#33#count' + ((0 - '#seq-visits') * 1)))) (@ addr 181)
      ((Word32[50]) ('GhostAssertions')) (@ addr 181)
    .. proven.
Step 90: case in (89) where the length of the sequence < 2
  Prove the number of visits to 11 is in {0 ..< 1}
    .. proven.
Step 91: 
  Prove the number of visits to 181 is in {0 ..< 1}
    .. proven.
Step 92: 
  Prove the number of visits to 210 is in {0 ..< 1}
    .. proven.
Step 93: 
  Prove the number of visits to 163 is in {0 ..< 1}
    .. proven.
Step 94: 
  Prove the number of visits to 155 is in {0 ..< 1}
    .. proven.
Step 95: 
  Prove the number of visits to 144 is in {0 ..< 1}
    .. proven.
Step 96: 
  Prove the number of visits to 79 is in {0 ..< 1}
    .. proven.
Step 97: 
  Prove the number of visits to 99 is in {0 ..< 1}
    .. proven.
Step 98: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 99: 
  Prove the number of visits to 124 is in {0 ..< 1}
    .. proven.
Step 100: 
  prove all verification conditions
    .. proven.
Step 101: case in (89) where the length of the sequence is b2 + 2
  Prove the number of visits to 11 is in {b2 + 0 ..< b2 + 3}
    .. proven.
Step 102: 
  Prove the number of visits to 181 is in {b2 + 0 ..< b2 + 3}
    .. proven.
Step 103: 
  prove visits to 79 related to visits to 209
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 79)
      ((Word32) ('r4')) (@ addr 79)
      ((Word32) ('r8')) (@ addr 79)
      ((Word32) ('r14')) (@ addr 79)
      ((Word32) ('r5')) (@ addr 79)
      ((Word32) ('r0')) (@ addr 79)
      ((Word32) ('r9')) (@ addr 79)
      ((Word32) ('ret')) (@ addr 79)
      ((Word32) ('r2')) (@ addr 79)
      ((Word32) ('r11')) (@ addr 79)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 79)
      ((Word32) ('r13')) (@ addr 79)
      ((Word32) ('r10')) (@ addr 79)
      ((Mem) ('mem')) (@ addr 79)
      ((Word32) ('r6')) (@ addr 79)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 79)
      ((Word32) ('nirqs___int#v.1')) (@ addr 209)
      ((Word32) ('nirqs___int#v')) (@ addr 209)
      ((Mem) ('Mem.1')) (@ addr 209)
      ((Word32) (('loop#7#count' + ((0 - '#seq-visits') * 1)))) (@ addr 209)
      ((Mem) ('Mem')) (@ addr 209)
      ((Word32[50]) ('GhostAssertions')) (@ addr 209)
      ((Word32) (('i___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 209)
    .. proven.
Step 104: case in (103) where the length of the sequence < 2
  Prove the number of visits to 79 is in {0 ..< 3}
    .. proven.
Step 105: 
  Prove the number of visits to 209 is in {0 ..< 3}
    .. proven.
Step 106: 
  prove visits to 23 related to visits to 167
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 167)
    and with invariants
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r3')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r12')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Word8) ('target___unsigned_char#v')) (@ addr 167)
      ((Word32) ('nirqs___int#v')) (@ addr 167)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 167)
      ((Word32[50]) ('GhostAssertions')) (@ addr 167)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 167)
    .. proven.
Step 107: case in (106) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 1}
    .. proven.
Step 108: 
  Prove the number of visits to 167 is in {0 ..< 1}
    .. proven.
Step 109: 
  Prove the number of visits to 155 is in {0 ..< 1}
    .. proven.
Step 110: 
  Prove the number of visits to 144 is in {0 ..< 1}
    .. proven.
Step 111: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 112: 
  Prove the number of visits to 124 is in {0 ..< 1}
    .. proven.
Step 113: 
  prove all verification conditions
    .. proven.
Step 114: case in (106) where the length of the sequence is i3 + 2
  Prove the number of visits to 23 is in {i3 + 0 ..< i3 + 3}
    .. proven.
Step 115: 
  Prove the number of visits to 167 is in {i3 + 0 ..< i3 + 3}
    .. proven.
Step 116: 
  prove visits to 28 related to visits to 159
    with equalities
      ((Mem) ('mem')) (@ addr 28)
      = ((Mem) ('Mem')) (@ addr 159)
    and with invariants
      ((Word32) ('r7')) (@ addr 28)
      ((Word32) ('r4')) (@ addr 28)
      ((Word32) ('r8')) (@ addr 28)
      ((Word32) ('r14')) (@ addr 28)
      ((Word32) ('r5')) (@ addr 28)
      ((Word32) ('r0')) (@ addr 28)
      ((Word32) ('r9')) (@ addr 28)
      ((Word32) ('ret')) (@ addr 28)
      ((Word32) ('r2')) (@ addr 28)
      ((Word32) ('r11')) (@ addr 28)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 28)
      ((Word32) ('r12')) (@ addr 28)
      ((Word32) ('r13')) (@ addr 28)
      ((Word32) ('r10')) (@ addr 28)
      ((Bool) (ROData('mem'))) (@ addr 28)
      ((Word32) ('r6')) (@ addr 28)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 28)
      ((Word32) (('loop#15#count' + ((0 - '#seq-visits') * 1)))) (@ addr 159)
      ((Word32) ('nirqs___int#v')) (@ addr 159)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 159)
      ((Word32[50]) ('GhostAssertions')) (@ addr 159)
    .. proven.
Step 117: case in (116) where the length of the sequence < 2
  Prove the number of visits to 28 is in {0 ..< 3}
    .. proven.
Step 118: 
  Prove the number of visits to 159 is in {0 ..< 3}
    .. proven.
Step 119: 
  prove visits to 31 related to visits to 152
    with equalities
      ((Mem) ('mem')) (@ addr 31)
      = ((Mem) ('Mem')) (@ addr 152)
    and with invariants
      ((Word32) ('r7')) (@ addr 31)
      ((Word32) ('r4')) (@ addr 31)
      ((Word32) ('r8')) (@ addr 31)
      ((Word32) ('r14')) (@ addr 31)
      ((Word32) ('r5')) (@ addr 31)
      ((Word32) ('r0')) (@ addr 31)
      ((Word32) ('r9')) (@ addr 31)
      ((Word32) ('ret')) (@ addr 31)
      ((Word32) ('r2')) (@ addr 31)
      ((Word32) ('r11')) (@ addr 31)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 31)
      ((Word32) ('r12')) (@ addr 31)
      ((Word32) ('r13')) (@ addr 31)
      ((Word32) ('r10')) (@ addr 31)
      ((Bool) (ROData('mem'))) (@ addr 31)
      ((Word32) ('r6')) (@ addr 31)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 31)
      ((Word32) ('nirqs___int#v')) (@ addr 152)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 152)
      ((Word32[50]) ('GhostAssertions')) (@ addr 152)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 152)
    .. proven.
Step 120: case in (119) where the length of the sequence < 2
  Prove the number of visits to 31 is in {0 ..< 3}
    .. proven.
Step 121: 
  Prove the number of visits to 152 is in {0 ..< 3}
    .. proven.
Step 122: 
  prove all verification conditions
    .. proven.
Step 123: case in (119) where the length of the sequence is k3 + 2
  Prove the number of visits to 31 is in {k3 + 0 ..< k3 + 3}
    .. proven.
Step 124: 
  Prove the number of visits to 152 is in {k3 + 0 ..< k3 + 3}
    .. proven.
Step 125: 
  prove all verification conditions
    .. proven.
Step 126: case in (116) where the length of the sequence is j3 + 2
  Prove the number of visits to 28 is in {j3 + 0 ..< j3 + 3}
    .. proven.
Step 127: 
  Prove the number of visits to 159 is in {j3 + 0 ..< j3 + 3}
    .. proven.
Step 128: 
  prove visits to 31 related to visits to 152
    with equalities
      ((Mem) ('mem')) (@ addr 31)
      = ((Mem) ('Mem')) (@ addr 152)
    and with invariants
      ((Word32) ('r7')) (@ addr 31)
      ((Word32) ('r4')) (@ addr 31)
      ((Word32) ('r8')) (@ addr 31)
      ((Word32) ('r14')) (@ addr 31)
      ((Word32) ('r5')) (@ addr 31)
      ((Word32) ('r0')) (@ addr 31)
      ((Word32) ('r9')) (@ addr 31)
      ((Word32) ('ret')) (@ addr 31)
      ((Word32) ('r2')) (@ addr 31)
      ((Word32) ('r11')) (@ addr 31)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 31)
      ((Word32) ('r12')) (@ addr 31)
      ((Word32) ('r13')) (@ addr 31)
      ((Word32) ('r10')) (@ addr 31)
      ((Bool) (ROData('mem'))) (@ addr 31)
      ((Word32) ('r6')) (@ addr 31)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 31)
      ((Word32) ('nirqs___int#v')) (@ addr 152)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 152)
      ((Word32[50]) ('GhostAssertions')) (@ addr 152)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 152)
    .. proven.
Step 129: case in (128) where the length of the sequence < 2
  Prove the number of visits to 31 is in {0 ..< 1}
    .. proven.
Step 130: 
  Prove the number of visits to 152 is in {0 ..< 1}
    .. proven.
Step 131: 
  prove all verification conditions
    .. proven.
Step 132: case in (128) where the length of the sequence is a3 + 2
  Prove the number of visits to 31 is in {a3 + 0 ..< a3 + 3}
    .. proven.
Step 133: 
  Prove the number of visits to 152 is in {a3 + 0 ..< a3 + 3}
    .. proven.
Step 134: 
  prove all verification conditions
    .. proven.
Step 135: case in (103) where the length of the sequence is c2 + 2
  Prove the number of visits to 79 is in {c2 + 0 ..< c2 + 3}
    .. proven.
Step 136: 
  Prove the number of visits to 209 is in {c2 + 0 ..< c2 + 3}
    .. proven.
Step 137: 
  prove visits to 23 related to visits to 167
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 167)
    and with invariants
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r3')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r12')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Word8) ('target___unsigned_char#v')) (@ addr 167)
      ((Word32) ('nirqs___int#v')) (@ addr 167)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(4))))) (@ addr 167)
      ((Word32[50]) ('GhostAssertions')) (@ addr 167)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 167)
    .. proven.
Step 138: case in (137) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 1}
    .. proven.
Step 139: 
  Prove the number of visits to 167 is in {0 ..< 1}
    .. proven.
Step 140: 
  Prove the number of visits to 155 is in {0 ..< 1}
    .. proven.
Step 141: 
  Prove the number of visits to 144 is in {0 ..< 1}
    .. proven.
Step 142: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 143: 
  Prove the number of visits to 124 is in {0 ..< 1}
    .. proven.
Step 144: 
  prove all verification conditions
    .. proven.
Step 145: case in (137) where the length of the sequence is b3 + 2
  Prove the number of visits to 23 is in {b3 + 0 ..< b3 + 3}
    .. proven.
Step 146: 
  Prove the number of visits to 167 is in {b3 + 0 ..< b3 + 3}
    .. proven.
Step 147: 
  prove visits to 28 related to visits to 159
    with equalities
      ((Mem) ('mem')) (@ addr 28)
      = ((Mem) ('Mem')) (@ addr 159)
    and with invariants
      ((Word32) ('r7')) (@ addr 28)
      ((Word32) ('r4')) (@ addr 28)
      ((Word32) ('r8')) (@ addr 28)
      ((Word32) ('r14')) (@ addr 28)
      ((Word32) ('r5')) (@ addr 28)
      ((Word32) ('r0')) (@ addr 28)
      ((Word32) ('r9')) (@ addr 28)
      ((Word32) ('ret')) (@ addr 28)
      ((Word32) ('r2')) (@ addr 28)
      ((Word32) ('r11')) (@ addr 28)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 28)
      ((Word32) ('r12')) (@ addr 28)
      ((Word32) ('r13')) (@ addr 28)
      ((Word32) ('r10')) (@ addr 28)
      ((Bool) (ROData('mem'))) (@ addr 28)
      ((Word32) ('r6')) (@ addr 28)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 28)
      ((Word32) (('loop#15#count' + ((0 - '#seq-visits') * 1)))) (@ addr 159)
      ((Word32) ('nirqs___int#v')) (@ addr 159)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 159)
      ((Word32[50]) ('GhostAssertions')) (@ addr 159)
    .. proven.
Step 148: case in (147) where the length of the sequence < 2
  Prove the number of visits to 28 is in {0 ..< 3}
    .. proven.
Step 149: 
  Prove the number of visits to 159 is in {0 ..< 3}
    .. proven.
Step 150: 
  prove visits to 31 related to visits to 152
    with equalities
      ((Mem) ('mem')) (@ addr 31)
      = ((Mem) ('Mem')) (@ addr 152)
    and with invariants
      ((Word32) ('r7')) (@ addr 31)
      ((Word32) ('r4')) (@ addr 31)
      ((Word32) ('r8')) (@ addr 31)
      ((Word32) ('r14')) (@ addr 31)
      ((Word32) ('r5')) (@ addr 31)
      ((Word32) ('r0')) (@ addr 31)
      ((Word32) ('r9')) (@ addr 31)
      ((Word32) ('ret')) (@ addr 31)
      ((Word32) ('r2')) (@ addr 31)
      ((Word32) ('r11')) (@ addr 31)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 31)
      ((Word32) ('r12')) (@ addr 31)
      ((Word32) ('r13')) (@ addr 31)
      ((Word32) ('r10')) (@ addr 31)
      ((Bool) (ROData('mem'))) (@ addr 31)
      ((Word32) ('r6')) (@ addr 31)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 31)
      ((Word32) ('nirqs___int#v')) (@ addr 152)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 152)
      ((Word32[50]) ('GhostAssertions')) (@ addr 152)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 152)
    .. proven.
Step 151: case in (150) where the length of the sequence < 2
  Prove the number of visits to 31 is in {0 ..< 3}
    .. proven.
Step 152: 
  Prove the number of visits to 152 is in {0 ..< 3}
    .. proven.
Step 153: 
  prove all verification conditions
    .. proven.
Step 154: case in (150) where the length of the sequence is i4 + 2
  Prove the number of visits to 31 is in {i4 + 0 ..< i4 + 3}
    .. proven.
Step 155: 
  Prove the number of visits to 152 is in {i4 + 0 ..< i4 + 3}
    .. proven.
Step 156: 
  prove all verification conditions
    .. proven.
Step 157: case in (147) where the length of the sequence is c3 + 2
  Prove the number of visits to 28 is in {c3 + 0 ..< c3 + 3}
    .. proven.
Step 158: 
  Prove the number of visits to 159 is in {c3 + 0 ..< c3 + 3}
    .. proven.
Step 159: 
  prove visits to 31 related to visits to 152
    with equalities
      ((Mem) ('mem')) (@ addr 31)
      = ((Mem) ('Mem')) (@ addr 152)
    and with invariants
      ((Word32) ('r7')) (@ addr 31)
      ((Word32) ('r4')) (@ addr 31)
      ((Word32) ('r8')) (@ addr 31)
      ((Word32) ('r14')) (@ addr 31)
      ((Word32) ('r5')) (@ addr 31)
      ((Word32) ('r0')) (@ addr 31)
      ((Word32) ('r9')) (@ addr 31)
      ((Word32) ('ret')) (@ addr 31)
      ((Word32) ('r2')) (@ addr 31)
      ((Word32) ('r11')) (@ addr 31)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 32)))) (@ addr 31)
      ((Word32) ('r12')) (@ addr 31)
      ((Word32) ('r13')) (@ addr 31)
      ((Word32) ('r10')) (@ addr 31)
      ((Bool) (ROData('mem'))) (@ addr 31)
      ((Word32) ('r6')) (@ addr 31)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 31)
      ((Word32) ('nirqs___int#v')) (@ addr 152)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(32))))) (@ addr 152)
      ((Word32[50]) ('GhostAssertions')) (@ addr 152)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 152)
    .. proven.
Step 160: case in (159) where the length of the sequence < 2
  Prove the number of visits to 31 is in {0 ..< 1}
    .. proven.
Step 161: 
  Prove the number of visits to 152 is in {0 ..< 1}
    .. proven.
Step 162: 
  prove all verification conditions
    .. proven.
Step 163: case in (159) where the length of the sequence is j4 + 2
  Prove the number of visits to 31 is in {j4 + 0 ..< j4 + 3}
    .. proven.
Step 164: 
  Prove the number of visits to 152 is in {j4 + 0 ..< j4 + 3}
    .. proven.
Step 165: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (dist_init (ASM) <= Kernel_C.dist_init (C)), time taken: 639.88s
Testing Function pair Pairing (handleInvocation (ASM) <= Kernel_C.handleInvocation (C))
  (function pairing 171 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleInvocation (ASM) <= Kernel_C.handleInvocation (C)), time taken: 17.61s
Testing Function pair Pairing (initTimer (ASM) <= Kernel_C.initTimer (C))
  (function pairing 172 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (initTimer (ASM) <= Kernel_C.initTimer (C)), time taken: 0.17s
Testing Function pair Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))
  (function pairing 173 of 284)
Aborting Problem (Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))): underspecified instruction'strex_r0_r1_r3_E00111D8
Result ProblemAbort for pair Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C)), time taken: 0.00s
Testing Function pair Pairing (cap_get_capIsPhysical (ASM) <= Kernel_C.cap_get_capIsPhysical (C))
  (function pairing 174 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cap_get_capIsPhysical (ASM) <= Kernel_C.cap_get_capIsPhysical (C)), time taken: 0.57s
Testing Function pair Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C))
  (function pairing 175 of 284)
Aborting Problem (Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C))): underspecified Kernel_C.StrictC'__builtin_unreachable
Result ProblemAbort for pair Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C)), time taken: 0.00s
Testing Function pair Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C))
  (function pairing 176 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C)), time taken: 1.66s
Testing Function pair Pairing (Arch_sameRegionAs (ASM) <= Kernel_C.Arch_sameRegionAs (C))
  (function pairing 177 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_sameRegionAs (ASM) <= Kernel_C.Arch_sameRegionAs (C)), time taken: 1.89s
Testing Function pair Pairing (tcbSchedAppend (ASM) <= Kernel_C.tcbSchedAppend (C))
  (function pairing 178 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (tcbSchedAppend (ASM) <= Kernel_C.tcbSchedAppend (C)), time taken: 0.50s
Testing Function pair Pairing (doNBRecvFailedTransfer (ASM) <= Kernel_C.doNBRecvFailedTransfer (C))
  (function pairing 179 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doNBRecvFailedTransfer (ASM) <= Kernel_C.doNBRecvFailedTransfer (C)), time taken: 0.15s
Testing Function pair Pairing (possibleSwitchTo (ASM) <= Kernel_C.possibleSwitchTo (C))
  (function pairing 180 of 284)
 .. built problem, finding proof
Decided to case split at (4, 'ASM')
  (in problem)
Now doing proof search in true case (4 visited) in problem.
Now doing proof search in false case (4 not visited) in problem.
ProofNode ('CaseSplit', (4, 'ASM'), (ProofNode ('Restr', (4, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (4, ('Number', (0, 1))), (ProofNode ('Restr', (41, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 4 is visited
Step 2: case in (1) where 4 is visited
  Prove the number of visits to 4 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 4 is not visited
  Prove the number of visits to 4 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 41 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (possibleSwitchTo (ASM) <= Kernel_C.possibleSwitchTo (C)), time taken: 4.17s
Testing Function pair Pairing (deriveCap (ASM) <= Kernel_C.deriveCap (C))
  (function pairing 181 of 284)
 .. built problem, finding proof
Decided to case split at (8, 'ASM')
  (in problem)
Now doing proof search in true case (8 visited) in problem.
Now doing proof search in false case (8 not visited) in problem.
ProofNode ('CaseSplit', (8, 'ASM'), (ProofNode ('Restr', (8, ('Number', (1, 2))), (ProofNode ('Restr', (110, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Restr', (110, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 8 is visited
Step 2: case in (1) where 8 is visited
  Prove the number of visits to 8 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 110 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 8 is not visited
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 110 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deriveCap (ASM) <= Kernel_C.deriveCap (C)), time taken: 4.10s
Testing Function pair Pairing (create_untypeds (ASM) <= Kernel_C.create_untypeds (C))
  (function pairing 182 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [7, 193]
  (in problem)
Now doing proof search in 7 init case in problem.
Discovered a loop relation for split points [120, 168]
  (in 7 init case in problem)
Now doing proof search in 120 init case in 7 init case in problem.
Now doing proof search in 120 loop case in 7 init case in problem.
Now doing proof search in 7 loop case in problem.
Discovered a loop relation for split points [120, 168]
  (in 7 loop case in problem)
Now doing proof search in 120 init case in 7 loop case in problem.
Now doing proof search in 120 loop case in 7 loop case in problem.
ProofNode ('Split', ((7, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 8)])]), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 4)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (193, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'first_untyped_slot___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#41#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (7, ('Number', (0, 3))), (ProofNode ('Restr', (193, ('Number', (0, 3))), (ProofNode ('Split', ((120, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 8)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 4)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (168, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'first_untyped_slot___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#8#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (120, ('Number', (0, 3))), (ProofNode ('Restr', (168, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (120, ('Offset', (0, 3))), (ProofNode ('Restr', (168, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (7, ('Offset', (0, 3))), (ProofNode ('Restr', (193, ('Offset', (0, 3))), (ProofNode ('Split', ((120, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 8)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 4)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (168, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'first_untyped_slot___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#8#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (120, ('Number', (0, 3))), (ProofNode ('Restr', (168, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (120, ('Offset', (0, 3))), (ProofNode ('Restr', (168, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 7 related to visits to 193
    with equalities
      ((Mem) ('mem')) (@ addr 7)
      = ((Mem) ('Mem')) (@ addr 193)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 7)
      ((Word32) ('r13')) (@ addr 7)
      ((Word32) ('r10')) (@ addr 7)
      ((Word32) ('r9')) (@ addr 7)
      ((Word32) ('r6')) (@ addr 7)
      ((Word32) ('r7')) (@ addr 7)
      ((Word32) ('r8')) (@ addr 7)
      ((Word32) ('r11')) (@ addr 7)
      ((Word32) (('r5' + ((0 - '#seq-visits') * 8)))) (@ addr 7)
      ((Word32) ('ret')) (@ addr 7)
      ((Bool) (ROData('mem'))) (@ addr 7)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 4))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 7)
      ((Word32) ('first_untyped_slot___unsigned_long#v')) (@ addr 193)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 193)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 193)
      ((Word32) (('loop#41#count' + ((0 - '#seq-visits') * 1)))) (@ addr 193)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 193)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 7 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 193 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove visits to 120 related to visits to 168
    with equalities
      ((Mem) ('mem')) (@ addr 120)
      = ((Mem) ('Mem')) (@ addr 168)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 8)))) (@ addr 120)
      ((Word32) ('r13')) (@ addr 120)
      ((Word32) ('r10')) (@ addr 120)
      ((Word32) ('r9')) (@ addr 120)
      ((Word32) ('r6')) (@ addr 120)
      ((Word32) ('r7')) (@ addr 120)
      ((Word32) ('r8')) (@ addr 120)
      ((Word32) ('r11')) (@ addr 120)
      ((Word32) ('r5')) (@ addr 120)
      ((Word32) ('ret')) (@ addr 120)
      ((Bool) (ROData('mem'))) (@ addr 120)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 4))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 120)
      ((Word32) ('first_untyped_slot___unsigned_long#v')) (@ addr 168)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 168)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 168)
      ((Word32) (('loop#8#count' + ((0 - '#seq-visits') * 1)))) (@ addr 168)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 168)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 120 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 168 is in {0 ..< 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 120 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 168 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 7 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 193 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 120 related to visits to 168
    with equalities
      ((Mem) ('mem')) (@ addr 120)
      = ((Mem) ('Mem')) (@ addr 168)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 8)))) (@ addr 120)
      ((Word32) ('r13')) (@ addr 120)
      ((Word32) ('r10')) (@ addr 120)
      ((Word32) ('r9')) (@ addr 120)
      ((Word32) ('r6')) (@ addr 120)
      ((Word32) ('r7')) (@ addr 120)
      ((Word32) ('r8')) (@ addr 120)
      ((Word32) ('r11')) (@ addr 120)
      ((Word32) ('r5')) (@ addr 120)
      ((Word32) ('ret')) (@ addr 120)
      ((Bool) (ROData('mem'))) (@ addr 120)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 4))), ((Word32) (0))), ((Word32) (('r13' + 0))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 120)
      ((Word32) ('first_untyped_slot___unsigned_long#v')) (@ addr 168)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 168)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 168)
      ((Word32) (('loop#8#count' + ((0 - '#seq-visits') * 1)))) (@ addr 168)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 168)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 120 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 168 is in {0 ..< 3}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 120 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 168 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_untypeds (ASM) <= Kernel_C.create_untypeds (C)), time taken: 4190.66s
Testing Function pair Pairing (Arch_createObject (ASM) <= Kernel_C.Arch_createObject (C))
  (function pairing 183 of 284)
 .. built problem, finding proof
Decided to case split at (4, 'ASM')
  (in problem)
Now doing proof search in true case (4 visited) in problem.
Now doing proof search in false case (4 not visited) in problem.
ProofNode ('CaseSplit', (4, 'ASM'), (ProofNode ('Restr', (4, ('Number', (1, 2))), (ProofNode ('Restr', (199, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (4, ('Number', (0, 1))), (ProofNode ('Restr', (199, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 4 is visited
Step 2: case in (1) where 4 is visited
  Prove the number of visits to 4 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 199 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 4 is not visited
  Prove the number of visits to 4 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 199 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_createObject (ASM) <= Kernel_C.Arch_createObject (C)), time taken: 4.72s
Testing Function pair Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C))
  (function pairing 184 of 284)
 .. built problem, finding proof
Decided to case split at (13, 'ASM')
  (in problem)
Now doing proof search in true case (13 visited) in problem.
Now doing proof search in false case (13 not visited) in problem.
ProofNode ('CaseSplit', (13, 'ASM'), (ProofNode ('Restr', (13, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (13, ('Number', (0, 1))), (ProofNode ('Restr', (110, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 13 is visited
Step 2: case in (1) where 13 is visited
  Prove the number of visits to 13 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 13 is not visited
  Prove the number of visits to 13 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 110 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C)), time taken: 6.29s
Testing Function pair Pairing (write_it_asid_pool (ASM) <= Kernel_C.write_it_asid_pool (C))
  (function pairing 185 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (write_it_asid_pool (ASM) <= Kernel_C.write_it_asid_pool (C)), time taken: 0.49s
Testing Function pair Pairing (updateCapData (ASM) <= Kernel_C.updateCapData (C))
  (function pairing 186 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (updateCapData (ASM) <= Kernel_C.updateCapData (C)), time taken: 0.46s
Testing Function pair Pairing (restore_user_context (ASM) <= Kernel_C.restore_user_context (C))
  (function pairing 187 of 284)
Skipping Pairing (restore_user_context (ASM) <= Kernel_C.restore_user_context (C)), underspecified C
Testing Function pair Pairing (tcbSchedDequeue (ASM) <= Kernel_C.tcbSchedDequeue (C))
  (function pairing 188 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (tcbSchedDequeue (ASM) <= Kernel_C.tcbSchedDequeue (C)), time taken: 1.33s
Testing Function pair Pairing (insert_region (ASM) <= Kernel_C.insert_region (C))
  (function pairing 189 of 284)
 .. built problem, finding proof
Discovered that points [94 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (94, ('Number', (0, 6))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 94 is in {0 ..< 6}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (insert_region (ASM) <= Kernel_C.insert_region (C)), time taken: 4.47s
Testing Function pair Pairing (decodeSetSchedParams (ASM) <= Kernel_C.decodeSetSchedParams (C))
  (function pairing 190 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeSetSchedParams (ASM) <= Kernel_C.decodeSetSchedParams (C)), time taken: 9.71s
Testing Function pair Pairing (scheduleTCB (ASM) <= Kernel_C.scheduleTCB (C))
  (function pairing 191 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (scheduleTCB (ASM) <= Kernel_C.scheduleTCB (C)), time taken: 0.35s
Testing Function pair Pairing (Arch_deriveCap (ASM) <= Kernel_C.Arch_deriveCap (C))
  (function pairing 192 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_deriveCap (ASM) <= Kernel_C.Arch_deriveCap (C)), time taken: 0.46s
Testing Function pair Pairing (ensureEmptySlot (ASM) <= Kernel_C.ensureEmptySlot (C))
  (function pairing 193 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (ensureEmptySlot (ASM) <= Kernel_C.ensureEmptySlot (C)), time taken: 0.19s
Testing Function pair Pairing (getExtraCPtr (ASM) <= Kernel_C.getExtraCPtr (C))
  (function pairing 194 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (getExtraCPtr (ASM) <= Kernel_C.getExtraCPtr (C)), time taken: 0.17s
Testing Function pair Pairing (sameObjectAs (ASM) <= Kernel_C.sameObjectAs (C))
  (function pairing 195 of 284)
 .. built problem, finding proof
Decided to case split at (22, 'ASM')
  (in problem)
Now doing proof search in true case (22 visited) in problem.
Now doing proof search in false case (22 not visited) in problem.
ProofNode ('CaseSplit', (22, 'ASM'), (ProofNode ('Restr', (22, ('Number', (1, 2))), (ProofNode ('Restr', (87, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (22, ('Number', (0, 1))), (ProofNode ('Restr', (87, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 22 is visited
Step 2: case in (1) where 22 is visited
  Prove the number of visits to 22 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 87 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 22 is not visited
  Prove the number of visits to 22 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 87 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (sameObjectAs (ASM) <= Kernel_C.sameObjectAs (C)), time taken: 4.04s
Testing Function pair Pairing (cleanCacheRange_RAM (ASM) <= Kernel_C.cleanCacheRange_RAM (C))
  (function pairing 196 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [4, 106]
  (in problem)
Now doing proof search in 4 init case in problem.
Discovered that points [80 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [116 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [44 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [55 (loop head)] can be bounded
  (in 4 init case in problem)
Now doing proof search in 4 loop case in problem.
Discovered a loop relation for split points [11, 86]
  (in 4 loop case in problem)
Now doing proof search in 11 init case in 4 loop case in problem.
Discovered that points [116 (loop head)] can be bounded
  (in 11 init case in 4 loop case in problem)
Discovered that points [55 (loop head)] can be bounded
  (in 11 init case in 4 loop case in problem)
Now doing proof search in 11 loop case in 4 loop case in problem.
Discovered that points [116 (loop head)] can be bounded
  (in 11 loop case in 4 loop case in problem)
Discovered that points [55 (loop head)] can be bounded
  (in 11 loop case in 4 loop case in problem)
ProofNode ('Split', ((4, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r14')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (106, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.3'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.2'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.2'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.3'))], 2, 1), (ProofNode ('Restr', (4, ('Number', (0, 3))), (ProofNode ('Restr', (106, ('Number', (0, 3))), (ProofNode ('Restr', (80, ('Number', (0, 5))), (ProofNode ('Restr', (116, ('Number', (0, 2))), (ProofNode ('Restr', (44, ('Number', (0, 4))), (ProofNode ('Restr', (55, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)), ProofNode ('Restr', (4, ('Offset', (0, 3))), (ProofNode ('Restr', (106, ('Offset', (0, 3))), (ProofNode ('Split', ((11, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (86, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 5)])])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.1')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.1'))], 2, 1), (ProofNode ('Restr', (11, ('Number', (0, 3))), (ProofNode ('Restr', (86, ('Number', (0, 3))), (ProofNode ('Restr', (116, ('Number', (0, 2))), (ProofNode ('Restr', (55, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)), ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Restr', (86, ('Offset', (0, 3))), (ProofNode ('Restr', (116, ('Number', (0, 2))), (ProofNode ('Restr', (55, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 4 related to visits to 106
    with equalities
      ((Mem) ('mem')) (@ addr 4)
      = ((Mem) ('Mem.3')) (@ addr 106)
    and with invariants
      ((Word32) ('r21')) (@ addr 4)
      ((Word32) ('r4')) (@ addr 4)
      ((Word32) ('r27')) (@ addr 4)
      ((Word32) ('r17')) (@ addr 4)
      ((Word32) ('r0')) (@ addr 4)
      ((Word32) ('r11')) (@ addr 4)
      ((Word32) ('r23')) (@ addr 4)
      ((Word32) ('r13')) (@ addr 4)
      ((Word32) ('r10')) (@ addr 4)
      ((Word32) ('r28')) (@ addr 4)
      ((Word32) ('r19')) (@ addr 4)
      ((Word32) ('r16')) (@ addr 4)
      ((Word64) ('clock')) (@ addr 4)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 32)))) (@ addr 4)
      ((Word32) ('r9')) (@ addr 4)
      ((Word32) ('r6')) (@ addr 4)
      ((Word32) ('r7')) (@ addr 4)
      ((Word32) ('r31')) (@ addr 4)
      ((Word32) ('r25')) (@ addr 4)
      ((Word32) ('r24')) (@ addr 4)
      ((Word32) ('r8')) (@ addr 4)
      ((Word32) ('r29')) (@ addr 4)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('r18')) (@ addr 4)
      ((Word32) ('r20')) (@ addr 4)
      ((Word32) ('r30')) (@ addr 4)
      ((Word32) ('r14')) (@ addr 4)
      ((Word32) ('r15')) (@ addr 4)
      ((Word32) ('mode')) (@ addr 4)
      ((Word32) ('r5')) (@ addr 4)
      ((Word32) ('ret')) (@ addr 4)
      ((Word32) ('r26')) (@ addr 4)
      ((Word32) ('r1')) (@ addr 4)
      ((Word32) ('r2')) (@ addr 4)
      ((Bool) (ROData('mem'))) (@ addr 4)
      ((Word32) ('r22')) (@ addr 4)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r14')), ((Word32) ('r3')))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r3')), ((Word32) ('r14')))))) (@ addr 4)
      ((Bool) ('c')) (@ addr 4)
      ((Bool) ('n')) (@ addr 4)
      ((Bool) ('v')) (@ addr 4)
      ((Bool) ('z')) (@ addr 4)
      ((Word32) ('end___unsigned_long#v')) (@ addr 106)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 106)
      ((Word32[50]) ('GhostAssertions.3')) (@ addr 106)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 106)
      ((Word32) ('end___unsigned_long#v.2')) (@ addr 106)
      ((Word32) ('start___unsigned_long#v.2')) (@ addr 106)
      ((Word32) ('start___unsigned_long#v')) (@ addr 106)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 106)
      ((Word32) ('pstart___unsigned_long#v.1')) (@ addr 106)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 4 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 106 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 80 is in {0 ..< 5}
    .. proven.
Step 5: 
  Prove the number of visits to 116 is in {0 ..< 2}
    .. proven.
Step 6: 
  Prove the number of visits to 44 is in {0 ..< 4}
    .. proven.
Step 7: 
  Prove the number of visits to 55 is in {0 ..< 2}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Step 9: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 4 is in {i + 0 ..< i + 3}
    .. proven.
Step 10: 
  Prove the number of visits to 106 is in {i + 0 ..< i + 3}
    .. proven.
Step 11: 
  prove visits to 11 related to visits to 86
    with equalities
      ((Mem) ('mem')) (@ addr 11)
      = ((Mem) ('Mem.1')) (@ addr 86)
    and with invariants
      ((Word32) ('r21')) (@ addr 11)
      ((Word32) ('r4')) (@ addr 11)
      ((Word32) ('r27')) (@ addr 11)
      ((Word32) ('r17')) (@ addr 11)
      ((Word32) ('r0')) (@ addr 11)
      ((Word32) ('r23')) (@ addr 11)
      ((Word32) ('r13')) (@ addr 11)
      ((Word32) ('r10')) (@ addr 11)
      ((Word32) ('r28')) (@ addr 11)
      ((Word32) ('r19')) (@ addr 11)
      ((Word32) ('r16')) (@ addr 11)
      ((Word64) ('clock')) (@ addr 11)
      ((Word32) ('r12')) (@ addr 11)
      ((Word32) ('r9')) (@ addr 11)
      ((Word32) ('r6')) (@ addr 11)
      ((Word32) ('r7')) (@ addr 11)
      ((Word32) ('r31')) (@ addr 11)
      ((Word32) ('r25')) (@ addr 11)
      ((Word32) ('r24')) (@ addr 11)
      ((Word32) ('r8')) (@ addr 11)
      ((Word32) ('r29')) (@ addr 11)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 11)
      ((Word32) ('r1')) (@ addr 11)
      ((Word32) ('r18')) (@ addr 11)
      ((Word32) ('r20')) (@ addr 11)
      ((Word32) ('r30')) (@ addr 11)
      ((Word32) ('r14')) (@ addr 11)
      ((Word32) ('r15')) (@ addr 11)
      ((Word32) ('mode')) (@ addr 11)
      ((Word32) ('r5')) (@ addr 11)
      ((Word32) ('ret')) (@ addr 11)
      ((Word32) ('r26')) (@ addr 11)
      ((Word32) ('r11')) (@ addr 11)
      ((Word32) ('r2')) (@ addr 11)
      ((Bool) (ROData('mem'))) (@ addr 11)
      ((Word32) ('r22')) (@ addr 11)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 11)
      ((Word32) ('end___unsigned_long#v.1')) (@ addr 86)
      ((Word32) (('start___unsigned_long#v.1' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast(5)))))) (@ addr 86)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 86)
      ((Word32[50]) ('GhostAssertions.1')) (@ addr 86)
    .. proven.
Step 12: case in (11) where the length of the sequence < 2
  Prove the number of visits to 11 is in {0 ..< 3}
    .. proven.
Step 13: 
  Prove the number of visits to 86 is in {0 ..< 3}
    .. proven.
Step 14: 
  Prove the number of visits to 116 is in {0 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 55 is in {0 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (11) where the length of the sequence is j + 2
  Prove the number of visits to 11 is in {j + 0 ..< j + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 86 is in {j + 0 ..< j + 3}
    .. proven.
Step 19: 
  Prove the number of visits to 116 is in {0 ..< 2}
    .. proven.
Step 20: 
  Prove the number of visits to 55 is in {0 ..< 2}
    .. proven.
Step 21: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cleanCacheRange_RAM (ASM) <= Kernel_C.cleanCacheRange_RAM (C)), time taken: 82.95s
Testing Function pair Pairing (lookupTargetSlot (ASM) <= Kernel_C.lookupTargetSlot (C))
  (function pairing 197 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupTargetSlot (ASM) <= Kernel_C.lookupTargetSlot (C)), time taken: 0.96s
Testing Function pair Pairing (switchToThread (ASM) <= Kernel_C.switchToThread (C))
  (function pairing 198 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (switchToThread (ASM) <= Kernel_C.switchToThread (C)), time taken: 0.23s
Testing Function pair Pairing (cap_get_capPtr (ASM) <= Kernel_C.cap_get_capPtr (C))
  (function pairing 199 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cap_get_capPtr (ASM) <= Kernel_C.cap_get_capPtr (C)), time taken: 0.83s
Testing Function pair Pairing (Arch_configureIdleThread (ASM) <= Kernel_C.Arch_configureIdleThread (C))
  (function pairing 200 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_configureIdleThread (ASM) <= Kernel_C.Arch_configureIdleThread (C)), time taken: 0.15s
Testing Function pair Pairing (cleanInvalidateCacheRange_RAM (ASM) <= Kernel_C.cleanInvalidateCacheRange_RAM (C))
  (function pairing 201 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [4, 160]
  (in problem)
Now doing proof search in 4 init case in problem.
Discovered that points [131 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [178 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [84 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [54 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [67 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [73 (loop head)] can be bounded
  (in 4 init case in problem)
Now doing proof search in 4 loop case in problem.
Discovered a loop relation for split points [13, 137]
  (in 4 loop case in problem)
Now doing proof search in 13 init case in 4 loop case in problem.
Discovered that points [178 (loop head)] can be bounded
  (in 13 init case in 4 loop case in problem)
Discovered that points [67 (loop head)] can be bounded
  (in 13 init case in 4 loop case in problem)
Discovered a loop relation for split points [23, 90]
  (in 13 init case in 4 loop case in problem)
Now doing proof search in 23 init case in 13 init case in 4 loop case in problem.
Now doing proof search in 23 loop case in 13 init case in 4 loop case in problem.
Now doing proof search in 13 loop case in 4 loop case in problem.
Discovered that points [178 (loop head)] can be bounded
  (in 13 loop case in 4 loop case in problem)
Discovered that points [67 (loop head)] can be bounded
  (in 13 loop case in 4 loop case in problem)
Discovered a loop relation for split points [23, 90]
  (in 13 loop case in 4 loop case in problem)
Now doing proof search in 23 init case in 13 loop case in 4 loop case in problem.
Now doing proof search in 23 loop case in 13 loop case in 4 loop case in problem.
ProofNode ('Split', ((4, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r4')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r3')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (160, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.2'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.2'), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.5'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v.1'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.5'))], 2, 1), (ProofNode ('Restr', (4, ('Number', (0, 3))), (ProofNode ('Restr', (160, ('Number', (0, 3))), (ProofNode ('Restr', (131, ('Number', (0, 5))), (ProofNode ('Restr', (178, ('Number', (0, 2))), (ProofNode ('Restr', (84, ('Number', (0, 4))), (ProofNode ('Restr', (54, ('Number', (0, 4))), (ProofNode ('Restr', (67, ('Number', (0, 2))), (ProofNode ('Restr', (73, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)), ProofNode ('Restr', (4, ('Offset', (0, 3))), (ProofNode ('Restr', (160, ('Offset', (0, 3))), (ProofNode ('Split', ((13, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (137, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.3'), Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v.1'), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 5)])])])]), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.3'))], 2, 1), (ProofNode ('Restr', (13, ('Number', (0, 3))), (ProofNode ('Restr', (137, ('Number', (0, 3))), (ProofNode ('Restr', (178, ('Number', (0, 2))), (ProofNode ('Restr', (67, ('Number', (0, 2))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r12')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r4')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r12')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r12')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (90, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 3))), (ProofNode ('Restr', (90, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (90, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)), ProofNode ('Restr', (13, ('Offset', (0, 3))), (ProofNode ('Restr', (137, ('Offset', (0, 3))), (ProofNode ('Restr', (178, ('Number', (0, 2))), (ProofNode ('Restr', (67, ('Number', (0, 2))), (ProofNode ('Split', ((23, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r12')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r4')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r12')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r12')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (90, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (23, ('Number', (0, 3))), (ProofNode ('Restr', (90, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (23, ('Offset', (0, 3))), (ProofNode ('Restr', (90, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 4 related to visits to 160
    with equalities
      ((Mem) ('mem')) (@ addr 4)
      = ((Mem) ('Mem.5')) (@ addr 160)
    and with invariants
      ((Word32) ('r21')) (@ addr 4)
      ((Word32) ('r4')) (@ addr 4)
      ((Word32) ('r27')) (@ addr 4)
      ((Word32) ('r17')) (@ addr 4)
      ((Word32) ('r0')) (@ addr 4)
      ((Word32) ('r11')) (@ addr 4)
      ((Word32) ('r23')) (@ addr 4)
      ((Word32) ('r13')) (@ addr 4)
      ((Word32) ('r10')) (@ addr 4)
      ((Word32) ('r28')) (@ addr 4)
      ((Word32) ('r19')) (@ addr 4)
      ((Word32) ('r16')) (@ addr 4)
      ((Word64) ('clock')) (@ addr 4)
      ((Word32) ('r12')) (@ addr 4)
      ((Word32) ('r9')) (@ addr 4)
      ((Word32) ('r6')) (@ addr 4)
      ((Word32) ('r7')) (@ addr 4)
      ((Word32) ('r31')) (@ addr 4)
      ((Word32) ('r25')) (@ addr 4)
      ((Word32) ('r24')) (@ addr 4)
      ((Word32) ('r8')) (@ addr 4)
      ((Word32) ('r29')) (@ addr 4)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('r18')) (@ addr 4)
      ((Word32) ('r20')) (@ addr 4)
      ((Word32) ('r30')) (@ addr 4)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 32)))) (@ addr 4)
      ((Word32) ('r15')) (@ addr 4)
      ((Word32) ('mode')) (@ addr 4)
      ((Word32) ('r5')) (@ addr 4)
      ((Word32) ('ret')) (@ addr 4)
      ((Word32) ('r26')) (@ addr 4)
      ((Word32) ('r1')) (@ addr 4)
      ((Word32) ('r2')) (@ addr 4)
      ((Bool) (ROData('mem'))) (@ addr 4)
      ((Word32) ('r22')) (@ addr 4)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r3')), ((Word32) ('r4')))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r4')), ((Word32) ('r3')))))) (@ addr 4)
      ((Bool) ('c')) (@ addr 4)
      ((Bool) ('n')) (@ addr 4)
      ((Bool) ('v')) (@ addr 4)
      ((Bool) ('z')) (@ addr 4)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 160)
      ((Word32) ('end___unsigned_long#v.2')) (@ addr 160)
      ((Word32) ('start___unsigned_long#v.2')) (@ addr 160)
      ((Word32) ('end___unsigned_long#v')) (@ addr 160)
      ((Word32[50]) ('GhostAssertions.5')) (@ addr 160)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 160)
      ((Word32) ('pstart___unsigned_long#v.1')) (@ addr 160)
      ((Word32) ('start___unsigned_long#v')) (@ addr 160)
      ((Word32) (('index___unsigned_long#v.1' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 160)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 4 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 160 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 131 is in {0 ..< 5}
    .. proven.
Step 5: 
  Prove the number of visits to 178 is in {0 ..< 2}
    .. proven.
Step 6: 
  Prove the number of visits to 84 is in {0 ..< 4}
    .. proven.
Step 7: 
  Prove the number of visits to 54 is in {0 ..< 4}
    .. proven.
Step 8: 
  Prove the number of visits to 67 is in {0 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 73 is in {0 ..< 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 4 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 160 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 13 related to visits to 137
    with equalities
      ((Mem) ('mem')) (@ addr 13)
      = ((Mem) ('Mem.3')) (@ addr 137)
    and with invariants
      ((Word32) ('r21')) (@ addr 13)
      ((Word32) ('r4')) (@ addr 13)
      ((Word32) ('r27')) (@ addr 13)
      ((Word32) ('r17')) (@ addr 13)
      ((Word32) ('r0')) (@ addr 13)
      ((Word32) ('r23')) (@ addr 13)
      ((Word32) ('r13')) (@ addr 13)
      ((Word32) ('r10')) (@ addr 13)
      ((Word32) ('r28')) (@ addr 13)
      ((Word32) ('r19')) (@ addr 13)
      ((Word32) ('r16')) (@ addr 13)
      ((Word64) ('clock')) (@ addr 13)
      ((Word32) ('r12')) (@ addr 13)
      ((Word32) ('r9')) (@ addr 13)
      ((Word32) ('r6')) (@ addr 13)
      ((Word32) ('r7')) (@ addr 13)
      ((Word32) ('r31')) (@ addr 13)
      ((Word32) ('r25')) (@ addr 13)
      ((Word32) ('r24')) (@ addr 13)
      ((Word32) ('r8')) (@ addr 13)
      ((Word32) ('r29')) (@ addr 13)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 13)
      ((Word32) ('r1')) (@ addr 13)
      ((Word32) ('r18')) (@ addr 13)
      ((Word32) ('r20')) (@ addr 13)
      ((Word32) ('r30')) (@ addr 13)
      ((Word32) ('r14')) (@ addr 13)
      ((Word32) ('r15')) (@ addr 13)
      ((Word32) ('mode')) (@ addr 13)
      ((Word32) ('r5')) (@ addr 13)
      ((Word32) ('ret')) (@ addr 13)
      ((Word32) ('r26')) (@ addr 13)
      ((Word32) ('r11')) (@ addr 13)
      ((Word32) ('r2')) (@ addr 13)
      ((Bool) (ROData('mem'))) (@ addr 13)
      ((Word32) ('r22')) (@ addr 13)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 13)
      ((Word32) ('end___unsigned_long#v')) (@ addr 137)
      ((Word32[50]) ('GhostAssertions.3')) (@ addr 137)
      ((Word32) ('end___unsigned_long#v.1')) (@ addr 137)
      ((Word32) ('start___unsigned_long#v')) (@ addr 137)
      ((Word32) (('loop#3#count.1' + ((0 - '#seq-visits') * 1)))) (@ addr 137)
      ((Word32) (('start___unsigned_long#v.1' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast(5)))))) (@ addr 137)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 137)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 13 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 137 is in {0 ..< 3}
    .. proven.
Step 16: 
  Prove the number of visits to 178 is in {0 ..< 2}
    .. proven.
Step 17: 
  Prove the number of visits to 67 is in {0 ..< 2}
    .. proven.
Step 18: 
  prove visits to 23 related to visits to 90
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 90)
    and with invariants
      ((Word32) ('r21')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r27')) (@ addr 23)
      ((Word32) ('r17')) (@ addr 23)
      ((Word32) ('r0')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r23')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Word32) ('r28')) (@ addr 23)
      ((Word32) ('r19')) (@ addr 23)
      ((Word32) ('r16')) (@ addr 23)
      ((Word64) ('clock')) (@ addr 23)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 1)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r31')) (@ addr 23)
      ((Word32) ('r25')) (@ addr 23)
      ((Word32) ('r24')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r29')) (@ addr 23)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 23)
      ((Word32) ('r18')) (@ addr 23)
      ((Word32) ('r20')) (@ addr 23)
      ((Word32) ('r30')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r15')) (@ addr 23)
      ((Word32) ('mode')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r26')) (@ addr 23)
      ((Word32) ('r1')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r22')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Bool) (Equals(LessEquals(((Word32) (('r12' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r12'))), Less(((Word32) ('r12')), ((Word32) ('r4')))))) (@ addr 23)
      ((Bool) (Equals(LessEquals(((Word32) (('r12' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r12'))), Less(((Word32) ('r4')), ((Word32) ('r12')))))) (@ addr 23)
      ((Bool) ('c')) (@ addr 23)
      ((Bool) ('n')) (@ addr 23)
      ((Bool) ('v')) (@ addr 23)
      ((Bool) ('z')) (@ addr 23)
      ((Word32) ('end___unsigned_long#v')) (@ addr 90)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 90)
      ((Word32) ('start___unsigned_long#v')) (@ addr 90)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 90)
      ((Word32[50]) ('GhostAssertions')) (@ addr 90)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 90)
    .. proven.
Step 19: case in (18) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 3}
    .. proven.
Step 20: 
  Prove the number of visits to 90 is in {0 ..< 3}
    .. proven.
Step 21: 
  prove all verification conditions
    .. proven.
Step 22: case in (18) where the length of the sequence is k + 2
  Prove the number of visits to 23 is in {k + 0 ..< k + 3}
    .. proven.
Step 23: 
  Prove the number of visits to 90 is in {k + 0 ..< k + 3}
    .. proven.
Step 24: 
  prove all verification conditions
    .. proven.
Step 25: case in (13) where the length of the sequence is j + 2
  Prove the number of visits to 13 is in {j + 0 ..< j + 3}
    .. proven.
Step 26: 
  Prove the number of visits to 137 is in {j + 0 ..< j + 3}
    .. proven.
Step 27: 
  Prove the number of visits to 178 is in {0 ..< 2}
    .. proven.
Step 28: 
  Prove the number of visits to 67 is in {0 ..< 2}
    .. proven.
Step 29: 
  prove visits to 23 related to visits to 90
    with equalities
      ((Mem) ('mem')) (@ addr 23)
      = ((Mem) ('Mem')) (@ addr 90)
    and with invariants
      ((Word32) ('r21')) (@ addr 23)
      ((Word32) ('r4')) (@ addr 23)
      ((Word32) ('r27')) (@ addr 23)
      ((Word32) ('r17')) (@ addr 23)
      ((Word32) ('r0')) (@ addr 23)
      ((Word32) ('r11')) (@ addr 23)
      ((Word32) ('r23')) (@ addr 23)
      ((Word32) ('r13')) (@ addr 23)
      ((Word32) ('r10')) (@ addr 23)
      ((Word32) ('r28')) (@ addr 23)
      ((Word32) ('r19')) (@ addr 23)
      ((Word32) ('r16')) (@ addr 23)
      ((Word64) ('clock')) (@ addr 23)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 1)))) (@ addr 23)
      ((Word32) ('r9')) (@ addr 23)
      ((Word32) ('r6')) (@ addr 23)
      ((Word32) ('r7')) (@ addr 23)
      ((Word32) ('r31')) (@ addr 23)
      ((Word32) ('r25')) (@ addr 23)
      ((Word32) ('r24')) (@ addr 23)
      ((Word32) ('r8')) (@ addr 23)
      ((Word32) ('r29')) (@ addr 23)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 23)
      ((Word32) ('r18')) (@ addr 23)
      ((Word32) ('r20')) (@ addr 23)
      ((Word32) ('r30')) (@ addr 23)
      ((Word32) ('r14')) (@ addr 23)
      ((Word32) ('r15')) (@ addr 23)
      ((Word32) ('mode')) (@ addr 23)
      ((Word32) ('r5')) (@ addr 23)
      ((Word32) ('ret')) (@ addr 23)
      ((Word32) ('r26')) (@ addr 23)
      ((Word32) ('r1')) (@ addr 23)
      ((Word32) ('r2')) (@ addr 23)
      ((Bool) (ROData('mem'))) (@ addr 23)
      ((Word32) ('r22')) (@ addr 23)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 23)
      ((Bool) (Equals(LessEquals(((Word32) (('r12' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r12'))), Less(((Word32) ('r12')), ((Word32) ('r4')))))) (@ addr 23)
      ((Bool) (Equals(LessEquals(((Word32) (('r12' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r12'))), Less(((Word32) ('r4')), ((Word32) ('r12')))))) (@ addr 23)
      ((Bool) ('c')) (@ addr 23)
      ((Bool) ('n')) (@ addr 23)
      ((Bool) ('v')) (@ addr 23)
      ((Bool) ('z')) (@ addr 23)
      ((Word32) ('end___unsigned_long#v')) (@ addr 90)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 90)
      ((Word32) ('start___unsigned_long#v')) (@ addr 90)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 90)
      ((Word32[50]) ('GhostAssertions')) (@ addr 90)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 90)
    .. proven.
Step 30: case in (29) where the length of the sequence < 2
  Prove the number of visits to 23 is in {0 ..< 3}
    .. proven.
Step 31: 
  Prove the number of visits to 90 is in {0 ..< 3}
    .. proven.
Step 32: 
  prove all verification conditions
    .. proven.
Step 33: case in (29) where the length of the sequence is a + 2
  Prove the number of visits to 23 is in {a + 0 ..< a + 3}
    .. proven.
Step 34: 
  Prove the number of visits to 90 is in {a + 0 ..< a + 3}
    .. proven.
Step 35: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cleanInvalidateCacheRange_RAM (ASM) <= Kernel_C.cleanInvalidateCacheRange_RAM (C)), time taken: 567.72s
Testing Function pair Pairing (decodeUnbindNotification (ASM) <= Kernel_C.decodeUnbindNotification (C))
  (function pairing 202 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeUnbindNotification (ASM) <= Kernel_C.decodeUnbindNotification (C)), time taken: 0.34s
Testing Function pair Pairing (alloc_rootserver_obj (ASM) <= Kernel_C.alloc_rootserver_obj (C))
  (function pairing 203 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (alloc_rootserver_obj (ASM) <= Kernel_C.alloc_rootserver_obj (C)), time taken: 1.06s
Testing Function pair Pairing (doReplyTransfer (ASM) <= Kernel_C.doReplyTransfer (C))
  (function pairing 204 of 284)
 .. built problem, finding proof
Decided to case split at (3, 'ASM')
  (in problem)
Now doing proof search in true case (3 visited) in problem.
Now doing proof search in false case (3 not visited) in problem.
ProofNode ('CaseSplit', (3, 'ASM'), (ProofNode ('Restr', (3, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Restr', (81, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 3 is visited
Step 2: case in (1) where 3 is visited
  Prove the number of visits to 3 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 3 is not visited
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 81 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doReplyTransfer (ASM) <= Kernel_C.doReplyTransfer (C)), time taken: 4.73s
Testing Function pair Pairing (lookupPivotSlot (ASM) <= Kernel_C.lookupPivotSlot (C))
  (function pairing 205 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupPivotSlot (ASM) <= Kernel_C.lookupPivotSlot (C)), time taken: 1.00s
Testing Function pair Pairing (Arch_decodeTransfer (ASM) <= Kernel_C.Arch_decodeTransfer (C))
  (function pairing 206 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_decodeTransfer (ASM) <= Kernel_C.Arch_decodeTransfer (C)), time taken: 0.13s
Testing Function pair Pairing (cpu_initLocalIRQController (ASM) <= Kernel_C.cpu_initLocalIRQController (C))
  (function pairing 207 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cpu_initLocalIRQController (ASM) <= Kernel_C.cpu_initLocalIRQController (C)), time taken: 0.15s
Testing Function pair Pairing (decodeTCBConfigure (ASM) <= Kernel_C.decodeTCBConfigure (C))
  (function pairing 208 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeTCBConfigure (ASM) <= Kernel_C.decodeTCBConfigure (C)), time taken: 2416.17s
Testing Function pair Pairing (schedule (ASM) <= Kernel_C.schedule (C))
  (function pairing 209 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (schedule (ASM) <= Kernel_C.schedule (C)), time taken: 3.37s
Testing Function pair Pairing (decodeSetPriority (ASM) <= Kernel_C.decodeSetPriority (C))
  (function pairing 210 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeSetPriority (ASM) <= Kernel_C.decodeSetPriority (C)), time taken: 7.41s
Testing Function pair Pairing (Arch_prepareThreadDelete (ASM) <= Kernel_C.Arch_prepareThreadDelete (C))
  (function pairing 211 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_prepareThreadDelete (ASM) <= Kernel_C.Arch_prepareThreadDelete (C)), time taken: 0.11s
Testing Function pair Pairing (branchFlushRange (ASM) <= Kernel_C.branchFlushRange (C))
  (function pairing 212 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [4, 29]
  (in problem)
Now doing proof search in 4 init case in problem.
Now doing proof search in 4 loop case in problem.
ProofNode ('Split', ((4, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r1')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (29, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (4, ('Number', (0, 3))), (ProofNode ('Restr', (29, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (4, ('Offset', (0, 3))), (ProofNode ('Restr', (29, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 4 related to visits to 29
    with equalities
      ((Mem) ('mem')) (@ addr 4)
      = ((Mem) ('Mem')) (@ addr 29)
    and with invariants
      ((Word32) ('r21')) (@ addr 4)
      ((Word32) ('r4')) (@ addr 4)
      ((Word32) ('r27')) (@ addr 4)
      ((Word32) ('r17')) (@ addr 4)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('r23')) (@ addr 4)
      ((Word32) ('r13')) (@ addr 4)
      ((Word32) ('r10')) (@ addr 4)
      ((Word32) ('r28')) (@ addr 4)
      ((Word32) ('r19')) (@ addr 4)
      ((Word32) ('r16')) (@ addr 4)
      ((Word64) ('clock')) (@ addr 4)
      ((Word32) ('r12')) (@ addr 4)
      ((Word32) ('r9')) (@ addr 4)
      ((Word32) ('r6')) (@ addr 4)
      ((Word32) ('r7')) (@ addr 4)
      ((Word32) ('r31')) (@ addr 4)
      ((Word32) ('r25')) (@ addr 4)
      ((Word32) ('r24')) (@ addr 4)
      ((Word32) ('r8')) (@ addr 4)
      ((Word32) ('r29')) (@ addr 4)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 4)
      ((Word32) ('r18')) (@ addr 4)
      ((Word32) ('r20')) (@ addr 4)
      ((Word32) ('r30')) (@ addr 4)
      ((Word32) ('r14')) (@ addr 4)
      ((Word32) ('r15')) (@ addr 4)
      ((Word32) ('mode')) (@ addr 4)
      ((Word32) ('r11')) (@ addr 4)
      ((Word32) ('r5')) (@ addr 4)
      ((Word32) ('ret')) (@ addr 4)
      ((Word32) ('r26')) (@ addr 4)
      ((Word32) ('r1')) (@ addr 4)
      ((Word32) ('r2')) (@ addr 4)
      ((Bool) (ROData('mem'))) (@ addr 4)
      ((Word32) ('r22')) (@ addr 4)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r1')), ((Word32) ('r0')))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r1')))))) (@ addr 4)
      ((Bool) ('c')) (@ addr 4)
      ((Bool) ('n')) (@ addr 4)
      ((Bool) ('v')) (@ addr 4)
      ((Bool) ('z')) (@ addr 4)
      ((Word32) ('end___unsigned_long#v')) (@ addr 29)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 29)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 29)
      ((Word32) ('start___unsigned_long#v')) (@ addr 29)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 29)
      ((Word32[50]) ('GhostAssertions')) (@ addr 29)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 4 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 29 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 4 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 29 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (branchFlushRange (ASM) <= Kernel_C.branchFlushRange (C)), time taken: 21.44s
Testing Function pair Pairing (handleRecv (ASM) <= Kernel_C.handleRecv (C))
  (function pairing 213 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleRecv (ASM) <= Kernel_C.handleRecv (C)), time taken: 10.36s
Testing Function pair Pairing (lookupPDSlot (ASM) <= Kernel_C.lookupPDSlot (C))
  (function pairing 214 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupPDSlot (ASM) <= Kernel_C.lookupPDSlot (C)), time taken: 0.12s
Testing Function pair Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))
  (function pairing 215 of 284)
Aborting Problem (Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))), complex loop
Result ProblemAbort for pair Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C)), time taken: 1.33s
Testing Function pair Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C))
  (function pairing 216 of 284)
Skipping Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C)), underspecified C
Testing Function pair Pairing (invokeCNodeMove (ASM) <= Kernel_C.invokeCNodeMove (C))
  (function pairing 217 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeCNodeMove (ASM) <= Kernel_C.invokeCNodeMove (C)), time taken: 0.23s
Testing Function pair Pairing (Arch_getObjectSize (ASM) <= Kernel_C.Arch_getObjectSize (C))
  (function pairing 218 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_getObjectSize (ASM) <= Kernel_C.Arch_getObjectSize (C)), time taken: 0.21s
Testing Function pair Pairing (setThreadState (ASM) <= Kernel_C.setThreadState (C))
  (function pairing 219 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setThreadState (ASM) <= Kernel_C.setThreadState (C)), time taken: 0.26s
Testing Function pair Pairing (handleVMFault (ASM) <= Kernel_C.handleVMFault (C))
  (function pairing 220 of 284)
 .. built problem, finding proof
Decided to case split at (3, 'ASM')
  (in problem)
Now doing proof search in true case (3 visited) in problem.
Now doing proof search in false case (3 not visited) in problem.
ProofNode ('CaseSplit', (3, 'ASM'), (ProofNode ('Restr', (3, ('Number', (1, 2))), (ProofNode ('Restr', (60, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Restr', (60, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 3 is visited
Step 2: case in (1) where 3 is visited
  Prove the number of visits to 3 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 60 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 3 is not visited
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 60 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleVMFault (ASM) <= Kernel_C.handleVMFault (C)), time taken: 3.83s
Testing Function pair Pairing (l_impl'isb (ASM) <= r_impl'isb (C))
  (function pairing 221 of 284)
Skipping Pairing (l_impl'isb (ASM) <= r_impl'isb (C)), underspecified C
Testing Function pair Pairing (strlcat (ASM) <= Kernel_C.strlcat (C))
  (function pairing 222 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [37, 101]
  (in problem)
Now doing proof search in 37 init case in problem.
Discovered a loop relation for split points [56, 77]
  (in 37 init case in problem)
Now doing proof search in 56 init case in 37 init case in problem.
Now doing proof search in 56 loop case in 37 init case in problem.
Now doing proof search in 37 loop case in problem.
Discovered a loop relation for split points [56, 77]
  (in 37 loop case in problem)
Now doing proof search in 56 init case in 37 loop case in problem.
Now doing proof search in 56 loop case in 37 loop case in problem.
ProofNode ('Split', ((37, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r3')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r2')])])]), (101, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#24#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [], 2, 1), (ProofNode ('Restr', (37, ('Number', (0, 3))), (ProofNode ('Restr', (101, ('Number', (0, 3))), (ProofNode ('Split', ((56, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r0')])])]), (77, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (56, ('Number', (0, 3))), (ProofNode ('Restr', (77, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (56, ('Offset', (0, 3))), (ProofNode ('Restr', (77, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (37, ('Offset', (0, 3))), (ProofNode ('Restr', (101, ('Offset', (0, 3))), (ProofNode ('Split', ((56, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r0')])])]), (77, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'dest___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'len___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'size___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'src___ptr_to_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#6#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (56, ('Number', (0, 3))), (ProofNode ('Restr', (77, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (56, ('Offset', (0, 3))), (ProofNode ('Restr', (77, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 37 related to visits to 101
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 37)
      ((Word32) ('r4')) (@ addr 37)
      ((Word32) ('r8')) (@ addr 37)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 37)
      ((Word32) ('r13')) (@ addr 37)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 1)))) (@ addr 37)
      ((Word32) ('r9')) (@ addr 37)
      ((Word32) ('ret')) (@ addr 37)
      ((Word32) ('r2')) (@ addr 37)
      ((Word32) ('r11')) (@ addr 37)
      ((Word32) ('r1')) (@ addr 37)
      ((Word32) ('r10')) (@ addr 37)
      ((Mem) ('mem')) (@ addr 37)
      ((Word32) ('r5')) (@ addr 37)
      ((Word32) ('r6')) (@ addr 37)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 37)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r2')), ((Word32) ('r3')))))) (@ addr 37)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r3')), ((Word32) ('r2')))))) (@ addr 37)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 101)
      ((Word32) ('size___unsigned_long#v')) (@ addr 101)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 101)
      ((Word32) ('src___ptr_to_char#v')) (@ addr 101)
      ((Word32) (('loop#24#count' + ((0 - '#seq-visits') * 1)))) (@ addr 101)
      ((Mem) ('Mem')) (@ addr 101)
      ((Word32[50]) ('GhostAssertions')) (@ addr 101)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 37 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 101 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove visits to 56 related to visits to 77
    with equalities
      ((Mem) ('mem')) (@ addr 56)
      = ((Mem) ('Mem')) (@ addr 77)
    and with invariants
      ((Word32) ('r4')) (@ addr 56)
      ((Word32) ('r8')) (@ addr 56)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 56)
      ((Word32) ('r13')) (@ addr 56)
      ((Word32) ('r5')) (@ addr 56)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 56)
      ((Word32) ('r9')) (@ addr 56)
      ((Word32) ('ret')) (@ addr 56)
      ((Word32) ('r2')) (@ addr 56)
      ((Word32) ('r11')) (@ addr 56)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 56)
      ((Word32) ('r10')) (@ addr 56)
      ((Bool) (ROData('mem'))) (@ addr 56)
      ((Word32) ('r6')) (@ addr 56)
      ((Word32) ('r7')) (@ addr 56)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 56)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r2')), ((Word32) ('r0')))))) (@ addr 56)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 77)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 77)
      ((Word32) ('size___unsigned_long#v')) (@ addr 77)
      ((Word32) (('src___ptr_to_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 77)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 77)
      ((Word32[50]) ('GhostAssertions')) (@ addr 77)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 56 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 77 is in {0 ..< 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 56 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 77 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 37 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 101 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 56 related to visits to 77
    with equalities
      ((Mem) ('mem')) (@ addr 56)
      = ((Mem) ('Mem')) (@ addr 77)
    and with invariants
      ((Word32) ('r4')) (@ addr 56)
      ((Word32) ('r8')) (@ addr 56)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 56)
      ((Word32) ('r13')) (@ addr 56)
      ((Word32) ('r5')) (@ addr 56)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 56)
      ((Word32) ('r9')) (@ addr 56)
      ((Word32) ('ret')) (@ addr 56)
      ((Word32) ('r2')) (@ addr 56)
      ((Word32) ('r11')) (@ addr 56)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 56)
      ((Word32) ('r10')) (@ addr 56)
      ((Bool) (ROData('mem'))) (@ addr 56)
      ((Word32) ('r6')) (@ addr 56)
      ((Word32) ('r7')) (@ addr 56)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 56)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r2')), ((Word32) ('r0')))))) (@ addr 56)
      ((Word32) ('dest___ptr_to_char#v')) (@ addr 77)
      ((Word32) (('len___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 77)
      ((Word32) ('size___unsigned_long#v')) (@ addr 77)
      ((Word32) (('src___ptr_to_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 77)
      ((Word32) (('loop#6#count' + ((0 - '#seq-visits') * 1)))) (@ addr 77)
      ((Word32[50]) ('GhostAssertions')) (@ addr 77)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 56 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 77 is in {0 ..< 3}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 56 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 77 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (strlcat (ASM) <= Kernel_C.strlcat (C)), time taken: 138.27s
Testing Function pair Pairing (decodeIRQHandlerInvocation (ASM) <= Kernel_C.decodeIRQHandlerInvocation (C))
  (function pairing 223 of 284)
 .. built problem, finding proof
Decided to case split at (2, 'ASM')
  (in problem)
Now doing proof search in true case (2 visited) in problem.
Now doing proof search in false case (2 not visited) in problem.
ProofNode ('CaseSplit', (2, 'ASM'), (ProofNode ('Restr', (2, ('Number', (1, 2))), (ProofNode ('Restr', (157, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (2, ('Number', (0, 1))), (ProofNode ('Restr', (157, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 2 is visited
Step 2: case in (1) where 2 is visited
  Prove the number of visits to 2 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 157 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 2 is not visited
  Prove the number of visits to 2 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 157 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeIRQHandlerInvocation (ASM) <= Kernel_C.decodeIRQHandlerInvocation (C)), time taken: 5.87s
Testing Function pair Pairing (invokeIRQHandler_SetIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_SetIRQHandler (C))
  (function pairing 224 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeIRQHandler_SetIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_SetIRQHandler (C)), time taken: 0.61s
Testing Function pair Pairing (performInvocation_Endpoint (ASM) <= Kernel_C.performInvocation_Endpoint (C))
  (function pairing 225 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (performInvocation_Endpoint (ASM) <= Kernel_C.performInvocation_Endpoint (C)), time taken: 0.51s
Testing Function pair Pairing (arch_get_n_paging (ASM) <= Kernel_C.arch_get_n_paging (C))
  (function pairing 226 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (arch_get_n_paging (ASM) <= Kernel_C.arch_get_n_paging (C)), time taken: 0.13s
Testing Function pair Pairing (init_core_state (ASM) <= Kernel_C.init_core_state (C))
  (function pairing 227 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (init_core_state (ASM) <= Kernel_C.init_core_state (C)), time taken: 0.13s
Testing Function pair Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C))
  (function pairing 228 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [67, 155]
  (in problem)
Now doing proof search in 67 init case in problem.
Now doing proof search in 67 loop case in problem.
ProofNode ('Split', ((67, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 12)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 8)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (155, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'first_untyped_slot___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'device_memory___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'size_bits___unsigned#v')), (Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_region_C#v.start_C'))], 2, 1), (ProofNode ('Restr', (67, ('Number', (0, 3))), (ProofNode ('Restr', (155, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (67, ('Offset', (0, 3))), (ProofNode ('Restr', (155, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 67 related to visits to 155
    with equalities
      ((Mem) ('mem')) (@ addr 67)
      = ((Mem) ('Mem')) (@ addr 155)
      ((Word32) ('r4')) (@ addr 67)
      = ((Word32) ('size_bits___unsigned#v')) (@ addr 155)
      ((Word32) ('r5')) (@ addr 67)
      = ((Word32) ('reg___struct_region_C#v.start_C')) (@ addr 155)
    and with invariants
      ((Word32) ('r13')) (@ addr 67)
      ((Word32) ('r10')) (@ addr 67)
      ((Word32) ('r9')) (@ addr 67)
      ((Word32) ('r6')) (@ addr 67)
      ((Word32) ('r7')) (@ addr 67)
      ((Word32) ('r8')) (@ addr 67)
      ((Word32) ('r11')) (@ addr 67)
      ((Word32) ('ret')) (@ addr 67)
      ((Bool) (ROData('mem'))) (@ addr 67)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate(MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 12))), ((Word32) (0))), ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 8))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 67)
      ((Word32) ('first_untyped_slot___unsigned_long#v')) (@ addr 155)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 155)
      ((Word32) ('reg___struct_region_C#v.end_C')) (@ addr 155)
      ((Word32) ('device_memory___unsigned_long#v')) (@ addr 155)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 155)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 155)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 67 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 155 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 67 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 155 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C)), time taken: 401.46s
Testing Function pair Pairing (activateThread (ASM) <= Kernel_C.activateThread (C))
  (function pairing 229 of 284)
 .. built problem, finding proof
Decided to case split at (4, 'ASM')
  (in problem)
Now doing proof search in true case (4 visited) in problem.
Now doing proof search in false case (4 not visited) in problem.
Decided to case split at (6, 'ASM')
  (in false case (4 not visited) in problem)
Now doing proof search in true case (6 visited) in false case (4 not visited) in problem.
Now doing proof search in false case (6 not visited) in false case (4 not visited) in problem.
ProofNode ('CaseSplit', (4, 'ASM'), (ProofNode ('Restr', (4, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (4, ('Number', (0, 1))), (ProofNode ('Restr', (45, ('Number', (0, 1))), (ProofNode ('CaseSplit', (6, 'ASM'), (ProofNode ('Restr', (6, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (6, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 4 is visited
Step 2: case in (1) where 4 is visited
  Prove the number of visits to 4 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 4 is not visited
  Prove the number of visits to 4 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 45 is in {0 ..< 1}
    .. proven.
Step 6: 
  case split on whether 6 is visited
Step 7: case in (6) where 6 is visited
  Prove the number of visits to 6 is in {1 ..< 2}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Step 9: case in (6) where 6 is not visited
  Prove the number of visits to 6 is in {0 ..< 1}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (activateThread (ASM) <= Kernel_C.activateThread (C)), time taken: 7.85s
Testing Function pair Pairing (APFromVMRights (ASM) <= Kernel_C.APFromVMRights (C))
  (function pairing 230 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (APFromVMRights (ASM) <= Kernel_C.APFromVMRights (C)), time taken: 0.19s
Testing Function pair Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))
  (function pairing 231 of 284)
Aborting Problem (Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))), complex loop
Result ProblemAbort for pair Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C)), time taken: 0.31s
Testing Function pair Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C))
  (function pairing 232 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [14, 212]
  (in problem)
Now doing proof search in 14 init case in problem.
Discovered that points [197 (loop head)] can be bounded
  (in 14 init case in problem)
Discovered that points [185 (loop head)] can be bounded
  (in 14 init case in problem)
Discovered that points [174 (loop head)] can be bounded
  (in 14 init case in problem)
Discovered that points [124 (loop head)] can be bounded
  (in 14 init case in problem)
Discovered that points [147 (loop head)] can be bounded
  (in 14 init case in problem)
Now doing proof search in 14 loop case in problem.
Discovered a loop relation for split points [40, 202]
  (in 14 loop case in problem)
Now doing proof search in 40 init case in 14 loop case in problem.
Discovered that points [185 (loop head)] can be bounded
  (in 40 init case in 14 loop case in problem)
Discovered that points [174 (loop head)] can be bounded
  (in 40 init case in 14 loop case in problem)
Discovered that points [147 (loop head)] can be bounded
  (in 40 init case in 14 loop case in problem)
Now doing proof search in 40 loop case in 14 loop case in problem.
Discovered that points [185 (loop head)] can be bounded
  (in 40 loop case in 14 loop case in problem)
Discovered a loop relation for split points [62, 179]
  (in 40 loop case in 14 loop case in problem)
Now doing proof search in 62 init case in 40 loop case in 14 loop case in problem.
Now doing proof search in 62 loop case in 40 loop case in 14 loop case in problem.
ProofNode ('Split', ((14, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (212, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'ipcBuffer___ptr_to_unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#44#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (14, ('Number', (0, 3))), (ProofNode ('Restr', (212, ('Number', (0, 3))), (ProofNode ('Restr', (197, ('Number', (0, 1))), (ProofNode ('Restr', (185, ('Number', (0, 2))), (ProofNode ('Restr', (174, ('Number', (0, 1))), (ProofNode ('Restr', (124, ('Number', (0, 1))), (ProofNode ('Restr', (147, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)), ProofNode ('Restr', (14, ('Offset', (0, 3))), (ProofNode ('Restr', (212, ('Offset', (0, 3))), (ProofNode ('Split', ((40, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Var', Type ('Word', 32), name = 'r14')]), (202, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'ipcBuffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#33#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (40, ('Number', (0, 4))), (ProofNode ('Restr', (202, ('Number', (0, 4))), (ProofNode ('Restr', (185, ('Number', (0, 2))), (ProofNode ('Restr', (174, ('Number', (0, 1))), (ProofNode ('Restr', (147, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (40, ('Offset', (0, 3))), (ProofNode ('Restr', (202, ('Offset', (0, 3))), (ProofNode ('Restr', (185, ('Number', (0, 2))), (ProofNode ('Split', ((62, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (179, (1, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'tcb_src___ptr_to_struct_tcb_C#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'ipcBuffer___ptr_to_unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'j___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (62, ('Number', (0, 3))), (ProofNode ('Restr', (179, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (62, ('Offset', (0, 3))), (ProofNode ('Restr', (179, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 14 related to visits to 212
    with equalities
      ((Mem) ('mem')) (@ addr 14)
      = ((Mem) ('Mem')) (@ addr 212)
    and with invariants
      ((Word32) ('r4')) (@ addr 14)
      ((Word32) ('r0')) (@ addr 14)
      ((Word32) ('r13')) (@ addr 14)
      ((Word32) ('r10')) (@ addr 14)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 4)))) (@ addr 14)
      ((Word32) ('r9')) (@ addr 14)
      ((Word32) ('r6')) (@ addr 14)
      ((Word32) ('r8')) (@ addr 14)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 14)
      ((Word32) ('r11')) (@ addr 14)
      ((Word32) ('r5')) (@ addr 14)
      ((Word32) ('r7')) (@ addr 14)
      ((Word32) ('ret')) (@ addr 14)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 1)))) (@ addr 14)
      ((Bool) (ROData('mem'))) (@ addr 14)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 14)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 212)
      ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 212)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 212)
      ((Word32) ('n___unsigned_long#v')) (@ addr 212)
      ((Word32) ('ipcBuffer___ptr_to_unsigned_long#v')) (@ addr 212)
      ((Word32) (('loop#44#count' + ((0 - '#seq-visits') * 1)))) (@ addr 212)
      ((Word32[50]) ('GhostAssertions')) (@ addr 212)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 14 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 212 is in {0 ..< 3}
    .. proven.
Step 4: 
  Prove the number of visits to 197 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 185 is in {0 ..< 2}
    .. proven.
Step 6: 
  Prove the number of visits to 174 is in {0 ..< 1}
    .. proven.
Step 7: 
  Prove the number of visits to 124 is in {0 ..< 1}
    .. proven.
Step 8: 
  Prove the number of visits to 147 is in {0 ..< 1}
    .. proven.
Step 9: 
  prove all verification conditions
    .. proven.
Step 10: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 14 is in {i + 0 ..< i + 3}
    .. proven.
Step 11: 
  Prove the number of visits to 212 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  prove visits [2, 3, 4 ...] to 40 related to visits [2, 3, 4 ...] to 202
    with equalities
      ((Mem) ('mem')) (@ addr 40)
      = ((Mem) ('Mem')) (@ addr 202)
    and with invariants
      ((Word32) ('r4')) (@ addr 40)
      ((Word32) ('r0')) (@ addr 40)
      ((Word32) ('r13')) (@ addr 40)
      ((Word32) ('r10')) (@ addr 40)
      ((Word32) (('r12' + ((0 - '#seq-visits') * 4)))) (@ addr 40)
      ((Word32) ('r9')) (@ addr 40)
      ((Word32) ('r6')) (@ addr 40)
      ((Word32) ('r7')) (@ addr 40)
      ((Word32) ('r8')) (@ addr 40)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 40)
      ((Word32) ('r11')) (@ addr 40)
      ((Word32) ('r5')) (@ addr 40)
      ((Word32) ('ret')) (@ addr 40)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 40)
      ((Bool) (ROData('mem'))) (@ addr 40)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 40)
      ((Word32) ('r14')) (@ addr 40)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 202)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 202)
      ((Word32) ('n___unsigned_long#v')) (@ addr 202)
      ((Word32) ('ipcBuffer___ptr_to_unsigned_long#v')) (@ addr 202)
      ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 202)
      ((Word32) (('loop#33#count' + ((0 - '#seq-visits') * 1)))) (@ addr 202)
      ((Word32[50]) ('GhostAssertions')) (@ addr 202)
    .. proven.
Step 13: case in (12) where the length of the sequence < 2
  Prove the number of visits to 40 is in {0 ..< 4}
    .. proven.
Step 14: 
  Prove the number of visits to 202 is in {0 ..< 4}
    .. proven.
Step 15: 
  Prove the number of visits to 185 is in {0 ..< 2}
    .. proven.
Step 16: 
  Prove the number of visits to 174 is in {0 ..< 1}
    .. proven.
Step 17: 
  Prove the number of visits to 147 is in {0 ..< 1}
    .. proven.
Step 18: 
  prove all verification conditions
    .. proven.
Step 19: case in (12) where the length of the sequence is j + 2
  Prove the number of visits to 40 is in {j + 0 ..< j + 3}
    .. proven.
Step 20: 
  Prove the number of visits to 202 is in {j + 0 ..< j + 3}
    .. proven.
Step 21: 
  Prove the number of visits to 185 is in {0 ..< 2}
    .. proven.
Step 22: 
  prove visits to 62 related to visits [2, 3, 4 ...] to 179
    with equalities
      ((Mem) ('mem')) (@ addr 62)
      = ((Mem) ('Mem')) (@ addr 179)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 62)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 62)
      ((Word32) ('r13')) (@ addr 62)
      ((Word32) ('r10')) (@ addr 62)
      ((Word32) ('r12')) (@ addr 62)
      ((Word32) ('r9')) (@ addr 62)
      ((Word32) ('r6')) (@ addr 62)
      ((Word32) ('r7')) (@ addr 62)
      ((Word32) ('r8')) (@ addr 62)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 62)
      ((Word32) ('r11')) (@ addr 62)
      ((Word32) ('r5')) (@ addr 62)
      ((Word32) ('ret')) (@ addr 62)
      ((Word32) ('r2')) (@ addr 62)
      ((Bool) (ROData('mem'))) (@ addr 62)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 62)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 179)
      ((Word32) ('tcb_src___ptr_to_struct_tcb_C#v')) (@ addr 179)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 179)
      ((Word32) ('n___unsigned_long#v')) (@ addr 179)
      ((Word32) ('ipcBuffer___ptr_to_unsigned_long#v')) (@ addr 179)
      ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 179)
      ((Word32[50]) ('GhostAssertions')) (@ addr 179)
      ((Word32) ('j___unsigned_long#v')) (@ addr 179)
    .. proven.
Step 23: case in (22) where the length of the sequence < 2
  Prove the number of visits to 62 is in {0 ..< 3}
    .. proven.
Step 24: 
  Prove the number of visits to 179 is in {0 ..< 4}
    .. proven.
Step 25: 
  prove all verification conditions
    .. proven.
Step 26: case in (22) where the length of the sequence is k + 2
  Prove the number of visits to 62 is in {k + 0 ..< k + 3}
    .. proven.
Step 27: 
  Prove the number of visits to 179 is in {k + 0 ..< k + 3}
    .. proven.
Step 28: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C)), time taken: 532.87s
Testing Function pair Pairing (memzero (ASM) <= Kernel_C.memzero (C))
  (function pairing 233 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [4, 25]
  (in problem)
Now doing proof search in 4 init case in problem.
Now doing proof search in 4 loop case in problem.
ProofNode ('Split', ((4, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967292)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (25, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Num', Type ('Word', 32), val = 4)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'p___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (4, ('Number', (0, 3))), (ProofNode ('Restr', (25, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (4, ('Offset', (0, 3))), (ProofNode ('Restr', (25, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 4 related to visits to 25
    with equalities
      ((Mem) ('mem')) (@ addr 4)
      = ((Mem) ('Mem')) (@ addr 25)
    and with invariants
      ((Word32) ('r7')) (@ addr 4)
      ((Word32) ('r4')) (@ addr 4)
      ((Word32) ('r8')) (@ addr 4)
      ((Word32) ('r14')) (@ addr 4)
      ((Word32) ('r3')) (@ addr 4)
      ((Word32) ('r5')) (@ addr 4)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 4)))) (@ addr 4)
      ((Word32) ('r9')) (@ addr 4)
      ((Word32) ('ret')) (@ addr 4)
      ((Word32) ('r11')) (@ addr 4)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4294967292)))) (@ addr 4)
      ((Word32) ('r13')) (@ addr 4)
      ((Word32) ('r10')) (@ addr 4)
      ((Bool) (ROData('mem'))) (@ addr 4)
      ((Word32) ('r6')) (@ addr 4)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 4)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 25)
      ((Word32) (('n___unsigned_long#v' - ((0 - '#seq-visits') * WordCast(4))))) (@ addr 25)
      ((Word32[50]) ('GhostAssertions')) (@ addr 25)
      ((Word32) (('p___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 4)))) (@ addr 25)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 4 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 25 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 4 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 25 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (memzero (ASM) <= Kernel_C.memzero (C)), time taken: 10.94s
Testing Function pair Pairing (invokeTCB_Resume (ASM) <= Kernel_C.invokeTCB_Resume (C))
  (function pairing 234 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeTCB_Resume (ASM) <= Kernel_C.invokeTCB_Resume (C)), time taken: 0.16s
Testing Function pair Pairing (restart (ASM) <= Kernel_C.restart (C))
  (function pairing 235 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (restart (ASM) <= Kernel_C.restart (C)), time taken: 1.40s
Testing Function pair Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C))
  (function pairing 236 of 284)
Skipping Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C)), underspecified C
Testing Function pair Pairing (doIPCTransfer (ASM) <= Kernel_C.doIPCTransfer (C))
  (function pairing 237 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doIPCTransfer (ASM) <= Kernel_C.doIPCTransfer (C)), time taken: 19.02s
Testing Function pair Pairing (loadHWASID (ASM) <= Kernel_C.loadHWASID (C))
  (function pairing 238 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (loadHWASID (ASM) <= Kernel_C.loadHWASID (C)), time taken: 0.17s
Testing Function pair Pairing (tcbEPDequeue (ASM) <= Kernel_C.tcbEPDequeue (C))
  (function pairing 239 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (tcbEPDequeue (ASM) <= Kernel_C.tcbEPDequeue (C)), time taken: 0.28s
Testing Function pair Pairing (sendIPC (ASM) <= Kernel_C.sendIPC (C))
  (function pairing 240 of 284)
 .. built problem, finding proof
Decided to case split at (5, 'ASM')
  (in problem)
Now doing proof search in true case (5 visited) in problem.
Now doing proof search in false case (5 not visited) in problem.
ProofNode ('CaseSplit', (5, 'ASM'), (ProofNode ('Restr', (5, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (5, ('Number', (0, 1))), (ProofNode ('Restr', (229, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 5 is visited
Step 2: case in (1) where 5 is visited
  Prove the number of visits to 5 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 5 is not visited
  Prove the number of visits to 5 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 229 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (sendIPC (ASM) <= Kernel_C.sendIPC (C)), time taken: 21.82s
Testing Function pair Pairing (setPriority (ASM) <= Kernel_C.setPriority (C))
  (function pairing 241 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setPriority (ASM) <= Kernel_C.setPriority (C)), time taken: 0.89s
Testing Function pair Pairing (deleteCallerCap (ASM) <= Kernel_C.deleteCallerCap (C))
  (function pairing 242 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (deleteCallerCap (ASM) <= Kernel_C.deleteCallerCap (C)), time taken: 0.17s
Testing Function pair Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))
  (function pairing 243 of 284)
Aborting Problem (Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))): underspecified asm_instruction'.word_0xeef00a10__\nmov_%0,_r0________\n
Result ProblemAbort for pair Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C)), time taken: 0.00s
Testing Function pair Pairing (reserve_region (ASM) <= Kernel_C.reserve_region (C))
  (function pairing 244 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [27, 221]
  (in problem)
Now doing proof search in 27 init case in problem.
Discovered a loop relation for split points [38, 196]
  (in 27 init case in problem)
Now doing proof search in 38 init case in 27 init case in problem.
Now doing proof search in 38 loop case in 27 init case in problem.
Now doing proof search in 27 loop case in problem.
Discovered a loop relation for split points [38, 196]
  (in 27 loop case in problem)
Now doing proof search in 38 init case in 27 loop case in problem.
Now doing proof search in 38 loop case in 27 loop case in problem.
ProofNode ('Split', ((27, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 8)])]), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (221, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.end_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.start_C'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#12#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (27, ('Number', (0, 3))), (ProofNode ('Restr', (221, ('Number', (0, 4))), (ProofNode ('Split', ((38, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967288)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967295)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (196, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.start_C'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'j___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (38, ('Number', (0, 3))), (ProofNode ('Restr', (196, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (38, ('Offset', (0, 3))), (ProofNode ('Restr', (196, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (27, ('Offset', (0, 3))), (ProofNode ('Restr', (221, ('Offset', (0, 3))), (ProofNode ('Split', ((38, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967288)])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4294967295)])]), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (196, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'reg___struct_p_region_C#v.start_C'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#23#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'j___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (38, ('Number', (0, 3))), (ProofNode ('Restr', (196, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (38, ('Offset', (0, 3))), (ProofNode ('Restr', (196, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),))))
 .. proof found.
Step 1: 
  prove visits to 27 related to visits [2, 3, 4 ...] to 221
    with equalities
    and with invariants
      ((Word32) ('r7')) (@ addr 27)
      ((Word32) ('r4')) (@ addr 27)
      ((Word32) ('r8')) (@ addr 27)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 8)))) (@ addr 27)
      ((Word32) ('r12')) (@ addr 27)
      ((Word32) ('r9')) (@ addr 27)
      ((Word32) ('ret')) (@ addr 27)
      ((Word32) ('r11')) (@ addr 27)
      ((Word32) ('r13')) (@ addr 27)
      ((Word32) ('r10')) (@ addr 27)
      ((Mem) ('mem')) (@ addr 27)
      ((Word32) ('r14')) (@ addr 27)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 1)))) (@ addr 27)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 27)
      ((Word32) ('reg___struct_p_region_C#v.end_C')) (@ addr 221)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 221)
      ((Word32) ('reg___struct_p_region_C#v.start_C')) (@ addr 221)
      ((Mem) ('Mem')) (@ addr 221)
      ((Word32[50]) ('GhostAssertions')) (@ addr 221)
      ((Word32) (('loop#12#count' + ((0 - '#seq-visits') * 1)))) (@ addr 221)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 27 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 221 is in {0 ..< 4}
    .. proven.
Step 4: 
  prove visits to 38 related to visits to 196
    with equalities
      ((Mem) ('mem')) (@ addr 38)
      = ((Mem) ('Mem')) (@ addr 196)
    and with invariants
      ((Word32) ('r4')) (@ addr 38)
      ((Word32) ('r13')) (@ addr 38)
      ((Word32) ('r10')) (@ addr 38)
      ((Word32) ('r12')) (@ addr 38)
      ((Word32) ('r9')) (@ addr 38)
      ((Word32) ('r6')) (@ addr 38)
      ((Word32) ('r7')) (@ addr 38)
      ((Word32) ('r8')) (@ addr 38)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4294967288)))) (@ addr 38)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 4294967295)))) (@ addr 38)
      ((Word32) ('r11')) (@ addr 38)
      ((Word32) ('ret')) (@ addr 38)
      ((Word32) ('r2')) (@ addr 38)
      ((Bool) (ROData('mem'))) (@ addr 38)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 38)
      ((Word32) ('reg___struct_p_region_C#v.end_C')) (@ addr 196)
      ((Word32) ('i___unsigned_long#v')) (@ addr 196)
      ((Word32) ('reg___struct_p_region_C#v.start_C')) (@ addr 196)
      ((Word32[50]) ('GhostAssertions')) (@ addr 196)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 196)
      ((Word32) (('j___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 196)
    .. proven.
Step 5: case in (4) where the length of the sequence < 2
  Prove the number of visits to 38 is in {0 ..< 3}
    .. proven.
Step 6: 
  Prove the number of visits to 196 is in {0 ..< 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Step 8: case in (4) where the length of the sequence is j + 2
  Prove the number of visits to 38 is in {j + 0 ..< j + 3}
    .. proven.
Step 9: 
  Prove the number of visits to 196 is in {j + 0 ..< j + 3}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 27 is in {i + 0 ..< i + 3}
    .. proven.
Step 12: 
  Prove the number of visits to 221 is in {i + 0 ..< i + 3}
    .. proven.
Step 13: 
  prove visits to 38 related to visits to 196
    with equalities
      ((Mem) ('mem')) (@ addr 38)
      = ((Mem) ('Mem')) (@ addr 196)
    and with invariants
      ((Word32) ('r4')) (@ addr 38)
      ((Word32) ('r13')) (@ addr 38)
      ((Word32) ('r10')) (@ addr 38)
      ((Word32) ('r12')) (@ addr 38)
      ((Word32) ('r9')) (@ addr 38)
      ((Word32) ('r6')) (@ addr 38)
      ((Word32) ('r7')) (@ addr 38)
      ((Word32) ('r8')) (@ addr 38)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4294967288)))) (@ addr 38)
      ((Word32) (('r14' + ((0 - '#seq-visits') * 4294967295)))) (@ addr 38)
      ((Word32) ('r11')) (@ addr 38)
      ((Word32) ('ret')) (@ addr 38)
      ((Word32) ('r2')) (@ addr 38)
      ((Bool) (ROData('mem'))) (@ addr 38)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 38)
      ((Word32) ('reg___struct_p_region_C#v.end_C')) (@ addr 196)
      ((Word32) ('i___unsigned_long#v')) (@ addr 196)
      ((Word32) ('reg___struct_p_region_C#v.start_C')) (@ addr 196)
      ((Word32[50]) ('GhostAssertions')) (@ addr 196)
      ((Word32) (('loop#23#count' + ((0 - '#seq-visits') * 1)))) (@ addr 196)
      ((Word32) (('j___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 196)
    .. proven.
Step 14: case in (13) where the length of the sequence < 2
  Prove the number of visits to 38 is in {0 ..< 3}
    .. proven.
Step 15: 
  Prove the number of visits to 196 is in {0 ..< 3}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where the length of the sequence is k + 2
  Prove the number of visits to 38 is in {k + 0 ..< k + 3}
    .. proven.
Step 18: 
  Prove the number of visits to 196 is in {k + 0 ..< k + 3}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (reserve_region (ASM) <= Kernel_C.reserve_region (C)), time taken: 1458.70s
Testing Function pair Pairing (decodeSetSpace (ASM) <= Kernel_C.decodeSetSpace (C))
  (function pairing 245 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeSetSpace (ASM) <= Kernel_C.decodeSetSpace (C)), time taken: 1039.78s
Testing Function pair Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C))
  (function pairing 246 of 284)
Aborting Problem (Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C))), complex loop
Result ProblemAbort for pair Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C)), time taken: 13.45s
Testing Function pair Pairing (lookupSourceSlot (ASM) <= Kernel_C.lookupSourceSlot (C))
  (function pairing 247 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupSourceSlot (ASM) <= Kernel_C.lookupSourceSlot (C)), time taken: 1.00s
Testing Function pair Pairing (lockTLBEntry (ASM) <= Kernel_C.lockTLBEntry (C))
  (function pairing 248 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lockTLBEntry (ASM) <= Kernel_C.lockTLBEntry (C)), time taken: 0.19s
Testing Function pair Pairing (arch_clean_invalidate_caches (ASM) <= Kernel_C.arch_clean_invalidate_caches (C))
  (function pairing 249 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [4, 96]
  (in problem)
Now doing proof search in 4 init case in problem.
Discovered that points [126 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [88 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [113 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [43 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [52 (loop head)] can be bounded
  (in 4 init case in problem)
Discovered that points [62 (loop head)] can be bounded
  (in 4 init case in problem)
Now doing proof search in 4 loop case in problem.
Discovered that points [126 (loop head)] can be bounded
  (in 4 loop case in problem)
Discovered that points [88 (loop head)] can be bounded
  (in 4 loop case in problem)
Discovered that points [113 (loop head)] can be bounded
  (in 4 loop case in problem)
Discovered that points [43 (loop head)] can be bounded
  (in 4 loop case in problem)
Discovered that points [52 (loop head)] can be bounded
  (in 4 loop case in problem)
Discovered that points [62 (loop head)] can be bounded
  (in 4 loop case in problem)
ProofNode ('Split', ((4, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (96, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#12#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [], 2, 1), (ProofNode ('Restr', (4, ('Number', (0, 1))), (ProofNode ('Restr', (96, ('Number', (0, 1))), (ProofNode ('Restr', (126, ('Number', (0, 1))), (ProofNode ('Restr', (88, ('Number', (0, 1))), (ProofNode ('Restr', (113, ('Number', (0, 1))), (ProofNode ('Restr', (43, ('Number', (0, 1))), (ProofNode ('Restr', (52, ('Number', (0, 1))), (ProofNode ('Restr', (62, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)), ProofNode ('Restr', (4, ('Offset', (0, 1))), (ProofNode ('Restr', (96, ('Offset', (0, 1))), (ProofNode ('Restr', (126, ('Number', (0, 1))), (ProofNode ('Restr', (88, ('Number', (0, 1))), (ProofNode ('Restr', (113, ('Number', (0, 1))), (ProofNode ('Restr', (43, ('Number', (0, 1))), (ProofNode ('Restr', (52, ('Number', (0, 1))), (ProofNode ('Restr', (62, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),))))
 .. proof found.
Step 1: 
  prove visits to 4 related to visits to 96
    with equalities
    and with invariants
      ((Word32) ('r21')) (@ addr 4)
      ((Word32) ('r4')) (@ addr 4)
      ((Word32) ('r27')) (@ addr 4)
      ((Word32) ('r17')) (@ addr 4)
      ((Word32) ('r0')) (@ addr 4)
      ((Word32) ('r11')) (@ addr 4)
      ((Word32) ('r23')) (@ addr 4)
      ((Word32) ('r13')) (@ addr 4)
      ((Word32) ('r10')) (@ addr 4)
      ((Word32) ('r28')) (@ addr 4)
      ((Word32) ('r19')) (@ addr 4)
      ((Word32) ('r16')) (@ addr 4)
      ((Word64) ('clock')) (@ addr 4)
      ((Word32) ('r12')) (@ addr 4)
      ((Word32) ('r9')) (@ addr 4)
      ((Word32) ('r6')) (@ addr 4)
      ((Word32) ('r7')) (@ addr 4)
      ((Word32) ('r31')) (@ addr 4)
      ((Word32) ('r25')) (@ addr 4)
      ((Word32) ('r24')) (@ addr 4)
      ((Word32) ('r8')) (@ addr 4)
      ((Word32) ('r29')) (@ addr 4)
      ((Word32) ('r18')) (@ addr 4)
      ((Word32) ('r20')) (@ addr 4)
      ((Word32) ('r30')) (@ addr 4)
      ((Word32) ('r14')) (@ addr 4)
      ((Word32) ('r15')) (@ addr 4)
      ((Word32) ('mode')) (@ addr 4)
      ((Word32) ('r5')) (@ addr 4)
      ((Word32) ('ret')) (@ addr 4)
      ((Word32) ('r26')) (@ addr 4)
      ((Word32) ('r1')) (@ addr 4)
      ((Word32) ('r2')) (@ addr 4)
      ((Mem) ('mem')) (@ addr 4)
      ((Word32) ('r22')) (@ addr 4)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 4)
      ((Word32) (('loop#12#count' + ((0 - '#seq-visits') * 1)))) (@ addr 96)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 4 is in {0 ..< 1}
    .. proven.
Step 3: 
  Prove the number of visits to 96 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 126 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 88 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 113 is in {0 ..< 1}
    .. proven.
Step 7: 
  Prove the number of visits to 43 is in {0 ..< 1}
    .. proven.
Step 8: 
  Prove the number of visits to 52 is in {0 ..< 1}
    .. proven.
Step 9: 
  Prove the number of visits to 62 is in {0 ..< 1}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 4 is in {i + 0 ..< i + 1}
    .. proven.
Step 12: 
  Prove the number of visits to 96 is in {i + 0 ..< i + 1}
    .. proven.
Step 13: 
  Prove the number of visits to 126 is in {0 ..< 1}
    .. proven.
Step 14: 
  Prove the number of visits to 88 is in {0 ..< 1}
    .. proven.
Step 15: 
  Prove the number of visits to 113 is in {0 ..< 1}
    .. proven.
Step 16: 
  Prove the number of visits to 43 is in {0 ..< 1}
    .. proven.
Step 17: 
  Prove the number of visits to 52 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 62 is in {0 ..< 1}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (arch_clean_invalidate_caches (ASM) <= Kernel_C.arch_clean_invalidate_caches (C)), time taken: 9.02s
Testing Function pair Pairing (invalidateCacheRange_I (ASM) <= Kernel_C.invalidateCacheRange_I (C))
  (function pairing 250 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [4, 31]
  (in problem)
Now doing proof search in 4 init case in problem.
Now doing proof search in 4 loop case in problem.
ProofNode ('Split', ((4, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r21'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r27'), Expr ('Var', Type ('Word', 32), name = 'r17'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r23'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r28'), Expr ('Var', Type ('Word', 32), name = 'r19'), Expr ('Var', Type ('Word', 32), name = 'r16'), Expr ('Var', Type ('Word', 64), name = 'clock'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r31'), Expr ('Var', Type ('Word', 32), name = 'r25'), Expr ('Var', Type ('Word', 32), name = 'r24'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r29'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 32)])]), Expr ('Var', Type ('Word', 32), name = 'r18'), Expr ('Var', Type ('Word', 32), name = 'r20'), Expr ('Var', Type ('Word', 32), name = 'r30'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r15'), Expr ('Var', Type ('Word', 32), name = 'mode'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r26'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r22'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r0')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r0')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r1')])]), Expr ('Var', Type ('Builtin', 'Bool'), name = 'c'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'n'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'v'), Expr ('Var', Type ('Builtin', 'Bool'), name = 'z')]), (31, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'end___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#2#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'start___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pstart___unsigned_long#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (4, ('Number', (0, 3))), (ProofNode ('Restr', (31, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (4, ('Offset', (0, 3))), (ProofNode ('Restr', (31, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 4 related to visits to 31
    with equalities
      ((Mem) ('mem')) (@ addr 4)
      = ((Mem) ('Mem')) (@ addr 31)
    and with invariants
      ((Word32) ('r21')) (@ addr 4)
      ((Word32) ('r4')) (@ addr 4)
      ((Word32) ('r27')) (@ addr 4)
      ((Word32) ('r17')) (@ addr 4)
      ((Word32) (('r0' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('r23')) (@ addr 4)
      ((Word32) ('r13')) (@ addr 4)
      ((Word32) ('r10')) (@ addr 4)
      ((Word32) ('r28')) (@ addr 4)
      ((Word32) ('r19')) (@ addr 4)
      ((Word32) ('r16')) (@ addr 4)
      ((Word64) ('clock')) (@ addr 4)
      ((Word32) ('r12')) (@ addr 4)
      ((Word32) ('r9')) (@ addr 4)
      ((Word32) ('r6')) (@ addr 4)
      ((Word32) ('r7')) (@ addr 4)
      ((Word32) ('r31')) (@ addr 4)
      ((Word32) ('r25')) (@ addr 4)
      ((Word32) ('r24')) (@ addr 4)
      ((Word32) ('r8')) (@ addr 4)
      ((Word32) ('r29')) (@ addr 4)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 32)))) (@ addr 4)
      ((Word32) ('r18')) (@ addr 4)
      ((Word32) ('r20')) (@ addr 4)
      ((Word32) ('r30')) (@ addr 4)
      ((Word32) ('r14')) (@ addr 4)
      ((Word32) ('r15')) (@ addr 4)
      ((Word32) ('mode')) (@ addr 4)
      ((Word32) ('r11')) (@ addr 4)
      ((Word32) ('r5')) (@ addr 4)
      ((Word32) ('ret')) (@ addr 4)
      ((Word32) ('r26')) (@ addr 4)
      ((Word32) ('r1')) (@ addr 4)
      ((Word32) ('r2')) (@ addr 4)
      ((Bool) (ROData('mem'))) (@ addr 4)
      ((Word32) ('r22')) (@ addr 4)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r1')), ((Word32) ('r0')))))) (@ addr 4)
      ((Bool) (Equals(LessEquals(((Word32) (('r0' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r0'))), Less(((Word32) ('r0')), ((Word32) ('r1')))))) (@ addr 4)
      ((Bool) ('c')) (@ addr 4)
      ((Bool) ('n')) (@ addr 4)
      ((Bool) ('v')) (@ addr 4)
      ((Bool) ('z')) (@ addr 4)
      ((Word32) ('end___unsigned_long#v')) (@ addr 31)
      ((Word32) (('index___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 31)
      ((Word32) (('loop#2#count' + ((0 - '#seq-visits') * 1)))) (@ addr 31)
      ((Word32) ('start___unsigned_long#v')) (@ addr 31)
      ((Word32) ('pstart___unsigned_long#v')) (@ addr 31)
      ((Word32[50]) ('GhostAssertions')) (@ addr 31)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 4 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 31 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 4 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 31 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invalidateCacheRange_I (ASM) <= Kernel_C.invalidateCacheRange_I (C)), time taken: 27.58s
Testing Function pair Pairing (setMCPriority (ASM) <= Kernel_C.setMCPriority (C))
  (function pairing 251 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setMCPriority (ASM) <= Kernel_C.setMCPriority (C)), time taken: 0.14s
Testing Function pair Pairing (performInvocation_Notification (ASM) <= Kernel_C.performInvocation_Notification (C))
  (function pairing 252 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (performInvocation_Notification (ASM) <= Kernel_C.performInvocation_Notification (C)), time taken: 0.16s
Testing Function pair Pairing (Arch_maskCapRights (ASM) <= Kernel_C.Arch_maskCapRights (C))
  (function pairing 253 of 284)
 .. built problem, finding proof
Decided to case split at (10, 'ASM')
  (in problem)
Now doing proof search in true case (10 visited) in problem.
Now doing proof search in false case (10 not visited) in problem.
ProofNode ('CaseSplit', (10, 'ASM'), (ProofNode ('Restr', (10, ('Number', (1, 2))), (ProofNode ('Restr', (88, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (10, ('Number', (0, 1))), (ProofNode ('Restr', (88, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 10 is visited
Step 2: case in (1) where 10 is visited
  Prove the number of visits to 10 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 88 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 10 is not visited
  Prove the number of visits to 10 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 88 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_maskCapRights (ASM) <= Kernel_C.Arch_maskCapRights (C)), time taken: 3.53s
Testing Function pair Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C))
  (function pairing 254 of 284)
 .. built problem, finding proof
Decided to case split at (14, 'ASM')
  (in problem)
Now doing proof search in true case (14 visited) in problem.
Now doing proof search in false case (14 not visited) in problem.
Decided to case split at (52, 'ASM')
  (in false case (14 not visited) in problem)
Now doing proof search in true case (52 visited) in false case (14 not visited) in problem.
Now doing proof search in false case (52 not visited) in false case (14 not visited) in problem.
Decided to case split at (15, 'ASM')
  (in false case (52 not visited) in false case (14 not visited) in problem)
Now doing proof search in true case (15 visited) in false case (52 not visited) in false case (14 not visited) in problem.
Now doing proof search in false case (15 not visited) in false case (52 not visited) in false case (14 not visited) in problem.
ProofNode ('CaseSplit', (14, 'ASM'), (ProofNode ('Restr', (14, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (14, ('Number', (0, 1))), (ProofNode ('Restr', (176, ('Number', (0, 1))), (ProofNode ('CaseSplit', (52, 'ASM'), (ProofNode ('Restr', (52, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (52, ('Number', (0, 1))), (ProofNode ('CaseSplit', (15, 'ASM'), (ProofNode ('Restr', (15, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (15, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)))),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 14 is visited
Step 2: case in (1) where 14 is visited
  Prove the number of visits to 14 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 14 is not visited
  Prove the number of visits to 14 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 176 is in {0 ..< 1}
    .. proven.
Step 6: 
  case split on whether 52 is visited
Step 7: case in (6) where 52 is visited
  Prove the number of visits to 52 is in {1 ..< 2}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Step 9: case in (6) where 52 is not visited
  Prove the number of visits to 52 is in {0 ..< 1}
    .. proven.
Step 10: 
  case split on whether 15 is visited
Step 11: case in (10) where 15 is visited
  Prove the number of visits to 15 is in {1 ..< 2}
    .. proven.
Step 12: 
  prove all verification conditions
    .. proven.
Step 13: case in (10) where 15 is not visited
  Prove the number of visits to 15 is in {0 ..< 1}
    .. proven.
Step 14: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C)), time taken: 29.23s
Testing Function pair Pairing (create_idle_thread (ASM) <= Kernel_C.create_idle_thread (C))
  (function pairing 255 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_idle_thread (ASM) <= Kernel_C.create_idle_thread (C)), time taken: 0.19s
Testing Function pair Pairing (capSwapForDelete (ASM) <= Kernel_C.capSwapForDelete (C))
  (function pairing 256 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (capSwapForDelete (ASM) <= Kernel_C.capSwapForDelete (C)), time taken: 0.85s
Testing Function pair Pairing (Arch_finaliseCap (ASM) <= Kernel_C.Arch_finaliseCap (C))
  (function pairing 257 of 284)
 .. built problem, finding proof
Decided to case split at (29, 'ASM')
  (in problem)
Now doing proof search in true case (29 visited) in problem.
Now doing proof search in false case (29 not visited) in problem.
Decided to case split at (23, 'ASM')
  (in false case (29 not visited) in problem)
Now doing proof search in true case (23 visited) in false case (29 not visited) in problem.
Now doing proof search in false case (23 not visited) in false case (29 not visited) in problem.
Decided to case split at (11, 'ASM')
  (in false case (23 not visited) in false case (29 not visited) in problem)
Now doing proof search in true case (11 visited) in false case (23 not visited) in false case (29 not visited) in problem.
Now doing proof search in false case (11 not visited) in false case (23 not visited) in false case (29 not visited) in problem.
ProofNode ('CaseSplit', (29, 'ASM'), (ProofNode ('Restr', (29, ('Number', (1, 2))), (ProofNode ('Restr', (170, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (29, ('Number', (0, 1))), (ProofNode ('Restr', (170, ('Number', (0, 1))), (ProofNode ('CaseSplit', (23, 'ASM'), (ProofNode ('Restr', (23, ('Number', (1, 2))), (ProofNode ('Restr', (146, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (23, ('Number', (0, 1))), (ProofNode ('Restr', (146, ('Number', (0, 1))), (ProofNode ('CaseSplit', (11, 'ASM'), (ProofNode ('Restr', (11, ('Number', (1, 2))), (ProofNode ('Restr', (180, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (11, ('Number', (0, 1))), (ProofNode ('Restr', (180, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 29 is visited
Step 2: case in (1) where 29 is visited
  Prove the number of visits to 29 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 170 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 29 is not visited
  Prove the number of visits to 29 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 170 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 23 is visited
Step 8: case in (7) where 23 is visited
  Prove the number of visits to 23 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 146 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 23 is not visited
  Prove the number of visits to 23 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 146 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 11 is visited
Step 14: case in (13) where 11 is visited
  Prove the number of visits to 11 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 180 is in {1 ..< 2}
    .. proven.
Step 16: 
  prove all verification conditions
    .. proven.
Step 17: case in (13) where 11 is not visited
  Prove the number of visits to 11 is in {0 ..< 1}
    .. proven.
Step 18: 
  Prove the number of visits to 180 is in {0 ..< 1}
    .. proven.
Step 19: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (Arch_finaliseCap (ASM) <= Kernel_C.Arch_finaliseCap (C)), time taken: 21.13s
Testing Function pair Pairing (lookupCap (ASM) <= Kernel_C.lookupCap (C))
  (function pairing 258 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupCap (ASM) <= Kernel_C.lookupCap (C)), time taken: 0.44s
Testing Function pair Pairing (create_unmapped_it_frame_cap (ASM) <= Kernel_C.create_unmapped_it_frame_cap (C))
  (function pairing 259 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_unmapped_it_frame_cap (ASM) <= Kernel_C.create_unmapped_it_frame_cap (C)), time taken: 0.20s
Testing Function pair Pairing (performInvocation_Reply (ASM) <= Kernel_C.performInvocation_Reply (C))
  (function pairing 260 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (performInvocation_Reply (ASM) <= Kernel_C.performInvocation_Reply (C)), time taken: 0.16s
Testing Function pair Pairing (char_to_long (ASM) <= Kernel_C.char_to_long (C))
  (function pairing 261 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (char_to_long (ASM) <= Kernel_C.char_to_long (C)), time taken: 0.15s
Testing Function pair Pairing (scheduleChooseNewThread (ASM) <= Kernel_C.scheduleChooseNewThread (C))
  (function pairing 262 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (scheduleChooseNewThread (ASM) <= Kernel_C.scheduleChooseNewThread (C)), time taken: 0.51s
Testing Function pair Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C))
  (function pairing 263 of 284)
 .. built problem, finding proof
Decided to case split at (107, 'ASM')
  (in problem)
Now doing proof search in true case (107 visited) in problem.
Now doing proof search in false case (107 not visited) in problem.
Decided to case split at (108, 'ASM')
  (in false case (107 not visited) in problem)
Now doing proof search in true case (108 visited) in false case (107 not visited) in problem.
Now doing proof search in false case (108 not visited) in false case (107 not visited) in problem.
Decided to case split at (192, 'ASM')
  (in false case (108 not visited) in false case (107 not visited) in problem)
Now doing proof search in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem.
Discovered that points [1306 (loop head)] can be bounded
  (in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem)
Discovered a loop relation for split points [422, 3265]
  (in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem)
Now doing proof search in 422 init case in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem.
Discovered that points [3202 (loop head)] can be bounded
  (in 422 init case in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem)
Discovered a loop relation for split points [476, 3382]
  (in 422 init case in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem)
Now doing proof search in 476 init case in 422 init case in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem.
Discovered that points [3307 (loop head)] can be bounded
  (in 476 init case in 422 init case in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem)
Discovered that points [2021 (loop head)] can be bounded
  (in 476 init case in 422 init case in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem)
Discovered that points [1497 (loop head)] can be bounded
  (in 476 init case in 422 init case in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem)
Now doing proof search in 476 loop case in 422 init case in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem.
Discovered a loop relation for split points [454, 3312]
  (in 476 loop case in 422 init case in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem)
Now doing proof search in 454 init case in 476 loop case in 422 init case in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem.
Now doing proof search in 454 loop case in 476 loop case in 422 init case in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem.
Now doing proof search in 422 loop case in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem.
Discovered a loop relation for split points [777, 3207]
  (in 422 loop case in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem)
Now doing proof search in 777 init case in 422 loop case in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem.
Now doing proof search in 777 loop case in 422 loop case in true case (192 visited) in false case (108 not visited) in false case (107 not visited) in problem.
Now doing proof search in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem.
Decided to case split at (195, 'ASM')
  (in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Now doing proof search in true case (195 visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem.
Now doing proof search in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem.
Decided to case split at (22, 'ASM')
  (in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Now doing proof search in true case (22 visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem.
Discovered a loop relation for split points [1932, 2158]
  (in true case (22 visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Now doing proof search in 1932 init case in true case (22 visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem.
Now doing proof search in 1932 loop case in true case (22 visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem.
Now doing proof search in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem.
Decided to case split at (38, 'ASM')
  (in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Now doing proof search in true case (38 visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem.
Discovered a loop relation for split points [673, 2099]
  (in true case (38 visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Now doing proof search in 673 init case in true case (38 visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem.
Now doing proof search in 673 loop case in true case (38 visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem.
Now doing proof search in false case (38 not visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem.
Discovered that points [2159 (loop head)] can be bounded
  (in false case (38 not visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Discovered that points [3252 (loop head)] can be bounded
  (in false case (38 not visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Discovered that points [3202 (loop head)] can be bounded
  (in false case (38 not visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Discovered that points [2100 (loop head)] can be bounded
  (in false case (38 not visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Discovered that points [3359 (loop head)] can be bounded
  (in false case (38 not visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Discovered that points [3307 (loop head)] can be bounded
  (in false case (38 not visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Discovered that points [1927 (loop head)] can be bounded
  (in false case (38 not visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Discovered that points [1808 (loop head)] can be bounded
  (in false case (38 not visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Discovered that points [1306 (loop head)] can be bounded
  (in false case (38 not visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Discovered that points [1440 (loop head)] can be bounded
  (in false case (38 not visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Discovered that points [1538 (loop head)] can be bounded
  (in false case (38 not visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Discovered that points [1497 (loop head)] can be bounded
  (in false case (38 not visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
Discovered that points [2021 (loop head)] can be bounded
  (in false case (38 not visited) in false case (22 not visited) in false case (195 not visited) in false case (192 not visited) in false case (108 not visited) in false case (107 not visited) in problem)
ProofNode ('CaseSplit', (107, 'ASM'), (ProofNode ('Restr', (107, ('Number', (1, 2))), (ProofNode ('Restr', (2452, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (107, ('Number', (0, 1))), (ProofNode ('Restr', (2452, ('Number', (0, 1))), (ProofNode ('CaseSplit', (108, 'ASM'), (ProofNode ('Restr', (108, ('Number', (1, 2))), (ProofNode ('Restr', (2441, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (108, ('Number', (0, 1))), (ProofNode ('Restr', (2441, ('Number', (0, 1))), (ProofNode ('CaseSplit', (192, 'ASM'), (ProofNode ('Restr', (192, ('Number', (1, 2))), (ProofNode ('Restr', (2579, ('Number', (1, 2))), (ProofNode ('Restr', (1306, ('Number', (0, 2))), (ProofNode ('Split', ((422, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (3265, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'cap___struct_cap_C#v.words_C.1.3'), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v.3'), Expr ('Var', Type ('Word', 32), name = 'cte___ptr_to_struct_cte_C#v.3'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.8'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'ret___struct_create_mappings_pte_return_C#v.pte_C.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#33#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'ret___struct_create_mappings_pte_return_C#v.pte_entries_C.length_C'), Expr ('Var', Type ('Word', 32), name = 'cap___struct_cap_C#v.words_C.0.3'), Expr ('Var', Type ('Word', 32), name = 'ret___struct_create_mappings_pte_return_C#v.pte_entries_C.base_C'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.23'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.23')]), [], 2, 1), (ProofNode ('Restr', (422, ('Number', (0, 3))), (ProofNode ('Restr', (3265, ('Number', (0, 3))), (ProofNode ('Restr', (3202, ('Number', (0, 3))), (ProofNode ('Split', ((476, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (3382, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'cap___struct_cap_C#v.words_C.1.3'), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v.3'), Expr ('Var', Type ('Word', 32), name = 'ret___struct_create_mappings_pde_return_C#v.pde_C.words_C.0'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#35#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.25'), Expr ('Var', Type ('Word', 32), name = 'ret___struct_create_mappings_pde_return_C#v.pde_entries_C.length_C'), Expr ('Var', Type ('Word', 32), name = 'cte___ptr_to_struct_cte_C#v.3'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.10'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.25'), Expr ('Var', Type ('Word', 32), name = 'ret___struct_create_mappings_pde_return_C#v.pde_entries_C.base_C'), Expr ('Var', Type ('Word', 32), name = 'cap___struct_cap_C#v.words_C.0.3')]), [], 2, 1), (ProofNode ('Restr', (476, ('Number', (0, 3))), (ProofNode ('Restr', (3382, ('Number', (0, 3))), (ProofNode ('Restr', (3307, ('Number', (0, 3))), (ProofNode ('Restr', (2021, ('Number', (0, 2))), (ProofNode ('Restr', (1497, ('Number', (0, 2))), (ProofNode ('Leaf', None, ()),)),)),)),)),)), ProofNode ('Restr', (476, ('Offset', (0, 3))), (ProofNode ('Restr', (3382, ('Offset', (0, 3))), (ProofNode ('Split', ((454, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (3312, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'pde_entries___struct_pde_range_C#v.length_C'), Expr ('Var', Type ('Word', 32), name = 'pde_entries___struct_pde_range_C#v.base_C'), Expr ('Var', Type ('Word', 32), name = 'pde___struct_pde_C#v.words_C.0.3'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.9'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v.7'), Expr ('Var', Type ('Word', 32), name = 'tlbflush_required___unsigned_long#v.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#11#count.1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.24')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.24'))], 2, 1), (ProofNode ('Restr', (454, ('Number', (0, 1))), (ProofNode ('Restr', (3312, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (454, ('Offset', (0, 3))), (ProofNode ('Restr', (3312, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)),)), ProofNode ('Restr', (422, ('Offset', (0, 3))), (ProofNode ('Restr', (3265, ('Offset', (0, 3))), (ProofNode ('Split', ((777, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r12'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (3207, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'pte___struct_pte_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'pte_entries___struct_pte_range_C#v.length_C'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions.22'), Expr ('Var', Type ('Word', 32), name = 'pte_entries___struct_pte_range_C#v.base_C'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#11#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v.6'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v.7'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'tlbflush_required___unsigned_long#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem.22'))], 2, 1), (ProofNode ('Restr', (777, ('Number', (0, 1))), (ProofNode ('Restr', (3207, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (777, ('Offset', (0, 3))), (ProofNode ('Restr', (3207, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)))),)),)),)), ProofNode ('Restr', (192, ('Number', (0, 1))), (ProofNode ('Restr', (2579, ('Number', (0, 1))), (ProofNode ('CaseSplit', (195, 'ASM'), (ProofNode ('Restr', (195, ('Number', (1, 2))), (ProofNode ('Restr', (2584, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (195, ('Number', (0, 1))), (ProofNode ('Restr', (2584, ('Number', (0, 1))), (ProofNode ('CaseSplit', (22, 'ASM'), (ProofNode ('Restr', (22, ('Number', (1, 2))), (ProofNode ('Restr', (2230, ('Number', (1, 2))), (ProofNode ('Split', ((1932, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Num', Type ('Word', 32), val = 1024)])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Num', Type ('Word', 32), val = 1024), Expr ('Var', Type ('Word', 32), name = 'r3')])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r3')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = 'r5')])])])]), (2158, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'pool___ptr_to_struct_asid_pool_C#v'), Expr ('Var', Type ('Word', 32), name = 'pdCapSlot___ptr_to_struct_cte_C#v'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#116#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'asid___unsigned_long#v')]), [], 2, 1), (ProofNode ('Restr', (1932, ('Number', (0, 3))), (ProofNode ('Restr', (2158, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (1932, ('Offset', (0, 3))), (ProofNode ('Restr', (2158, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (22, ('Number', (0, 1))), (ProofNode ('Restr', (2230, ('Number', (0, 1))), (ProofNode ('CaseSplit', (38, 'ASM'), (ProofNode ('Restr', (38, ('Number', (1, 2))), (ProofNode ('Restr', (2146, ('Number', (1, 2))), (ProofNode ('Split', ((673, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 4)])]), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r4')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Num', Type ('Word', 32), val = 128)])]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Equals', vals = [Expr ('Op', Type ('Builtin', 'Bool'), name = 'LessEquals', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r4')]), Expr ('Op', Type ('Builtin', 'Bool'), name = 'Less', vals = [Expr ('Num', Type ('Word', 32), val = 128), Expr ('Var', Type ('Word', 32), name = 'r4')])])]), (2099, (1, 1), [Expr ('Var', Type ('Word', 32), name = 'index___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'untyped___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'depth___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'root___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'untyped___struct_cap_C#v.words_C.1'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#57#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'root___struct_cap_C#v.words_C.1'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Var', Type ('Word', 32), name = 'parentSlot___ptr_to_struct_cte_C#v')]), [], 2, 1), (ProofNode ('Restr', (673, ('Number', (0, 3))), (ProofNode ('Restr', (2099, ('Number', (0, 4))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (673, ('Offset', (0, 3))), (ProofNode ('Restr', (2099, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),)))),)),)), ProofNode ('Restr', (38, ('Number', (0, 1))), (ProofNode ('Restr', (2146, ('Number', (0, 1))), (ProofNode ('Restr', (2159, ('Number', (0, 1))), (ProofNode ('Restr', (3252, ('Number', (0, 1))), (ProofNode ('Restr', (3202, ('Number', (0, 1))), (ProofNode ('Restr', (2100, ('Number', (0, 1))), (ProofNode ('Restr', (3359, ('Number', (0, 1))), (ProofNode ('Restr', (3307, ('Number', (0, 1))), (ProofNode ('Restr', (1927, ('Number', (0, 1))), (ProofNode ('Restr', (1808, ('Number', (0, 1))), (ProofNode ('Restr', (1306, ('Number', (0, 1))), (ProofNode ('Restr', (1440, ('Number', (0, 1))), (ProofNode ('Restr', (1538, ('Number', (0, 1))), (ProofNode ('Restr', (1497, ('Number', (0, 1))), (ProofNode ('Restr', (2021, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)),)),)),)),)),)),)),)),)),)),)),)),)),)))),)),)))),)),)))),)),)))),)),)))),)),))))
 .. proof found.
Step 1: 
  case split on whether 107 is visited
Step 2: case in (1) where 107 is visited
  Prove the number of visits to 107 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 2452 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 107 is not visited
  Prove the number of visits to 107 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 2452 is in {0 ..< 1}
    .. proven.
Step 7: 
  case split on whether 108 is visited
Step 8: case in (7) where 108 is visited
  Prove the number of visits to 108 is in {1 ..< 2}
    .. proven.
Step 9: 
  Prove the number of visits to 2441 is in {1 ..< 2}
    .. proven.
Step 10: 
  prove all verification conditions
    .. proven.
Step 11: case in (7) where 108 is not visited
  Prove the number of visits to 108 is in {0 ..< 1}
    .. proven.
Step 12: 
  Prove the number of visits to 2441 is in {0 ..< 1}
    .. proven.
Step 13: 
  case split on whether 192 is visited
Step 14: case in (13) where 192 is visited
  Prove the number of visits to 192 is in {1 ..< 2}
    .. proven.
Step 15: 
  Prove the number of visits to 2579 is in {1 ..< 2}
    .. proven.
Step 16: 
  Prove the number of visits to 1306 is in {0 ..< 2}
    .. proven.
Step 17: 
  prove visits to 422 related to visits to 3265
    with equalities
    and with invariants
      ((Word32) ('r4')) (@ addr 422)
      ((Word32) ('r13')) (@ addr 422)
      ((Word32) ('r6')) (@ addr 422)
      ((Word32) ('r8')) (@ addr 422)
      ((Word32) ('r3')) (@ addr 422)
      ((Word32) ('r5')) (@ addr 422)
      ((Word32) ('r7')) (@ addr 422)
      ((Word32) ('ret')) (@ addr 422)
      ((Word32) ('r1')) (@ addr 422)
      ((Word32) (('r2' + ((0 - '#seq-visits') * 4)))) (@ addr 422)
      ((Mem) ('mem')) (@ addr 422)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 422)
      ((Word32) ('cap___struct_cap_C#v.words_C.1.3')) (@ addr 3265)
      ((Word32) ('asid___unsigned_long#v.3')) (@ addr 3265)
      ((Word32) ('cte___ptr_to_struct_cte_C#v.3')) (@ addr 3265)
      ((Word32) (('i___unsigned_long#v.8' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 3265)
      ((Word32) ('ret___struct_create_mappings_pte_return_C#v.pte_C.words_C.0')) (@ addr 3265)
      ((Word32) (('loop#33#count' + ((0 - '#seq-visits') * 1)))) (@ addr 3265)
      ((Word32) ('ret___struct_create_mappings_pte_return_C#v.pte_entries_C.length_C')) (@ addr 3265)
      ((Word32) ('cap___struct_cap_C#v.words_C.0.3')) (@ addr 3265)
      ((Word32) ('ret___struct_create_mappings_pte_return_C#v.pte_entries_C.base_C')) (@ addr 3265)
      ((Word32[50]) ('GhostAssertions.23')) (@ addr 3265)
      ((Mem) ('Mem.23')) (@ addr 3265)
    .. proven.
Step 18: case in (17) where the length of the sequence < 2
  Prove the number of visits to 422 is in {0 ..< 3}
    .. proven.
Step 19: 
  Prove the number of visits to 3265 is in {0 ..< 3}
    .. proven.
Step 20: 
  Prove the number of visits to 3202 is in {0 ..< 3}
    .. proven.
Step 21: 
  prove visits to 476 related to visits to 3382
    with equalities
    and with invariants
      ((Word32) ('r4')) (@ addr 476)
      ((Word32) ('r13')) (@ addr 476)
      ((Word32) ('r9')) (@ addr 476)
      ((Word32) ('r6')) (@ addr 476)
      ((Word32) ('r7')) (@ addr 476)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 476)
      ((Word32) ('r5')) (@ addr 476)
      ((Word32) ('ret')) (@ addr 476)
      ((Word32) ('r1')) (@ addr 476)
      ((Mem) ('mem')) (@ addr 476)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 476)
      ((Word32) ('cap___struct_cap_C#v.words_C.1.3')) (@ addr 3382)
      ((Word32) ('asid___unsigned_long#v.3')) (@ addr 3382)
      ((Word32) ('ret___struct_create_mappings_pde_return_C#v.pde_C.words_C.0')) (@ addr 3382)
      ((Word32) (('loop#35#count' + ((0 - '#seq-visits') * 1)))) (@ addr 3382)
      ((Mem) ('Mem.25')) (@ addr 3382)
      ((Word32) ('ret___struct_create_mappings_pde_return_C#v.pde_entries_C.length_C')) (@ addr 3382)
      ((Word32) ('cte___ptr_to_struct_cte_C#v.3')) (@ addr 3382)
      ((Word32) (('i___unsigned_long#v.10' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 3382)
      ((Word32[50]) ('GhostAssertions.25')) (@ addr 3382)
      ((Word32) ('ret___struct_create_mappings_pde_return_C#v.pde_entries_C.base_C')) (@ addr 3382)
      ((Word32) ('cap___struct_cap_C#v.words_C.0.3')) (@ addr 3382)
    .. proven.
Step 22: case in (21) where the length of the sequence < 2
  Prove the number of visits to 476 is in {0 ..< 3}
    .. proven.
Step 23: 
  Prove the number of visits to 3382 is in {0 ..< 3}
    .. proven.
Step 24: 
  Prove the number of visits to 3307 is in {0 ..< 3}
    .. proven.
Step 25: 
  Prove the number of visits to 2021 is in {0 ..< 2}
    .. proven.
Step 26: 
  Prove the number of visits to 1497 is in {0 ..< 2}
    .. proven.
Step 27: 
  prove all verification conditions
    .. proven.
Step 28: case in (21) where the length of the sequence is j + 2
  Prove the number of visits to 476 is in {j + 0 ..< j + 3}
    .. proven.
Step 29: 
  Prove the number of visits to 3382 is in {j + 0 ..< j + 3}
    .. proven.
Step 30: 
  prove visits to 454 related to visits to 3312
    with equalities
      ((Mem) ('mem')) (@ addr 454)
      = ((Mem) ('Mem.24')) (@ addr 3312)
    and with invariants
      ((Word32) ('r4')) (@ addr 454)
      ((Word32) ('r0')) (@ addr 454)
      ((Word32) ('r13')) (@ addr 454)
      ((Word32) ('r12')) (@ addr 454)
      ((Word32) ('r6')) (@ addr 454)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 454)
      ((Word32) ('ret')) (@ addr 454)
      ((Word32) ('r1')) (@ addr 454)
      ((Word32) ('r2')) (@ addr 454)
      ((Bool) (ROData('mem'))) (@ addr 454)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 454)
      ((Word32) ('pde_entries___struct_pde_range_C#v.length_C')) (@ addr 3312)
      ((Word32) ('pde_entries___struct_pde_range_C#v.base_C')) (@ addr 3312)
      ((Word32) ('pde___struct_pde_C#v.words_C.0.3')) (@ addr 3312)
      ((Word32) (('i___unsigned_long#v.9' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 3312)
      ((Word32) ('asid___unsigned_long#v.7')) (@ addr 3312)
      ((Word32) ('tlbflush_required___unsigned_long#v.1')) (@ addr 3312)
      ((Word32) (('loop#11#count.1' + ((0 - '#seq-visits') * 1)))) (@ addr 3312)
      ((Word32[50]) ('GhostAssertions.24')) (@ addr 3312)
    .. proven.
Step 31: case in (30) where the length of the sequence < 2
  Prove the number of visits to 454 is in {0 ..< 1}
    .. proven.
Step 32: 
  Prove the number of visits to 3312 is in {0 ..< 1}
    .. proven.
Step 33: 
  prove all verification conditions
    .. proven.
Step 34: case in (30) where the length of the sequence is k + 2
  Prove the number of visits to 454 is in {k + 0 ..< k + 3}
    .. proven.
Step 35: 
  Prove the number of visits to 3312 is in {k + 0 ..< k + 3}
    .. proven.
Step 36: 
  prove all verification conditions
    .. proven.
Step 37: case in (17) where the length of the sequence is i + 2
  Prove the number of visits to 422 is in {i + 0 ..< i + 3}
    .. proven.
Step 38: 
  Prove the number of visits to 3265 is in {i + 0 ..< i + 3}
    .. proven.
Step 39: 
  prove visits to 777 related to visits to 3207
    with equalities
      ((Mem) ('mem')) (@ addr 777)
      = ((Mem) ('Mem.22')) (@ addr 3207)
    and with invariants
      ((Word32) ('r4')) (@ addr 777)
      ((Word32) ('r0')) (@ addr 777)
      ((Word32) ('r13')) (@ addr 777)
      ((Word32) ('r12')) (@ addr 777)
      ((Word32) ('r6')) (@ addr 777)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 777)
      ((Word32) ('ret')) (@ addr 777)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 4)))) (@ addr 777)
      ((Word32) ('r2')) (@ addr 777)
      ((Bool) (ROData('mem'))) (@ addr 777)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 777)
      ((Word32) ('pte___struct_pte_C#v.words_C.0')) (@ addr 3207)
      ((Word32) ('pte_entries___struct_pte_range_C#v.length_C')) (@ addr 3207)
      ((Word32[50]) ('GhostAssertions.22')) (@ addr 3207)
      ((Word32) ('pte_entries___struct_pte_range_C#v.base_C')) (@ addr 3207)
      ((Word32) (('loop#11#count' + ((0 - '#seq-visits') * 1)))) (@ addr 3207)
      ((Word32) ('asid___unsigned_long#v.6')) (@ addr 3207)
      ((Word32) (('i___unsigned_long#v.7' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 3207)
      ((Word32) ('tlbflush_required___unsigned_long#v')) (@ addr 3207)
    .. proven.
Step 40: case in (39) where the length of the sequence < 2
  Prove the number of visits to 777 is in {0 ..< 1}
    .. proven.
Step 41: 
  Prove the number of visits to 3207 is in {0 ..< 1}
    .. proven.
Step 42: 
  prove all verification conditions
    .. proven.
Step 43: case in (39) where the length of the sequence is a + 2
  Prove the number of visits to 777 is in {a + 0 ..< a + 3}
    .. proven.
Step 44: 
  Prove the number of visits to 3207 is in {a + 0 ..< a + 3}
    .. proven.
Step 45: 
  prove all verification conditions
    .. proven.
Step 46: case in (13) where 192 is not visited
  Prove the number of visits to 192 is in {0 ..< 1}
    .. proven.
Step 47: 
  Prove the number of visits to 2579 is in {0 ..< 1}
    .. proven.
Step 48: 
  case split on whether 195 is visited
Step 49: case in (48) where 195 is visited
  Prove the number of visits to 195 is in {1 ..< 2}
    .. proven.
Step 50: 
  Prove the number of visits to 2584 is in {1 ..< 2}
    .. proven.
Step 51: 
  prove all verification conditions
    .. proven.
Step 52: case in (48) where 195 is not visited
  Prove the number of visits to 195 is in {0 ..< 1}
    .. proven.
Step 53: 
  Prove the number of visits to 2584 is in {0 ..< 1}
    .. proven.
Step 54: 
  case split on whether 22 is visited
Step 55: case in (54) where 22 is visited
  Prove the number of visits to 22 is in {1 ..< 2}
    .. proven.
Step 56: 
  Prove the number of visits to 2230 is in {1 ..< 2}
    .. proven.
Step 57: 
  prove visits to 1932 related to visits to 2158
    with equalities
    and with invariants
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 1932)
      ((Word32) ('r5')) (@ addr 1932)
      ((Mem) ('mem')) (@ addr 1932)
      ((Word32) ('ret')) (@ addr 1932)
      ((Word32) ('r13')) (@ addr 1932)
      ((Word32) ('r6')) (@ addr 1932)
      ((Word32) ('r7')) (@ addr 1932)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 1932)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r3')), ((Word32) (1024)))))) (@ addr 1932)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) (1024)), ((Word32) ('r3')))))) (@ addr 1932)
      ((Bool) (Equals(LessEquals(((Word32) (('r3' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r3'))), Less(((Word32) ('r3')), ((Word32) ((0 - 'r5'))))))) (@ addr 1932)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 2158)
      ((Word32) ('pool___ptr_to_struct_asid_pool_C#v')) (@ addr 2158)
      ((Word32) ('pdCapSlot___ptr_to_struct_cte_C#v')) (@ addr 2158)
      ((Mem) ('Mem')) (@ addr 2158)
      ((Word32[50]) ('GhostAssertions')) (@ addr 2158)
      ((Word32) (('loop#116#count' + ((0 - '#seq-visits') * 1)))) (@ addr 2158)
      ((Word32) ('asid___unsigned_long#v')) (@ addr 2158)
    .. proven.
Step 58: case in (57) where the length of the sequence < 2
  Prove the number of visits to 1932 is in {0 ..< 3}
    .. proven.
Step 59: 
  Prove the number of visits to 2158 is in {0 ..< 3}
    .. proven.
Step 60: 
  prove all verification conditions
    .. proven.
Step 61: case in (57) where the length of the sequence is b + 2
  Prove the number of visits to 1932 is in {b + 0 ..< b + 3}
    .. proven.
Step 62: 
  Prove the number of visits to 2158 is in {b + 0 ..< b + 3}
    .. proven.
Step 63: 
  prove all verification conditions
    .. proven.
Step 64: case in (54) where 22 is not visited
  Prove the number of visits to 22 is in {0 ..< 1}
    .. proven.
Step 65: 
  Prove the number of visits to 2230 is in {0 ..< 1}
    .. proven.
Step 66: 
  case split on whether 38 is visited
Step 67: case in (66) where 38 is visited
  Prove the number of visits to 38 is in {1 ..< 2}
    .. proven.
Step 68: 
  Prove the number of visits to 2146 is in {1 ..< 2}
    .. proven.
Step 69: 
  prove visits to 673 related to visits [2, 3, 4 ...] to 2099
    with equalities
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1)))) (@ addr 673)
      ((Word32) ('r13')) (@ addr 673)
      ((Word32) ('r9')) (@ addr 673)
      ((Word32) ('r7')) (@ addr 673)
      ((Word32) ('r8')) (@ addr 673)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 4)))) (@ addr 673)
      ((Word32) ('r14')) (@ addr 673)
      ((Word32) ('r5')) (@ addr 673)
      ((Word32) ('ret')) (@ addr 673)
      ((Mem) ('mem')) (@ addr 673)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 673)
      ((Bool) (Equals(LessEquals(((Word32) (('r4' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r4'))), Less(((Word32) ('r4')), ((Word32) (128)))))) (@ addr 673)
      ((Bool) (Equals(LessEquals(((Word32) (('r4' + ((0 - '#seq-visits') * 1)))), ((Word32) ('r4'))), Less(((Word32) (128)), ((Word32) ('r4')))))) (@ addr 673)
      ((Word32) ('index___unsigned_long#v')) (@ addr 2099)
      ((Word32) ('untyped___struct_cap_C#v.words_C.0')) (@ addr 2099)
      ((Word32) ('depth___unsigned_long#v')) (@ addr 2099)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 2099)
      ((Word32) ('root___struct_cap_C#v.words_C.0')) (@ addr 2099)
      ((Word32) ('untyped___struct_cap_C#v.words_C.1')) (@ addr 2099)
      ((Mem) ('Mem')) (@ addr 2099)
      ((Word32) (('loop#57#count' + ((0 - '#seq-visits') * 1)))) (@ addr 2099)
      ((Word32) ('root___struct_cap_C#v.words_C.1')) (@ addr 2099)
      ((Word32[50]) ('GhostAssertions')) (@ addr 2099)
      ((Word32) ('parentSlot___ptr_to_struct_cte_C#v')) (@ addr 2099)
    .. proven.
Step 70: case in (69) where the length of the sequence < 2
  Prove the number of visits to 673 is in {0 ..< 3}
    .. proven.
Step 71: 
  Prove the number of visits to 2099 is in {0 ..< 4}
    .. proven.
Step 72: 
  prove all verification conditions
    .. proven.
Step 73: case in (69) where the length of the sequence is c + 2
  Prove the number of visits to 673 is in {c + 0 ..< c + 3}
    .. proven.
Step 74: 
  Prove the number of visits to 2099 is in {c + 0 ..< c + 3}
    .. proven.
Step 75: 
  prove all verification conditions
    .. proven.
Step 76: case in (66) where 38 is not visited
  Prove the number of visits to 38 is in {0 ..< 1}
    .. proven.
Step 77: 
  Prove the number of visits to 2146 is in {0 ..< 1}
    .. proven.
Step 78: 
  Prove the number of visits to 2159 is in {0 ..< 1}
    .. proven.
Step 79: 
  Prove the number of visits to 3252 is in {0 ..< 1}
    .. proven.
Step 80: 
  Prove the number of visits to 3202 is in {0 ..< 1}
    .. proven.
Step 81: 
  Prove the number of visits to 2100 is in {0 ..< 1}
    .. proven.
Step 82: 
  Prove the number of visits to 3359 is in {0 ..< 1}
    .. proven.
Step 83: 
  Prove the number of visits to 3307 is in {0 ..< 1}
    .. proven.
Step 84: 
  Prove the number of visits to 1927 is in {0 ..< 1}
    .. proven.
Step 85: 
  Prove the number of visits to 1808 is in {0 ..< 1}
    .. proven.
Step 86: 
  Prove the number of visits to 1306 is in {0 ..< 1}
    .. proven.
Step 87: 
  Prove the number of visits to 1440 is in {0 ..< 1}
    .. proven.
Step 88: 
  Prove the number of visits to 1538 is in {0 ..< 1}
    .. proven.
Step 89: 
  Prove the number of visits to 1497 is in {0 ..< 1}
    .. proven.
Step 90: 
  Prove the number of visits to 2021 is in {0 ..< 1}
    .. proven.
Step 91: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C)), time taken: 3510.94s
Testing Function pair Pairing (handleInterruptEntry (ASM) <= Kernel_C.handleInterruptEntry (C))
  (function pairing 264 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (handleInterruptEntry (ASM) <= Kernel_C.handleInterruptEntry (C)), time taken: 0.78s
Testing Function pair Pairing (setNextPC (ASM) <= Kernel_C.setNextPC (C))
  (function pairing 265 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (setNextPC (ASM) <= Kernel_C.setNextPC (C)), time taken: 0.35s
Testing Function pair Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C))
  (function pairing 266 of 284)
Skipping Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C)), underspecified ASM
Testing Function pair Pairing (decodeReadRegisters (ASM) <= Kernel_C.decodeReadRegisters (C))
  (function pairing 267 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeReadRegisters (ASM) <= Kernel_C.decodeReadRegisters (C)), time taken: 1.35s
Testing Function pair Pairing (cpu_iface_init (ASM) <= Kernel_C.cpu_iface_init (C))
  (function pairing 268 of 284)
 .. built problem, finding proof
Discovered that points [81 (loop head)] can be bounded
  (in problem)
Discovered a loop relation for split points [15, 69]
  (in problem)
Now doing proof search in 15 init case in problem.
Now doing proof search in 15 loop case in problem.
ProofNode ('Restr', (81, ('Number', (0, 6))), (ProofNode ('Split', ((15, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Var', Type ('Word', 32), name = 'r3')]), (69, (0, 1), [Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (15, ('Number', (0, 1))), (ProofNode ('Restr', (69, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (15, ('Offset', (0, 1))), (ProofNode ('Restr', (69, ('Offset', (0, 1))), (ProofNode ('Leaf', None, ()),)),)))),))
 .. proof found.
Step 1: 
  Prove the number of visits to 81 is in {0 ..< 6}
    .. proven.
Step 2: 
  prove visits to 15 related to visits to 69
    with equalities
      ((Mem) ('mem')) (@ addr 15)
      = ((Mem) ('Mem')) (@ addr 69)
    and with invariants
      ((Word32) ('r7')) (@ addr 15)
      ((Word32) ('r4')) (@ addr 15)
      ((Word32) ('r8')) (@ addr 15)
      ((Word32) ('r5')) (@ addr 15)
      ((Word32) ('r6')) (@ addr 15)
      ((Word32) ('r0')) (@ addr 15)
      ((Word32) ('r9')) (@ addr 15)
      ((Word32) ('ret')) (@ addr 15)
      ((Word32) ('r2')) (@ addr 15)
      ((Word32) ('r11')) (@ addr 15)
      ((Word32) ('r13')) (@ addr 15)
      ((Word32) ('r10')) (@ addr 15)
      ((Bool) (ROData('mem'))) (@ addr 15)
      ((Word32) ('r14')) (@ addr 15)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 15)
      ((Word32) ('r3')) (@ addr 15)
      ((Word32[50]) ('GhostAssertions')) (@ addr 69)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 69)
    .. proven.
Step 3: case in (2) where the length of the sequence < 2
  Prove the number of visits to 15 is in {0 ..< 1}
    .. proven.
Step 4: 
  Prove the number of visits to 69 is in {0 ..< 1}
    .. proven.
Step 5: 
  prove all verification conditions
    .. proven.
Step 6: case in (2) where the length of the sequence is i + 2
  Prove the number of visits to 15 is in {i + 0 ..< i + 1}
    .. proven.
Step 7: 
  Prove the number of visits to 69 is in {i + 0 ..< i + 1}
    .. proven.
Step 8: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cpu_iface_init (ASM) <= Kernel_C.cpu_iface_init (C)), time taken: 23.21s
Testing Function pair Pairing (invokeIRQHandler_AckIRQ (ASM) <= Kernel_C.invokeIRQHandler_AckIRQ (C))
  (function pairing 269 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (invokeIRQHandler_AckIRQ (ASM) <= Kernel_C.invokeIRQHandler_AckIRQ (C)), time taken: 0.34s
Testing Function pair Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))
  (function pairing 270 of 284)
Aborting Problem (Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))), complex loop
Result ProblemAbort for pair Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C)), time taken: 12.26s
Testing Function pair Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C))
  (function pairing 271 of 284)
 .. built problem, finding proof
Decided to case split at (3, 'ASM')
  (in problem)
Now doing proof search in true case (3 visited) in problem.
Now doing proof search in false case (3 not visited) in problem.
ProofNode ('CaseSplit', (3, 'ASM'), (ProofNode ('Restr', (3, ('Number', (1, 2))), (ProofNode ('Restr', (165, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (3, ('Number', (0, 1))), (ProofNode ('Restr', (165, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 3 is visited
Step 2: case in (1) where 3 is visited
  Prove the number of visits to 3 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 165 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 3 is not visited
  Prove the number of visits to 3 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 165 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C)), time taken: 15.75s
Testing Function pair Pairing (maskCapRights (ASM) <= Kernel_C.maskCapRights (C))
  (function pairing 272 of 284)
 .. built problem, finding proof
Decided to case split at (8, 'ASM')
  (in problem)
Now doing proof search in true case (8 visited) in problem.
Now doing proof search in false case (8 not visited) in problem.
ProofNode ('CaseSplit', (8, 'ASM'), (ProofNode ('Restr', (8, ('Number', (1, 2))), (ProofNode ('Restr', (339, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (8, ('Number', (0, 1))), (ProofNode ('Restr', (339, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 8 is visited
Step 2: case in (1) where 8 is visited
  Prove the number of visits to 8 is in {1 ..< 2}
    .. proven.
Step 3: 
  Prove the number of visits to 339 is in {1 ..< 2}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where 8 is not visited
  Prove the number of visits to 8 is in {0 ..< 1}
    .. proven.
Step 6: 
  Prove the number of visits to 339 is in {0 ..< 1}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (maskCapRights (ASM) <= Kernel_C.maskCapRights (C)), time taken: 12.52s
Testing Function pair Pairing (lookupPTSlot (ASM) <= Kernel_C.lookupPTSlot (C))
  (function pairing 273 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (lookupPTSlot (ASM) <= Kernel_C.lookupPTSlot (C)), time taken: 0.46s
Testing Function pair Pairing (create_domain_cap (ASM) <= Kernel_C.create_domain_cap (C))
  (function pairing 274 of 284)
 .. built problem, finding proof
Discovered that points [34 (loop head)] can be bounded
  (in problem)
ProofNode ('Restr', (34, ('Number', (0, 5))), (ProofNode ('Leaf', None, ()),))
 .. proof found.
Step 1: 
  Prove the number of visits to 34 is in {0 ..< 5}
    .. proven.
Step 2: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_domain_cap (ASM) <= Kernel_C.create_domain_cap (C)), time taken: 7.43s
Testing Function pair Pairing (create_it_address_space (ASM) <= Kernel_C.create_it_address_space (C))
  (function pairing 275 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [21, 151]
  (in problem)
Now doing proof search in 21 init case in problem.
Now doing proof search in 21 loop case in problem.
ProofNode ('Split', ((21, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1048576)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'ret_addr_input'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Op', Type ('Builtin', 'Mem'), name = 'MemUpdate', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 20)]), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Num', Type ('Word', 32), val = 16)]), Expr ('Num', Type ('Word', 32), val = 0)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (151, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'it_v_reg___struct_v_region_C#v.end_C'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#10#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'slot_pos_before___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'pd_cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'root_cnode_cap___struct_cap_C#v.words_C.1'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'pt_vptr___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'ShiftLeft', vals = [Expr ('Num', Type ('Word', 32), val = 1), Expr ('Op', Type ('Word', 32), name = 'WordCast', vals = [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Num', Type ('Word', 32), val = 8), Expr ('Num', Type ('Word', 32), val = 12)])])])])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (21, ('Number', (0, 3))), (ProofNode ('Restr', (151, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (21, ('Offset', (0, 3))), (ProofNode ('Restr', (151, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 21 related to visits to 151
    with equalities
      ((Mem) ('mem')) (@ addr 21)
      = ((Mem) ('Mem')) (@ addr 151)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 1048576)))) (@ addr 21)
      ((Word32) ('r13')) (@ addr 21)
      ((Word32) ('r10')) (@ addr 21)
      ((Word32) ('r9')) (@ addr 21)
      ((Word32) ('r6')) (@ addr 21)
      ((Word32) ('r7')) (@ addr 21)
      ((Word32) ('r8')) (@ addr 21)
      ((Word32) ('ret_addr_input')) (@ addr 21)
      ((Word32) ('r11')) (@ addr 21)
      ((Word32) ('r5')) (@ addr 21)
      ((Word32) ('ret')) (@ addr 21)
      ((Bool) (ROData('mem'))) (@ addr 21)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) (MemUpdate(MemUpdate('stack', ((Word32) (('r13' + 20))), ((Word32) (0))), ((Word32) (('r13' + 16))), ((Word32) (0)))))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 21)
      ((Word32) ('it_v_reg___struct_v_region_C#v.end_C')) (@ addr 151)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.0')) (@ addr 151)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.1')) (@ addr 151)
      ((Word32) (('loop#10#count' + ((0 - '#seq-visits') * 1)))) (@ addr 151)
      ((Word32) ('slot_pos_before___unsigned_long#v')) (@ addr 151)
      ((Word32) ('pd_cap___struct_cap_C#v.words_C.0')) (@ addr 151)
      ((Word32) ('root_cnode_cap___struct_cap_C#v.words_C.1')) (@ addr 151)
      ((Word32) (('pt_vptr___unsigned_long#v' + ((0 - '#seq-visits') * ShiftLeft(1, WordCast((8 + 12))))))) (@ addr 151)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 21 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 151 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 21 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 151 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (create_it_address_space (ASM) <= Kernel_C.create_it_address_space (C)), time taken: 280.47s
Testing Function pair Pairing (memcpy (ASM) <= Kernel_C.memcpy (C))
  (function pairing 276 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [4, 32]
  (in problem)
Now doing proof search in 4 init case in problem.
Now doing proof search in 4 loop case in problem.
ProofNode ('Split', ((4, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r14'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r3'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r2'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (32, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'q___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Var', Type ('Word', 32), name = 'n___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'p___ptr_to_unsigned_char#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'ptr_dst___ptr_to_void#v'), Expr ('Var', Type ('WordArray', 50, 32), name = 'GhostAssertions'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#4#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (4, ('Number', (0, 3))), (ProofNode ('Restr', (32, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (4, ('Offset', (0, 3))), (ProofNode ('Restr', (32, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 4 related to visits to 32
    with equalities
      ((Mem) ('mem')) (@ addr 4)
      = ((Mem) ('Mem')) (@ addr 32)
    and with invariants
      ((Word32) ('r7')) (@ addr 4)
      ((Word32) ('r4')) (@ addr 4)
      ((Word32) ('r8')) (@ addr 4)
      ((Word32) ('r14')) (@ addr 4)
      ((Word32) (('r3' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('r5')) (@ addr 4)
      ((Word32) ('r0')) (@ addr 4)
      ((Word32) ('r9')) (@ addr 4)
      ((Word32) ('ret')) (@ addr 4)
      ((Word32) ('r2')) (@ addr 4)
      ((Word32) ('r11')) (@ addr 4)
      ((Word32) (('r1' + ((0 - '#seq-visits') * 1)))) (@ addr 4)
      ((Word32) ('r13')) (@ addr 4)
      ((Word32) ('r10')) (@ addr 4)
      ((Bool) (ROData('mem'))) (@ addr 4)
      ((Word32) ('r6')) (@ addr 4)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 4)
      ((Word32) (('q___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 32)
      ((Word32) (('n___unsigned_long#v' - ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 32)
      ((Word32) (('p___ptr_to_unsigned_char#v' + ((0 - '#seq-visits') * 1)))) (@ addr 32)
      ((Word32) ('ptr_dst___ptr_to_void#v')) (@ addr 32)
      ((Word32[50]) ('GhostAssertions')) (@ addr 32)
      ((Word32) (('loop#4#count' + ((0 - '#seq-visits') * 1)))) (@ addr 32)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 4 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 32 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 4 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 32 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (memcpy (ASM) <= Kernel_C.memcpy (C)), time taken: 39.89s
Testing Function pair Pairing (cleanInvalidateL1Caches (ASM) <= Kernel_C.cleanInvalidateL1Caches (C))
  (function pairing 277 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cleanInvalidateL1Caches (ASM) <= Kernel_C.cleanInvalidateL1Caches (C)), time taken: 0.70s
Testing Function pair Pairing (doFlush (ASM) <= Kernel_C.doFlush (C))
  (function pairing 278 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (doFlush (ASM) <= Kernel_C.doFlush (C)), time taken: 16.33s
Testing Function pair Pairing (preemptionPoint (ASM) <= Kernel_C.preemptionPoint (C))
  (function pairing 279 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (preemptionPoint (ASM) <= Kernel_C.preemptionPoint (C)), time taken: 0.41s
Testing Function pair Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C))
  (function pairing 280 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [90, 445]
  (in problem)
Now doing proof search in 90 init case in problem.
Now doing proof search in 90 loop case in problem.
ProofNode ('Split', ((90, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 16)])]), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'r6'), Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (445, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'nodeWindow___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'cap___struct_cap_C#v.words_C.1'), Expr ('Var', Type ('Word', 32), name = 'objectSize___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'slot___ptr_to_struct_cte_C#v'), Expr ('Var', Type ('Word', 32), name = 'cap___struct_cap_C#v.words_C.0'), Expr ('Var', Type ('Word', 32), name = 'nodeOffset___unsigned_long#v'), Expr ('Var', Type ('Word', 32), name = 'userObjSize___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'i___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Op', Type ('Word', 32), name = 'WordCastSigned', vals = [Expr ('Num', Type ('Word', 32), val = 1)])])]), Expr ('Var', Type ('Word', 32), name = 'newType___unsigned_long#v'), Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#48#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])]), Expr ('Var', Type ('Word', 32), name = 'destCNode___ptr_to_struct_cte_C#v')]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem'))], 2, 1), (ProofNode ('Restr', (90, ('Number', (0, 3))), (ProofNode ('Restr', (445, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (90, ('Offset', (0, 3))), (ProofNode ('Restr', (445, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 90 related to visits to 445
    with equalities
      ((Mem) ('mem')) (@ addr 90)
      = ((Mem) ('Mem')) (@ addr 445)
    and with invariants
      ((Word32) (('r4' + ((0 - '#seq-visits') * 16)))) (@ addr 90)
      ((Word32) ('r13')) (@ addr 90)
      ((Word32) ('r10')) (@ addr 90)
      ((Word32) (('r9' + ((0 - '#seq-visits') * 1)))) (@ addr 90)
      ((Word32) ('r6')) (@ addr 90)
      ((Word32) ('r7')) (@ addr 90)
      ((Word32) ('r8')) (@ addr 90)
      ((Word32) ('r11')) (@ addr 90)
      ((Word32) ('r5')) (@ addr 90)
      ((Word32) ('ret')) (@ addr 90)
      ((Bool) (ROData('mem'))) (@ addr 90)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 90)
      ((Word32) ('nodeWindow___unsigned_long#v')) (@ addr 445)
      ((Word32) ('cap___struct_cap_C#v.words_C.1')) (@ addr 445)
      ((Word32) ('objectSize___unsigned_long#v')) (@ addr 445)
      ((Word32) ('slot___ptr_to_struct_cte_C#v')) (@ addr 445)
      ((Word32) ('cap___struct_cap_C#v.words_C.0')) (@ addr 445)
      ((Word32) ('nodeOffset___unsigned_long#v')) (@ addr 445)
      ((Word32) ('userObjSize___unsigned_long#v')) (@ addr 445)
      ((Word32) (('i___unsigned_long#v' + ((0 - '#seq-visits') * WordCastSigned(1))))) (@ addr 445)
      ((Word32) ('newType___unsigned_long#v')) (@ addr 445)
      ((Word32) (('loop#48#count' + ((0 - '#seq-visits') * 1)))) (@ addr 445)
      ((Word32) ('destCNode___ptr_to_struct_cte_C#v')) (@ addr 445)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 90 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 445 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 90 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 445 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C)), time taken: 876.75s
Testing Function pair Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C))
  (function pairing 281 of 284)
 .. built problem, finding proof
Decided to case split at (12, 'ASM')
  (in problem)
Now doing proof search in true case (12 visited) in problem.
Now doing proof search in false case (12 not visited) in problem.
ProofNode ('CaseSplit', (12, 'ASM'), (ProofNode ('Restr', (12, ('Number', (1, 2))), (ProofNode ('Leaf', None, ()),)), ProofNode ('Restr', (12, ('Number', (0, 1))), (ProofNode ('Restr', (111, ('Number', (0, 1))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  case split on whether 12 is visited
Step 2: case in (1) where 12 is visited
  Prove the number of visits to 12 is in {1 ..< 2}
    .. proven.
Step 3: 
  prove all verification conditions
    .. proven.
Step 4: case in (1) where 12 is not visited
  Prove the number of visits to 12 is in {0 ..< 1}
    .. proven.
Step 5: 
  Prove the number of visits to 111 is in {0 ..< 1}
    .. proven.
Step 6: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C)), time taken: 18.40s
Testing Function pair Pairing (completeSignal (ASM) <= Kernel_C.completeSignal (C))
  (function pairing 282 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (completeSignal (ASM) <= Kernel_C.completeSignal (C)), time taken: 2.27s
Testing Function pair Pairing (cancelAllIPC (ASM) <= Kernel_C.cancelAllIPC (C))
  (function pairing 283 of 284)
 .. built problem, finding proof
Discovered a loop relation for split points [11, 50]
  (in problem)
Now doing proof search in 11 init case in problem.
Now doing proof search in 11 loop case in problem.
ProofNode ('Split', ((11, (0, 1), [Expr ('Var', Type ('Word', 32), name = 'r7'), Expr ('Var', Type ('Word', 32), name = 'r8'), Expr ('Var', Type ('Word', 32), name = 'r11'), Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Word', 32), name = 'r9'), Expr ('Var', Type ('Word', 32), name = 'ret'), Expr ('Var', Type ('Word', 32), name = 'r1'), Expr ('Var', Type ('Word', 32), name = 'r10'), Expr ('Op', Type ('Builtin', 'Bool'), name = 'ROData', vals = [Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem')]), Expr ('Var', Type ('Word', 32), name = 'r5'), Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'EqSelectiveWrapper', vals = [Expr ('Op', Type ('Builtin', 'RelWrapper'), name = 'StackWrapper', vals = [Expr ('Var', Type ('Word', 32), name = 'r13'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'stack')]), Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Num', Type ('Word', 32), val = 0)]), Expr ('Num', Type ('Word', 32), val = 0)])]), (50, (0, 1), [Expr ('Op', Type ('Word', 32), name = 'Plus', vals = [Expr ('Var', Type ('Word', 32), name = 'loop#3#count'), Expr ('Op', Type ('Word', 32), name = 'Times', vals = [Expr ('Op', Type ('Word', 32), name = 'Minus', vals = [Expr ('Num', Type ('Word', 32), val = 0), Expr ('Var', Type ('Word', 32), name = '%i')]), Expr ('Num', Type ('Word', 32), val = 1)])])]), [(Expr ('Var', Type ('Builtin', 'Mem'), name = 'mem'), Expr ('Var', Type ('Builtin', 'Mem'), name = 'Mem')), (Expr ('Var', Type ('Word', 32), name = 'r0'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v')), (Expr ('Var', Type ('Word', 32), name = 'r4'), Expr ('Var', Type ('Word', 32), name = 'thread___ptr_to_struct_tcb_C#v'))], 2, 1), (ProofNode ('Restr', (11, ('Number', (0, 3))), (ProofNode ('Restr', (50, ('Number', (0, 3))), (ProofNode ('Leaf', None, ()),)),)), ProofNode ('Restr', (11, ('Offset', (0, 3))), (ProofNode ('Restr', (50, ('Offset', (0, 3))), (ProofNode ('Leaf', None, ()),)),))))
 .. proof found.
Step 1: 
  prove visits to 11 related to visits to 50
    with equalities
      ((Mem) ('mem')) (@ addr 11)
      = ((Mem) ('Mem')) (@ addr 50)
      ((Word32) ('r0')) (@ addr 11)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 50)
      ((Word32) ('r4')) (@ addr 11)
      = ((Word32) ('thread___ptr_to_struct_tcb_C#v')) (@ addr 50)
    and with invariants
      ((Word32) ('r7')) (@ addr 11)
      ((Word32) ('r8')) (@ addr 11)
      ((Word32) ('r11')) (@ addr 11)
      ((Word32) ('r13')) (@ addr 11)
      ((Word32) ('r9')) (@ addr 11)
      ((Word32) ('ret')) (@ addr 11)
      ((Word32) ('r1')) (@ addr 11)
      ((Word32) ('r10')) (@ addr 11)
      ((Bool) (ROData('mem'))) (@ addr 11)
      ((Word32) ('r5')) (@ addr 11)
      ((RelWrapper) (EqSelectiveWrapper(StackWrapper(((Word32) ('r13')), ((Mem) ('stack'))), ((Word32) ((0 - 0))), ((Word32) (0))))) (@ addr 11)
      ((Word32) (('loop#3#count' + ((0 - '#seq-visits') * 1)))) (@ addr 50)
    .. proven.
Step 2: case in (1) where the length of the sequence < 2
  Prove the number of visits to 11 is in {0 ..< 3}
    .. proven.
Step 3: 
  Prove the number of visits to 50 is in {0 ..< 3}
    .. proven.
Step 4: 
  prove all verification conditions
    .. proven.
Step 5: case in (1) where the length of the sequence is i + 2
  Prove the number of visits to 11 is in {i + 0 ..< i + 3}
    .. proven.
Step 6: 
  Prove the number of visits to 50 is in {i + 0 ..< i + 3}
    .. proven.
Step 7: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (cancelAllIPC (ASM) <= Kernel_C.cancelAllIPC (C)), time taken: 71.44s
Testing Function pair Pairing (maskVMRights (ASM) <= Kernel_C.maskVMRights (C))
  (function pairing 284 of 284)
 .. built problem, finding proof
ProofNode ('Leaf', None, ())
 .. proof found.
Step 1: 
  prove all verification conditions
    .. proven.
Refinement proven.
Result True for pair Pairing (maskVMRights (ASM) <= Kernel_C.maskVMRights (C)), time taken: 0.40s
Results: [('Pairing (handleUnknownSyscall (ASM) <= Kernel_C.handleUnknownSyscall (C))', 'True'), ('Pairing (replyFromKernel_error (ASM) <= Kernel_C.replyFromKernel_error (C))', 'True'), ('Pairing (map_kernel_devices (ASM) <= Kernel_C.map_kernel_devices (C))', 'True'), ('Pairing (str_to_long (ASM) <= Kernel_C.str_to_long (C))', 'True'), ('Pairing (invokeTCB_WriteRegisters (ASM) <= Kernel_C.invokeTCB_WriteRegisters (C))', 'True'), ('Pairing (invokeCNodeRevoke (ASM) <= Kernel_C.invokeCNodeRevoke (C))', 'True'), ('Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C))', 'ProofNoSplit'), ('Pairing (Arch_decodeIRQControlInvocation (ASM) <= Kernel_C.Arch_decodeIRQControlInvocation (C))', 'True'), ('Pairing (sameRegionAs (ASM) <= Kernel_C.sameRegionAs (C))', 'True'), ('Pairing (Arch_switchToIdleThread (ASM) <= Kernel_C.Arch_switchToIdleThread (C))', 'True'), ('Pairing (strncmp (ASM) <= Kernel_C.strncmp (C))', 'True'), ('Pairing (invokeTCB_CopyRegisters (ASM) <= Kernel_C.invokeTCB_CopyRegisters (C))', 'True'), ('Pairing (setupCallerCap (ASM) <= Kernel_C.setupCallerCap (C))', 'True'), ('Pairing (unbindNotification (ASM) <= Kernel_C.unbindNotification (C))', 'True'), ('Pairing (unbindMaybeNotification (ASM) <= Kernel_C.unbindMaybeNotification (C))', 'True'), ('Pairing (isFinalCapability (ASM) <= Kernel_C.isFinalCapability (C))', 'True'), ('Pairing (unmapPage (ASM) <= Kernel_C.unmapPage (C))', 'True'), ('Pairing (pageTableMapped (ASM) <= Kernel_C.pageTableMapped (C))', 'True'), ('Pairing (c_handle_interrupt (ASM) <= Kernel_C.c_handle_interrupt (C))', 'True'), ('Pairing (invokeTCB_Suspend (ASM) <= Kernel_C.invokeTCB_Suspend (C))', 'True'), ('Pairing (doNormalTransfer (ASM) <= Kernel_C.doNormalTransfer (C))', 'True'), ('Pairing (unmapPageTable (ASM) <= Kernel_C.unmapPageTable (C))', 'True'), ('Pairing (deleteASID (ASM) <= Kernel_C.deleteASID (C))', 'True'), ('Pairing (configureIdleThread (ASM) <= Kernel_C.configureIdleThread (C))', 'True'), ('Pairing (isValidVTableRoot (ASM) <= Kernel_C.isValidVTableRoot (C))', 'True'), ('Pairing (loadCapTransfer (ASM) <= Kernel_C.loadCapTransfer (C))', 'True'), ('Pairing (create_ipcbuf_frame_cap (ASM) <= Kernel_C.create_ipcbuf_frame_cap (C))', 'True'), ('Pairing (chooseThread (ASM) <= Kernel_C.chooseThread (C))', 'True'), ('Pairing (handleFault (ASM) <= Kernel_C.handleFault (C))', 'True'), ('Pairing (getHWASID (ASM) <= Kernel_C.getHWASID (C))', 'True'), ('Pairing (handleInterrupt (ASM) <= Kernel_C.handleInterrupt (C))', 'True'), ('Pairing (decodeSetIPCBuffer (ASM) <= Kernel_C.decodeSetIPCBuffer (C))', 'True'), ('Pairing (resolveAddressBits (ASM) <= Kernel_C.resolveAddressBits (C))', 'True'), ('Pairing (getRestartPC (ASM) <= Kernel_C.getRestartPC (C))', 'True'), ('Pairing (setExtraBadge (ASM) <= Kernel_C.setExtraBadge (C))', 'True'), ('Pairing (cteMove (ASM) <= Kernel_C.cteMove (C))', 'True'), ('Pairing (flushTable (ASM) <= Kernel_C.flushTable (C))', 'True'), ('Pairing (strlcpy (ASM) <= Kernel_C.strlcpy (C))', 'True'), ('Pairing (sendFaultIPC (ASM) <= Kernel_C.sendFaultIPC (C))', 'True'), ('Pairing (receiveSignal (ASM) <= Kernel_C.receiveSignal (C))', 'True'), ('Pairing (tcb_queue_remove (ASM) <= Kernel_C.tcb_queue_remove (C))', 'True'), ('Pairing (ensureNoChildren (ASM) <= Kernel_C.ensureNoChildren (C))', 'True'), ('Pairing (decodeWriteRegisters (ASM) <= Kernel_C.decodeWriteRegisters (C))', 'True'), ('Pairing (setIRQTrigger (ASM) <= Kernel_C.setIRQTrigger (C))', 'True'), ('Pairing (Arch_sameObjectAs (ASM) <= Kernel_C.Arch_sameObjectAs (C))', 'True'), ('Pairing (c_handle_instruction_fault (ASM) <= Kernel_C.c_handle_instruction_fault (C))', 'ProblemAbort'), ('Pairing (isCapRevocable (ASM) <= Kernel_C.isCapRevocable (C))', 'True'), ('Pairing (initIRQController (ASM) <= Kernel_C.initIRQController (C))', 'True'), ('Pairing (invalidateASIDEntry (ASM) <= Kernel_C.invalidateASIDEntry (C))', 'True'), ("Pairing (l_impl'wfi (ASM) <= r_impl'wfi (C))", 'None'), ('Pairing (lookupSlot (ASM) <= Kernel_C.lookupSlot (C))', 'True'), ('Pairing (copyGlobalMappings (ASM) <= Kernel_C.copyGlobalMappings (C))', 'True'), ('Pairing (create_mapped_it_frame_cap (ASM) <= Kernel_C.create_mapped_it_frame_cap (C))', 'True'), ('Pairing (activate_kernel_vspace (ASM) <= Kernel_C.activate_kernel_vspace (C))', 'True'), ('Pairing (decodeBindNotification (ASM) <= Kernel_C.decodeBindNotification (C))', 'True'), ('Pairing (getObjectSize (ASM) <= Kernel_C.getObjectSize (C))', 'True'), ('Pairing (handleFaultReply (ASM) <= Kernel_C.handleFaultReply (C))', 'True'), ('Pairing (halt (ASM) <= Kernel_C.halt (C))', 'None'), ('Pairing (setupReplyMaster (ASM) <= Kernel_C.setupReplyMaster (C))', 'True'), ('Pairing (suspend (ASM) <= Kernel_C.suspend (C))', 'True'), ('Pairing (setDomain (ASM) <= Kernel_C.setDomain (C))', 'True'), ('Pairing (bi_finalise (ASM) <= Kernel_C.bi_finalise (C))', 'True'), ('Pairing (isMDBParentOf (ASM) <= Kernel_C.isMDBParentOf (C))', 'True'), ('Pairing (decodeCNodeInvocation (ASM) <= Kernel_C.decodeCNodeInvocation (C))', 'True'), ('Pairing (bindNotification (ASM) <= Kernel_C.bindNotification (C))', 'True'), ('Pairing (invokeTCB_ThreadControl (ASM) <= Kernel_C.invokeTCB_ThreadControl (C))', 'True'), ('Pairing (checkValidIPCBuffer (ASM) <= Kernel_C.checkValidIPCBuffer (C))', 'True'), ('Pairing (provide_cap (ASM) <= Kernel_C.provide_cap (C))', 'True'), ('Pairing (memset (ASM) <= Kernel_C.memset (C))', 'True'), ('Pairing (idle_thread (ASM) <= Kernel_C.idle_thread (C))', 'True'), ('Pairing (deletedIRQHandler (ASM) <= Kernel_C.deletedIRQHandler (C))', 'True'), ('Pairing (setVMRootForFlush (ASM) <= Kernel_C.setVMRootForFlush (C))', 'True'), ('Pairing (calculate_extra_bi_size_bits (ASM) <= Kernel_C.calculate_extra_bi_size_bits (C))', 'True'), ('Pairing (handleVMFaultEvent (ASM) <= Kernel_C.handleVMFaultEvent (C))', 'True'), ('Pairing (invokeCNodeDelete (ASM) <= Kernel_C.invokeCNodeDelete (C))', 'True'), ('Pairing (setIRQState (ASM) <= Kernel_C.setIRQState (C))', 'True'), ('Pairing (sendSignal (ASM) <= Kernel_C.sendSignal (C))', 'True'), ('Pairing (receiveIPC (ASM) <= Kernel_C.receiveIPC (C))', 'True'), ('Pairing (Arch_performTransfer (ASM) <= Kernel_C.Arch_performTransfer (C))', 'True'), ('Pairing (invokeCNodeRotate (ASM) <= Kernel_C.invokeCNodeRotate (C))', 'True'), ('Pairing (createObject (ASM) <= Kernel_C.createObject (C))', 'True'), ('Pairing (get_p_reg_kernel_img_boot (ASM) <= Kernel_C.get_p_reg_kernel_img_boot (C))', 'True'), ('Pairing (c_handle_fastpath_reply_recv (ASM) <= Kernel_C.c_handle_fastpath_reply_recv (C))', 'None'), ('Pairing (switchToIdleThread (ASM) <= Kernel_C.switchToIdleThread (C))', 'True'), ('Pairing (timerTick (ASM) <= Kernel_C.timerTick (C))', 'True'), ('Pairing (doFaultTransfer (ASM) <= Kernel_C.doFaultTransfer (C))', 'True'), ('Pairing (rescheduleRequired (ASM) <= Kernel_C.rescheduleRequired (C))', 'True'), ('Pairing (handleSyscall (ASM) <= Kernel_C.handleSyscall (C))', 'True'), ('Pairing (handleReply (ASM) <= Kernel_C.handleReply (C))', 'True'), ('Pairing (maybe_alloc_extra_bi (ASM) <= Kernel_C.maybe_alloc_extra_bi (C))', 'True'), ('Pairing (slotCapLongRunningDelete (ASM) <= Kernel_C.slotCapLongRunningDelete (C))', 'True'), ('Pairing (setMRs_fault (ASM) <= Kernel_C.setMRs_fault (C))', 'True'), ('Pairing (slowpath (ASM) <= Kernel_C.slowpath (C))', 'ProblemAbort'), ('Pairing (create_root_cnode (ASM) <= Kernel_C.create_root_cnode (C))', 'True'), ('Pairing (decodeInvocation (ASM) <= Kernel_C.decodeInvocation (C))', 'True'), ('Pairing (getReceiveSlots (ASM) <= Kernel_C.getReceiveSlots (C))', 'True'), ('Pairing (invokeUntyped_Retype (ASM) <= Kernel_C.invokeUntyped_Retype (C))', 'True'), ('Pairing (cancelSignal (ASM) <= Kernel_C.cancelSignal (C))', 'True'), ('Pairing (cteSwap (ASM) <= Kernel_C.cteSwap (C))', 'True'), ('Pairing (create_bi_frame_cap (ASM) <= Kernel_C.create_bi_frame_cap (C))', 'True'), ('Pairing (deletingIRQHandler (ASM) <= Kernel_C.deletingIRQHandler (C))', 'True'), ('Pairing (tcbSchedEnqueue (ASM) <= Kernel_C.tcbSchedEnqueue (C))', 'True'), ('Pairing (deleteASIDPool (ASM) <= Kernel_C.deleteASIDPool (C))', 'True'), ('Pairing (tcbEPAppend (ASM) <= Kernel_C.tcbEPAppend (C))', 'True'), ('Pairing (invokeCNodeSaveCaller (ASM) <= Kernel_C.invokeCNodeSaveCaller (C))', 'True'), ('Pairing (lookupIPCBuffer (ASM) <= Kernel_C.lookupIPCBuffer (C))', 'True'), ('Pairing (Arch_activateIdleThread (ASM) <= Kernel_C.Arch_activateIdleThread (C))', 'True'), ('Pairing (insertNewCap (ASM) <= Kernel_C.insertNewCap (C))', 'True'), ('Pairing (decodeCopyRegisters (ASM) <= Kernel_C.decodeCopyRegisters (C))', 'True'), ('Pairing (invokeTCB_NotificationControl (ASM) <= Kernel_C.invokeTCB_NotificationControl (C))', 'True'), ('Pairing (invalidateTLBByASID (ASM) <= Kernel_C.invalidateTLBByASID (C))', 'True'), ('Pairing (create_frames_of_region (ASM) <= Kernel_C.create_frames_of_region (C))', 'True'), ('Pairing (create_it_asid_pool (ASM) <= Kernel_C.create_it_asid_pool (C))', 'True'), ('Pairing (lookupSlotForCNodeOp (ASM) <= Kernel_C.lookupSlotForCNodeOp (C))', 'True'), ('Pairing (makeUserPDE (ASM) <= Kernel_C.makeUserPDE (C))', 'True'), ('Pairing (cleanCaches_PoU (ASM) <= Kernel_C.cleanCaches_PoU (C))', 'True'), ('Pairing (cleanCacheRange_PoU (ASM) <= Kernel_C.cleanCacheRange_PoU (C))', 'True'), ('Pairing (isIRQActive (ASM) <= Kernel_C.isIRQActive (C))', 'True'), ('Pairing (Arch_postModifyRegisters (ASM) <= Kernel_C.Arch_postModifyRegisters (C))', 'True'), ('Pairing (handleDoubleFault (ASM) <= Kernel_C.handleDoubleFault (C))', 'True'), ('Pairing (c_handle_data_fault (ASM) <= Kernel_C.c_handle_data_fault (C))', 'ProblemAbort'), ('Pairing (map_kernel_frame (ASM) <= Kernel_C.map_kernel_frame (C))', 'True'), ('Pairing (handleUserLevelFault (ASM) <= Kernel_C.handleUserLevelFault (C))', 'True'), ('Pairing (Arch_isFrameType (ASM) <= Kernel_C.Arch_isFrameType (C))', 'True'), ('Pairing (cancelBadgedSends (ASM) <= Kernel_C.cancelBadgedSends (C))', 'True'), ('Pairing (cteRevoke (ASM) <= Kernel_C.cteRevoke (C))', 'True'), ("Pairing (l_impl'dmb (ASM) <= r_impl'dmb (C))", 'None'), ('Pairing (invokeIRQHandler_ClearIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_ClearIRQHandler (C))', 'True'), ('Pairing (initL2Cache (ASM) <= Kernel_C.initL2Cache (C))', 'True'), ('Pairing (write_slot (ASM) <= Kernel_C.write_slot (C))', 'True'), ('Pairing (Arch_handleFaultReply (ASM) <= Kernel_C.Arch_handleFaultReply (C))', 'True'), ('Pairing (cancelAllSignals (ASM) <= Kernel_C.cancelAllSignals (C))', 'True'), ('Pairing (isIOSpaceFrameCap (ASM) <= Kernel_C.isIOSpaceFrameCap (C))', 'True'), ('Pairing (invalidateCacheRange_RAM (ASM) <= Kernel_C.invalidateCacheRange_RAM (C))', 'True'), ('Pairing (finaliseCap (ASM) <= Kernel_C.finaliseCap (C))', 'True'), ('Pairing (invokeCNodeInsert (ASM) <= Kernel_C.invokeCNodeInsert (C))', 'True'), ('Pairing (findFreeHWASID (ASM) <= Kernel_C.findFreeHWASID (C))', 'True'), ('Pairing (findPDForASID (ASM) <= Kernel_C.findPDForASID (C))', 'True'), ('Pairing (lookupExtraCaps (ASM) <= Kernel_C.lookupExtraCaps (C))', 'True'), ('Pairing (decodeTCBInvocation (ASM) <= Kernel_C.decodeTCBInvocation (C))', 'True'), ('Pairing (cteDelete (ASM) <= Kernel_C.cteDelete (C))', 'True'), ('Pairing (createNewObjects (ASM) <= Kernel_C.createNewObjects (C))', 'True'), ('Pairing (invokeCNodeCancelBadgedSends (ASM) <= Kernel_C.invokeCNodeCancelBadgedSends (C))', 'True'), ('Pairing (emptySlot (ASM) <= Kernel_C.emptySlot (C))', 'True'), ('Pairing (flushPage (ASM) <= Kernel_C.flushPage (C))', 'True'), ('Pairing (cap_get_capSizeBits (ASM) <= Kernel_C.cap_get_capSizeBits (C))', 'True'), ('Pairing (flushSpace (ASM) <= Kernel_C.flushSpace (C))', 'True'), ('Pairing (arch_clean_invalidate_L1_caches (ASM) <= Kernel_C.arch_clean_invalidate_L1_caches (C))', 'True'), ('Pairing (init_kernel (ASM) <= Kernel_C.init_kernel (C))', 'ProblemAbort'), ('Pairing (lookupCapAndSlot (ASM) <= Kernel_C.lookupCapAndSlot (C))', 'True'), ('Pairing (strnlen (ASM) <= Kernel_C.strnlen (C))', 'True'), ('Pairing (decodeSetMCPriority (ASM) <= Kernel_C.decodeSetMCPriority (C))', 'True'), ('Pairing (cteInsert (ASM) <= Kernel_C.cteInsert (C))', 'True'), ('Pairing (decodeDomainInvocation (ASM) <= Kernel_C.decodeDomainInvocation (C))', 'True'), ('Pairing (replyFromKernel_success_empty (ASM) <= Kernel_C.replyFromKernel_success_empty (C))', 'True'), ('Pairing (Arch_updateCapData (ASM) <= Kernel_C.Arch_updateCapData (C))', 'True'), ('Pairing (populate_bi_frame (ASM) <= Kernel_C.populate_bi_frame (C))', 'True'), ('Pairing (copyMRs (ASM) <= Kernel_C.copyMRs (C))', 'True'), ('Pairing (armv_init_user_access (ASM) <= Kernel_C.armv_init_user_access (C))', 'True'), ('Pairing (cteDeleteOne (ASM) <= Kernel_C.cteDeleteOne (C))', 'True'), ('Pairing (arm_errata (ASM) <= Kernel_C.arm_errata (C))', 'True'), ('Pairing (Arch_decodeInvocation (ASM) <= Kernel_C.Arch_decodeInvocation (C))', 'True'), ("Pairing (l_impl'dsb (ASM) <= r_impl'dsb (C))", 'None'), ('Pairing (create_initial_thread (ASM) <= Kernel_C.create_initial_thread (C))', 'True'), ('Pairing (get_p_reg_kernel_img (ASM) <= Kernel_C.get_p_reg_kernel_img (C))', 'True'), ('Pairing (hasCancelSendRights (ASM) <= Kernel_C.hasCancelSendRights (C))', 'True'), ('Pairing (invokeIRQControl (ASM) <= Kernel_C.invokeIRQControl (C))', 'True'), ('Pairing (plat_cleanCache (ASM) <= Kernel_C.plat_cleanCache (C))', 'True'), ('Pairing (cleanInvalidate_L1D (ASM) <= Kernel_C.cleanInvalidate_L1D (C))', 'ProblemAbort'), ('Pairing (dist_init (ASM) <= Kernel_C.dist_init (C))', 'True'), ('Pairing (handleInvocation (ASM) <= Kernel_C.handleInvocation (C))', 'True'), ('Pairing (initTimer (ASM) <= Kernel_C.initTimer (C))', 'True'), ('Pairing (Arch_switchToThread (ASM) <= Kernel_C.Arch_switchToThread (C))', 'ProblemAbort'), ('Pairing (cap_get_capIsPhysical (ASM) <= Kernel_C.cap_get_capIsPhysical (C))', 'True'), ('Pairing (c_handle_undefined_instruction (ASM) <= Kernel_C.c_handle_undefined_instruction (C))', 'ProblemAbort'), ('Pairing (Arch_setMRs_fault (ASM) <= Kernel_C.Arch_setMRs_fault (C))', 'True'), ('Pairing (Arch_sameRegionAs (ASM) <= Kernel_C.Arch_sameRegionAs (C))', 'True'), ('Pairing (tcbSchedAppend (ASM) <= Kernel_C.tcbSchedAppend (C))', 'True'), ('Pairing (doNBRecvFailedTransfer (ASM) <= Kernel_C.doNBRecvFailedTransfer (C))', 'True'), ('Pairing (possibleSwitchTo (ASM) <= Kernel_C.possibleSwitchTo (C))', 'True'), ('Pairing (deriveCap (ASM) <= Kernel_C.deriveCap (C))', 'True'), ('Pairing (create_untypeds (ASM) <= Kernel_C.create_untypeds (C))', 'True'), ('Pairing (Arch_createObject (ASM) <= Kernel_C.Arch_createObject (C))', 'True'), ('Pairing (setVMRoot (ASM) <= Kernel_C.setVMRoot (C))', 'True'), ('Pairing (write_it_asid_pool (ASM) <= Kernel_C.write_it_asid_pool (C))', 'True'), ('Pairing (updateCapData (ASM) <= Kernel_C.updateCapData (C))', 'True'), ('Pairing (restore_user_context (ASM) <= Kernel_C.restore_user_context (C))', 'None'), ('Pairing (tcbSchedDequeue (ASM) <= Kernel_C.tcbSchedDequeue (C))', 'True'), ('Pairing (insert_region (ASM) <= Kernel_C.insert_region (C))', 'True'), ('Pairing (decodeSetSchedParams (ASM) <= Kernel_C.decodeSetSchedParams (C))', 'True'), ('Pairing (scheduleTCB (ASM) <= Kernel_C.scheduleTCB (C))', 'True'), ('Pairing (Arch_deriveCap (ASM) <= Kernel_C.Arch_deriveCap (C))', 'True'), ('Pairing (ensureEmptySlot (ASM) <= Kernel_C.ensureEmptySlot (C))', 'True'), ('Pairing (getExtraCPtr (ASM) <= Kernel_C.getExtraCPtr (C))', 'True'), ('Pairing (sameObjectAs (ASM) <= Kernel_C.sameObjectAs (C))', 'True'), ('Pairing (cleanCacheRange_RAM (ASM) <= Kernel_C.cleanCacheRange_RAM (C))', 'True'), ('Pairing (lookupTargetSlot (ASM) <= Kernel_C.lookupTargetSlot (C))', 'True'), ('Pairing (switchToThread (ASM) <= Kernel_C.switchToThread (C))', 'True'), ('Pairing (cap_get_capPtr (ASM) <= Kernel_C.cap_get_capPtr (C))', 'True'), ('Pairing (Arch_configureIdleThread (ASM) <= Kernel_C.Arch_configureIdleThread (C))', 'True'), ('Pairing (cleanInvalidateCacheRange_RAM (ASM) <= Kernel_C.cleanInvalidateCacheRange_RAM (C))', 'True'), ('Pairing (decodeUnbindNotification (ASM) <= Kernel_C.decodeUnbindNotification (C))', 'True'), ('Pairing (alloc_rootserver_obj (ASM) <= Kernel_C.alloc_rootserver_obj (C))', 'True'), ('Pairing (doReplyTransfer (ASM) <= Kernel_C.doReplyTransfer (C))', 'True'), ('Pairing (lookupPivotSlot (ASM) <= Kernel_C.lookupPivotSlot (C))', 'True'), ('Pairing (Arch_decodeTransfer (ASM) <= Kernel_C.Arch_decodeTransfer (C))', 'True'), ('Pairing (cpu_initLocalIRQController (ASM) <= Kernel_C.cpu_initLocalIRQController (C))', 'True'), ('Pairing (decodeTCBConfigure (ASM) <= Kernel_C.decodeTCBConfigure (C))', 'True'), ('Pairing (schedule (ASM) <= Kernel_C.schedule (C))', 'True'), ('Pairing (decodeSetPriority (ASM) <= Kernel_C.decodeSetPriority (C))', 'True'), ('Pairing (Arch_prepareThreadDelete (ASM) <= Kernel_C.Arch_prepareThreadDelete (C))', 'True'), ('Pairing (branchFlushRange (ASM) <= Kernel_C.branchFlushRange (C))', 'True'), ('Pairing (handleRecv (ASM) <= Kernel_C.handleRecv (C))', 'True'), ('Pairing (lookupPDSlot (ASM) <= Kernel_C.lookupPDSlot (C))', 'True'), ('Pairing (map_kernel_window (ASM) <= Kernel_C.map_kernel_window (C))', 'ProblemAbort'), ("Pairing (l_impl'mrc (ASM) <= r_impl'mrc (C))", 'None'), ('Pairing (invokeCNodeMove (ASM) <= Kernel_C.invokeCNodeMove (C))', 'True'), ('Pairing (Arch_getObjectSize (ASM) <= Kernel_C.Arch_getObjectSize (C))', 'True'), ('Pairing (setThreadState (ASM) <= Kernel_C.setThreadState (C))', 'True'), ('Pairing (handleVMFault (ASM) <= Kernel_C.handleVMFault (C))', 'True'), ("Pairing (l_impl'isb (ASM) <= r_impl'isb (C))", 'None'), ('Pairing (strlcat (ASM) <= Kernel_C.strlcat (C))', 'True'), ('Pairing (decodeIRQHandlerInvocation (ASM) <= Kernel_C.decodeIRQHandlerInvocation (C))', 'True'), ('Pairing (invokeIRQHandler_SetIRQHandler (ASM) <= Kernel_C.invokeIRQHandler_SetIRQHandler (C))', 'True'), ('Pairing (performInvocation_Endpoint (ASM) <= Kernel_C.performInvocation_Endpoint (C))', 'True'), ('Pairing (arch_get_n_paging (ASM) <= Kernel_C.arch_get_n_paging (C))', 'True'), ('Pairing (init_core_state (ASM) <= Kernel_C.init_core_state (C))', 'True'), ('Pairing (create_untypeds_for_region (ASM) <= Kernel_C.create_untypeds_for_region (C))', 'True'), ('Pairing (activateThread (ASM) <= Kernel_C.activateThread (C))', 'True'), ('Pairing (APFromVMRights (ASM) <= Kernel_C.APFromVMRights (C))', 'True'), ('Pairing (merge_regions (ASM) <= Kernel_C.merge_regions (C))', 'ProblemAbort'), ('Pairing (invokeTCB_ReadRegisters (ASM) <= Kernel_C.invokeTCB_ReadRegisters (C))', 'True'), ('Pairing (memzero (ASM) <= Kernel_C.memzero (C))', 'True'), ('Pairing (invokeTCB_Resume (ASM) <= Kernel_C.invokeTCB_Resume (C))', 'True'), ('Pairing (restart (ASM) <= Kernel_C.restart (C))', 'True'), ("Pairing (l_impl'mcr (ASM) <= r_impl'mcr (C))", 'None'), ('Pairing (doIPCTransfer (ASM) <= Kernel_C.doIPCTransfer (C))', 'True'), ('Pairing (loadHWASID (ASM) <= Kernel_C.loadHWASID (C))', 'True'), ('Pairing (tcbEPDequeue (ASM) <= Kernel_C.tcbEPDequeue (C))', 'True'), ('Pairing (sendIPC (ASM) <= Kernel_C.sendIPC (C))', 'True'), ('Pairing (setPriority (ASM) <= Kernel_C.setPriority (C))', 'True'), ('Pairing (deleteCallerCap (ASM) <= Kernel_C.deleteCallerCap (C))', 'True'), ('Pairing (fpsimd_HWCapTest (ASM) <= Kernel_C.fpsimd_HWCapTest (C))', 'ProblemAbort'), ('Pairing (reserve_region (ASM) <= Kernel_C.reserve_region (C))', 'True'), ('Pairing (decodeSetSpace (ASM) <= Kernel_C.decodeSetSpace (C))', 'True'), ('Pairing (clean_D_PoU (ASM) <= Kernel_C.clean_D_PoU (C))', 'ProblemAbort'), ('Pairing (lookupSourceSlot (ASM) <= Kernel_C.lookupSourceSlot (C))', 'True'), ('Pairing (lockTLBEntry (ASM) <= Kernel_C.lockTLBEntry (C))', 'True'), ('Pairing (arch_clean_invalidate_caches (ASM) <= Kernel_C.arch_clean_invalidate_caches (C))', 'True'), ('Pairing (invalidateCacheRange_I (ASM) <= Kernel_C.invalidateCacheRange_I (C))', 'True'), ('Pairing (setMCPriority (ASM) <= Kernel_C.setMCPriority (C))', 'True'), ('Pairing (performInvocation_Notification (ASM) <= Kernel_C.performInvocation_Notification (C))', 'True'), ('Pairing (Arch_maskCapRights (ASM) <= Kernel_C.Arch_maskCapRights (C))', 'True'), ('Pairing (setMRs_syscall_error (ASM) <= Kernel_C.setMRs_syscall_error (C))', 'True'), ('Pairing (create_idle_thread (ASM) <= Kernel_C.create_idle_thread (C))', 'True'), ('Pairing (capSwapForDelete (ASM) <= Kernel_C.capSwapForDelete (C))', 'True'), ('Pairing (Arch_finaliseCap (ASM) <= Kernel_C.Arch_finaliseCap (C))', 'True'), ('Pairing (lookupCap (ASM) <= Kernel_C.lookupCap (C))', 'True'), ('Pairing (create_unmapped_it_frame_cap (ASM) <= Kernel_C.create_unmapped_it_frame_cap (C))', 'True'), ('Pairing (performInvocation_Reply (ASM) <= Kernel_C.performInvocation_Reply (C))', 'True'), ('Pairing (char_to_long (ASM) <= Kernel_C.char_to_long (C))', 'True'), ('Pairing (scheduleChooseNewThread (ASM) <= Kernel_C.scheduleChooseNewThread (C))', 'True'), ('Pairing (decodeARMMMUInvocation (ASM) <= Kernel_C.decodeARMMMUInvocation (C))', 'True'), ('Pairing (handleInterruptEntry (ASM) <= Kernel_C.handleInterruptEntry (C))', 'True'), ('Pairing (setNextPC (ASM) <= Kernel_C.setNextPC (C))', 'True'), ('Pairing (c_handle_fastpath_call (ASM) <= Kernel_C.c_handle_fastpath_call (C))', 'None'), ('Pairing (decodeReadRegisters (ASM) <= Kernel_C.decodeReadRegisters (C))', 'True'), ('Pairing (cpu_iface_init (ASM) <= Kernel_C.cpu_iface_init (C))', 'True'), ('Pairing (invokeIRQHandler_AckIRQ (ASM) <= Kernel_C.invokeIRQHandler_AckIRQ (C))', 'True'), ('Pairing (cleanInvalidate_D_PoC (ASM) <= Kernel_C.cleanInvalidate_D_PoC (C))', 'ProblemAbort'), ('Pairing (decodeIRQControlInvocation (ASM) <= Kernel_C.decodeIRQControlInvocation (C))', 'True'), ('Pairing (maskCapRights (ASM) <= Kernel_C.maskCapRights (C))', 'True'), ('Pairing (lookupPTSlot (ASM) <= Kernel_C.lookupPTSlot (C))', 'True'), ('Pairing (create_domain_cap (ASM) <= Kernel_C.create_domain_cap (C))', 'True'), ('Pairing (create_it_address_space (ASM) <= Kernel_C.create_it_address_space (C))', 'True'), ('Pairing (memcpy (ASM) <= Kernel_C.memcpy (C))', 'True'), ('Pairing (cleanInvalidateL1Caches (ASM) <= Kernel_C.cleanInvalidateL1Caches (C))', 'True'), ('Pairing (doFlush (ASM) <= Kernel_C.doFlush (C))', 'True'), ('Pairing (preemptionPoint (ASM) <= Kernel_C.preemptionPoint (C))', 'True'), ('Pairing (decodeUntypedInvocation (ASM) <= Kernel_C.decodeUntypedInvocation (C))', 'True'), ('Pairing (cancelIPC (ASM) <= Kernel_C.cancelIPC (C))', 'True'), ('Pairing (completeSignal (ASM) <= Kernel_C.completeSignal (C))', 'True'), ('Pairing (cancelAllIPC (ASM) <= Kernel_C.cancelAllIPC (C))', 'True'), ('Pairing (maskVMRights (ASM) <= Kernel_C.maskVMRights (C))', 'True')]
Result summary:
  - 261 proofs checked
  - 22 proofs skipped
  - failures: ['Pairing (init_freemem (ASM) <= Kernel_C.init_freemem (C))']
